"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemTax = exports.ItemTag = exports.ItemShippingMethod = exports.ItemShippingDestinationRestriction = exports.ItemReview = exports.ItemRestrictionItem = exports.ItemRelatedItem = exports.ItemOptionValue = exports.ItemOption = exports.ItemContentMultimedia = exports.ItemAutoOrderStep = exports.Experiment = exports.EmailPerformance = exports.EmailCommseqStep = exports.Distance = exports.Coupon = exports.ConversationWebsocketMessage = exports.ConversationWebchatQueueStatusUpdateRequest = exports.ConversationWebchatQueueStatusAgent = exports.ConversationSummary = exports.ConversationSentiment = exports.ConversationPbxVoicemailMessageSummary = exports.ConversationPbxVoicemailMessage = exports.ConversationPbxVoicemailMailbox = exports.ConversationPbxTimeBasedMapping = exports.ConversationPbxPhoneNumber = exports.ConversationPbxMenuMapping = exports.ConversationPbxMenu = exports.ConversationMessageTransportStatus = exports.ConversationMessage = exports.ConversationEventRRWeb = exports.ConversationEngagementEquationFunction = exports.ConversationEngagement = exports.ConversationAgentProfile = exports.Conversation = exports.CheckoutHandoffRequest = exports.ChannelPartnerOrderItem = exports.ChannelPartnerOrder = exports.CartKitComponentOption = exports.CartItemOption = exports.CartItemMultimedia = exports.CartCustomerProfileCreditCard = exports.AutoOrderItemSimpleSchedule = exports.AutoOrderItem = exports.AutoOrder = exports.AffiliateLink = exports.AffiliateLedger = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
exports.CheckoutApiFp = exports.CheckoutApiFetchParamCreator = exports.ChargebackApi = exports.ChargebackApiFactory = exports.ChargebackApiFp = exports.ChargebackApiFetchParamCreator = exports.ChannelPartnerApi = exports.ChannelPartnerApiFactory = exports.ChannelPartnerApiFp = exports.ChannelPartnerApiFetchParamCreator = exports.AutoOrderApi = exports.AutoOrderApiFactory = exports.AutoOrderApiFp = exports.AutoOrderApiFetchParamCreator = exports.AffiliateApi = exports.AffiliateApiFactory = exports.AffiliateApiFp = exports.AffiliateApiFetchParamCreator = exports.WorkflowTasksRequest = exports.WorkflowTask = exports.Weight = exports.Webhook = exports.TempMultimedia = exports.ReportWebsocketEvent = exports.ReportPageVisualizationMetric = exports.ReportPageVisualization = exports.ReportFilter = exports.ReportExecuteQueriesRequest = exports.ReportDataSourceSchema = exports.ReportDataSetSchema = exports.ReportDataSetQuery = exports.ReportDataSet = exports.Report = exports.PointOfSaleReader = exports.OrderQueryBatch = exports.OrderQuery = exports.OrderPaymentECheck = exports.OrderPaymentCreditCard = exports.OrderPayment = exports.OrderItemOption = exports.OrderItem = exports.OrderFraudScore = exports.OrderFormat = exports.OrderEdiDocument = exports.OrderCurrentStageHistory = exports.OrderAutoOrder = exports.OrderAffiliateLedger = exports.Order = exports.OauthTokenResponse = exports.ItemThirdPartyEmailMarketing = void 0;
exports.StorefrontApi = exports.StorefrontApiFactory = exports.StorefrontApiFp = exports.StorefrontApiFetchParamCreator = exports.SsoApi = exports.SsoApiFactory = exports.SsoApiFp = exports.SsoApiFetchParamCreator = exports.OrderApi = exports.OrderApiFactory = exports.OrderApiFp = exports.OrderApiFetchParamCreator = exports.OauthApi = exports.OauthApiFactory = exports.OauthApiFp = exports.OauthApiFetchParamCreator = exports.ItemApi = exports.ItemApiFactory = exports.ItemApiFp = exports.ItemApiFetchParamCreator = exports.IntegrationLogApi = exports.IntegrationLogApiFactory = exports.IntegrationLogApiFp = exports.IntegrationLogApiFetchParamCreator = exports.GiftCertificateApi = exports.GiftCertificateApiFactory = exports.GiftCertificateApiFp = exports.GiftCertificateApiFetchParamCreator = exports.FulfillmentApi = exports.FulfillmentApiFactory = exports.FulfillmentApiFp = exports.FulfillmentApiFetchParamCreator = exports.DatawarehouseApi = exports.DatawarehouseApiFactory = exports.DatawarehouseApiFp = exports.DatawarehouseApiFetchParamCreator = exports.CustomerApi = exports.CustomerApiFactory = exports.CustomerApiFp = exports.CustomerApiFetchParamCreator = exports.CouponApi = exports.CouponApiFactory = exports.CouponApiFp = exports.CouponApiFetchParamCreator = exports.ConversationApi = exports.ConversationApiFactory = exports.ConversationApiFp = exports.ConversationApiFetchParamCreator = exports.CheckoutApi = exports.CheckoutApiFactory = void 0;
exports.WorkflowApi = exports.WorkflowApiFactory = exports.WorkflowApiFp = exports.WorkflowApiFetchParamCreator = exports.WebhookApi = exports.WebhookApiFactory = exports.WebhookApiFp = exports.WebhookApiFetchParamCreator = exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiFetchParamCreator = exports.TaxApi = exports.TaxApiFactory = exports.TaxApiFp = exports.TaxApiFetchParamCreator = void 0;
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "https://secure.ultracart.com/rest/v2".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace AffiliateLedger
 */
var AffiliateLedger;
(function (AffiliateLedger) {
    /**
     * @export
     * @enum {string}
     */
    var TransactionStateEnum;
    (function (TransactionStateEnum) {
        TransactionStateEnum[TransactionStateEnum["Pending"] = 'Pending'] = "Pending";
        TransactionStateEnum[TransactionStateEnum["Posted"] = 'Posted'] = "Posted";
        TransactionStateEnum[TransactionStateEnum["Approved"] = 'Approved'] = "Approved";
        TransactionStateEnum[TransactionStateEnum["Paid"] = 'Paid'] = "Paid";
        TransactionStateEnum[TransactionStateEnum["Rejected"] = 'Rejected'] = "Rejected";
        TransactionStateEnum[TransactionStateEnum["PartiallyPaid"] = 'Partially Paid'] = "PartiallyPaid";
    })(TransactionStateEnum = AffiliateLedger.TransactionStateEnum || (AffiliateLedger.TransactionStateEnum = {}));
})(AffiliateLedger = exports.AffiliateLedger || (exports.AffiliateLedger = {}));
/**
 * @export
 * @namespace AffiliateLink
 */
var AffiliateLink;
(function (AffiliateLink) {
    /**
     * @export
     * @enum {string}
     */
    var CustomHtmlApprovalStatusEnum;
    (function (CustomHtmlApprovalStatusEnum) {
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Pending"] = 'Pending'] = "Pending";
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Approved"] = 'Approved'] = "Approved";
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(CustomHtmlApprovalStatusEnum = AffiliateLink.CustomHtmlApprovalStatusEnum || (AffiliateLink.CustomHtmlApprovalStatusEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var InvisibleLinkApprovalStatusEnum;
    (function (InvisibleLinkApprovalStatusEnum) {
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Pending"] = 'Pending'] = "Pending";
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Approved"] = 'Approved'] = "Approved";
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(InvisibleLinkApprovalStatusEnum = AffiliateLink.InvisibleLinkApprovalStatusEnum || (AffiliateLink.InvisibleLinkApprovalStatusEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'image'] = "Image";
        TypeEnum[TypeEnum["Text"] = 'text'] = "Text";
        TypeEnum[TypeEnum["Invisible"] = 'invisible'] = "Invisible";
        TypeEnum[TypeEnum["Direct"] = 'direct'] = "Direct";
    })(TypeEnum = AffiliateLink.TypeEnum || (AffiliateLink.TypeEnum = {}));
})(AffiliateLink = exports.AffiliateLink || (exports.AffiliateLink = {}));
/**
 * @export
 * @namespace AutoOrder
 */
var AutoOrder;
(function (AutoOrder) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Canceled"] = 'canceled'] = "Canceled";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
        StatusEnum[StatusEnum["Merged"] = 'merged'] = "Merged";
    })(StatusEnum = AutoOrder.StatusEnum || (AutoOrder.StatusEnum = {}));
})(AutoOrder = exports.AutoOrder || (exports.AutoOrder = {}));
/**
 * @export
 * @namespace AutoOrderItem
 */
var AutoOrderItem;
(function (AutoOrderItem) {
    /**
     * @export
     * @enum {string}
     */
    var FrequencyEnum;
    (function (FrequencyEnum) {
        FrequencyEnum[FrequencyEnum["Weekly"] = 'Weekly'] = "Weekly";
        FrequencyEnum[FrequencyEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        FrequencyEnum[FrequencyEnum["Every_"] = 'Every...'] = "Every_";
        FrequencyEnum[FrequencyEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        FrequencyEnum[FrequencyEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        FrequencyEnum[FrequencyEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        FrequencyEnum[FrequencyEnum["Monthly"] = 'Monthly'] = "Monthly";
        FrequencyEnum[FrequencyEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        FrequencyEnum[FrequencyEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        FrequencyEnum[FrequencyEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        FrequencyEnum[FrequencyEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        FrequencyEnum[FrequencyEnum["Every5Months"] = 'Every 5 Months'] = "Every5Months";
        FrequencyEnum[FrequencyEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        FrequencyEnum[FrequencyEnum["Yearly"] = 'Yearly'] = "Yearly";
        FrequencyEnum[FrequencyEnum["Every4Weeks"] = 'Every 4 Weeks'] = "Every4Weeks";
        FrequencyEnum[FrequencyEnum["Every6Weeks"] = 'Every 6 Weeks'] = "Every6Weeks";
        FrequencyEnum[FrequencyEnum["Every8Weeks"] = 'Every 8 Weeks'] = "Every8Weeks";
    })(FrequencyEnum = AutoOrderItem.FrequencyEnum || (AutoOrderItem.FrequencyEnum = {}));
})(AutoOrderItem = exports.AutoOrderItem || (exports.AutoOrderItem = {}));
/**
 * @export
 * @namespace AutoOrderItemSimpleSchedule
 */
var AutoOrderItemSimpleSchedule;
(function (AutoOrderItemSimpleSchedule) {
    /**
     * @export
     * @enum {string}
     */
    var FrequencyEnum;
    (function (FrequencyEnum) {
        FrequencyEnum[FrequencyEnum["Weekly"] = 'Weekly'] = "Weekly";
        FrequencyEnum[FrequencyEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        FrequencyEnum[FrequencyEnum["Every_"] = 'Every...'] = "Every_";
        FrequencyEnum[FrequencyEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        FrequencyEnum[FrequencyEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        FrequencyEnum[FrequencyEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        FrequencyEnum[FrequencyEnum["Monthly"] = 'Monthly'] = "Monthly";
        FrequencyEnum[FrequencyEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        FrequencyEnum[FrequencyEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        FrequencyEnum[FrequencyEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        FrequencyEnum[FrequencyEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        FrequencyEnum[FrequencyEnum["Every5Months"] = 'Every 5 Months'] = "Every5Months";
        FrequencyEnum[FrequencyEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        FrequencyEnum[FrequencyEnum["Yearly"] = 'Yearly'] = "Yearly";
        FrequencyEnum[FrequencyEnum["Every4Weeks"] = 'Every 4 Weeks'] = "Every4Weeks";
        FrequencyEnum[FrequencyEnum["Every6Weeks"] = 'Every 6 Weeks'] = "Every6Weeks";
        FrequencyEnum[FrequencyEnum["Every8Weeks"] = 'Every 8 Weeks'] = "Every8Weeks";
    })(FrequencyEnum = AutoOrderItemSimpleSchedule.FrequencyEnum || (AutoOrderItemSimpleSchedule.FrequencyEnum = {}));
})(AutoOrderItemSimpleSchedule = exports.AutoOrderItemSimpleSchedule || (exports.AutoOrderItemSimpleSchedule = {}));
/**
 * @export
 * @namespace CartCustomerProfileCreditCard
 */
var CartCustomerProfileCreditCard;
(function (CartCustomerProfileCreditCard) {
    /**
     * @export
     * @enum {string}
     */
    var CardTypeEnum;
    (function (CardTypeEnum) {
        CardTypeEnum[CardTypeEnum["AMEX"] = 'AMEX'] = "AMEX";
        CardTypeEnum[CardTypeEnum["DinersClub"] = 'Diners Club'] = "DinersClub";
        CardTypeEnum[CardTypeEnum["Discover"] = 'Discover'] = "Discover";
        CardTypeEnum[CardTypeEnum["MasterCard"] = 'MasterCard'] = "MasterCard";
        CardTypeEnum[CardTypeEnum["JCB"] = 'JCB'] = "JCB";
        CardTypeEnum[CardTypeEnum["VISA"] = 'VISA'] = "VISA";
    })(CardTypeEnum = CartCustomerProfileCreditCard.CardTypeEnum || (CartCustomerProfileCreditCard.CardTypeEnum = {}));
})(CartCustomerProfileCreditCard = exports.CartCustomerProfileCreditCard || (exports.CartCustomerProfileCreditCard = {}));
/**
 * @export
 * @namespace CartItemMultimedia
 */
var CartItemMultimedia;
(function (CartItemMultimedia) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'Image'] = "Image";
        TypeEnum[TypeEnum["PDF"] = 'PDF'] = "PDF";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Unknown"] = 'Unknown'] = "Unknown";
        TypeEnum[TypeEnum["Video"] = 'Video'] = "Video";
    })(TypeEnum = CartItemMultimedia.TypeEnum || (CartItemMultimedia.TypeEnum = {}));
})(CartItemMultimedia = exports.CartItemMultimedia || (exports.CartItemMultimedia = {}));
/**
 * @export
 * @namespace CartItemOption
 */
var CartItemOption;
(function (CartItemOption) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
    })(TypeEnum = CartItemOption.TypeEnum || (CartItemOption.TypeEnum = {}));
})(CartItemOption = exports.CartItemOption || (exports.CartItemOption = {}));
/**
 * @export
 * @namespace CartKitComponentOption
 */
var CartKitComponentOption;
(function (CartKitComponentOption) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
    })(TypeEnum = CartKitComponentOption.TypeEnum || (CartKitComponentOption.TypeEnum = {}));
})(CartKitComponentOption = exports.CartKitComponentOption || (exports.CartKitComponentOption = {}));
/**
 * @export
 * @namespace ChannelPartnerOrder
 */
var ChannelPartnerOrder;
(function (ChannelPartnerOrder) {
    /**
     * @export
     * @enum {string}
     */
    var EcheckBankAccountTypeEnum;
    (function (EcheckBankAccountTypeEnum) {
        EcheckBankAccountTypeEnum[EcheckBankAccountTypeEnum["Checking"] = 'Checking'] = "Checking";
        EcheckBankAccountTypeEnum[EcheckBankAccountTypeEnum["Savings"] = 'Savings'] = "Savings";
    })(EcheckBankAccountTypeEnum = ChannelPartnerOrder.EcheckBankAccountTypeEnum || (ChannelPartnerOrder.EcheckBankAccountTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var EcheckBankOwnerTypeEnum;
    (function (EcheckBankOwnerTypeEnum) {
        EcheckBankOwnerTypeEnum[EcheckBankOwnerTypeEnum["Business"] = 'Business'] = "Business";
        EcheckBankOwnerTypeEnum[EcheckBankOwnerTypeEnum["Personal"] = 'Personal'] = "Personal";
    })(EcheckBankOwnerTypeEnum = ChannelPartnerOrder.EcheckBankOwnerTypeEnum || (ChannelPartnerOrder.EcheckBankOwnerTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
        PaymentMethodEnum[PaymentMethodEnum["PayPalFastlane"] = 'PayPal Fastlane'] = "PayPalFastlane";
    })(PaymentMethodEnum = ChannelPartnerOrder.PaymentMethodEnum || (ChannelPartnerOrder.PaymentMethodEnum = {}));
})(ChannelPartnerOrder = exports.ChannelPartnerOrder || (exports.ChannelPartnerOrder = {}));
/**
 * @export
 * @namespace ChannelPartnerOrderItem
 */
var ChannelPartnerOrderItem;
(function (ChannelPartnerOrderItem) {
    /**
     * @export
     * @enum {string}
     */
    var AutoOrderScheduleEnum;
    (function (AutoOrderScheduleEnum) {
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Weekly"] = 'Weekly'] = "Weekly";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Monthly"] = 'Monthly'] = "Monthly";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every5Months"] = 'Every 5 Months'] = "Every5Months";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Yearly"] = 'Yearly'] = "Yearly";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every4Weeks"] = 'Every 4 Weeks'] = "Every4Weeks";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every6Weeks"] = 'Every 6 Weeks'] = "Every6Weeks";
        AutoOrderScheduleEnum[AutoOrderScheduleEnum["Every8Weeks"] = 'Every 8 Weeks'] = "Every8Weeks";
    })(AutoOrderScheduleEnum = ChannelPartnerOrderItem.AutoOrderScheduleEnum || (ChannelPartnerOrderItem.AutoOrderScheduleEnum = {}));
})(ChannelPartnerOrderItem = exports.ChannelPartnerOrderItem || (exports.ChannelPartnerOrderItem = {}));
/**
 * @export
 * @namespace CheckoutHandoffRequest
 */
var CheckoutHandoffRequest;
(function (CheckoutHandoffRequest) {
    /**
     * @export
     * @enum {string}
     */
    var OperationEnum;
    (function (OperationEnum) {
        OperationEnum[OperationEnum["Checkout"] = 'checkout'] = "Checkout";
        OperationEnum[OperationEnum["PayPal"] = 'payPal'] = "PayPal";
        OperationEnum[OperationEnum["PayPalCredit"] = 'payPalCredit'] = "PayPalCredit";
        OperationEnum[OperationEnum["View"] = 'view'] = "View";
        OperationEnum[OperationEnum["Affirm"] = 'affirm'] = "Affirm";
        OperationEnum[OperationEnum["Sezzle"] = 'sezzle'] = "Sezzle";
    })(OperationEnum = CheckoutHandoffRequest.OperationEnum || (CheckoutHandoffRequest.OperationEnum = {}));
})(CheckoutHandoffRequest = exports.CheckoutHandoffRequest || (exports.CheckoutHandoffRequest = {}));
/**
 * @export
 * @namespace Conversation
 */
var Conversation;
(function (Conversation) {
    /**
     * @export
     * @enum {string}
     */
    var MediumEnum;
    (function (MediumEnum) {
        MediumEnum[MediumEnum["Sms"] = 'sms'] = "Sms";
        MediumEnum[MediumEnum["Websocket"] = 'websocket'] = "Websocket";
    })(MediumEnum = Conversation.MediumEnum || (Conversation.MediumEnum = {}));
})(Conversation = exports.Conversation || (exports.Conversation = {}));
/**
 * @export
 * @namespace ConversationAgentProfile
 */
var ConversationAgentProfile;
(function (ConversationAgentProfile) {
    /**
     * @export
     * @enum {string}
     */
    var DefaultStatusEnum;
    (function (DefaultStatusEnum) {
        DefaultStatusEnum[DefaultStatusEnum["Available"] = 'available'] = "Available";
        DefaultStatusEnum[DefaultStatusEnum["Busy"] = 'busy'] = "Busy";
        DefaultStatusEnum[DefaultStatusEnum["Unavailable"] = 'unavailable'] = "Unavailable";
    })(DefaultStatusEnum = ConversationAgentProfile.DefaultStatusEnum || (ConversationAgentProfile.DefaultStatusEnum = {}));
})(ConversationAgentProfile = exports.ConversationAgentProfile || (exports.ConversationAgentProfile = {}));
/**
 * @export
 * @namespace ConversationEngagement
 */
var ConversationEngagement;
(function (ConversationEngagement) {
    /**
     * @export
     * @enum {string}
     */
    var VisitorTypeEnum;
    (function (VisitorTypeEnum) {
        VisitorTypeEnum[VisitorTypeEnum["All"] = 'all'] = "All";
        VisitorTypeEnum[VisitorTypeEnum["FirstTime"] = 'first time'] = "FirstTime";
        VisitorTypeEnum[VisitorTypeEnum["Returning"] = 'returning'] = "Returning";
    })(VisitorTypeEnum = ConversationEngagement.VisitorTypeEnum || (ConversationEngagement.VisitorTypeEnum = {}));
})(ConversationEngagement = exports.ConversationEngagement || (exports.ConversationEngagement = {}));
/**
 * @export
 * @namespace ConversationEngagementEquationFunction
 */
var ConversationEngagementEquationFunction;
(function (ConversationEngagementEquationFunction) {
    /**
     * @export
     * @enum {string}
     */
    var AnyPageUrlLogicEnum;
    (function (AnyPageUrlLogicEnum) {
        AnyPageUrlLogicEnum[AnyPageUrlLogicEnum["Contains"] = 'contains'] = "Contains";
        AnyPageUrlLogicEnum[AnyPageUrlLogicEnum["DoesNotContain"] = 'does not contain'] = "DoesNotContain";
        AnyPageUrlLogicEnum[AnyPageUrlLogicEnum["IsExactly"] = 'is exactly'] = "IsExactly";
        AnyPageUrlLogicEnum[AnyPageUrlLogicEnum["IsNot"] = 'is not'] = "IsNot";
    })(AnyPageUrlLogicEnum = ConversationEngagementEquationFunction.AnyPageUrlLogicEnum || (ConversationEngagementEquationFunction.AnyPageUrlLogicEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var CurrentPageUrlLogicEnum;
    (function (CurrentPageUrlLogicEnum) {
        CurrentPageUrlLogicEnum[CurrentPageUrlLogicEnum["Contains"] = 'contains'] = "Contains";
        CurrentPageUrlLogicEnum[CurrentPageUrlLogicEnum["DoesNotContain"] = 'does not contain'] = "DoesNotContain";
        CurrentPageUrlLogicEnum[CurrentPageUrlLogicEnum["IsExactly"] = 'is exactly'] = "IsExactly";
        CurrentPageUrlLogicEnum[CurrentPageUrlLogicEnum["IsNot"] = 'is not'] = "IsNot";
    })(CurrentPageUrlLogicEnum = ConversationEngagementEquationFunction.CurrentPageUrlLogicEnum || (ConversationEngagementEquationFunction.CurrentPageUrlLogicEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var CustomersBrowsingTimeLogicEnum;
    (function (CustomersBrowsingTimeLogicEnum) {
        CustomersBrowsingTimeLogicEnum[CustomersBrowsingTimeLogicEnum["AtLeast"] = 'is at least'] = "AtLeast";
        CustomersBrowsingTimeLogicEnum[CustomersBrowsingTimeLogicEnum["MoreThan"] = 'is more than'] = "MoreThan";
        CustomersBrowsingTimeLogicEnum[CustomersBrowsingTimeLogicEnum["LessThan"] = 'is less than'] = "LessThan";
        CustomersBrowsingTimeLogicEnum[CustomersBrowsingTimeLogicEnum["AtMost"] = 'is at most'] = "AtMost";
    })(CustomersBrowsingTimeLogicEnum = ConversationEngagementEquationFunction.CustomersBrowsingTimeLogicEnum || (ConversationEngagementEquationFunction.CustomersBrowsingTimeLogicEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var CustomersLocationLogicEnum;
    (function (CustomersLocationLogicEnum) {
        CustomersLocationLogicEnum[CustomersLocationLogicEnum["Is"] = 'is'] = "Is";
        CustomersLocationLogicEnum[CustomersLocationLogicEnum["IsNot"] = 'is not'] = "IsNot";
    })(CustomersLocationLogicEnum = ConversationEngagementEquationFunction.CustomersLocationLogicEnum || (ConversationEngagementEquationFunction.CustomersLocationLogicEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var NumberOfViewedPagesLogicEnum;
    (function (NumberOfViewedPagesLogicEnum) {
        NumberOfViewedPagesLogicEnum[NumberOfViewedPagesLogicEnum["AtLeast"] = 'is at least'] = "AtLeast";
        NumberOfViewedPagesLogicEnum[NumberOfViewedPagesLogicEnum["MoreThan"] = 'is more than'] = "MoreThan";
        NumberOfViewedPagesLogicEnum[NumberOfViewedPagesLogicEnum["LessThan"] = 'is less than'] = "LessThan";
        NumberOfViewedPagesLogicEnum[NumberOfViewedPagesLogicEnum["AtMost"] = 'is at most'] = "AtMost";
    })(NumberOfViewedPagesLogicEnum = ConversationEngagementEquationFunction.NumberOfViewedPagesLogicEnum || (ConversationEngagementEquationFunction.NumberOfViewedPagesLogicEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var ReferringWebsiteLogicEnum;
    (function (ReferringWebsiteLogicEnum) {
        ReferringWebsiteLogicEnum[ReferringWebsiteLogicEnum["Contains"] = 'contains'] = "Contains";
        ReferringWebsiteLogicEnum[ReferringWebsiteLogicEnum["DoesNotContain"] = 'does not contain'] = "DoesNotContain";
        ReferringWebsiteLogicEnum[ReferringWebsiteLogicEnum["IsExactly"] = 'is exactly'] = "IsExactly";
        ReferringWebsiteLogicEnum[ReferringWebsiteLogicEnum["IsNot"] = 'is not'] = "IsNot";
    })(ReferringWebsiteLogicEnum = ConversationEngagementEquationFunction.ReferringWebsiteLogicEnum || (ConversationEngagementEquationFunction.ReferringWebsiteLogicEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["CurrentPageUrl"] = 'current page url'] = "CurrentPageUrl";
        TypeEnum[TypeEnum["CustomersLocation"] = 'customers location'] = "CustomersLocation";
        TypeEnum[TypeEnum["CustomersBrowsingTime"] = 'customers browsing time'] = "CustomersBrowsingTime";
        TypeEnum[TypeEnum["NumberOfViewedPages"] = 'number of viewed pages'] = "NumberOfViewedPages";
        TypeEnum[TypeEnum["ReferringWebsiteAddress"] = 'referring website address'] = "ReferringWebsiteAddress";
        TypeEnum[TypeEnum["AnyPageFromSession"] = 'any page from session'] = "AnyPageFromSession";
    })(TypeEnum = ConversationEngagementEquationFunction.TypeEnum || (ConversationEngagementEquationFunction.TypeEnum = {}));
})(ConversationEngagementEquationFunction = exports.ConversationEngagementEquationFunction || (exports.ConversationEngagementEquationFunction = {}));
/**
 * @export
 * @namespace ConversationEventRRWeb
 */
var ConversationEventRRWeb;
(function (ConversationEventRRWeb) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Init"] = 'init'] = "Init";
        TypeEnum[TypeEnum["Events"] = 'events'] = "Events";
    })(TypeEnum = ConversationEventRRWeb.TypeEnum || (ConversationEventRRWeb.TypeEnum = {}));
})(ConversationEventRRWeb = exports.ConversationEventRRWeb || (exports.ConversationEventRRWeb = {}));
/**
 * @export
 * @namespace ConversationMessage
 */
var ConversationMessage;
(function (ConversationMessage) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Message"] = 'message'] = "Message";
        TypeEnum[TypeEnum["Notice"] = 'notice'] = "Notice";
        TypeEnum[TypeEnum["EngagementPrompt"] = 'engagement prompt'] = "EngagementPrompt";
    })(TypeEnum = ConversationMessage.TypeEnum || (ConversationMessage.TypeEnum = {}));
})(ConversationMessage = exports.ConversationMessage || (exports.ConversationMessage = {}));
/**
 * @export
 * @namespace ConversationMessageTransportStatus
 */
var ConversationMessageTransportStatus;
(function (ConversationMessageTransportStatus) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Accepted"] = 'accepted'] = "Accepted";
        StatusEnum[StatusEnum["Scheduled"] = 'scheduled'] = "Scheduled";
        StatusEnum[StatusEnum["Queued"] = 'queued'] = "Queued";
        StatusEnum[StatusEnum["Sending"] = 'sending'] = "Sending";
        StatusEnum[StatusEnum["Sent"] = 'sent'] = "Sent";
        StatusEnum[StatusEnum["Read"] = 'read'] = "Read";
        StatusEnum[StatusEnum["TWILIOCREDENTIALSMISSING"] = 'TWILIO_CREDENTIALS_MISSING'] = "TWILIOCREDENTIALSMISSING";
        StatusEnum[StatusEnum["SENTTOTWILIO"] = 'SENT_TO_TWILIO'] = "SENTTOTWILIO";
        StatusEnum[StatusEnum["TWILIOERROR"] = 'TWILIO_ERROR'] = "TWILIOERROR";
        StatusEnum[StatusEnum["SENTTOPINPOINT"] = 'SENT_TO_PINPOINT'] = "SENTTOPINPOINT";
        StatusEnum[StatusEnum["PINPOINTERROR"] = 'PINPOINT_ERROR'] = "PINPOINTERROR";
    })(StatusEnum = ConversationMessageTransportStatus.StatusEnum || (ConversationMessageTransportStatus.StatusEnum = {}));
})(ConversationMessageTransportStatus = exports.ConversationMessageTransportStatus || (exports.ConversationMessageTransportStatus = {}));
/**
 * @export
 * @namespace ConversationPbxMenu
 */
var ConversationPbxMenu;
(function (ConversationPbxMenu) {
    /**
     * @export
     * @enum {string}
     */
    var SayVoiceEnum;
    (function (SayVoiceEnum) {
        SayVoiceEnum[SayVoiceEnum["Man"] = 'man'] = "Man";
        SayVoiceEnum[SayVoiceEnum["Woman"] = 'woman'] = "Woman";
    })(SayVoiceEnum = ConversationPbxMenu.SayVoiceEnum || (ConversationPbxMenu.SayVoiceEnum = {}));
})(ConversationPbxMenu = exports.ConversationPbxMenu || (exports.ConversationPbxMenu = {}));
/**
 * @export
 * @namespace ConversationPbxMenuMapping
 */
var ConversationPbxMenuMapping;
(function (ConversationPbxMenuMapping) {
    /**
     * @export
     * @enum {string}
     */
    var ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["TimeBased"] = 'time based'] = "TimeBased";
        ActionEnum[ActionEnum["Menu"] = 'menu'] = "Menu";
        ActionEnum[ActionEnum["Queue"] = 'queue'] = "Queue";
        ActionEnum[ActionEnum["Voicemail"] = 'voicemail'] = "Voicemail";
        ActionEnum[ActionEnum["Agent"] = 'agent'] = "Agent";
    })(ActionEnum = ConversationPbxMenuMapping.ActionEnum || (ConversationPbxMenuMapping.ActionEnum = {}));
})(ConversationPbxMenuMapping = exports.ConversationPbxMenuMapping || (exports.ConversationPbxMenuMapping = {}));
/**
 * @export
 * @namespace ConversationPbxPhoneNumber
 */
var ConversationPbxPhoneNumber;
(function (ConversationPbxPhoneNumber) {
    /**
     * @export
     * @enum {string}
     */
    var ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["TimeBased"] = 'time based'] = "TimeBased";
        ActionEnum[ActionEnum["Menu"] = 'menu'] = "Menu";
        ActionEnum[ActionEnum["Queue"] = 'queue'] = "Queue";
        ActionEnum[ActionEnum["Voicemail"] = 'voicemail'] = "Voicemail";
        ActionEnum[ActionEnum["Agent"] = 'agent'] = "Agent";
    })(ActionEnum = ConversationPbxPhoneNumber.ActionEnum || (ConversationPbxPhoneNumber.ActionEnum = {}));
})(ConversationPbxPhoneNumber = exports.ConversationPbxPhoneNumber || (exports.ConversationPbxPhoneNumber = {}));
/**
 * @export
 * @namespace ConversationPbxTimeBasedMapping
 */
var ConversationPbxTimeBasedMapping;
(function (ConversationPbxTimeBasedMapping) {
    /**
     * @export
     * @enum {string}
     */
    var ActionEnum;
    (function (ActionEnum) {
        ActionEnum[ActionEnum["TimeBased"] = 'time based'] = "TimeBased";
        ActionEnum[ActionEnum["Menu"] = 'menu'] = "Menu";
        ActionEnum[ActionEnum["Queue"] = 'queue'] = "Queue";
        ActionEnum[ActionEnum["Voicemail"] = 'voicemail'] = "Voicemail";
        ActionEnum[ActionEnum["Agent"] = 'agent'] = "Agent";
    })(ActionEnum = ConversationPbxTimeBasedMapping.ActionEnum || (ConversationPbxTimeBasedMapping.ActionEnum = {}));
})(ConversationPbxTimeBasedMapping = exports.ConversationPbxTimeBasedMapping || (exports.ConversationPbxTimeBasedMapping = {}));
/**
 * @export
 * @namespace ConversationPbxVoicemailMailbox
 */
var ConversationPbxVoicemailMailbox;
(function (ConversationPbxVoicemailMailbox) {
    /**
     * @export
     * @enum {string}
     */
    var VoicemailFollowupSayVoiceEnum;
    (function (VoicemailFollowupSayVoiceEnum) {
        VoicemailFollowupSayVoiceEnum[VoicemailFollowupSayVoiceEnum["Man"] = 'man'] = "Man";
        VoicemailFollowupSayVoiceEnum[VoicemailFollowupSayVoiceEnum["Woman"] = 'woman'] = "Woman";
    })(VoicemailFollowupSayVoiceEnum = ConversationPbxVoicemailMailbox.VoicemailFollowupSayVoiceEnum || (ConversationPbxVoicemailMailbox.VoicemailFollowupSayVoiceEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var VoicemailMailboxTypeEnum;
    (function (VoicemailMailboxTypeEnum) {
        VoicemailMailboxTypeEnum[VoicemailMailboxTypeEnum["Agent"] = 'agent'] = "Agent";
        VoicemailMailboxTypeEnum[VoicemailMailboxTypeEnum["Shared"] = 'shared'] = "Shared";
    })(VoicemailMailboxTypeEnum = ConversationPbxVoicemailMailbox.VoicemailMailboxTypeEnum || (ConversationPbxVoicemailMailbox.VoicemailMailboxTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var VoicemailPromptSayVoiceEnum;
    (function (VoicemailPromptSayVoiceEnum) {
        VoicemailPromptSayVoiceEnum[VoicemailPromptSayVoiceEnum["Man"] = 'man'] = "Man";
        VoicemailPromptSayVoiceEnum[VoicemailPromptSayVoiceEnum["Woman"] = 'woman'] = "Woman";
    })(VoicemailPromptSayVoiceEnum = ConversationPbxVoicemailMailbox.VoicemailPromptSayVoiceEnum || (ConversationPbxVoicemailMailbox.VoicemailPromptSayVoiceEnum = {}));
})(ConversationPbxVoicemailMailbox = exports.ConversationPbxVoicemailMailbox || (exports.ConversationPbxVoicemailMailbox = {}));
/**
 * @export
 * @namespace ConversationPbxVoicemailMessage
 */
var ConversationPbxVoicemailMessage;
(function (ConversationPbxVoicemailMessage) {
    /**
     * @export
     * @enum {string}
     */
    var RecordingStatusEnum;
    (function (RecordingStatusEnum) {
        RecordingStatusEnum[RecordingStatusEnum["Completed"] = 'completed'] = "Completed";
    })(RecordingStatusEnum = ConversationPbxVoicemailMessage.RecordingStatusEnum || (ConversationPbxVoicemailMessage.RecordingStatusEnum = {}));
})(ConversationPbxVoicemailMessage = exports.ConversationPbxVoicemailMessage || (exports.ConversationPbxVoicemailMessage = {}));
/**
 * @export
 * @namespace ConversationPbxVoicemailMessageSummary
 */
var ConversationPbxVoicemailMessageSummary;
(function (ConversationPbxVoicemailMessageSummary) {
    /**
     * @export
     * @enum {string}
     */
    var RecordingStatusEnum;
    (function (RecordingStatusEnum) {
        RecordingStatusEnum[RecordingStatusEnum["Completed"] = 'completed'] = "Completed";
    })(RecordingStatusEnum = ConversationPbxVoicemailMessageSummary.RecordingStatusEnum || (ConversationPbxVoicemailMessageSummary.RecordingStatusEnum = {}));
})(ConversationPbxVoicemailMessageSummary = exports.ConversationPbxVoicemailMessageSummary || (exports.ConversationPbxVoicemailMessageSummary = {}));
/**
 * @export
 * @namespace ConversationSentiment
 */
var ConversationSentiment;
(function (ConversationSentiment) {
    /**
     * @export
     * @enum {string}
     */
    var SentimentEnum;
    (function (SentimentEnum) {
        SentimentEnum[SentimentEnum["POSITIVE"] = 'POSITIVE'] = "POSITIVE";
        SentimentEnum[SentimentEnum["NEUTRAL"] = 'NEUTRAL'] = "NEUTRAL";
        SentimentEnum[SentimentEnum["NEGATIVE"] = 'NEGATIVE'] = "NEGATIVE";
        SentimentEnum[SentimentEnum["MIXED"] = 'MIXED'] = "MIXED";
    })(SentimentEnum = ConversationSentiment.SentimentEnum || (ConversationSentiment.SentimentEnum = {}));
})(ConversationSentiment = exports.ConversationSentiment || (exports.ConversationSentiment = {}));
/**
 * @export
 * @namespace ConversationSummary
 */
var ConversationSummary;
(function (ConversationSummary) {
    /**
     * @export
     * @enum {string}
     */
    var MediumEnum;
    (function (MediumEnum) {
        MediumEnum[MediumEnum["Sms"] = 'sms'] = "Sms";
        MediumEnum[MediumEnum["Websocket"] = 'websocket'] = "Websocket";
    })(MediumEnum = ConversationSummary.MediumEnum || (ConversationSummary.MediumEnum = {}));
})(ConversationSummary = exports.ConversationSummary || (exports.ConversationSummary = {}));
/**
 * @export
 * @namespace ConversationWebchatQueueStatusAgent
 */
var ConversationWebchatQueueStatusAgent;
(function (ConversationWebchatQueueStatusAgent) {
    /**
     * @export
     * @enum {string}
     */
    var AgentStatusEnum;
    (function (AgentStatusEnum) {
        AgentStatusEnum[AgentStatusEnum["Available"] = 'available'] = "Available";
        AgentStatusEnum[AgentStatusEnum["Busy"] = 'busy'] = "Busy";
        AgentStatusEnum[AgentStatusEnum["Unavailable"] = 'unavailable'] = "Unavailable";
    })(AgentStatusEnum = ConversationWebchatQueueStatusAgent.AgentStatusEnum || (ConversationWebchatQueueStatusAgent.AgentStatusEnum = {}));
})(ConversationWebchatQueueStatusAgent = exports.ConversationWebchatQueueStatusAgent || (exports.ConversationWebchatQueueStatusAgent = {}));
/**
 * @export
 * @namespace ConversationWebchatQueueStatusUpdateRequest
 */
var ConversationWebchatQueueStatusUpdateRequest;
(function (ConversationWebchatQueueStatusUpdateRequest) {
    /**
     * @export
     * @enum {string}
     */
    var AgentStatusEnum;
    (function (AgentStatusEnum) {
        AgentStatusEnum[AgentStatusEnum["Available"] = 'available'] = "Available";
        AgentStatusEnum[AgentStatusEnum["Busy"] = 'busy'] = "Busy";
        AgentStatusEnum[AgentStatusEnum["Unavailable"] = 'unavailable'] = "Unavailable";
    })(AgentStatusEnum = ConversationWebchatQueueStatusUpdateRequest.AgentStatusEnum || (ConversationWebchatQueueStatusUpdateRequest.AgentStatusEnum = {}));
})(ConversationWebchatQueueStatusUpdateRequest = exports.ConversationWebchatQueueStatusUpdateRequest || (exports.ConversationWebchatQueueStatusUpdateRequest = {}));
/**
 * @export
 * @namespace ConversationWebsocketMessage
 */
var ConversationWebsocketMessage;
(function (ConversationWebsocketMessage) {
    /**
     * @export
     * @enum {string}
     */
    var EventTypeEnum;
    (function (EventTypeEnum) {
        EventTypeEnum[EventTypeEnum["QueuePosition"] = 'queue position'] = "QueuePosition";
        EventTypeEnum[EventTypeEnum["WebchatStartConversation"] = 'webchat start conversation'] = "WebchatStartConversation";
        EventTypeEnum[EventTypeEnum["ConversationClosed"] = 'conversation closed'] = "ConversationClosed";
        EventTypeEnum[EventTypeEnum["NewConversation"] = 'new conversation'] = "NewConversation";
        EventTypeEnum[EventTypeEnum["NewMessage"] = 'new message'] = "NewMessage";
        EventTypeEnum[EventTypeEnum["UpdatedMessage"] = 'updated message'] = "UpdatedMessage";
        EventTypeEnum[EventTypeEnum["QueueStatusUpdate"] = 'queue status update'] = "QueueStatusUpdate";
        EventTypeEnum[EventTypeEnum["Rrweb"] = 'rrweb'] = "Rrweb";
        EventTypeEnum[EventTypeEnum["ParticipantUpdate"] = 'participant update'] = "ParticipantUpdate";
        EventTypeEnum[EventTypeEnum["ParticipantJoin"] = 'participant join'] = "ParticipantJoin";
        EventTypeEnum[EventTypeEnum["ParticipantLeft"] = 'participant left'] = "ParticipantLeft";
        EventTypeEnum[EventTypeEnum["ReadMessage"] = 'read message'] = "ReadMessage";
        EventTypeEnum[EventTypeEnum["Typing"] = 'typing'] = "Typing";
        EventTypeEnum[EventTypeEnum["AddCoupon"] = 'add coupon'] = "AddCoupon";
        EventTypeEnum[EventTypeEnum["AddItem"] = 'add item'] = "AddItem";
        EventTypeEnum[EventTypeEnum["WebchatContext"] = 'webchat context'] = "WebchatContext";
        EventTypeEnum[EventTypeEnum["EngageCustomer"] = 'engage customer'] = "EngageCustomer";
        EventTypeEnum[EventTypeEnum["QueueNewMember"] = 'queue new member'] = "QueueNewMember";
    })(EventTypeEnum = ConversationWebsocketMessage.EventTypeEnum || (ConversationWebsocketMessage.EventTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Message"] = 'message'] = "Message";
        TypeEnum[TypeEnum["Event"] = 'event'] = "Event";
        TypeEnum[TypeEnum["Ping"] = 'ping'] = "Ping";
        TypeEnum[TypeEnum["CheckQueuePosition"] = 'check queue position'] = "CheckQueuePosition";
    })(TypeEnum = ConversationWebsocketMessage.TypeEnum || (ConversationWebsocketMessage.TypeEnum = {}));
})(ConversationWebsocketMessage = exports.ConversationWebsocketMessage || (exports.ConversationWebsocketMessage = {}));
/**
 * @export
 * @namespace Coupon
 */
var Coupon;
(function (Coupon) {
    /**
     * @export
     * @enum {string}
     */
    var UsableByEnum;
    (function (UsableByEnum) {
        UsableByEnum[UsableByEnum["Anyone"] = 'Anyone'] = "Anyone";
        UsableByEnum[UsableByEnum["UniqueCode"] = 'UniqueCode'] = "UniqueCode";
        UsableByEnum[UsableByEnum["OncePerCustomer"] = 'OncePerCustomer'] = "OncePerCustomer";
        UsableByEnum[UsableByEnum["OncePerNewCustomer"] = 'OncePerNewCustomer'] = "OncePerNewCustomer";
        UsableByEnum[UsableByEnum["OncePerNewCustomerForItem"] = 'OncePerNewCustomerForItem'] = "OncePerNewCustomerForItem";
    })(UsableByEnum = Coupon.UsableByEnum || (Coupon.UsableByEnum = {}));
})(Coupon = exports.Coupon || (exports.Coupon = {}));
/**
 * @export
 * @namespace Distance
 */
var Distance;
(function (Distance) {
    /**
     * @export
     * @enum {string}
     */
    var UomEnum;
    (function (UomEnum) {
        UomEnum[UomEnum["IN"] = 'IN'] = "IN";
        UomEnum[UomEnum["CM"] = 'CM'] = "CM";
    })(UomEnum = Distance.UomEnum || (Distance.UomEnum = {}));
})(Distance = exports.Distance || (exports.Distance = {}));
/**
 * @export
 * @namespace EmailCommseqStep
 */
var EmailCommseqStep;
(function (EmailCommseqStep) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Begin"] = 'begin'] = "Begin";
        TypeEnum[TypeEnum["Wait"] = 'wait'] = "Wait";
        TypeEnum[TypeEnum["Email"] = 'email'] = "Email";
        TypeEnum[TypeEnum["Merge"] = 'merge'] = "Merge";
        TypeEnum[TypeEnum["Condition"] = 'condition'] = "Condition";
        TypeEnum[TypeEnum["End"] = 'end'] = "End";
    })(TypeEnum = EmailCommseqStep.TypeEnum || (EmailCommseqStep.TypeEnum = {}));
})(EmailCommseqStep = exports.EmailCommseqStep || (exports.EmailCommseqStep = {}));
/**
 * @export
 * @namespace EmailPerformance
 */
var EmailPerformance;
(function (EmailPerformance) {
    /**
     * @export
     * @enum {string}
     */
    var LoyaltyProgramTypeEnum;
    (function (LoyaltyProgramTypeEnum) {
        LoyaltyProgramTypeEnum[LoyaltyProgramTypeEnum["Disabled"] = 'disabled'] = "Disabled";
        LoyaltyProgramTypeEnum[LoyaltyProgramTypeEnum["Points"] = 'points'] = "Points";
        LoyaltyProgramTypeEnum[LoyaltyProgramTypeEnum["Cashback"] = 'cashback'] = "Cashback";
    })(LoyaltyProgramTypeEnum = EmailPerformance.LoyaltyProgramTypeEnum || (EmailPerformance.LoyaltyProgramTypeEnum = {}));
})(EmailPerformance = exports.EmailPerformance || (exports.EmailPerformance = {}));
/**
 * @export
 * @namespace Experiment
 */
var Experiment;
(function (Experiment) {
    /**
     * @export
     * @enum {string}
     */
    var OpenaiElementTypeEnum;
    (function (OpenaiElementTypeEnum) {
        OpenaiElementTypeEnum[OpenaiElementTypeEnum["Headline"] = 'headline'] = "Headline";
        OpenaiElementTypeEnum[OpenaiElementTypeEnum["Text"] = 'text'] = "Text";
        OpenaiElementTypeEnum[OpenaiElementTypeEnum["Textblock"] = 'textblock'] = "Textblock";
    })(OpenaiElementTypeEnum = Experiment.OpenaiElementTypeEnum || (Experiment.OpenaiElementTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Running"] = 'Running'] = "Running";
        StatusEnum[StatusEnum["Ended"] = 'Ended'] = "Ended";
        StatusEnum[StatusEnum["Deleted"] = 'Deleted'] = "Deleted";
    })(StatusEnum = Experiment.StatusEnum || (Experiment.StatusEnum = {}));
})(Experiment = exports.Experiment || (exports.Experiment = {}));
/**
 * @export
 * @namespace ItemAutoOrderStep
 */
var ItemAutoOrderStep;
(function (ItemAutoOrderStep) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Item"] = 'item'] = "Item";
        TypeEnum[TypeEnum["Pause"] = 'pause'] = "Pause";
        TypeEnum[TypeEnum["Loop"] = 'loop'] = "Loop";
        TypeEnum[TypeEnum["KitOnly"] = 'kit only'] = "KitOnly";
        TypeEnum[TypeEnum["PauseUntil"] = 'pause until'] = "PauseUntil";
    })(TypeEnum = ItemAutoOrderStep.TypeEnum || (ItemAutoOrderStep.TypeEnum = {}));
})(ItemAutoOrderStep = exports.ItemAutoOrderStep || (exports.ItemAutoOrderStep = {}));
/**
 * @export
 * @namespace ItemContentMultimedia
 */
var ItemContentMultimedia;
(function (ItemContentMultimedia) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'Image'] = "Image";
        TypeEnum[TypeEnum["PDF"] = 'PDF'] = "PDF";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Unknown"] = 'Unknown'] = "Unknown";
        TypeEnum[TypeEnum["Video"] = 'Video'] = "Video";
    })(TypeEnum = ItemContentMultimedia.TypeEnum || (ItemContentMultimedia.TypeEnum = {}));
})(ItemContentMultimedia = exports.ItemContentMultimedia || (exports.ItemContentMultimedia = {}));
/**
 * @export
 * @namespace ItemOption
 */
var ItemOption;
(function (ItemOption) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["FileAttachment"] = 'file attachment'] = "FileAttachment";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
    })(TypeEnum = ItemOption.TypeEnum || (ItemOption.TypeEnum = {}));
})(ItemOption = exports.ItemOption || (exports.ItemOption = {}));
/**
 * @export
 * @namespace ItemOptionValue
 */
var ItemOptionValue;
(function (ItemOptionValue) {
    /**
     * @export
     * @enum {string}
     */
    var AdditionalDimensionApplicationEnum;
    (function (AdditionalDimensionApplicationEnum) {
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["None"] = 'none'] = "None";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["SetItemTo"] = 'set item to'] = "SetItemTo";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["AddItem"] = 'add item'] = "AddItem";
    })(AdditionalDimensionApplicationEnum = ItemOptionValue.AdditionalDimensionApplicationEnum || (ItemOptionValue.AdditionalDimensionApplicationEnum = {}));
})(ItemOptionValue = exports.ItemOptionValue || (exports.ItemOptionValue = {}));
/**
 * @export
 * @namespace ItemRelatedItem
 */
var ItemRelatedItem;
(function (ItemRelatedItem) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["System"] = 'System'] = "System";
        TypeEnum[TypeEnum["UserDefined"] = 'UserDefined'] = "UserDefined";
    })(TypeEnum = ItemRelatedItem.TypeEnum || (ItemRelatedItem.TypeEnum = {}));
})(ItemRelatedItem = exports.ItemRelatedItem || (exports.ItemRelatedItem = {}));
/**
 * @export
 * @namespace ItemRestrictionItem
 */
var ItemRestrictionItem;
(function (ItemRestrictionItem) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["CanNotBePurchasedWith"] = 'can not be purchased with'] = "CanNotBePurchasedWith";
        TypeEnum[TypeEnum["CanOnlyBePurchasedWith"] = 'can only be purchased with'] = "CanOnlyBePurchasedWith";
        TypeEnum[TypeEnum["MustBePurchasedWith"] = 'must be purchased with'] = "MustBePurchasedWith";
    })(TypeEnum = ItemRestrictionItem.TypeEnum || (ItemRestrictionItem.TypeEnum = {}));
})(ItemRestrictionItem = exports.ItemRestrictionItem || (exports.ItemRestrictionItem = {}));
/**
 * @export
 * @namespace ItemReview
 */
var ItemReview;
(function (ItemReview) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Approved"] = 'approved'] = "Approved";
        StatusEnum[StatusEnum["Unapproved"] = 'unapproved'] = "Unapproved";
        StatusEnum[StatusEnum["Rejected"] = 'rejected'] = "Rejected";
        StatusEnum[StatusEnum["MultimediaProcessing"] = 'multimedia processing'] = "MultimediaProcessing";
    })(StatusEnum = ItemReview.StatusEnum || (ItemReview.StatusEnum = {}));
})(ItemReview = exports.ItemReview || (exports.ItemReview = {}));
/**
 * @export
 * @namespace ItemShippingDestinationRestriction
 */
var ItemShippingDestinationRestriction;
(function (ItemShippingDestinationRestriction) {
    /**
     * @export
     * @enum {string}
     */
    var ValidityEnum;
    (function (ValidityEnum) {
        ValidityEnum[ValidityEnum["ValidOnlyFor"] = 'valid only for'] = "ValidOnlyFor";
        ValidityEnum[ValidityEnum["InvalidFor"] = 'invalid for'] = "InvalidFor";
    })(ValidityEnum = ItemShippingDestinationRestriction.ValidityEnum || (ItemShippingDestinationRestriction.ValidityEnum = {}));
})(ItemShippingDestinationRestriction = exports.ItemShippingDestinationRestriction || (exports.ItemShippingDestinationRestriction = {}));
/**
 * @export
 * @namespace ItemShippingMethod
 */
var ItemShippingMethod;
(function (ItemShippingMethod) {
    /**
     * @export
     * @enum {string}
     */
    var ShippingMethodValidityEnum;
    (function (ShippingMethodValidityEnum) {
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["InvalidFor"] = 'invalid for'] = "InvalidFor";
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["ValidFor"] = 'valid for'] = "ValidFor";
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["ValidOnlyFor"] = 'valid only for'] = "ValidOnlyFor";
    })(ShippingMethodValidityEnum = ItemShippingMethod.ShippingMethodValidityEnum || (ItemShippingMethod.ShippingMethodValidityEnum = {}));
})(ItemShippingMethod = exports.ItemShippingMethod || (exports.ItemShippingMethod = {}));
/**
 * @export
 * @namespace ItemTag
 */
var ItemTag;
(function (ItemTag) {
    /**
     * @export
     * @enum {string}
     */
    var TagTypeEnum;
    (function (TagTypeEnum) {
        TagTypeEnum[TagTypeEnum["Item"] = 'item'] = "Item";
        TagTypeEnum[TagTypeEnum["Order"] = 'order'] = "Order";
        TagTypeEnum[TagTypeEnum["Customer"] = 'customer'] = "Customer";
    })(TagTypeEnum = ItemTag.TagTypeEnum || (ItemTag.TagTypeEnum = {}));
})(ItemTag = exports.ItemTag || (exports.ItemTag = {}));
/**
 * @export
 * @namespace ItemTax
 */
var ItemTax;
(function (ItemTax) {
    /**
     * @export
     * @enum {string}
     */
    var TaxProductTypeEnum;
    (function (TaxProductTypeEnum) {
        TaxProductTypeEnum[TaxProductTypeEnum["Empty"] = ''] = "Empty";
        TaxProductTypeEnum[TaxProductTypeEnum["Digital"] = 'digital'] = "Digital";
        TaxProductTypeEnum[TaxProductTypeEnum["Physical"] = 'physical'] = "Physical";
        TaxProductTypeEnum[TaxProductTypeEnum["Service"] = 'service'] = "Service";
    })(TaxProductTypeEnum = ItemTax.TaxProductTypeEnum || (ItemTax.TaxProductTypeEnum = {}));
})(ItemTax = exports.ItemTax || (exports.ItemTax = {}));
/**
 * @export
 * @namespace ItemThirdPartyEmailMarketing
 */
var ItemThirdPartyEmailMarketing;
(function (ItemThirdPartyEmailMarketing) {
    /**
     * @export
     * @enum {string}
     */
    var ProviderNameEnum;
    (function (ProviderNameEnum) {
        ProviderNameEnum[ProviderNameEnum["ActiveCampaign"] = 'ActiveCampaign'] = "ActiveCampaign";
        ProviderNameEnum[ProviderNameEnum["AWeber"] = 'AWeber'] = "AWeber";
        ProviderNameEnum[ProviderNameEnum["CampaignMonitor"] = 'Campaign Monitor'] = "CampaignMonitor";
        ProviderNameEnum[ProviderNameEnum["ConstantContact"] = 'ConstantContact'] = "ConstantContact";
        ProviderNameEnum[ProviderNameEnum["Emma"] = 'Emma'] = "Emma";
        ProviderNameEnum[ProviderNameEnum["GetResponse"] = 'GetResponse'] = "GetResponse";
        ProviderNameEnum[ProviderNameEnum["IContact"] = 'iContact'] = "IContact";
        ProviderNameEnum[ProviderNameEnum["Klaviyo"] = 'Klaviyo'] = "Klaviyo";
        ProviderNameEnum[ProviderNameEnum["Lyris"] = 'Lyris'] = "Lyris";
        ProviderNameEnum[ProviderNameEnum["LyrisHQ"] = 'LyrisHQ'] = "LyrisHQ";
        ProviderNameEnum[ProviderNameEnum["MailChimp"] = 'MailChimp'] = "MailChimp";
        ProviderNameEnum[ProviderNameEnum["SilverPop"] = 'SilverPop'] = "SilverPop";
    })(ProviderNameEnum = ItemThirdPartyEmailMarketing.ProviderNameEnum || (ItemThirdPartyEmailMarketing.ProviderNameEnum = {}));
})(ItemThirdPartyEmailMarketing = exports.ItemThirdPartyEmailMarketing || (exports.ItemThirdPartyEmailMarketing = {}));
/**
 * @export
 * @namespace OauthTokenResponse
 */
var OauthTokenResponse;
(function (OauthTokenResponse) {
    /**
     * @export
     * @enum {string}
     */
    var TokenTypeEnum;
    (function (TokenTypeEnum) {
        TokenTypeEnum[TokenTypeEnum["Bearer"] = 'bearer'] = "Bearer";
    })(TokenTypeEnum = OauthTokenResponse.TokenTypeEnum || (OauthTokenResponse.TokenTypeEnum = {}));
})(OauthTokenResponse = exports.OauthTokenResponse || (exports.OauthTokenResponse = {}));
/**
 * @export
 * @namespace Order
 */
var Order;
(function (Order) {
    /**
     * @export
     * @enum {string}
     */
    var CurrentStageEnum;
    (function (CurrentStageEnum) {
        CurrentStageEnum[CurrentStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        CurrentStageEnum[CurrentStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        CurrentStageEnum[CurrentStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        CurrentStageEnum[CurrentStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        CurrentStageEnum[CurrentStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        CurrentStageEnum[CurrentStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        CurrentStageEnum[CurrentStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        CurrentStageEnum[CurrentStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        CurrentStageEnum[CurrentStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        CurrentStageEnum[CurrentStageEnum["Unknown"] = 'Unknown'] = "Unknown";
        CurrentStageEnum[CurrentStageEnum["PreOrdered"] = 'Pre-ordered'] = "PreOrdered";
        CurrentStageEnum[CurrentStageEnum["AdvancedOrderRouting"] = 'Advanced Order Routing'] = "AdvancedOrderRouting";
        CurrentStageEnum[CurrentStageEnum["Hold"] = 'Hold'] = "Hold";
    })(CurrentStageEnum = Order.CurrentStageEnum || (Order.CurrentStageEnum = {}));
})(Order = exports.Order || (exports.Order = {}));
/**
 * @export
 * @namespace OrderAffiliateLedger
 */
var OrderAffiliateLedger;
(function (OrderAffiliateLedger) {
    /**
     * @export
     * @enum {string}
     */
    var TransactionStateEnum;
    (function (TransactionStateEnum) {
        TransactionStateEnum[TransactionStateEnum["Pending"] = 'Pending'] = "Pending";
        TransactionStateEnum[TransactionStateEnum["Posted"] = 'Posted'] = "Posted";
        TransactionStateEnum[TransactionStateEnum["Approved"] = 'Approved'] = "Approved";
        TransactionStateEnum[TransactionStateEnum["Paid"] = 'Paid'] = "Paid";
        TransactionStateEnum[TransactionStateEnum["Rejected"] = 'Rejected'] = "Rejected";
        TransactionStateEnum[TransactionStateEnum["PartiallyPaid"] = 'Partially Paid'] = "PartiallyPaid";
    })(TransactionStateEnum = OrderAffiliateLedger.TransactionStateEnum || (OrderAffiliateLedger.TransactionStateEnum = {}));
})(OrderAffiliateLedger = exports.OrderAffiliateLedger || (exports.OrderAffiliateLedger = {}));
/**
 * @export
 * @namespace OrderAutoOrder
 */
var OrderAutoOrder;
(function (OrderAutoOrder) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Canceled"] = 'canceled'] = "Canceled";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
    })(StatusEnum = OrderAutoOrder.StatusEnum || (OrderAutoOrder.StatusEnum = {}));
})(OrderAutoOrder = exports.OrderAutoOrder || (exports.OrderAutoOrder = {}));
/**
 * @export
 * @namespace OrderCurrentStageHistory
 */
var OrderCurrentStageHistory;
(function (OrderCurrentStageHistory) {
    /**
     * @export
     * @enum {string}
     */
    var AfterStageEnum;
    (function (AfterStageEnum) {
        AfterStageEnum[AfterStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        AfterStageEnum[AfterStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        AfterStageEnum[AfterStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        AfterStageEnum[AfterStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        AfterStageEnum[AfterStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        AfterStageEnum[AfterStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        AfterStageEnum[AfterStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        AfterStageEnum[AfterStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        AfterStageEnum[AfterStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        AfterStageEnum[AfterStageEnum["Unknown"] = 'Unknown'] = "Unknown";
        AfterStageEnum[AfterStageEnum["PreOrdered"] = 'Pre-ordered'] = "PreOrdered";
        AfterStageEnum[AfterStageEnum["AdvancedOrderRouting"] = 'Advanced Order Routing'] = "AdvancedOrderRouting";
        AfterStageEnum[AfterStageEnum["Hold"] = 'Hold'] = "Hold";
    })(AfterStageEnum = OrderCurrentStageHistory.AfterStageEnum || (OrderCurrentStageHistory.AfterStageEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var BeforeStageEnum;
    (function (BeforeStageEnum) {
        BeforeStageEnum[BeforeStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        BeforeStageEnum[BeforeStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        BeforeStageEnum[BeforeStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        BeforeStageEnum[BeforeStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        BeforeStageEnum[BeforeStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        BeforeStageEnum[BeforeStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        BeforeStageEnum[BeforeStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        BeforeStageEnum[BeforeStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        BeforeStageEnum[BeforeStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        BeforeStageEnum[BeforeStageEnum["Unknown"] = 'Unknown'] = "Unknown";
        BeforeStageEnum[BeforeStageEnum["PreOrdered"] = 'Pre-ordered'] = "PreOrdered";
        BeforeStageEnum[BeforeStageEnum["AdvancedOrderRouting"] = 'Advanced Order Routing'] = "AdvancedOrderRouting";
        BeforeStageEnum[BeforeStageEnum["Hold"] = 'Hold'] = "Hold";
    })(BeforeStageEnum = OrderCurrentStageHistory.BeforeStageEnum || (OrderCurrentStageHistory.BeforeStageEnum = {}));
})(OrderCurrentStageHistory = exports.OrderCurrentStageHistory || (exports.OrderCurrentStageHistory = {}));
/**
 * @export
 * @namespace OrderEdiDocument
 */
var OrderEdiDocument;
(function (OrderEdiDocument) {
    /**
     * @export
     * @enum {string}
     */
    var DirectionEnum;
    (function (DirectionEnum) {
        DirectionEnum[DirectionEnum["Inbound"] = 'inbound'] = "Inbound";
        DirectionEnum[DirectionEnum["Outbound"] = 'outbound'] = "Outbound";
    })(DirectionEnum = OrderEdiDocument.DirectionEnum || (OrderEdiDocument.DirectionEnum = {}));
})(OrderEdiDocument = exports.OrderEdiDocument || (exports.OrderEdiDocument = {}));
/**
 * @export
 * @namespace OrderFormat
 */
var OrderFormat;
(function (OrderFormat) {
    /**
     * @export
     * @enum {string}
     */
    var FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Text"] = 'text'] = "Text";
        FormatEnum[FormatEnum["Div"] = 'div'] = "Div";
        FormatEnum[FormatEnum["Table"] = 'table'] = "Table";
        FormatEnum[FormatEnum["Email"] = 'email'] = "Email";
    })(FormatEnum = OrderFormat.FormatEnum || (OrderFormat.FormatEnum = {}));
})(OrderFormat = exports.OrderFormat || (exports.OrderFormat = {}));
/**
 * @export
 * @namespace OrderFraudScore
 */
var OrderFraudScore;
(function (OrderFraudScore) {
    /**
     * @export
     * @enum {string}
     */
    var BinMatchEnum;
    (function (BinMatchEnum) {
        BinMatchEnum[BinMatchEnum["NA"] = 'NA'] = "NA";
        BinMatchEnum[BinMatchEnum["No"] = 'No'] = "No";
        BinMatchEnum[BinMatchEnum["NotFound"] = 'NotFound'] = "NotFound";
        BinMatchEnum[BinMatchEnum["Yes"] = 'Yes'] = "Yes";
    })(BinMatchEnum = OrderFraudScore.BinMatchEnum || (OrderFraudScore.BinMatchEnum = {}));
})(OrderFraudScore = exports.OrderFraudScore || (exports.OrderFraudScore = {}));
/**
 * @export
 * @namespace OrderItem
 */
var OrderItem;
(function (OrderItem) {
    /**
     * @export
     * @enum {string}
     */
    var TaxProductTypeEnum;
    (function (TaxProductTypeEnum) {
        TaxProductTypeEnum[TaxProductTypeEnum["Empty"] = ''] = "Empty";
        TaxProductTypeEnum[TaxProductTypeEnum["Digital"] = 'digital'] = "Digital";
        TaxProductTypeEnum[TaxProductTypeEnum["Physical"] = 'physical'] = "Physical";
        TaxProductTypeEnum[TaxProductTypeEnum["Service"] = 'service'] = "Service";
    })(TaxProductTypeEnum = OrderItem.TaxProductTypeEnum || (OrderItem.TaxProductTypeEnum = {}));
})(OrderItem = exports.OrderItem || (exports.OrderItem = {}));
/**
 * @export
 * @namespace OrderItemOption
 */
var OrderItemOption;
(function (OrderItemOption) {
    /**
     * @export
     * @enum {string}
     */
    var AdditionalDimensionApplicationEnum;
    (function (AdditionalDimensionApplicationEnum) {
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["None"] = 'none'] = "None";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["SetItemTo"] = 'set item to'] = "SetItemTo";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["AddItem"] = 'add item'] = "AddItem";
    })(AdditionalDimensionApplicationEnum = OrderItemOption.AdditionalDimensionApplicationEnum || (OrderItemOption.AdditionalDimensionApplicationEnum = {}));
})(OrderItemOption = exports.OrderItemOption || (exports.OrderItemOption = {}));
/**
 * @export
 * @namespace OrderPayment
 */
var OrderPayment;
(function (OrderPayment) {
    /**
     * @export
     * @enum {string}
     */
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["AmazonPay"] = 'Amazon Pay'] = "AmazonPay";
        PaymentMethodEnum[PaymentMethodEnum["AmazonSC"] = 'Amazon SC'] = "AmazonSC";
        PaymentMethodEnum[PaymentMethodEnum["Cash"] = 'Cash'] = "Cash";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["EBay"] = 'eBay'] = "EBay";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["GoogleShopping"] = 'Google Shopping'] = "GoogleShopping";
        PaymentMethodEnum[PaymentMethodEnum["Insurance"] = 'Insurance'] = "Insurance";
        PaymentMethodEnum[PaymentMethodEnum["Link"] = 'Link'] = "Link";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["Unknown"] = 'Unknown'] = "Unknown";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
        PaymentMethodEnum[PaymentMethodEnum["Walmart"] = 'Walmart'] = "Walmart";
        PaymentMethodEnum[PaymentMethodEnum["ShopCom"] = 'Shop.com'] = "ShopCom";
        PaymentMethodEnum[PaymentMethodEnum["Sezzle"] = 'Sezzle'] = "Sezzle";
        PaymentMethodEnum[PaymentMethodEnum["Venmo"] = 'Venmo'] = "Venmo";
        PaymentMethodEnum[PaymentMethodEnum["ApplePay"] = 'Apple Pay'] = "ApplePay";
        PaymentMethodEnum[PaymentMethodEnum["GooglePay"] = 'Google Pay'] = "GooglePay";
        PaymentMethodEnum[PaymentMethodEnum["HealthBenefitCard"] = 'Health Benefit Card'] = "HealthBenefitCard";
        PaymentMethodEnum[PaymentMethodEnum["PayPalFastlane"] = 'PayPal Fastlane'] = "PayPalFastlane";
    })(PaymentMethodEnum = OrderPayment.PaymentMethodEnum || (OrderPayment.PaymentMethodEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PaymentStatusEnum;
    (function (PaymentStatusEnum) {
        PaymentStatusEnum[PaymentStatusEnum["Unprocessed"] = 'Unprocessed'] = "Unprocessed";
        PaymentStatusEnum[PaymentStatusEnum["Authorized"] = 'Authorized'] = "Authorized";
        PaymentStatusEnum[PaymentStatusEnum["CaptureFailed"] = 'Capture Failed'] = "CaptureFailed";
        PaymentStatusEnum[PaymentStatusEnum["Processed"] = 'Processed'] = "Processed";
        PaymentStatusEnum[PaymentStatusEnum["Declined"] = 'Declined'] = "Declined";
        PaymentStatusEnum[PaymentStatusEnum["Voided"] = 'Voided'] = "Voided";
        PaymentStatusEnum[PaymentStatusEnum["Refunded"] = 'Refunded'] = "Refunded";
        PaymentStatusEnum[PaymentStatusEnum["Skipped"] = 'Skipped'] = "Skipped";
    })(PaymentStatusEnum = OrderPayment.PaymentStatusEnum || (OrderPayment.PaymentStatusEnum = {}));
})(OrderPayment = exports.OrderPayment || (exports.OrderPayment = {}));
/**
 * @export
 * @namespace OrderPaymentCreditCard
 */
var OrderPaymentCreditCard;
(function (OrderPaymentCreditCard) {
    /**
     * @export
     * @enum {string}
     */
    var CardTypeEnum;
    (function (CardTypeEnum) {
        CardTypeEnum[CardTypeEnum["AMEX"] = 'AMEX'] = "AMEX";
        CardTypeEnum[CardTypeEnum["DinersClub"] = 'Diners Club'] = "DinersClub";
        CardTypeEnum[CardTypeEnum["Discover"] = 'Discover'] = "Discover";
        CardTypeEnum[CardTypeEnum["JCB"] = 'JCB'] = "JCB";
        CardTypeEnum[CardTypeEnum["MasterCard"] = 'MasterCard'] = "MasterCard";
        CardTypeEnum[CardTypeEnum["VISA"] = 'VISA'] = "VISA";
    })(CardTypeEnum = OrderPaymentCreditCard.CardTypeEnum || (OrderPaymentCreditCard.CardTypeEnum = {}));
})(OrderPaymentCreditCard = exports.OrderPaymentCreditCard || (exports.OrderPaymentCreditCard = {}));
/**
 * @export
 * @namespace OrderPaymentECheck
 */
var OrderPaymentECheck;
(function (OrderPaymentECheck) {
    /**
     * @export
     * @enum {string}
     */
    var BankAccountTypeEnum;
    (function (BankAccountTypeEnum) {
        BankAccountTypeEnum[BankAccountTypeEnum["Checking"] = 'Checking'] = "Checking";
        BankAccountTypeEnum[BankAccountTypeEnum["Savings"] = 'Savings'] = "Savings";
    })(BankAccountTypeEnum = OrderPaymentECheck.BankAccountTypeEnum || (OrderPaymentECheck.BankAccountTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var BankOwnerTypeEnum;
    (function (BankOwnerTypeEnum) {
        BankOwnerTypeEnum[BankOwnerTypeEnum["Personal"] = 'Personal'] = "Personal";
        BankOwnerTypeEnum[BankOwnerTypeEnum["Business"] = 'Business'] = "Business";
    })(BankOwnerTypeEnum = OrderPaymentECheck.BankOwnerTypeEnum || (OrderPaymentECheck.BankOwnerTypeEnum = {}));
})(OrderPaymentECheck = exports.OrderPaymentECheck || (exports.OrderPaymentECheck = {}));
/**
 * @export
 * @namespace OrderQuery
 */
var OrderQuery;
(function (OrderQuery) {
    /**
     * @export
     * @enum {string}
     */
    var CurrentStageEnum;
    (function (CurrentStageEnum) {
        CurrentStageEnum[CurrentStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        CurrentStageEnum[CurrentStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        CurrentStageEnum[CurrentStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        CurrentStageEnum[CurrentStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        CurrentStageEnum[CurrentStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        CurrentStageEnum[CurrentStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        CurrentStageEnum[CurrentStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        CurrentStageEnum[CurrentStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        CurrentStageEnum[CurrentStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        CurrentStageEnum[CurrentStageEnum["Unknown"] = 'Unknown'] = "Unknown";
    })(CurrentStageEnum = OrderQuery.CurrentStageEnum || (OrderQuery.CurrentStageEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["AmazonSC"] = 'Amazon SC'] = "AmazonSC";
        PaymentMethodEnum[PaymentMethodEnum["Cash"] = 'Cash'] = "Cash";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["Unknown"] = 'Unknown'] = "Unknown";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
        PaymentMethodEnum[PaymentMethodEnum["Venmo"] = 'Venmo'] = "Venmo";
        PaymentMethodEnum[PaymentMethodEnum["ApplePay"] = 'Apple Pay'] = "ApplePay";
        PaymentMethodEnum[PaymentMethodEnum["GooglePay"] = ' Google Pay'] = "GooglePay";
        PaymentMethodEnum[PaymentMethodEnum["PayPalFastlane"] = 'PayPal Fastlane'] = "PayPalFastlane";
    })(PaymentMethodEnum = OrderQuery.PaymentMethodEnum || (OrderQuery.PaymentMethodEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var QueryTargetEnum;
    (function (QueryTargetEnum) {
        QueryTargetEnum[QueryTargetEnum["Origin"] = 'origin'] = "Origin";
        QueryTargetEnum[QueryTargetEnum["Cache"] = 'cache'] = "Cache";
    })(QueryTargetEnum = OrderQuery.QueryTargetEnum || (OrderQuery.QueryTargetEnum = {}));
})(OrderQuery = exports.OrderQuery || (exports.OrderQuery = {}));
/**
 * @export
 * @namespace OrderQueryBatch
 */
var OrderQueryBatch;
(function (OrderQueryBatch) {
    /**
     * @export
     * @enum {string}
     */
    var QueryTargetEnum;
    (function (QueryTargetEnum) {
        QueryTargetEnum[QueryTargetEnum["Origin"] = 'origin'] = "Origin";
        QueryTargetEnum[QueryTargetEnum["Cache"] = 'cache'] = "Cache";
    })(QueryTargetEnum = OrderQueryBatch.QueryTargetEnum || (OrderQueryBatch.QueryTargetEnum = {}));
})(OrderQueryBatch = exports.OrderQueryBatch || (exports.OrderQueryBatch = {}));
/**
 * @export
 * @namespace PointOfSaleReader
 */
var PointOfSaleReader;
(function (PointOfSaleReader) {
    /**
     * @export
     * @enum {string}
     */
    var PaymentProviderEnum;
    (function (PaymentProviderEnum) {
        PaymentProviderEnum[PaymentProviderEnum["Stripe"] = 'stripe'] = "Stripe";
    })(PaymentProviderEnum = PointOfSaleReader.PaymentProviderEnum || (PointOfSaleReader.PaymentProviderEnum = {}));
})(PointOfSaleReader = exports.PointOfSaleReader || (exports.PointOfSaleReader = {}));
/**
 * @export
 * @namespace Report
 */
var Report;
(function (Report) {
    /**
     * @export
     * @enum {string}
     */
    var SecurityLevelEnum;
    (function (SecurityLevelEnum) {
        SecurityLevelEnum[SecurityLevelEnum["Standard"] = 'standard'] = "Standard";
        SecurityLevelEnum[SecurityLevelEnum["Low"] = 'low'] = "Low";
        SecurityLevelEnum[SecurityLevelEnum["Medium"] = 'medium'] = "Medium";
        SecurityLevelEnum[SecurityLevelEnum["High"] = 'high'] = "High";
    })(SecurityLevelEnum = Report.SecurityLevelEnum || (Report.SecurityLevelEnum = {}));
})(Report = exports.Report || (exports.Report = {}));
/**
 * @export
 * @namespace ReportDataSet
 */
var ReportDataSet;
(function (ReportDataSet) {
    /**
     * @export
     * @enum {string}
     */
    var ForObjectTypeEnum;
    (function (ForObjectTypeEnum) {
        ForObjectTypeEnum[ForObjectTypeEnum["Schema"] = 'schema'] = "Schema";
        ForObjectTypeEnum[ForObjectTypeEnum["Filter"] = 'filter'] = "Filter";
        ForObjectTypeEnum[ForObjectTypeEnum["Visualization"] = 'visualization'] = "Visualization";
    })(ForObjectTypeEnum = ReportDataSet.ForObjectTypeEnum || (ReportDataSet.ForObjectTypeEnum = {}));
})(ReportDataSet = exports.ReportDataSet || (exports.ReportDataSet = {}));
/**
 * @export
 * @namespace ReportDataSetQuery
 */
var ReportDataSetQuery;
(function (ReportDataSetQuery) {
    /**
     * @export
     * @enum {string}
     */
    var ForObjectTypeEnum;
    (function (ForObjectTypeEnum) {
        ForObjectTypeEnum[ForObjectTypeEnum["Schema"] = 'schema'] = "Schema";
        ForObjectTypeEnum[ForObjectTypeEnum["Filter"] = 'filter'] = "Filter";
        ForObjectTypeEnum[ForObjectTypeEnum["Visualization"] = 'visualization'] = "Visualization";
    })(ForObjectTypeEnum = ReportDataSetQuery.ForObjectTypeEnum || (ReportDataSetQuery.ForObjectTypeEnum = {}));
})(ReportDataSetQuery = exports.ReportDataSetQuery || (exports.ReportDataSetQuery = {}));
/**
 * @export
 * @namespace ReportDataSetSchema
 */
var ReportDataSetSchema;
(function (ReportDataSetSchema) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["BIGNUMERIC"] = 'BIGNUMERIC'] = "BIGNUMERIC";
        TypeEnum[TypeEnum["BOOL"] = 'BOOL'] = "BOOL";
        TypeEnum[TypeEnum["DATE"] = 'DATE'] = "DATE";
        TypeEnum[TypeEnum["DATETIME"] = 'DATETIME'] = "DATETIME";
        TypeEnum[TypeEnum["FLOAT64"] = 'FLOAT64'] = "FLOAT64";
        TypeEnum[TypeEnum["INT64"] = 'INT64'] = "INT64";
        TypeEnum[TypeEnum["JSON"] = 'JSON'] = "JSON";
        TypeEnum[TypeEnum["NUMERIC"] = 'NUMERIC'] = "NUMERIC";
        TypeEnum[TypeEnum["STRING"] = 'STRING'] = "STRING";
        TypeEnum[TypeEnum["TIME"] = 'TIME'] = "TIME";
        TypeEnum[TypeEnum["TIMESTAMP"] = 'TIMESTAMP'] = "TIMESTAMP";
    })(TypeEnum = ReportDataSetSchema.TypeEnum || (ReportDataSetSchema.TypeEnum = {}));
})(ReportDataSetSchema = exports.ReportDataSetSchema || (exports.ReportDataSetSchema = {}));
/**
 * @export
 * @namespace ReportDataSourceSchema
 */
var ReportDataSourceSchema;
(function (ReportDataSourceSchema) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["BIGNUMERIC"] = 'BIGNUMERIC'] = "BIGNUMERIC";
        TypeEnum[TypeEnum["BOOL"] = 'BOOL'] = "BOOL";
        TypeEnum[TypeEnum["DATE"] = 'DATE'] = "DATE";
        TypeEnum[TypeEnum["DATETIME"] = 'DATETIME'] = "DATETIME";
        TypeEnum[TypeEnum["FLOAT64"] = 'FLOAT64'] = "FLOAT64";
        TypeEnum[TypeEnum["INT64"] = 'INT64'] = "INT64";
        TypeEnum[TypeEnum["JSON"] = 'JSON'] = "JSON";
        TypeEnum[TypeEnum["NUMERIC"] = 'NUMERIC'] = "NUMERIC";
        TypeEnum[TypeEnum["STRING"] = 'STRING'] = "STRING";
        TypeEnum[TypeEnum["TIME"] = 'TIME'] = "TIME";
        TypeEnum[TypeEnum["TIMESTAMP"] = 'TIMESTAMP'] = "TIMESTAMP";
    })(TypeEnum = ReportDataSourceSchema.TypeEnum || (ReportDataSourceSchema.TypeEnum = {}));
})(ReportDataSourceSchema = exports.ReportDataSourceSchema || (exports.ReportDataSourceSchema = {}));
/**
 * @export
 * @namespace ReportExecuteQueriesRequest
 */
var ReportExecuteQueriesRequest;
(function (ReportExecuteQueriesRequest) {
    /**
     * @export
     * @enum {string}
     */
    var SecurityLevelEnum;
    (function (SecurityLevelEnum) {
        SecurityLevelEnum[SecurityLevelEnum["Standard"] = 'standard'] = "Standard";
        SecurityLevelEnum[SecurityLevelEnum["Low"] = 'low'] = "Low";
        SecurityLevelEnum[SecurityLevelEnum["Medium"] = 'medium'] = "Medium";
        SecurityLevelEnum[SecurityLevelEnum["High"] = 'high'] = "High";
    })(SecurityLevelEnum = ReportExecuteQueriesRequest.SecurityLevelEnum || (ReportExecuteQueriesRequest.SecurityLevelEnum = {}));
})(ReportExecuteQueriesRequest = exports.ReportExecuteQueriesRequest || (exports.ReportExecuteQueriesRequest = {}));
/**
 * @export
 * @namespace ReportFilter
 */
var ReportFilter;
(function (ReportFilter) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["DateRange"] = 'date range'] = "DateRange";
        TypeEnum[TypeEnum["DateComparison"] = 'date comparison'] = "DateComparison";
        TypeEnum[TypeEnum["SingleValue"] = 'single value'] = "SingleValue";
        TypeEnum[TypeEnum["MultipleValues"] = 'multiple values'] = "MultipleValues";
    })(TypeEnum = ReportFilter.TypeEnum || (ReportFilter.TypeEnum = {}));
})(ReportFilter = exports.ReportFilter || (exports.ReportFilter = {}));
/**
 * @export
 * @namespace ReportPageVisualization
 */
var ReportPageVisualization;
(function (ReportPageVisualization) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["ScoreCard"] = 'score card'] = "ScoreCard";
        TypeEnum[TypeEnum["LineChart"] = 'line chart'] = "LineChart";
        TypeEnum[TypeEnum["BarChart"] = 'bar chart'] = "BarChart";
        TypeEnum[TypeEnum["Text"] = 'text'] = "Text";
        TypeEnum[TypeEnum["Table"] = 'table'] = "Table";
        TypeEnum[TypeEnum["Gauge"] = 'gauge'] = "Gauge";
        TypeEnum[TypeEnum["PieChart"] = 'pie chart'] = "PieChart";
    })(TypeEnum = ReportPageVisualization.TypeEnum || (ReportPageVisualization.TypeEnum = {}));
})(ReportPageVisualization = exports.ReportPageVisualization || (exports.ReportPageVisualization = {}));
/**
 * @export
 * @namespace ReportPageVisualizationMetric
 */
var ReportPageVisualizationMetric;
(function (ReportPageVisualizationMetric) {
    /**
     * @export
     * @enum {string}
     */
    var AggregationEnum;
    (function (AggregationEnum) {
        AggregationEnum[AggregationEnum["Sum"] = 'sum'] = "Sum";
        AggregationEnum[AggregationEnum["Count"] = 'count'] = "Count";
        AggregationEnum[AggregationEnum["Min"] = 'min'] = "Min";
        AggregationEnum[AggregationEnum["Max"] = 'max'] = "Max";
        AggregationEnum[AggregationEnum["Avg"] = 'avg'] = "Avg";
        AggregationEnum[AggregationEnum["None"] = 'none'] = "None";
    })(AggregationEnum = ReportPageVisualizationMetric.AggregationEnum || (ReportPageVisualizationMetric.AggregationEnum = {}));
})(ReportPageVisualizationMetric = exports.ReportPageVisualizationMetric || (exports.ReportPageVisualizationMetric = {}));
/**
 * @export
 * @namespace ReportWebsocketEvent
 */
var ReportWebsocketEvent;
(function (ReportWebsocketEvent) {
    /**
     * @export
     * @enum {string}
     */
    var EventTypeEnum;
    (function (EventTypeEnum) {
        EventTypeEnum[EventTypeEnum["Ping"] = 'ping'] = "Ping";
        EventTypeEnum[EventTypeEnum["QueryCompletion"] = 'query completion'] = "QueryCompletion";
    })(EventTypeEnum = ReportWebsocketEvent.EventTypeEnum || (ReportWebsocketEvent.EventTypeEnum = {}));
})(ReportWebsocketEvent = exports.ReportWebsocketEvent || (exports.ReportWebsocketEvent = {}));
/**
 * @export
 * @namespace TempMultimedia
 */
var TempMultimedia;
(function (TempMultimedia) {
    /**
     * @export
     * @enum {string}
     */
    var MultimediaTypeEnum;
    (function (MultimediaTypeEnum) {
        MultimediaTypeEnum[MultimediaTypeEnum["Image"] = 'Image'] = "Image";
        MultimediaTypeEnum[MultimediaTypeEnum["PDF"] = 'PDF'] = "PDF";
        MultimediaTypeEnum[MultimediaTypeEnum["Text"] = 'Text'] = "Text";
        MultimediaTypeEnum[MultimediaTypeEnum["Video"] = 'Video'] = "Video";
    })(MultimediaTypeEnum = TempMultimedia.MultimediaTypeEnum || (TempMultimedia.MultimediaTypeEnum = {}));
})(TempMultimedia = exports.TempMultimedia || (exports.TempMultimedia = {}));
/**
 * @export
 * @namespace Webhook
 */
var Webhook;
(function (Webhook) {
    /**
     * @export
     * @enum {string}
     */
    var ApiVersionEnum;
    (function (ApiVersionEnum) {
        ApiVersionEnum[ApiVersionEnum["_20170301"] = '2017-03-01'] = "_20170301";
    })(ApiVersionEnum = Webhook.ApiVersionEnum || (Webhook.ApiVersionEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var AuthenticationTypeEnum;
    (function (AuthenticationTypeEnum) {
        AuthenticationTypeEnum[AuthenticationTypeEnum["None"] = 'none'] = "None";
        AuthenticationTypeEnum[AuthenticationTypeEnum["Basic"] = 'basic'] = "Basic";
        AuthenticationTypeEnum[AuthenticationTypeEnum["ApiUser"] = 'api user'] = "ApiUser";
        AuthenticationTypeEnum[AuthenticationTypeEnum["AwsIam"] = 'aws iam'] = "AwsIam";
    })(AuthenticationTypeEnum = Webhook.AuthenticationTypeEnum || (Webhook.AuthenticationTypeEnum = {}));
})(Webhook = exports.Webhook || (exports.Webhook = {}));
/**
 * @export
 * @namespace Weight
 */
var Weight;
(function (Weight) {
    /**
     * @export
     * @enum {string}
     */
    var UomEnum;
    (function (UomEnum) {
        UomEnum[UomEnum["KG"] = 'KG'] = "KG";
        UomEnum[UomEnum["G"] = 'G'] = "G";
        UomEnum[UomEnum["LB"] = 'LB'] = "LB";
        UomEnum[UomEnum["OZ"] = 'OZ'] = "OZ";
    })(UomEnum = Weight.UomEnum || (Weight.UomEnum = {}));
})(Weight = exports.Weight || (exports.Weight = {}));
/**
 * @export
 * @namespace WorkflowTask
 */
var WorkflowTask;
(function (WorkflowTask) {
    /**
     * @export
     * @enum {string}
     */
    var ObjectTypeEnum;
    (function (ObjectTypeEnum) {
        ObjectTypeEnum[ObjectTypeEnum["Order"] = 'order'] = "Order";
        ObjectTypeEnum[ObjectTypeEnum["AutoOrder"] = 'auto order'] = "AutoOrder";
        ObjectTypeEnum[ObjectTypeEnum["Item"] = 'item'] = "Item";
        ObjectTypeEnum[ObjectTypeEnum["CustomerProfile"] = 'customer profile'] = "CustomerProfile";
        ObjectTypeEnum[ObjectTypeEnum["Storefront"] = 'storefront'] = "Storefront";
    })(ObjectTypeEnum = WorkflowTask.ObjectTypeEnum || (WorkflowTask.ObjectTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PriorityEnum;
    (function (PriorityEnum) {
        PriorityEnum[PriorityEnum["_1Low"] = '1 - low'] = "_1Low";
        PriorityEnum[PriorityEnum["_2Medium"] = '2 - medium'] = "_2Medium";
        PriorityEnum[PriorityEnum["_3High"] = '3 - high'] = "_3High";
        PriorityEnum[PriorityEnum["_4Critical"] = '4 - critical'] = "_4Critical";
    })(PriorityEnum = WorkflowTask.PriorityEnum || (WorkflowTask.PriorityEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Open"] = 'open'] = "Open";
        StatusEnum[StatusEnum["Closed"] = 'closed'] = "Closed";
        StatusEnum[StatusEnum["Delayed"] = 'delayed'] = "Delayed";
        StatusEnum[StatusEnum["AwaitingCustomerFeedback"] = 'awaiting customer feedback'] = "AwaitingCustomerFeedback";
        StatusEnum[StatusEnum["ClosedSystem"] = 'closed - system'] = "ClosedSystem";
        StatusEnum[StatusEnum["ClosedCustomer"] = 'closed - customer'] = "ClosedCustomer";
        StatusEnum[StatusEnum["ClosedExpiration"] = 'closed - expiration'] = "ClosedExpiration";
    })(StatusEnum = WorkflowTask.StatusEnum || (WorkflowTask.StatusEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var SystemTaskTypeEnum;
    (function (SystemTaskTypeEnum) {
        SystemTaskTypeEnum[SystemTaskTypeEnum["OrderAccountsReceivable"] = 'order_accounts_receivable'] = "OrderAccountsReceivable";
        SystemTaskTypeEnum[SystemTaskTypeEnum["OrderFraudReview"] = 'order_fraud_review'] = "OrderFraudReview";
        SystemTaskTypeEnum[SystemTaskTypeEnum["AutoOrderCardUpdateIssue"] = 'auto_order_card_update_issue'] = "AutoOrderCardUpdateIssue";
        SystemTaskTypeEnum[SystemTaskTypeEnum["AutoOrderCanceledPayment"] = 'auto_order_canceled_payment'] = "AutoOrderCanceledPayment";
        SystemTaskTypeEnum[SystemTaskTypeEnum["ItemLowStock"] = 'item_low_stock'] = "ItemLowStock";
        SystemTaskTypeEnum[SystemTaskTypeEnum["ItemOutOfStock"] = 'item_out_of_stock'] = "ItemOutOfStock";
    })(SystemTaskTypeEnum = WorkflowTask.SystemTaskTypeEnum || (WorkflowTask.SystemTaskTypeEnum = {}));
})(WorkflowTask = exports.WorkflowTask || (exports.WorkflowTask = {}));
/**
 * @export
 * @namespace WorkflowTasksRequest
 */
var WorkflowTasksRequest;
(function (WorkflowTasksRequest) {
    /**
     * @export
     * @enum {string}
     */
    var ObjectTypeEnum;
    (function (ObjectTypeEnum) {
        ObjectTypeEnum[ObjectTypeEnum["Order"] = 'order'] = "Order";
        ObjectTypeEnum[ObjectTypeEnum["AutoOrder"] = 'auto order'] = "AutoOrder";
        ObjectTypeEnum[ObjectTypeEnum["Item"] = 'item'] = "Item";
        ObjectTypeEnum[ObjectTypeEnum["CustomerProfile"] = 'customer profile'] = "CustomerProfile";
    })(ObjectTypeEnum = WorkflowTasksRequest.ObjectTypeEnum || (WorkflowTasksRequest.ObjectTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PriorityEnum;
    (function (PriorityEnum) {
        PriorityEnum[PriorityEnum["_1Low"] = '1 - low'] = "_1Low";
        PriorityEnum[PriorityEnum["_2Medium"] = '2 - medium'] = "_2Medium";
        PriorityEnum[PriorityEnum["_3High"] = '3 - high'] = "_3High";
        PriorityEnum[PriorityEnum["_4Critical"] = '4 - critical'] = "_4Critical";
    })(PriorityEnum = WorkflowTasksRequest.PriorityEnum || (WorkflowTasksRequest.PriorityEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Open"] = 'open'] = "Open";
        StatusEnum[StatusEnum["Closed"] = 'closed'] = "Closed";
        StatusEnum[StatusEnum["Delayed"] = 'delayed'] = "Delayed";
        StatusEnum[StatusEnum["AwaitingCustomerFeedback"] = 'awaiting customer feedback'] = "AwaitingCustomerFeedback";
    })(StatusEnum = WorkflowTasksRequest.StatusEnum || (WorkflowTasksRequest.StatusEnum = {}));
})(WorkflowTasksRequest = exports.WorkflowTasksRequest || (exports.WorkflowTasksRequest = {}));
/**
 * AffiliateApi - fetch parameter creator
 * @export
 */
var AffiliateApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve clicks
         * @param {AffiliateClickQuery} click_query Click query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClicksByQuery: function (click_query, _limit, _offset, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'click_query' is not null or undefined
            if (click_query === null || click_query === undefined) {
                throw new RequiredError('click_query', 'Required parameter click_query was null or undefined when calling getClicksByQuery.');
            }
            var localVarPath = "/affiliate/clicks/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AffiliateClickQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(click_query || {}) : (click_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve ledger entries
         * @param {AffiliateLedgerQuery} ledger_query Ledger query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersByQuery: function (ledger_query, _limit, _offset, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'ledger_query' is not null or undefined
            if (ledger_query === null || ledger_query === undefined) {
                throw new RequiredError('ledger_query', 'Required parameter ledger_query was null or undefined when calling getLedgersByQuery.');
            }
            var localVarPath = "/affiliate/ledgers/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AffiliateLedgerQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(ledger_query || {}) : (ledger_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AffiliateApiFetchParamCreator = AffiliateApiFetchParamCreator;
/**
 * AffiliateApi - functional programming interface
 * @export
 */
var AffiliateApiFp = function (configuration) {
    return {
        /**
         * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve clicks
         * @param {AffiliateClickQuery} click_query Click query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClicksByQuery: function (click_query, _limit, _offset, _expand, options) {
            var localVarFetchArgs = (0, exports.AffiliateApiFetchParamCreator)(configuration).getClicksByQuery(click_query, _limit, _offset, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve ledger entries
         * @param {AffiliateLedgerQuery} ledger_query Ledger query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersByQuery: function (ledger_query, _limit, _offset, _expand, options) {
            var localVarFetchArgs = (0, exports.AffiliateApiFetchParamCreator)(configuration).getLedgersByQuery(ledger_query, _limit, _offset, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.AffiliateApiFp = AffiliateApiFp;
/**
 * AffiliateApi - factory interface
 * @export
 */
var AffiliateApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve clicks
         * @param {AffiliateClickQuery} click_query Click query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClicksByQuery: function (click_query, _limit, _offset, _expand, options) {
            return (0, exports.AffiliateApiFp)(configuration).getClicksByQuery(click_query, _limit, _offset, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve ledger entries
         * @param {AffiliateLedgerQuery} ledger_query Ledger query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersByQuery: function (ledger_query, _limit, _offset, _expand, options) {
            return (0, exports.AffiliateApiFp)(configuration).getLedgersByQuery(ledger_query, _limit, _offset, _expand, options)(fetch, basePath);
        },
    };
};
exports.AffiliateApiFactory = AffiliateApiFactory;
/**
 * AffiliateApi - object-oriented interface
 * @export
 * @class AffiliateApi
 * @extends {BaseAPI}
 */
var AffiliateApi = /** @class */ (function (_super) {
    __extends(AffiliateApi, _super);
    function AffiliateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve clicks
     * @param {AffiliateClickQuery} click_query Click query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    AffiliateApi.prototype.getClicksByQuery = function (click_query, _limit, _offset, _expand, options) {
        return (0, exports.AffiliateApiFp)(this.configuration).getClicksByQuery(click_query, _limit, _offset, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve ledger entries
     * @param {AffiliateLedgerQuery} ledger_query Ledger query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_expand] The object expansion to perform on the result.  Only option is link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    AffiliateApi.prototype.getLedgersByQuery = function (ledger_query, _limit, _offset, _expand, options) {
        return (0, exports.AffiliateApiFp)(this.configuration).getLedgersByQuery(ledger_query, _limit, _offset, _expand, options)(this.fetch, this.basePath);
    };
    return AffiliateApi;
}(BaseAPI));
exports.AffiliateApi = AffiliateApi;
/**
 * AutoOrderApi - fetch parameter creator
 * @export
 */
var AutoOrderApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Consolidates mutliple auto orders on the UltraCart account.
         * @summary Consolidates multiple auto orders
         * @param {AutoOrderConsolidate} auto_order_consolidate Auto orders to consolidate
         * @param {number} auto_order_oid The auto order oid to consolidate into.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consolidateAutoOrders: function (auto_order_consolidate, auto_order_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order_consolidate' is not null or undefined
            if (auto_order_consolidate === null || auto_order_consolidate === undefined) {
                throw new RequiredError('auto_order_consolidate', 'Required parameter auto_order_consolidate was null or undefined when calling consolidateAutoOrders.');
            }
            // verify required parameter 'auto_order_oid' is not null or undefined
            if (auto_order_oid === null || auto_order_oid === undefined) {
                throw new RequiredError('auto_order_oid', 'Required parameter auto_order_oid was null or undefined when calling consolidateAutoOrders.');
            }
            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}/consolidate"
                .replace("{".concat("auto_order_oid", "}"), encodeURIComponent(String(auto_order_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrderConsolidate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(auto_order_consolidate || {}) : (auto_order_consolidate || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment.
         * @summary Establish an auto order by referencing a regular order id
         * @param {string} reference_order_id The order id to attach this auto order to
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishAutoOrderByReferenceOrderId: function (reference_order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'reference_order_id' is not null or undefined
            if (reference_order_id === null || reference_order_id === undefined) {
                throw new RequiredError('reference_order_id', 'Required parameter reference_order_id was null or undefined when calling establishAutoOrderByReferenceOrderId.');
            }
            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}"
                .replace("{".concat("reference_order_id", "}"), encodeURIComponent(String(reference_order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single auto order using the specified auto order oid.
         * @summary Retrieve an auto order by oid
         * @param {number} auto_order_oid The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrder: function (auto_order_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order_oid' is not null or undefined
            if (auto_order_oid === null || auto_order_oid === undefined) {
                throw new RequiredError('auto_order_oid', 'Required parameter auto_order_oid was null or undefined when calling getAutoOrder.');
            }
            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}"
                .replace("{".concat("auto_order_oid", "}"), encodeURIComponent(String(auto_order_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order by code
         * @param {string} auto_order_code The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByCode: function (auto_order_code, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order_code' is not null or undefined
            if (auto_order_code === null || auto_order_code === undefined) {
                throw new RequiredError('auto_order_code', 'Required parameter auto_order_code was null or undefined when calling getAutoOrderByCode.');
            }
            var localVarPath = "/auto_order/auto_orders/code/{auto_order_code}"
                .replace("{".concat("auto_order_code", "}"), encodeURIComponent(String(auto_order_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order by order id
         * @param {string} reference_order_id The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByReferenceOrderId: function (reference_order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'reference_order_id' is not null or undefined
            if (reference_order_id === null || reference_order_id === undefined) {
                throw new RequiredError('reference_order_id', 'Required parameter reference_order_id was null or undefined when calling getAutoOrderByReferenceOrderId.');
            }
            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}"
                .replace("{".concat("reference_order_id", "}"), encodeURIComponent(String(reference_order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {string} [auto_order_code] Auto order code
         * @param {string} [original_order_id] Original order id
         * @param {string} [first_name] First name
         * @param {string} [last_name] Last name
         * @param {string} [company] Company
         * @param {string} [city] City
         * @param {string} [state] State
         * @param {string} [postal_code] Postal code
         * @param {string} [country_code] Country code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [original_order_date_begin] Original order date begin
         * @param {string} [original_order_date_end] Original order date end
         * @param {string} [next_shipment_date_begin] Next shipment date begin
         * @param {string} [next_shipment_date_end] Next shipment date end
         * @param {string} [card_type] Card type
         * @param {string} [item_id] Item ID
         * @param {string} [status] Status
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch auto orders that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrders: function (auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/auto_order/auto_orders";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (auto_order_code !== undefined) {
                localVarQueryParameter['auto_order_code'] = auto_order_code;
            }
            if (original_order_id !== undefined) {
                localVarQueryParameter['original_order_id'] = original_order_id;
            }
            if (first_name !== undefined) {
                localVarQueryParameter['first_name'] = first_name;
            }
            if (last_name !== undefined) {
                localVarQueryParameter['last_name'] = last_name;
            }
            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }
            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (postal_code !== undefined) {
                localVarQueryParameter['postal_code'] = postal_code;
            }
            if (country_code !== undefined) {
                localVarQueryParameter['country_code'] = country_code;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (original_order_date_begin !== undefined) {
                localVarQueryParameter['original_order_date_begin'] = original_order_date_begin;
            }
            if (original_order_date_end !== undefined) {
                localVarQueryParameter['original_order_date_end'] = original_order_date_end;
            }
            if (next_shipment_date_begin !== undefined) {
                localVarQueryParameter['next_shipment_date_begin'] = next_shipment_date_begin;
            }
            if (next_shipment_date_end !== undefined) {
                localVarQueryParameter['next_shipment_date_end'] = next_shipment_date_end;
            }
            if (card_type !== undefined) {
                localVarQueryParameter['card_type'] = card_type;
            }
            if (item_id !== undefined) {
                localVarQueryParameter['item_id'] = item_id;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve auto order batch
         * @param {AutoOrderQueryBatch} auto_order_batch Auto order batch
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersBatch: function (auto_order_batch, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order_batch' is not null or undefined
            if (auto_order_batch === null || auto_order_batch === undefined) {
                throw new RequiredError('auto_order_batch', 'Required parameter auto_order_batch was null or undefined when calling getAutoOrdersBatch.');
            }
            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrderQueryBatch" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(auto_order_batch || {}) : (auto_order_batch || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders by query
         * @param {AutoOrderQuery} auto_order_query Auto order query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersByQuery: function (auto_order_query, _limit, _offset, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order_query' is not null or undefined
            if (auto_order_query === null || auto_order_query === undefined) {
                throw new RequiredError('auto_order_query', 'Required parameter auto_order_query was null or undefined when calling getAutoOrdersByQuery.');
            }
            var localVarPath = "/auto_order/auto_orders/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrderQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(auto_order_query || {}) : (auto_order_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely pause an auto order
         * @summary Pause auto order
         * @param {AutoOrder} auto_order Auto order to pause
         * @param {number} auto_order_oid The auto order oid to pause.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAutoOrder: function (auto_order, auto_order_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order' is not null or undefined
            if (auto_order === null || auto_order === undefined) {
                throw new RequiredError('auto_order', 'Required parameter auto_order was null or undefined when calling pauseAutoOrder.');
            }
            // verify required parameter 'auto_order_oid' is not null or undefined
            if (auto_order_oid === null || auto_order_oid === undefined) {
                throw new RequiredError('auto_order_oid', 'Required parameter auto_order_oid was null or undefined when calling pauseAutoOrder.');
            }
            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}/pause"
                .replace("{".concat("auto_order_oid", "}"), encodeURIComponent(String(auto_order_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(auto_order || {}) : (auto_order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an auto order on the UltraCart account.
         * @summary Update an auto order
         * @param {AutoOrder} auto_order Auto order to update
         * @param {number} auto_order_oid The auto order oid to update.
         * @param {string} [validate_original_order] Validate original order before updating
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrder: function (auto_order, auto_order_oid, validate_original_order, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_order' is not null or undefined
            if (auto_order === null || auto_order === undefined) {
                throw new RequiredError('auto_order', 'Required parameter auto_order was null or undefined when calling updateAutoOrder.');
            }
            // verify required parameter 'auto_order_oid' is not null or undefined
            if (auto_order_oid === null || auto_order_oid === undefined) {
                throw new RequiredError('auto_order_oid', 'Required parameter auto_order_oid was null or undefined when calling updateAutoOrder.');
            }
            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}"
                .replace("{".concat("auto_order_oid", "}"), encodeURIComponent(String(auto_order_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (validate_original_order !== undefined) {
                localVarQueryParameter['validate_original_order'] = validate_original_order;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(auto_order || {}) : (auto_order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple auto orders on the UltraCart account.
         * @summary Update multiple auto orders
         * @param {AutoOrdersRequest} auto_orders_request Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrdersBatch: function (auto_orders_request, _expand, _placeholders, _async, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'auto_orders_request' is not null or undefined
            if (auto_orders_request === null || auto_orders_request === undefined) {
                throw new RequiredError('auto_orders_request', 'Required parameter auto_orders_request was null or undefined when calling updateAutoOrdersBatch.');
            }
            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            if (_async !== undefined) {
                localVarQueryParameter['_async'] = _async;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrdersRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(auto_orders_request || {}) : (auto_orders_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AutoOrderApiFetchParamCreator = AutoOrderApiFetchParamCreator;
/**
 * AutoOrderApi - functional programming interface
 * @export
 */
var AutoOrderApiFp = function (configuration) {
    return {
        /**
         * Consolidates mutliple auto orders on the UltraCart account.
         * @summary Consolidates multiple auto orders
         * @param {AutoOrderConsolidate} auto_order_consolidate Auto orders to consolidate
         * @param {number} auto_order_oid The auto order oid to consolidate into.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consolidateAutoOrders: function (auto_order_consolidate, auto_order_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).consolidateAutoOrders(auto_order_consolidate, auto_order_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment.
         * @summary Establish an auto order by referencing a regular order id
         * @param {string} reference_order_id The order id to attach this auto order to
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishAutoOrderByReferenceOrderId: function (reference_order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).establishAutoOrderByReferenceOrderId(reference_order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single auto order using the specified auto order oid.
         * @summary Retrieve an auto order by oid
         * @param {number} auto_order_oid The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrder: function (auto_order_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).getAutoOrder(auto_order_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order by code
         * @param {string} auto_order_code The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByCode: function (auto_order_code, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).getAutoOrderByCode(auto_order_code, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order by order id
         * @param {string} reference_order_id The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByReferenceOrderId: function (reference_order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).getAutoOrderByReferenceOrderId(reference_order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {string} [auto_order_code] Auto order code
         * @param {string} [original_order_id] Original order id
         * @param {string} [first_name] First name
         * @param {string} [last_name] Last name
         * @param {string} [company] Company
         * @param {string} [city] City
         * @param {string} [state] State
         * @param {string} [postal_code] Postal code
         * @param {string} [country_code] Country code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [original_order_date_begin] Original order date begin
         * @param {string} [original_order_date_end] Original order date end
         * @param {string} [next_shipment_date_begin] Next shipment date begin
         * @param {string} [next_shipment_date_end] Next shipment date end
         * @param {string} [card_type] Card type
         * @param {string} [item_id] Item ID
         * @param {string} [status] Status
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch auto orders that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrders: function (auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).getAutoOrders(auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve auto order batch
         * @param {AutoOrderQueryBatch} auto_order_batch Auto order batch
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersBatch: function (auto_order_batch, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).getAutoOrdersBatch(auto_order_batch, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders by query
         * @param {AutoOrderQuery} auto_order_query Auto order query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersByQuery: function (auto_order_query, _limit, _offset, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).getAutoOrdersByQuery(auto_order_query, _limit, _offset, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Completely pause an auto order
         * @summary Pause auto order
         * @param {AutoOrder} auto_order Auto order to pause
         * @param {number} auto_order_oid The auto order oid to pause.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAutoOrder: function (auto_order, auto_order_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).pauseAutoOrder(auto_order, auto_order_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an auto order on the UltraCart account.
         * @summary Update an auto order
         * @param {AutoOrder} auto_order Auto order to update
         * @param {number} auto_order_oid The auto order oid to update.
         * @param {string} [validate_original_order] Validate original order before updating
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrder: function (auto_order, auto_order_oid, validate_original_order, _expand, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).updateAutoOrder(auto_order, auto_order_oid, validate_original_order, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update multiple auto orders on the UltraCart account.
         * @summary Update multiple auto orders
         * @param {AutoOrdersRequest} auto_orders_request Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrdersBatch: function (auto_orders_request, _expand, _placeholders, _async, options) {
            var localVarFetchArgs = (0, exports.AutoOrderApiFetchParamCreator)(configuration).updateAutoOrdersBatch(auto_orders_request, _expand, _placeholders, _async, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.AutoOrderApiFp = AutoOrderApiFp;
/**
 * AutoOrderApi - factory interface
 * @export
 */
var AutoOrderApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Consolidates mutliple auto orders on the UltraCart account.
         * @summary Consolidates multiple auto orders
         * @param {AutoOrderConsolidate} auto_order_consolidate Auto orders to consolidate
         * @param {number} auto_order_oid The auto order oid to consolidate into.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consolidateAutoOrders: function (auto_order_consolidate, auto_order_oid, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).consolidateAutoOrders(auto_order_consolidate, auto_order_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment.
         * @summary Establish an auto order by referencing a regular order id
         * @param {string} reference_order_id The order id to attach this auto order to
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishAutoOrderByReferenceOrderId: function (reference_order_id, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).establishAutoOrderByReferenceOrderId(reference_order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single auto order using the specified auto order oid.
         * @summary Retrieve an auto order by oid
         * @param {number} auto_order_oid The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrder: function (auto_order_oid, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).getAutoOrder(auto_order_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order by code
         * @param {string} auto_order_code The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByCode: function (auto_order_code, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).getAutoOrderByCode(auto_order_code, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order by order id
         * @param {string} reference_order_id The auto order oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByReferenceOrderId: function (reference_order_id, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).getAutoOrderByReferenceOrderId(reference_order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {string} [auto_order_code] Auto order code
         * @param {string} [original_order_id] Original order id
         * @param {string} [first_name] First name
         * @param {string} [last_name] Last name
         * @param {string} [company] Company
         * @param {string} [city] City
         * @param {string} [state] State
         * @param {string} [postal_code] Postal code
         * @param {string} [country_code] Country code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [original_order_date_begin] Original order date begin
         * @param {string} [original_order_date_end] Original order date end
         * @param {string} [next_shipment_date_begin] Next shipment date begin
         * @param {string} [next_shipment_date_end] Next shipment date end
         * @param {string} [card_type] Card type
         * @param {string} [item_id] Item ID
         * @param {string} [status] Status
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch auto orders that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrders: function (auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).getAutoOrders(auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve auto order batch
         * @param {AutoOrderQueryBatch} auto_order_batch Auto order batch
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersBatch: function (auto_order_batch, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).getAutoOrdersBatch(auto_order_batch, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders by query
         * @param {AutoOrderQuery} auto_order_query Auto order query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersByQuery: function (auto_order_query, _limit, _offset, _sort, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).getAutoOrdersByQuery(auto_order_query, _limit, _offset, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Completely pause an auto order
         * @summary Pause auto order
         * @param {AutoOrder} auto_order Auto order to pause
         * @param {number} auto_order_oid The auto order oid to pause.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAutoOrder: function (auto_order, auto_order_oid, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).pauseAutoOrder(auto_order, auto_order_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Update an auto order on the UltraCart account.
         * @summary Update an auto order
         * @param {AutoOrder} auto_order Auto order to update
         * @param {number} auto_order_oid The auto order oid to update.
         * @param {string} [validate_original_order] Validate original order before updating
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrder: function (auto_order, auto_order_oid, validate_original_order, _expand, options) {
            return (0, exports.AutoOrderApiFp)(configuration).updateAutoOrder(auto_order, auto_order_oid, validate_original_order, _expand, options)(fetch, basePath);
        },
        /**
         * Update multiple auto orders on the UltraCart account.
         * @summary Update multiple auto orders
         * @param {AutoOrdersRequest} auto_orders_request Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrdersBatch: function (auto_orders_request, _expand, _placeholders, _async, options) {
            return (0, exports.AutoOrderApiFp)(configuration).updateAutoOrdersBatch(auto_orders_request, _expand, _placeholders, _async, options)(fetch, basePath);
        },
    };
};
exports.AutoOrderApiFactory = AutoOrderApiFactory;
/**
 * AutoOrderApi - object-oriented interface
 * @export
 * @class AutoOrderApi
 * @extends {BaseAPI}
 */
var AutoOrderApi = /** @class */ (function (_super) {
    __extends(AutoOrderApi, _super);
    function AutoOrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Consolidates mutliple auto orders on the UltraCart account.
     * @summary Consolidates multiple auto orders
     * @param {AutoOrderConsolidate} auto_order_consolidate Auto orders to consolidate
     * @param {number} auto_order_oid The auto order oid to consolidate into.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.consolidateAutoOrders = function (auto_order_consolidate, auto_order_oid, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).consolidateAutoOrders(auto_order_consolidate, auto_order_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Establish an auto order by referencing a regular order id.  The result will be an auto order without any items.  You should add the items and perform an update call.  Orders must be less than 60 days old and use a credit card payment.
     * @summary Establish an auto order by referencing a regular order id
     * @param {string} reference_order_id The order id to attach this auto order to
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.establishAutoOrderByReferenceOrderId = function (reference_order_id, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).establishAutoOrderByReferenceOrderId(reference_order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single auto order using the specified auto order oid.
     * @summary Retrieve an auto order by oid
     * @param {number} auto_order_oid The auto order oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrder = function (auto_order_oid, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).getAutoOrder(auto_order_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single auto order using the specified reference (original) order id.
     * @summary Retrieve an auto order by code
     * @param {string} auto_order_code The auto order oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrderByCode = function (auto_order_code, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).getAutoOrderByCode(auto_order_code, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single auto order using the specified reference (original) order id.
     * @summary Retrieve an auto order by order id
     * @param {string} reference_order_id The auto order oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrderByReferenceOrderId = function (reference_order_id, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).getAutoOrderByReferenceOrderId(reference_order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve auto orders
     * @param {string} [auto_order_code] Auto order code
     * @param {string} [original_order_id] Original order id
     * @param {string} [first_name] First name
     * @param {string} [last_name] Last name
     * @param {string} [company] Company
     * @param {string} [city] City
     * @param {string} [state] State
     * @param {string} [postal_code] Postal code
     * @param {string} [country_code] Country code (ISO-3166 two letter)
     * @param {string} [phone] Phone
     * @param {string} [email] Email
     * @param {string} [original_order_date_begin] Original order date begin
     * @param {string} [original_order_date_end] Original order date end
     * @param {string} [next_shipment_date_begin] Next shipment date begin
     * @param {string} [next_shipment_date_end] Next shipment date end
     * @param {string} [card_type] Card type
     * @param {string} [item_id] Item ID
     * @param {string} [status] Status
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch auto orders that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrders = function (auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).getAutoOrders(auto_order_code, original_order_id, first_name, last_name, company, city, state, postal_code, country_code, phone, email, original_order_date_begin, original_order_date_end, next_shipment_date_begin, next_shipment_date_end, card_type, item_id, status, _limit, _offset, _since, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
     * @summary Retrieve auto order batch
     * @param {AutoOrderQueryBatch} auto_order_batch Auto order batch
     * @param {string} [_expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrdersBatch = function (auto_order_batch, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).getAutoOrdersBatch(auto_order_batch, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve auto orders by query
     * @param {AutoOrderQuery} auto_order_query Auto order query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrdersByQuery = function (auto_order_query, _limit, _offset, _sort, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).getAutoOrdersByQuery(auto_order_query, _limit, _offset, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Completely pause an auto order
     * @summary Pause auto order
     * @param {AutoOrder} auto_order Auto order to pause
     * @param {number} auto_order_oid The auto order oid to pause.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.pauseAutoOrder = function (auto_order, auto_order_oid, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).pauseAutoOrder(auto_order, auto_order_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update an auto order on the UltraCart account.
     * @summary Update an auto order
     * @param {AutoOrder} auto_order Auto order to update
     * @param {number} auto_order_oid The auto order oid to update.
     * @param {string} [validate_original_order] Validate original order before updating
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.updateAutoOrder = function (auto_order, auto_order_oid, validate_original_order, _expand, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).updateAutoOrder(auto_order, auto_order_oid, validate_original_order, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update multiple auto orders on the UltraCart account.
     * @summary Update multiple auto orders
     * @param {AutoOrdersRequest} auto_orders_request Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [_async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.updateAutoOrdersBatch = function (auto_orders_request, _expand, _placeholders, _async, options) {
        return (0, exports.AutoOrderApiFp)(this.configuration).updateAutoOrdersBatch(auto_orders_request, _expand, _placeholders, _async, options)(this.fetch, this.basePath);
    };
    return AutoOrderApi;
}(BaseAPI));
exports.AutoOrderApi = AutoOrderApi;
/**
 * ChannelPartnerApi - fetch parameter creator
 * @export
 */
var ChannelPartnerApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Cancel channel partner order by channel partner order id
         * @summary Cancel channel partner order by channel partner order id
         * @param {string} order_id The channel partner order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderByChannelPartnerOrderId: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling cancelOrderByChannelPartnerOrderId.');
            }
            var localVarPath = "/channel_partner/cancel/by_channel_partner_order_id/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel channel partner order by UltraCart order id
         * @summary Cancel channel partner order by UltraCart order id
         * @param {string} order_id The UltraCart order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderByUltraCartOrderId: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling cancelOrderByUltraCartOrderId.');
            }
            var localVarPath = "/channel_partner/cancel/by_ultracart_order_id/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a ship to preference record for the channel partner.
         * @summary Delete a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_oid' is not null or undefined
            if (channel_partner_oid === null || channel_partner_oid === undefined) {
                throw new RequiredError('channel_partner_oid', 'Required parameter channel_partner_oid was null or undefined when calling deleteChannelPartnerShipToPreference.');
            }
            // verify required parameter 'channel_partner_ship_to_preference_oid' is not null or undefined
            if (channel_partner_ship_to_preference_oid === null || channel_partner_ship_to_preference_oid === undefined) {
                throw new RequiredError('channel_partner_ship_to_preference_oid', 'Required parameter channel_partner_ship_to_preference_oid was null or undefined when calling deleteChannelPartnerShipToPreference.');
            }
            var localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}"
                .replace("{".concat("channel_partner_oid", "}"), encodeURIComponent(String(channel_partner_oid)))
                .replace("{".concat("channel_partner_ship_to_preference_oid", "}"), encodeURIComponent(String(channel_partner_ship_to_preference_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Estimate shipping for order from a channel partner.
         * @summary Estimate shipping for channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order needing shipping estimate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateShippingForChannelPartnerOrder: function (channel_partner_order, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_order' is not null or undefined
            if (channel_partner_order === null || channel_partner_order === undefined) {
                throw new RequiredError('channel_partner_order', 'Required parameter channel_partner_order was null or undefined when calling estimateShippingForChannelPartnerOrder.');
            }
            var localVarPath = "/channel_partner/estimate_shipping";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChannelPartnerOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(channel_partner_order || {}) : (channel_partner_order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Estimate tax for order from a channel partner.
         * @summary Estimate tax for channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order needing tax estimate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateTaxForChannelPartnerOrder: function (channel_partner_order, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_order' is not null or undefined
            if (channel_partner_order === null || channel_partner_order === undefined) {
                throw new RequiredError('channel_partner_order', 'Required parameter channel_partner_order was null or undefined when calling estimateTaxForChannelPartnerOrder.');
            }
            var localVarPath = "/channel_partner/estimate_tax";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChannelPartnerOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(channel_partner_order || {}) : (channel_partner_order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved.
         * @summary Retrieve a channel partner order
         * @param {string} order_id The order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerOrder: function (order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling getChannelPartnerOrder.');
            }
            var localVarPath = "/channel_partner/orders/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved.
         * @summary Retrieve a channel partner order by the channel partner order id
         * @param {string} order_id The channel partner order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerOrderByChannelPartnerOrderId: function (order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling getChannelPartnerOrderByChannelPartnerOrderId.');
            }
            var localVarPath = "/channel_partner/orders/by_channel_partner_order_id/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve reject and refund reason codes.
         * @summary Retrieve reject and refund reason codes.
         * @param {number} channel_partner_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerReasonCodes: function (channel_partner_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_oid' is not null or undefined
            if (channel_partner_oid === null || channel_partner_oid === undefined) {
                throw new RequiredError('channel_partner_oid', 'Required parameter channel_partner_oid was null or undefined when calling getChannelPartnerReasonCodes.');
            }
            var localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/reason_codes"
                .replace("{".concat("channel_partner_oid", "}"), encodeURIComponent(String(channel_partner_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the ship to preference associated with the channel partner and the specific id.
         * @summary Retrieve the ship to preference associated with the channel partner and the specific id.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_oid' is not null or undefined
            if (channel_partner_oid === null || channel_partner_oid === undefined) {
                throw new RequiredError('channel_partner_oid', 'Required parameter channel_partner_oid was null or undefined when calling getChannelPartnerShipToPreference.');
            }
            // verify required parameter 'channel_partner_ship_to_preference_oid' is not null or undefined
            if (channel_partner_ship_to_preference_oid === null || channel_partner_ship_to_preference_oid === undefined) {
                throw new RequiredError('channel_partner_ship_to_preference_oid', 'Required parameter channel_partner_ship_to_preference_oid was null or undefined when calling getChannelPartnerShipToPreference.');
            }
            var localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}"
                .replace("{".concat("channel_partner_oid", "}"), encodeURIComponent(String(channel_partner_oid)))
                .replace("{".concat("channel_partner_ship_to_preference_oid", "}"), encodeURIComponent(String(channel_partner_ship_to_preference_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the ship to preferences associated with the channel partner.
         * @summary Retrieve the ship to preferences associated with the channel partner.
         * @param {number} channel_partner_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerShipToPreferences: function (channel_partner_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_oid' is not null or undefined
            if (channel_partner_oid === null || channel_partner_oid === undefined) {
                throw new RequiredError('channel_partner_oid', 'Required parameter channel_partner_oid was null or undefined when calling getChannelPartnerShipToPreferences.');
            }
            var localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences"
                .replace("{".concat("channel_partner_oid", "}"), encodeURIComponent(String(channel_partner_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the channel partners configured on the account.
         * @summary Retrieve the channel partners configured on the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartners: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/channel_partner/channel_partners";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert order from a channel partner.
         * @summary Insert channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importChannelPartnerOrder: function (channel_partner_order, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_order' is not null or undefined
            if (channel_partner_order === null || channel_partner_order === undefined) {
                throw new RequiredError('channel_partner_order', 'Required parameter channel_partner_order was null or undefined when calling importChannelPartnerOrder.');
            }
            var localVarPath = "/channel_partner/import";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChannelPartnerOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(channel_partner_order || {}) : (channel_partner_order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a ship to preference record for the channel partner.
         * @summary Insert a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChannelPartnerShipToPreference: function (channel_partner_oid, ship_to_preference, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_oid' is not null or undefined
            if (channel_partner_oid === null || channel_partner_oid === undefined) {
                throw new RequiredError('channel_partner_oid', 'Required parameter channel_partner_oid was null or undefined when calling insertChannelPartnerShipToPreference.');
            }
            // verify required parameter 'ship_to_preference' is not null or undefined
            if (ship_to_preference === null || ship_to_preference === undefined) {
                throw new RequiredError('ship_to_preference', 'Required parameter ship_to_preference was null or undefined when calling insertChannelPartnerShipToPreference.');
            }
            var localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences"
                .replace("{".concat("channel_partner_oid", "}"), encodeURIComponent(String(channel_partner_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChannelPartnerShipToPreference" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(ship_to_preference || {}) : (ship_to_preference || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
         * @summary Refund a channel partner order
         * @param {Order} order Order to refund
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundChannelPartnerOrder: function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling refundChannelPartnerOrder.');
            }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling refundChannelPartnerOrder.');
            }
            var localVarPath = "/channel_partner/orders/{order_id}/refund"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (reject_after_refund !== undefined) {
                localVarQueryParameter['reject_after_refund'] = reject_after_refund;
            }
            if (skip_customer_notification !== undefined) {
                localVarQueryParameter['skip_customer_notification'] = skip_customer_notification;
            }
            if (auto_order_cancel !== undefined) {
                localVarQueryParameter['auto_order_cancel'] = auto_order_cancel;
            }
            if (manual_refund !== undefined) {
                localVarQueryParameter['manual_refund'] = manual_refund;
            }
            if (reverse_affiliate_transactions !== undefined) {
                localVarQueryParameter['reverse_affiliate_transactions'] = reverse_affiliate_transactions;
            }
            if (issue_store_credit !== undefined) {
                localVarQueryParameter['issue_store_credit'] = issue_store_credit;
            }
            if (auto_order_cancel_reason !== undefined) {
                localVarQueryParameter['auto_order_cancel_reason'] = auto_order_cancel_reason;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a ship to preference record for the channel partner.
         * @summary Update a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channel_partner_oid' is not null or undefined
            if (channel_partner_oid === null || channel_partner_oid === undefined) {
                throw new RequiredError('channel_partner_oid', 'Required parameter channel_partner_oid was null or undefined when calling updateChannelPartnerShipToPreference.');
            }
            // verify required parameter 'channel_partner_ship_to_preference_oid' is not null or undefined
            if (channel_partner_ship_to_preference_oid === null || channel_partner_ship_to_preference_oid === undefined) {
                throw new RequiredError('channel_partner_ship_to_preference_oid', 'Required parameter channel_partner_ship_to_preference_oid was null or undefined when calling updateChannelPartnerShipToPreference.');
            }
            // verify required parameter 'ship_to_preference' is not null or undefined
            if (ship_to_preference === null || ship_to_preference === undefined) {
                throw new RequiredError('ship_to_preference', 'Required parameter ship_to_preference was null or undefined when calling updateChannelPartnerShipToPreference.');
            }
            var localVarPath = "/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}"
                .replace("{".concat("channel_partner_oid", "}"), encodeURIComponent(String(channel_partner_oid)))
                .replace("{".concat("channel_partner_ship_to_preference_oid", "}"), encodeURIComponent(String(channel_partner_ship_to_preference_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["channel_partner_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChannelPartnerShipToPreference" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(ship_to_preference || {}) : (ship_to_preference || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChannelPartnerApiFetchParamCreator = ChannelPartnerApiFetchParamCreator;
/**
 * ChannelPartnerApi - functional programming interface
 * @export
 */
var ChannelPartnerApiFp = function (configuration) {
    return {
        /**
         * Cancel channel partner order by channel partner order id
         * @summary Cancel channel partner order by channel partner order id
         * @param {string} order_id The channel partner order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderByChannelPartnerOrderId: function (order_id, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).cancelOrderByChannelPartnerOrderId(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Cancel channel partner order by UltraCart order id
         * @summary Cancel channel partner order by UltraCart order id
         * @param {string} order_id The UltraCart order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderByUltraCartOrderId: function (order_id, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).cancelOrderByUltraCartOrderId(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a ship to preference record for the channel partner.
         * @summary Delete a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).deleteChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Estimate shipping for order from a channel partner.
         * @summary Estimate shipping for channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order needing shipping estimate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateShippingForChannelPartnerOrder: function (channel_partner_order, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).estimateShippingForChannelPartnerOrder(channel_partner_order, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Estimate tax for order from a channel partner.
         * @summary Estimate tax for channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order needing tax estimate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateTaxForChannelPartnerOrder: function (channel_partner_order, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).estimateTaxForChannelPartnerOrder(channel_partner_order, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved.
         * @summary Retrieve a channel partner order
         * @param {string} order_id The order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerOrder: function (order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).getChannelPartnerOrder(order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved.
         * @summary Retrieve a channel partner order by the channel partner order id
         * @param {string} order_id The channel partner order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerOrderByChannelPartnerOrderId: function (order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).getChannelPartnerOrderByChannelPartnerOrderId(order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve reject and refund reason codes.
         * @summary Retrieve reject and refund reason codes.
         * @param {number} channel_partner_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerReasonCodes: function (channel_partner_oid, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).getChannelPartnerReasonCodes(channel_partner_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the ship to preference associated with the channel partner and the specific id.
         * @summary Retrieve the ship to preference associated with the channel partner and the specific id.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).getChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the ship to preferences associated with the channel partner.
         * @summary Retrieve the ship to preferences associated with the channel partner.
         * @param {number} channel_partner_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerShipToPreferences: function (channel_partner_oid, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).getChannelPartnerShipToPreferences(channel_partner_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the channel partners configured on the account.
         * @summary Retrieve the channel partners configured on the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartners: function (options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).getChannelPartners(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert order from a channel partner.
         * @summary Insert channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importChannelPartnerOrder: function (channel_partner_order, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).importChannelPartnerOrder(channel_partner_order, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a ship to preference record for the channel partner.
         * @summary Insert a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChannelPartnerShipToPreference: function (channel_partner_oid, ship_to_preference, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).insertChannelPartnerShipToPreference(channel_partner_oid, ship_to_preference, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
         * @summary Refund a channel partner order
         * @param {Order} order Order to refund
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundChannelPartnerOrder: function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).refundChannelPartnerOrder(order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a ship to preference record for the channel partner.
         * @summary Update a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options) {
            var localVarFetchArgs = (0, exports.ChannelPartnerApiFetchParamCreator)(configuration).updateChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ChannelPartnerApiFp = ChannelPartnerApiFp;
/**
 * ChannelPartnerApi - factory interface
 * @export
 */
var ChannelPartnerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Cancel channel partner order by channel partner order id
         * @summary Cancel channel partner order by channel partner order id
         * @param {string} order_id The channel partner order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderByChannelPartnerOrderId: function (order_id, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).cancelOrderByChannelPartnerOrderId(order_id, options)(fetch, basePath);
        },
        /**
         * Cancel channel partner order by UltraCart order id
         * @summary Cancel channel partner order by UltraCart order id
         * @param {string} order_id The UltraCart order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderByUltraCartOrderId: function (order_id, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).cancelOrderByUltraCartOrderId(order_id, options)(fetch, basePath);
        },
        /**
         * Delete a ship to preference record for the channel partner.
         * @summary Delete a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).deleteChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, options)(fetch, basePath);
        },
        /**
         * Estimate shipping for order from a channel partner.
         * @summary Estimate shipping for channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order needing shipping estimate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateShippingForChannelPartnerOrder: function (channel_partner_order, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).estimateShippingForChannelPartnerOrder(channel_partner_order, options)(fetch, basePath);
        },
        /**
         * Estimate tax for order from a channel partner.
         * @summary Estimate tax for channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order needing tax estimate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateTaxForChannelPartnerOrder: function (channel_partner_order, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).estimateTaxForChannelPartnerOrder(channel_partner_order, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved.
         * @summary Retrieve a channel partner order
         * @param {string} order_id The order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerOrder: function (order_id, _expand, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).getChannelPartnerOrder(order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved.
         * @summary Retrieve a channel partner order by the channel partner order id
         * @param {string} order_id The channel partner order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerOrderByChannelPartnerOrderId: function (order_id, _expand, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).getChannelPartnerOrderByChannelPartnerOrderId(order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieve reject and refund reason codes.
         * @summary Retrieve reject and refund reason codes.
         * @param {number} channel_partner_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerReasonCodes: function (channel_partner_oid, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).getChannelPartnerReasonCodes(channel_partner_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve the ship to preference associated with the channel partner and the specific id.
         * @summary Retrieve the ship to preference associated with the channel partner and the specific id.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).getChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve the ship to preferences associated with the channel partner.
         * @summary Retrieve the ship to preferences associated with the channel partner.
         * @param {number} channel_partner_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartnerShipToPreferences: function (channel_partner_oid, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).getChannelPartnerShipToPreferences(channel_partner_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve the channel partners configured on the account.
         * @summary Retrieve the channel partners configured on the account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelPartners: function (options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).getChannelPartners(options)(fetch, basePath);
        },
        /**
         * Insert order from a channel partner.
         * @summary Insert channel partner order
         * @param {ChannelPartnerOrder} channel_partner_order Order to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importChannelPartnerOrder: function (channel_partner_order, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).importChannelPartnerOrder(channel_partner_order, options)(fetch, basePath);
        },
        /**
         * Insert a ship to preference record for the channel partner.
         * @summary Insert a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChannelPartnerShipToPreference: function (channel_partner_oid, ship_to_preference, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).insertChannelPartnerShipToPreference(channel_partner_oid, ship_to_preference, options)(fetch, basePath);
        },
        /**
         * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
         * @summary Refund a channel partner order
         * @param {Order} order Order to refund
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundChannelPartnerOrder: function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).refundChannelPartnerOrder(order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options)(fetch, basePath);
        },
        /**
         * Update a ship to preference record for the channel partner.
         * @summary Update a ship to preference record for the channel partner.
         * @param {number} channel_partner_oid
         * @param {number} channel_partner_ship_to_preference_oid
         * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelPartnerShipToPreference: function (channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options) {
            return (0, exports.ChannelPartnerApiFp)(configuration).updateChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options)(fetch, basePath);
        },
    };
};
exports.ChannelPartnerApiFactory = ChannelPartnerApiFactory;
/**
 * ChannelPartnerApi - object-oriented interface
 * @export
 * @class ChannelPartnerApi
 * @extends {BaseAPI}
 */
var ChannelPartnerApi = /** @class */ (function (_super) {
    __extends(ChannelPartnerApi, _super);
    function ChannelPartnerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Cancel channel partner order by channel partner order id
     * @summary Cancel channel partner order by channel partner order id
     * @param {string} order_id The channel partner order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.cancelOrderByChannelPartnerOrderId = function (order_id, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).cancelOrderByChannelPartnerOrderId(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Cancel channel partner order by UltraCart order id
     * @summary Cancel channel partner order by UltraCart order id
     * @param {string} order_id The UltraCart order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.cancelOrderByUltraCartOrderId = function (order_id, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).cancelOrderByUltraCartOrderId(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a ship to preference record for the channel partner.
     * @summary Delete a ship to preference record for the channel partner.
     * @param {number} channel_partner_oid
     * @param {number} channel_partner_ship_to_preference_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.deleteChannelPartnerShipToPreference = function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).deleteChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Estimate shipping for order from a channel partner.
     * @summary Estimate shipping for channel partner order
     * @param {ChannelPartnerOrder} channel_partner_order Order needing shipping estimate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.estimateShippingForChannelPartnerOrder = function (channel_partner_order, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).estimateShippingForChannelPartnerOrder(channel_partner_order, options)(this.fetch, this.basePath);
    };
    /**
     * Estimate tax for order from a channel partner.
     * @summary Estimate tax for channel partner order
     * @param {ChannelPartnerOrder} channel_partner_order Order needing tax estimate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.estimateTaxForChannelPartnerOrder = function (channel_partner_order, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).estimateTaxForChannelPartnerOrder(channel_partner_order, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved.
     * @summary Retrieve a channel partner order
     * @param {string} order_id The order id to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.getChannelPartnerOrder = function (order_id, _expand, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).getChannelPartnerOrder(order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved.
     * @summary Retrieve a channel partner order by the channel partner order id
     * @param {string} order_id The channel partner order id to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.getChannelPartnerOrderByChannelPartnerOrderId = function (order_id, _expand, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).getChannelPartnerOrderByChannelPartnerOrderId(order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve reject and refund reason codes.
     * @summary Retrieve reject and refund reason codes.
     * @param {number} channel_partner_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.getChannelPartnerReasonCodes = function (channel_partner_oid, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).getChannelPartnerReasonCodes(channel_partner_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     * @summary Retrieve the ship to preference associated with the channel partner and the specific id.
     * @param {number} channel_partner_oid
     * @param {number} channel_partner_ship_to_preference_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.getChannelPartnerShipToPreference = function (channel_partner_oid, channel_partner_ship_to_preference_oid, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).getChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the ship to preferences associated with the channel partner.
     * @summary Retrieve the ship to preferences associated with the channel partner.
     * @param {number} channel_partner_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.getChannelPartnerShipToPreferences = function (channel_partner_oid, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).getChannelPartnerShipToPreferences(channel_partner_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the channel partners configured on the account.
     * @summary Retrieve the channel partners configured on the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.getChannelPartners = function (options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).getChannelPartners(options)(this.fetch, this.basePath);
    };
    /**
     * Insert order from a channel partner.
     * @summary Insert channel partner order
     * @param {ChannelPartnerOrder} channel_partner_order Order to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.importChannelPartnerOrder = function (channel_partner_order, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).importChannelPartnerOrder(channel_partner_order, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a ship to preference record for the channel partner.
     * @summary Insert a ship to preference record for the channel partner.
     * @param {number} channel_partner_oid
     * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.insertChannelPartnerShipToPreference = function (channel_partner_oid, ship_to_preference, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).insertChannelPartnerShipToPreference(channel_partner_oid, ship_to_preference, options)(this.fetch, this.basePath);
    };
    /**
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
     * @summary Refund a channel partner order
     * @param {Order} order Order to refund
     * @param {string} order_id The order id to refund.
     * @param {boolean} [reject_after_refund] Reject order after refund
     * @param {boolean} [skip_customer_notification] Skip customer email notification
     * @param {boolean} [auto_order_cancel] Cancel associated auto orders
     * @param {boolean} [manual_refund] Consider a manual refund done externally
     * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
     * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
     * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
     * @param {string} [_expand] The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.refundChannelPartnerOrder = function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).refundChannelPartnerOrder(order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update a ship to preference record for the channel partner.
     * @summary Update a ship to preference record for the channel partner.
     * @param {number} channel_partner_oid
     * @param {number} channel_partner_ship_to_preference_oid
     * @param {ChannelPartnerShipToPreference} ship_to_preference Ship to preference to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApi
     */
    ChannelPartnerApi.prototype.updateChannelPartnerShipToPreference = function (channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options) {
        return (0, exports.ChannelPartnerApiFp)(this.configuration).updateChannelPartnerShipToPreference(channel_partner_oid, channel_partner_ship_to_preference_oid, ship_to_preference, options)(this.fetch, this.basePath);
    };
    return ChannelPartnerApi;
}(BaseAPI));
exports.ChannelPartnerApi = ChannelPartnerApi;
/**
 * ChargebackApi - fetch parameter creator
 * @export
 */
var ChargebackApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a chargeback on the UltraCart account.
         * @summary Delete a chargeback
         * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeback: function (chargeback_dispute_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargeback_dispute_oid' is not null or undefined
            if (chargeback_dispute_oid === null || chargeback_dispute_oid === undefined) {
                throw new RequiredError('chargeback_dispute_oid', 'Required parameter chargeback_dispute_oid was null or undefined when calling deleteChargeback.');
            }
            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
                .replace("{".concat("chargeback_dispute_oid", "}"), encodeURIComponent(String(chargeback_dispute_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single chargeback using the specified chargeback dispute oid.
         * @summary Retrieve a chargeback
         * @param {number} chargeback_dispute_oid The chargeback dispute oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDispute: function (chargeback_dispute_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargeback_dispute_oid' is not null or undefined
            if (chargeback_dispute_oid === null || chargeback_dispute_oid === undefined) {
                throw new RequiredError('chargeback_dispute_oid', 'Required parameter chargeback_dispute_oid was null or undefined when calling getChargebackDispute.');
            }
            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
                .replace("{".concat("chargeback_dispute_oid", "}"), encodeURIComponent(String(chargeback_dispute_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve chargebacks
         * @param {string} [order_id] Order Id
         * @param {string} [case_number] Case number
         * @param {string} [status] Status
         * @param {string} [expiration_dts_start] Expiration dts start
         * @param {string} [expiration_dts_end] Expiration dts end
         * @param {string} [chargeback_dts_start] Chargeback dts start
         * @param {string} [chargeback_dts_end] Chargeback dts end
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch chargebacks that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDisputes: function (order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/chargeback/chargebacks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (order_id !== undefined) {
                localVarQueryParameter['order_id'] = order_id;
            }
            if (case_number !== undefined) {
                localVarQueryParameter['case_number'] = case_number;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (expiration_dts_start !== undefined) {
                localVarQueryParameter['expiration_dts_start'] = expiration_dts_start;
            }
            if (expiration_dts_end !== undefined) {
                localVarQueryParameter['expiration_dts_end'] = expiration_dts_end;
            }
            if (chargeback_dts_start !== undefined) {
                localVarQueryParameter['chargeback_dts_start'] = chargeback_dts_start;
            }
            if (chargeback_dts_end !== undefined) {
                localVarQueryParameter['chargeback_dts_end'] = chargeback_dts_end;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a chargeback on the UltraCart account.
         * @summary Insert a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChargeback: function (chargeback, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargeback' is not null or undefined
            if (chargeback === null || chargeback === undefined) {
                throw new RequiredError('chargeback', 'Required parameter chargeback was null or undefined when calling insertChargeback.');
            }
            var localVarPath = "/chargeback/chargebacks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChargebackDispute" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(chargeback || {}) : (chargeback || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a chargeback on the UltraCart account.
         * @summary Update a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to update
         * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeback: function (chargeback, chargeback_dispute_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargeback' is not null or undefined
            if (chargeback === null || chargeback === undefined) {
                throw new RequiredError('chargeback', 'Required parameter chargeback was null or undefined when calling updateChargeback.');
            }
            // verify required parameter 'chargeback_dispute_oid' is not null or undefined
            if (chargeback_dispute_oid === null || chargeback_dispute_oid === undefined) {
                throw new RequiredError('chargeback_dispute_oid', 'Required parameter chargeback_dispute_oid was null or undefined when calling updateChargeback.');
            }
            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
                .replace("{".concat("chargeback_dispute_oid", "}"), encodeURIComponent(String(chargeback_dispute_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChargebackDispute" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(chargeback || {}) : (chargeback || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ChargebackApiFetchParamCreator = ChargebackApiFetchParamCreator;
/**
 * ChargebackApi - functional programming interface
 * @export
 */
var ChargebackApiFp = function (configuration) {
    return {
        /**
         * Delete a chargeback on the UltraCart account.
         * @summary Delete a chargeback
         * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeback: function (chargeback_dispute_oid, options) {
            var localVarFetchArgs = (0, exports.ChargebackApiFetchParamCreator)(configuration).deleteChargeback(chargeback_dispute_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single chargeback using the specified chargeback dispute oid.
         * @summary Retrieve a chargeback
         * @param {number} chargeback_dispute_oid The chargeback dispute oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDispute: function (chargeback_dispute_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.ChargebackApiFetchParamCreator)(configuration).getChargebackDispute(chargeback_dispute_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve chargebacks
         * @param {string} [order_id] Order Id
         * @param {string} [case_number] Case number
         * @param {string} [status] Status
         * @param {string} [expiration_dts_start] Expiration dts start
         * @param {string} [expiration_dts_end] Expiration dts end
         * @param {string} [chargeback_dts_start] Chargeback dts start
         * @param {string} [chargeback_dts_end] Chargeback dts end
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch chargebacks that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDisputes: function (order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.ChargebackApiFetchParamCreator)(configuration).getChargebackDisputes(order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a chargeback on the UltraCart account.
         * @summary Insert a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChargeback: function (chargeback, _expand, options) {
            var localVarFetchArgs = (0, exports.ChargebackApiFetchParamCreator)(configuration).insertChargeback(chargeback, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a chargeback on the UltraCart account.
         * @summary Update a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to update
         * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeback: function (chargeback, chargeback_dispute_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.ChargebackApiFetchParamCreator)(configuration).updateChargeback(chargeback, chargeback_dispute_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ChargebackApiFp = ChargebackApiFp;
/**
 * ChargebackApi - factory interface
 * @export
 */
var ChargebackApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a chargeback on the UltraCart account.
         * @summary Delete a chargeback
         * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeback: function (chargeback_dispute_oid, options) {
            return (0, exports.ChargebackApiFp)(configuration).deleteChargeback(chargeback_dispute_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves a single chargeback using the specified chargeback dispute oid.
         * @summary Retrieve a chargeback
         * @param {number} chargeback_dispute_oid The chargeback dispute oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDispute: function (chargeback_dispute_oid, _expand, options) {
            return (0, exports.ChargebackApiFp)(configuration).getChargebackDispute(chargeback_dispute_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve chargebacks
         * @param {string} [order_id] Order Id
         * @param {string} [case_number] Case number
         * @param {string} [status] Status
         * @param {string} [expiration_dts_start] Expiration dts start
         * @param {string} [expiration_dts_end] Expiration dts end
         * @param {string} [chargeback_dts_start] Chargeback dts start
         * @param {string} [chargeback_dts_end] Chargeback dts end
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch chargebacks that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDisputes: function (order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options) {
            return (0, exports.ChargebackApiFp)(configuration).getChargebackDisputes(order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Insert a chargeback on the UltraCart account.
         * @summary Insert a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChargeback: function (chargeback, _expand, options) {
            return (0, exports.ChargebackApiFp)(configuration).insertChargeback(chargeback, _expand, options)(fetch, basePath);
        },
        /**
         * Update a chargeback on the UltraCart account.
         * @summary Update a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to update
         * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeback: function (chargeback, chargeback_dispute_oid, _expand, options) {
            return (0, exports.ChargebackApiFp)(configuration).updateChargeback(chargeback, chargeback_dispute_oid, _expand, options)(fetch, basePath);
        },
    };
};
exports.ChargebackApiFactory = ChargebackApiFactory;
/**
 * ChargebackApi - object-oriented interface
 * @export
 * @class ChargebackApi
 * @extends {BaseAPI}
 */
var ChargebackApi = /** @class */ (function (_super) {
    __extends(ChargebackApi, _super);
    function ChargebackApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a chargeback on the UltraCart account.
     * @summary Delete a chargeback
     * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.deleteChargeback = function (chargeback_dispute_oid, options) {
        return (0, exports.ChargebackApiFp)(this.configuration).deleteChargeback(chargeback_dispute_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single chargeback using the specified chargeback dispute oid.
     * @summary Retrieve a chargeback
     * @param {number} chargeback_dispute_oid The chargeback dispute oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.getChargebackDispute = function (chargeback_dispute_oid, _expand, options) {
        return (0, exports.ChargebackApiFp)(this.configuration).getChargebackDispute(chargeback_dispute_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve chargebacks
     * @param {string} [order_id] Order Id
     * @param {string} [case_number] Case number
     * @param {string} [status] Status
     * @param {string} [expiration_dts_start] Expiration dts start
     * @param {string} [expiration_dts_end] Expiration dts end
     * @param {string} [chargeback_dts_start] Chargeback dts start
     * @param {string} [chargeback_dts_end] Chargeback dts end
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch chargebacks that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.getChargebackDisputes = function (order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options) {
        return (0, exports.ChargebackApiFp)(this.configuration).getChargebackDisputes(order_id, case_number, status, expiration_dts_start, expiration_dts_end, chargeback_dts_start, chargeback_dts_end, _limit, _offset, _since, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a chargeback on the UltraCart account.
     * @summary Insert a chargeback
     * @param {ChargebackDispute} chargeback Chargeback to insert
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.insertChargeback = function (chargeback, _expand, options) {
        return (0, exports.ChargebackApiFp)(this.configuration).insertChargeback(chargeback, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update a chargeback on the UltraCart account.
     * @summary Update a chargeback
     * @param {ChargebackDispute} chargeback Chargeback to update
     * @param {number} chargeback_dispute_oid The chargeback_dispute_oid to update.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.updateChargeback = function (chargeback, chargeback_dispute_oid, _expand, options) {
        return (0, exports.ChargebackApiFp)(this.configuration).updateChargeback(chargeback, chargeback_dispute_oid, _expand, options)(this.fetch, this.basePath);
    };
    return ChargebackApi;
}(BaseAPI));
exports.ChargebackApi = ChargebackApi;
/**
 * CheckoutApi - fetch parameter creator
 * @export
 */
var CheckoutApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
         * @summary City/State for Zip
         * @param {Cart} cart Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityState: function (cart, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling cityState.');
            }
            var localVarPath = "/checkout/city_state";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
         * @summary Finalize Order
         * @param {CartFinalizeOrderRequest} finalize_request Finalize request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeOrder: function (finalize_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'finalize_request' is not null or undefined
            if (finalize_request === null || finalize_request === undefined) {
                throw new RequiredError('finalize_request', 'Required parameter finalize_request was null or undefined when calling finalizeOrder.');
            }
            var localVarPath = "/checkout/cart/finalizeOrder";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartFinalizeOrderRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(finalize_request || {}) : (finalize_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Affirm checkout object for the specified cart_id parameter.
         * @summary Get affirm checkout (by cart id)
         * @param {string} cart_id Cart ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffirmCheckout: function (cart_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart_id' is not null or undefined
            if (cart_id === null || cart_id === undefined) {
                throw new RequiredError('cart_id', 'Required parameter cart_id was null or undefined when calling getAffirmCheckout.');
            }
            var localVarPath = "/checkout/cart/{cart_id}/affirmCheckout"
                .replace("{".concat("cart_id", "}"), encodeURIComponent(String(cart_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lookup the allowed countries for this merchant id
         * @summary Allowed countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountries: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/checkout/allowedCountries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
         * @summary Get cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: function (_expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/checkout/cart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cart specified by the cart_id parameter.
         * @summary Get cart (by cart id)
         * @param {string} cart_id Cart ID to retrieve
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByCartId: function (cart_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart_id' is not null or undefined
            if (cart_id === null || cart_id === undefined) {
                throw new RequiredError('cart_id', 'Required parameter cart_id was null or undefined when calling getCartByCartId.');
            }
            var localVarPath = "/checkout/cart/{cart_id}"
                .replace("{".concat("cart_id", "}"), encodeURIComponent(String(cart_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cart specified by the return code parameter.
         * @summary Get cart (by return code)
         * @param {string} return_code Return code to lookup cart ID by
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnCode: function (return_code, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'return_code' is not null or undefined
            if (return_code === null || return_code === undefined) {
                throw new RequiredError('return_code', 'Required parameter return_code was null or undefined when calling getCartByReturnCode.');
            }
            var localVarPath = "/checkout/return/{return_code}"
                .replace("{".concat("return_code", "}"), encodeURIComponent(String(return_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cart specified by the encrypted return token parameter.
         * @summary Get cart (by return token)
         * @param {string} [return_token] Return token provided by StoreFront Communications
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnToken: function (return_token, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/checkout/return_token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (return_token !== undefined) {
                localVarQueryParameter['return_token'] = return_token;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lookup a state/province list for a given country code
         * @summary Get state/province list for a country code
         * @param {string} country_code Two letter ISO country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateProvincesForCountry: function (country_code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'country_code' is not null or undefined
            if (country_code === null || country_code === undefined) {
                throw new RequiredError('country_code', 'Required parameter country_code was null or undefined when calling getStateProvincesForCountry.');
            }
            var localVarPath = "/checkout/stateProvincesForCountry/{country_code}"
                .replace("{".concat("country_code", "}"), encodeURIComponent(String(country_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm, transfer to Sezzle or finalization of the order (including upsell processing).
         * @summary Handoff cart
         * @param {CheckoutHandoffRequest} handoff_request Handoff request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoffCart: function (handoff_request, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'handoff_request' is not null or undefined
            if (handoff_request === null || handoff_request === undefined) {
                throw new RequiredError('handoff_request', 'Required parameter handoff_request was null or undefined when calling handoffCart.');
            }
            var localVarPath = "/checkout/cart/handoff";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CheckoutHandoffRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(handoff_request || {}) : (handoff_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login in to the customer profile specified by cart.billing.email and password
         * @summary Profile login
         * @param {CartProfileLoginRequest} login_request Login request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (login_request, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'login_request' is not null or undefined
            if (login_request === null || login_request === undefined) {
                throw new RequiredError('login_request', 'Required parameter login_request was null or undefined when calling login.');
            }
            var localVarPath = "/checkout/cart/profile/login";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartProfileLoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(login_request || {}) : (login_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log the cart out of the current profile.  No error will occur if they are not logged in.
         * @summary Profile logout
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: function (cart, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling logout.');
            }
            var localVarPath = "/checkout/cart/profile/logout";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
         * @summary Profile registration
         * @param {CartProfileRegisterRequest} register_request Register request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (register_request, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'register_request' is not null or undefined
            if (register_request === null || register_request === undefined) {
                throw new RequiredError('register_request', 'Required parameter register_request was null or undefined when calling register.');
            }
            var localVarPath = "/checkout/cart/profile/register";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartProfileRegisterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(register_request || {}) : (register_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
         * @summary Register affiliate click
         * @param {RegisterAffiliateClickRequest} register_affiliate_click_request Register affiliate click request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAffiliateClick: function (register_affiliate_click_request, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'register_affiliate_click_request' is not null or undefined
            if (register_affiliate_click_request === null || register_affiliate_click_request === undefined) {
                throw new RequiredError('register_affiliate_click_request', 'Required parameter register_affiliate_click_request was null or undefined when calling registerAffiliateClick.');
            }
            var localVarPath = "/checkout/affiliateClick/register";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterAffiliateClickRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(register_affiliate_click_request || {}) : (register_affiliate_click_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForCart: function (cart, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling relatedItemsForCart.');
            }
            var localVarPath = "/checkout/related_items";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items (specific item)
         * @param {string} item_id Item ID to retrieve related items for
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForItem: function (item_id, cart, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item_id' is not null or undefined
            if (item_id === null || item_id === undefined) {
                throw new RequiredError('item_id', 'Required parameter item_id was null or undefined when calling relatedItemsForItem.');
            }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling relatedItemsForItem.');
            }
            var localVarPath = "/checkout/relatedItems/{item_id}"
                .replace("{".concat("item_id", "}"), encodeURIComponent(String(item_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth application, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
         * @summary Setup Browser Application
         * @param {CheckoutSetupBrowserKeyRequest} browser_key_request Setup browser key request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupBrowserKey: function (browser_key_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'browser_key_request' is not null or undefined
            if (browser_key_request === null || browser_key_request === undefined) {
                throw new RequiredError('browser_key_request', 'Required parameter browser_key_request was null or undefined when calling setupBrowserKey.');
            }
            var localVarPath = "/checkout/browser_key";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CheckoutSetupBrowserKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(browser_key_request || {}) : (browser_key_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the cart.
         * @summary Update cart
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCart: function (cart, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling updateCart.');
            }
            var localVarPath = "/checkout/cart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
         * @summary Validate
         * @param {CartValidationRequest} validation_request Validation request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCart: function (validation_request, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validation_request' is not null or undefined
            if (validation_request === null || validation_request === undefined) {
                throw new RequiredError('validation_request', 'Required parameter validation_request was null or undefined when calling validateCart.');
            }
            var localVarPath = "/checkout/cart/validate";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartValidationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(validation_request || {}) : (validation_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CheckoutApiFetchParamCreator = CheckoutApiFetchParamCreator;
/**
 * CheckoutApi - functional programming interface
 * @export
 */
var CheckoutApiFp = function (configuration) {
    return {
        /**
         * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
         * @summary City/State for Zip
         * @param {Cart} cart Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityState: function (cart, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).cityState(cart, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
         * @summary Finalize Order
         * @param {CartFinalizeOrderRequest} finalize_request Finalize request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeOrder: function (finalize_request, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).finalizeOrder(finalize_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a Affirm checkout object for the specified cart_id parameter.
         * @summary Get affirm checkout (by cart id)
         * @param {string} cart_id Cart ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffirmCheckout: function (cart_id, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getAffirmCheckout(cart_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lookup the allowed countries for this merchant id
         * @summary Allowed countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountries: function (options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getAllowedCountries(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
         * @summary Get cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: function (_expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getCart(_expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a cart specified by the cart_id parameter.
         * @summary Get cart (by cart id)
         * @param {string} cart_id Cart ID to retrieve
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByCartId: function (cart_id, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getCartByCartId(cart_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a cart specified by the return code parameter.
         * @summary Get cart (by return code)
         * @param {string} return_code Return code to lookup cart ID by
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnCode: function (return_code, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getCartByReturnCode(return_code, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a cart specified by the encrypted return token parameter.
         * @summary Get cart (by return token)
         * @param {string} [return_token] Return token provided by StoreFront Communications
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnToken: function (return_token, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getCartByReturnToken(return_token, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lookup a state/province list for a given country code
         * @summary Get state/province list for a country code
         * @param {string} country_code Two letter ISO country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateProvincesForCountry: function (country_code, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).getStateProvincesForCountry(country_code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm, transfer to Sezzle or finalization of the order (including upsell processing).
         * @summary Handoff cart
         * @param {CheckoutHandoffRequest} handoff_request Handoff request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoffCart: function (handoff_request, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).handoffCart(handoff_request, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Login in to the customer profile specified by cart.billing.email and password
         * @summary Profile login
         * @param {CartProfileLoginRequest} login_request Login request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (login_request, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).login(login_request, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Log the cart out of the current profile.  No error will occur if they are not logged in.
         * @summary Profile logout
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: function (cart, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).logout(cart, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
         * @summary Profile registration
         * @param {CartProfileRegisterRequest} register_request Register request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (register_request, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).register(register_request, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
         * @summary Register affiliate click
         * @param {RegisterAffiliateClickRequest} register_affiliate_click_request Register affiliate click request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAffiliateClick: function (register_affiliate_click_request, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).registerAffiliateClick(register_affiliate_click_request, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForCart: function (cart, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).relatedItemsForCart(cart, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items (specific item)
         * @param {string} item_id Item ID to retrieve related items for
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForItem: function (item_id, cart, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).relatedItemsForItem(item_id, cart, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth application, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
         * @summary Setup Browser Application
         * @param {CheckoutSetupBrowserKeyRequest} browser_key_request Setup browser key request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupBrowserKey: function (browser_key_request, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).setupBrowserKey(browser_key_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the cart.
         * @summary Update cart
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCart: function (cart, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).updateCart(cart, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
         * @summary Validate
         * @param {CartValidationRequest} validation_request Validation request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCart: function (validation_request, _expand, options) {
            var localVarFetchArgs = (0, exports.CheckoutApiFetchParamCreator)(configuration).validateCart(validation_request, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.CheckoutApiFp = CheckoutApiFp;
/**
 * CheckoutApi - factory interface
 * @export
 */
var CheckoutApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
         * @summary City/State for Zip
         * @param {Cart} cart Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityState: function (cart, options) {
            return (0, exports.CheckoutApiFp)(configuration).cityState(cart, options)(fetch, basePath);
        },
        /**
         * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
         * @summary Finalize Order
         * @param {CartFinalizeOrderRequest} finalize_request Finalize request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeOrder: function (finalize_request, options) {
            return (0, exports.CheckoutApiFp)(configuration).finalizeOrder(finalize_request, options)(fetch, basePath);
        },
        /**
         * Get a Affirm checkout object for the specified cart_id parameter.
         * @summary Get affirm checkout (by cart id)
         * @param {string} cart_id Cart ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffirmCheckout: function (cart_id, options) {
            return (0, exports.CheckoutApiFp)(configuration).getAffirmCheckout(cart_id, options)(fetch, basePath);
        },
        /**
         * Lookup the allowed countries for this merchant id
         * @summary Allowed countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountries: function (options) {
            return (0, exports.CheckoutApiFp)(configuration).getAllowedCountries(options)(fetch, basePath);
        },
        /**
         * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
         * @summary Get cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: function (_expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).getCart(_expand, options)(fetch, basePath);
        },
        /**
         * Get a cart specified by the cart_id parameter.
         * @summary Get cart (by cart id)
         * @param {string} cart_id Cart ID to retrieve
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByCartId: function (cart_id, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).getCartByCartId(cart_id, _expand, options)(fetch, basePath);
        },
        /**
         * Get a cart specified by the return code parameter.
         * @summary Get cart (by return code)
         * @param {string} return_code Return code to lookup cart ID by
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnCode: function (return_code, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).getCartByReturnCode(return_code, _expand, options)(fetch, basePath);
        },
        /**
         * Get a cart specified by the encrypted return token parameter.
         * @summary Get cart (by return token)
         * @param {string} [return_token] Return token provided by StoreFront Communications
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnToken: function (return_token, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).getCartByReturnToken(return_token, _expand, options)(fetch, basePath);
        },
        /**
         * Lookup a state/province list for a given country code
         * @summary Get state/province list for a country code
         * @param {string} country_code Two letter ISO country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateProvincesForCountry: function (country_code, options) {
            return (0, exports.CheckoutApiFp)(configuration).getStateProvincesForCountry(country_code, options)(fetch, basePath);
        },
        /**
         * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm, transfer to Sezzle or finalization of the order (including upsell processing).
         * @summary Handoff cart
         * @param {CheckoutHandoffRequest} handoff_request Handoff request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoffCart: function (handoff_request, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).handoffCart(handoff_request, _expand, options)(fetch, basePath);
        },
        /**
         * Login in to the customer profile specified by cart.billing.email and password
         * @summary Profile login
         * @param {CartProfileLoginRequest} login_request Login request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (login_request, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).login(login_request, _expand, options)(fetch, basePath);
        },
        /**
         * Log the cart out of the current profile.  No error will occur if they are not logged in.
         * @summary Profile logout
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: function (cart, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).logout(cart, _expand, options)(fetch, basePath);
        },
        /**
         * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
         * @summary Profile registration
         * @param {CartProfileRegisterRequest} register_request Register request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (register_request, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).register(register_request, _expand, options)(fetch, basePath);
        },
        /**
         * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
         * @summary Register affiliate click
         * @param {RegisterAffiliateClickRequest} register_affiliate_click_request Register affiliate click request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAffiliateClick: function (register_affiliate_click_request, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).registerAffiliateClick(register_affiliate_click_request, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForCart: function (cart, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).relatedItemsForCart(cart, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items (specific item)
         * @param {string} item_id Item ID to retrieve related items for
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForItem: function (item_id, cart, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).relatedItemsForItem(item_id, cart, _expand, options)(fetch, basePath);
        },
        /**
         * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth application, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
         * @summary Setup Browser Application
         * @param {CheckoutSetupBrowserKeyRequest} browser_key_request Setup browser key request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupBrowserKey: function (browser_key_request, options) {
            return (0, exports.CheckoutApiFp)(configuration).setupBrowserKey(browser_key_request, options)(fetch, basePath);
        },
        /**
         * Update the cart.
         * @summary Update cart
         * @param {Cart} cart Cart
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCart: function (cart, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).updateCart(cart, _expand, options)(fetch, basePath);
        },
        /**
         * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
         * @summary Validate
         * @param {CartValidationRequest} validation_request Validation request
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCart: function (validation_request, _expand, options) {
            return (0, exports.CheckoutApiFp)(configuration).validateCart(validation_request, _expand, options)(fetch, basePath);
        },
    };
};
exports.CheckoutApiFactory = CheckoutApiFactory;
/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
var CheckoutApi = /** @class */ (function (_super) {
    __extends(CheckoutApi, _super);
    function CheckoutApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
     * @summary City/State for Zip
     * @param {Cart} cart Cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.cityState = function (cart, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).cityState(cart, options)(this.fetch, this.basePath);
    };
    /**
     * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
     * @summary Finalize Order
     * @param {CartFinalizeOrderRequest} finalize_request Finalize request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.finalizeOrder = function (finalize_request, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).finalizeOrder(finalize_request, options)(this.fetch, this.basePath);
    };
    /**
     * Get a Affirm checkout object for the specified cart_id parameter.
     * @summary Get affirm checkout (by cart id)
     * @param {string} cart_id Cart ID to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getAffirmCheckout = function (cart_id, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getAffirmCheckout(cart_id, options)(this.fetch, this.basePath);
    };
    /**
     * Lookup the allowed countries for this merchant id
     * @summary Allowed countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getAllowedCountries = function (options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getAllowedCountries(options)(this.fetch, this.basePath);
    };
    /**
     * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
     * @summary Get cart
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCart = function (_expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getCart(_expand, options)(this.fetch, this.basePath);
    };
    /**
     * Get a cart specified by the cart_id parameter.
     * @summary Get cart (by cart id)
     * @param {string} cart_id Cart ID to retrieve
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCartByCartId = function (cart_id, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getCartByCartId(cart_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Get a cart specified by the return code parameter.
     * @summary Get cart (by return code)
     * @param {string} return_code Return code to lookup cart ID by
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCartByReturnCode = function (return_code, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getCartByReturnCode(return_code, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Get a cart specified by the encrypted return token parameter.
     * @summary Get cart (by return token)
     * @param {string} [return_token] Return token provided by StoreFront Communications
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCartByReturnToken = function (return_token, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getCartByReturnToken(return_token, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Lookup a state/province list for a given country code
     * @summary Get state/province list for a country code
     * @param {string} country_code Two letter ISO country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getStateProvincesForCountry = function (country_code, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).getStateProvincesForCountry(country_code, options)(this.fetch, this.basePath);
    };
    /**
     * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm, transfer to Sezzle or finalization of the order (including upsell processing).
     * @summary Handoff cart
     * @param {CheckoutHandoffRequest} handoff_request Handoff request
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.handoffCart = function (handoff_request, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).handoffCart(handoff_request, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Login in to the customer profile specified by cart.billing.email and password
     * @summary Profile login
     * @param {CartProfileLoginRequest} login_request Login request
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.login = function (login_request, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).login(login_request, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Log the cart out of the current profile.  No error will occur if they are not logged in.
     * @summary Profile logout
     * @param {Cart} cart Cart
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.logout = function (cart, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).logout(cart, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
     * @summary Profile registration
     * @param {CartProfileRegisterRequest} register_request Register request
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.register = function (register_request, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).register(register_request, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
     * @summary Register affiliate click
     * @param {RegisterAffiliateClickRequest} register_affiliate_click_request Register affiliate click request
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.registerAffiliateClick = function (register_affiliate_click_request, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).registerAffiliateClick(register_affiliate_click_request, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
     * @summary Related items
     * @param {Cart} cart Cart
     * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.relatedItemsForCart = function (cart, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).relatedItemsForCart(cart, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
     * @summary Related items (specific item)
     * @param {string} item_id Item ID to retrieve related items for
     * @param {Cart} cart Cart
     * @param {string} [_expand] The object expansion to perform on the result.  See item resource documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.relatedItemsForItem = function (item_id, cart, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).relatedItemsForItem(item_id, cart, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth application, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
     * @summary Setup Browser Application
     * @param {CheckoutSetupBrowserKeyRequest} browser_key_request Setup browser key request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.setupBrowserKey = function (browser_key_request, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).setupBrowserKey(browser_key_request, options)(this.fetch, this.basePath);
    };
    /**
     * Update the cart.
     * @summary Update cart
     * @param {Cart} cart Cart
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.updateCart = function (cart, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).updateCart(cart, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
     * @summary Validate
     * @param {CartValidationRequest} validation_request Validation request
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.validateCart = function (validation_request, _expand, options) {
        return (0, exports.CheckoutApiFp)(this.configuration).validateCart(validation_request, _expand, options)(this.fetch, this.basePath);
    };
    return CheckoutApi;
}(BaseAPI));
exports.CheckoutApi = CheckoutApi;
/**
 * ConversationApi - fetch parameter creator
 * @export
 */
var ConversationApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a conversation canned message
         * @summary Delete a conversation canned message
         * @param {number} conversation_canned_message_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversationCannedMessage: function (conversation_canned_message_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_canned_message_oid' is not null or undefined
            if (conversation_canned_message_oid === null || conversation_canned_message_oid === undefined) {
                throw new RequiredError('conversation_canned_message_oid', 'Required parameter conversation_canned_message_oid was null or undefined when calling deleteConversationCannedMessage.');
            }
            var localVarPath = "/conversation/canned_messages/{conversation_canned_message_oid}"
                .replace("{".concat("conversation_canned_message_oid", "}"), encodeURIComponent(String(conversation_canned_message_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a conversation department
         * @summary Delete a conversation department
         * @param {number} conversation_department_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: function (conversation_department_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_department_oid' is not null or undefined
            if (conversation_department_oid === null || conversation_department_oid === undefined) {
                throw new RequiredError('conversation_department_oid', 'Required parameter conversation_department_oid was null or undefined when calling deleteDepartment.');
            }
            var localVarPath = "/conversation/departments/{conversation_department_oid}"
                .replace("{".concat("conversation_department_oid", "}"), encodeURIComponent(String(conversation_department_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a conversation engagement
         * @summary Delete a conversation engagement
         * @param {number} conversation_engagement_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEngagement: function (conversation_engagement_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_engagement_oid' is not null or undefined
            if (conversation_engagement_oid === null || conversation_engagement_oid === undefined) {
                throw new RequiredError('conversation_engagement_oid', 'Required parameter conversation_engagement_oid was null or undefined when calling deleteEngagement.');
            }
            var localVarPath = "/conversation/engagements/{conversation_engagement_oid}"
                .replace("{".concat("conversation_engagement_oid", "}"), encodeURIComponent(String(conversation_engagement_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete pbx agent Voicemail
         * @summary Delete Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxAgentVoicemail: function (recording_sid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'recording_sid' is not null or undefined
            if (recording_sid === null || recording_sid === undefined) {
                throw new RequiredError('recording_sid', 'Required parameter recording_sid was null or undefined when calling deletePbxAgentVoicemail.');
            }
            var localVarPath = "/conversation/pbx/agent/voicemails/{recording_sid}"
                .replace("{".concat("recording_sid", "}"), encodeURIComponent(String(recording_sid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a pbx audio
         * @summary Delete pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxAudio: function (conversationPbxAudioUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxAudioUuid' is not null or undefined
            if (conversationPbxAudioUuid === null || conversationPbxAudioUuid === undefined) {
                throw new RequiredError('conversationPbxAudioUuid', 'Required parameter conversationPbxAudioUuid was null or undefined when calling deletePbxAudio.');
            }
            var localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}"
                .replace("{".concat("conversationPbxAudioUuid", "}"), encodeURIComponent(String(conversationPbxAudioUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a pbx menu
         * @summary Delete pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxMenu: function (conversationPbxMenuUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxMenuUuid' is not null or undefined
            if (conversationPbxMenuUuid === null || conversationPbxMenuUuid === undefined) {
                throw new RequiredError('conversationPbxMenuUuid', 'Required parameter conversationPbxMenuUuid was null or undefined when calling deletePbxMenu.');
            }
            var localVarPath = "/conversation/pbx/menu/{conversationPbxMenuUuid}"
                .replace("{".concat("conversationPbxMenuUuid", "}"), encodeURIComponent(String(conversationPbxMenuUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a pbx queue
         * @summary Delete pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxQueue: function (conversationPbxQueueUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxQueueUuid' is not null or undefined
            if (conversationPbxQueueUuid === null || conversationPbxQueueUuid === undefined) {
                throw new RequiredError('conversationPbxQueueUuid', 'Required parameter conversationPbxQueueUuid was null or undefined when calling deletePbxQueue.');
            }
            var localVarPath = "/conversation/pbx/queue/{conversationPbxQueueUuid}"
                .replace("{".concat("conversationPbxQueueUuid", "}"), encodeURIComponent(String(conversationPbxQueueUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete pbx queue Voicemail
         * @summary Delete Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queue_uuid' is not null or undefined
            if (queue_uuid === null || queue_uuid === undefined) {
                throw new RequiredError('queue_uuid', 'Required parameter queue_uuid was null or undefined when calling deletePbxQueueVoicemail.');
            }
            // verify required parameter 'recording_sid' is not null or undefined
            if (recording_sid === null || recording_sid === undefined) {
                throw new RequiredError('recording_sid', 'Required parameter recording_sid was null or undefined when calling deletePbxQueueVoicemail.');
            }
            var localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}"
                .replace("{".concat("queue_uuid", "}"), encodeURIComponent(String(queue_uuid)))
                .replace("{".concat("recording_sid", "}"), encodeURIComponent(String(recording_sid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a pbx timeBased
         * @summary Delete pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxTimeBased: function (conversationPbxTimeBasedUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxTimeBasedUuid' is not null or undefined
            if (conversationPbxTimeBasedUuid === null || conversationPbxTimeBasedUuid === undefined) {
                throw new RequiredError('conversationPbxTimeBasedUuid', 'Required parameter conversationPbxTimeBasedUuid was null or undefined when calling deletePbxTimeBased.');
            }
            var localVarPath = "/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}"
                .replace("{".concat("conversationPbxTimeBasedUuid", "}"), encodeURIComponent(String(conversationPbxTimeBasedUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a pbx timeRange
         * @summary Delete pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxTimeRange: function (conversationPbxTimeRangeUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxTimeRangeUuid' is not null or undefined
            if (conversationPbxTimeRangeUuid === null || conversationPbxTimeRangeUuid === undefined) {
                throw new RequiredError('conversationPbxTimeRangeUuid', 'Required parameter conversationPbxTimeRangeUuid was null or undefined when calling deletePbxTimeRange.');
            }
            var localVarPath = "/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}"
                .replace("{".concat("conversationPbxTimeRangeUuid", "}"), encodeURIComponent(String(conversationPbxTimeRangeUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a pbx voicemailMailbox
         * @summary Delete pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxVoicemailMailboxUuid' is not null or undefined
            if (conversationPbxVoicemailMailboxUuid === null || conversationPbxVoicemailMailboxUuid === undefined) {
                throw new RequiredError('conversationPbxVoicemailMailboxUuid', 'Required parameter conversationPbxVoicemailMailboxUuid was null or undefined when calling deletePbxVoicemailMailbox.');
            }
            var localVarPath = "/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}"
                .replace("{".concat("conversationPbxVoicemailMailboxUuid", "}"), encodeURIComponent(String(conversationPbxVoicemailMailboxUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called periodically by the conversation API to keep the session alive.
         * @summary Agent keep alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentKeepAlive: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/agent/keepalive";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the agents profile
         * @summary Get agent profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentProfile: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/agent/profile";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the agents profile
         * @summary Get agent profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentProfiles: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/agent/profiles";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a JWT to authorize an agent to make a websocket connection.
         * @summary Get agent websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentWebsocketAuthorization: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/agent/auth";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a conversation including the participants and messages
         * @summary Retrieve a conversation
         * @param {string} conversation_uuid
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation: function (conversation_uuid, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling getConversation.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of canned messages ordered by short_code
         * @summary Retrieve a list of canned messages ordered by short_code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationCannedMessages: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/canned_messages";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a webchat conversation context
         * @summary Get a webchat conversation context
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationContext: function (conversation_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling getConversationContext.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}/context"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of possible department members
         * @summary Retrieve a list of possible department members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationDepartmentMemberList: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/department_members";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of departments ordered by name
         * @summary Retrieve a list of departments ordered by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationDepartments: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/departments";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an engagement
         * @summary Retrieve an engagement
         * @param {number} conversation_engagement_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationEngagement: function (conversation_engagement_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_engagement_oid' is not null or undefined
            if (conversation_engagement_oid === null || conversation_engagement_oid === undefined) {
                throw new RequiredError('conversation_engagement_oid', 'Required parameter conversation_engagement_oid was null or undefined when calling getConversationEngagement.');
            }
            var localVarPath = "/conversation/engagements/{conversation_engagement_oid}"
                .replace("{".concat("conversation_engagement_oid", "}"), encodeURIComponent(String(conversation_engagement_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of engagements ordered by name
         * @summary Retrieve a list of engagements ordered by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationEngagements: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/engagements";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve conversation messages since a particular time
         * @summary Retrieve conversation messages
         * @param {string} conversation_uuid
         * @param {number} since
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMessages: function (conversation_uuid, since, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling getConversationMessages.');
            }
            // verify required parameter 'since' is not null or undefined
            if (since === null || since === undefined) {
                throw new RequiredError('since', 'Required parameter since was null or undefined when calling getConversationMessages.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}/messages/{since}"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)))
                .replace("{".concat("since", "}"), encodeURIComponent(String(since)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a presigned conversation multimedia upload URL
         * @summary Get a presigned conversation multimedia upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMultimediaUploadUrl: function (extension, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'extension' is not null or undefined
            if (extension === null || extension === undefined) {
                throw new RequiredError('extension', 'Required parameter extension was null or undefined when calling getConversationMultimediaUploadUrl.');
            }
            var localVarPath = "/conversation/upload_url/{extension}"
                .replace("{".concat("extension", "}"), encodeURIComponent(String(extension)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a pre-signed conversation multimedia upload URL
         * @summary Get a pre-signed conversation multimedia upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPbxAudioUploadUrl: function (extension, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'extension' is not null or undefined
            if (extension === null || extension === undefined) {
                throw new RequiredError('extension', 'Required parameter extension was null or undefined when calling getConversationPbxAudioUploadUrl.');
            }
            var localVarPath = "/conversation/pbx/audio/upload_url/{extension}"
                .replace("{".concat("extension", "}"), encodeURIComponent(String(extension)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the orders, auto orders, and customer profile for a given phone number
         * @summary Get orders and customer information for a phone number
         * @param {ConversationPbxCustomerSnapshotRequest} pbx_customer_snapshot_request Conversation pbx customer snapshot request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPbxCustomerSnapshot: function (pbx_customer_snapshot_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_customer_snapshot_request' is not null or undefined
            if (pbx_customer_snapshot_request === null || pbx_customer_snapshot_request === undefined) {
                throw new RequiredError('pbx_customer_snapshot_request', 'Required parameter pbx_customer_snapshot_request was null or undefined when calling getConversationPbxCustomerSnapshot.');
            }
            var localVarPath = "/conversation/pbx/customer_snapshot";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxCustomerSnapshotRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_customer_snapshot_request || {}) : (pbx_customer_snapshot_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve conversation permissions
         * @summary Retrieve conversation permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPermissions: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/permissions";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a conversation webchat queue statuses including agent status and queue entries
         * @summary Retrieve a conversation webchat queue statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationWebchatQueueStatuses: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/conversations/queues/statuses";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read.
         * @summary Retrieve a list of conversation summaries newest to oldest
         * @param {string} [medium]
         * @param {string} [before]
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversations: function (medium, before, _limit, _offset, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/conversations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (medium !== undefined) {
                localVarQueryParameter['medium'] = medium;
            }
            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of matching terms for a search field
         * @summary Retrieve a list of matching terms for a search field
         * @param {ConversationAutocompleteRequest} autocomplete_request Autocomplete Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsAutocomplete: function (autocomplete_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autocomplete_request' is not null or undefined
            if (autocomplete_request === null || autocomplete_request === undefined) {
                throw new RequiredError('autocomplete_request', 'Required parameter autocomplete_request was null or undefined when calling getConversationsAutocomplete.');
            }
            var localVarPath = "/conversation/conversations/autocomplete";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationAutocompleteRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(autocomplete_request || {}) : (autocomplete_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search conversations
         * @summary Search conversations
         * @param {ConversationSearchRequest} search_request Search Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsSearch: function (search_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'search_request' is not null or undefined
            if (search_request === null || search_request === undefined) {
                throw new RequiredError('search_request', 'Required parameter search_request was null or undefined when calling getConversationsSearch.');
            }
            var localVarPath = "/conversation/conversations/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationSearchRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(search_request || {}) : (search_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get location data for engagement configuration
         * @summary Get location data for engagement configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationsForEngagement: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/locations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx agent
         * @summary Get pbx agent
         * @param {string} conversationPbxAgentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgent: function (conversationPbxAgentUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxAgentUuid' is not null or undefined
            if (conversationPbxAgentUuid === null || conversationPbxAgentUuid === undefined) {
                throw new RequiredError('conversationPbxAgentUuid', 'Required parameter conversationPbxAgentUuid was null or undefined when calling getPbxAgent.');
            }
            var localVarPath = "/conversation/pbx/agent/{conversationPbxAgentUuid}"
                .replace("{".concat("conversationPbxAgentUuid", "}"), encodeURIComponent(String(conversationPbxAgentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx agent Voicemail
         * @summary Get Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgentVoicemail: function (recording_sid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'recording_sid' is not null or undefined
            if (recording_sid === null || recording_sid === undefined) {
                throw new RequiredError('recording_sid', 'Required parameter recording_sid was null or undefined when calling getPbxAgentVoicemail.');
            }
            var localVarPath = "/conversation/pbx/agent/voicemails/{recording_sid}"
                .replace("{".concat("recording_sid", "}"), encodeURIComponent(String(recording_sid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx agent Voicemails
         * @summary Get Agent Voicemails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgentVoicemails: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/agent/voicemails";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx agents
         * @summary Get pbx agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgents: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/agent";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx audio
         * @summary Get pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudio: function (conversationPbxAudioUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxAudioUuid' is not null or undefined
            if (conversationPbxAudioUuid === null || conversationPbxAudioUuid === undefined) {
                throw new RequiredError('conversationPbxAudioUuid', 'Required parameter conversationPbxAudioUuid was null or undefined when calling getPbxAudio.');
            }
            var localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}"
                .replace("{".concat("conversationPbxAudioUuid", "}"), encodeURIComponent(String(conversationPbxAudioUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx audio usage
         * @summary Get pbx audio usage
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudioUsage: function (conversationPbxAudioUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxAudioUuid' is not null or undefined
            if (conversationPbxAudioUuid === null || conversationPbxAudioUuid === undefined) {
                throw new RequiredError('conversationPbxAudioUuid', 'Required parameter conversationPbxAudioUuid was null or undefined when calling getPbxAudioUsage.');
            }
            var localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}/usage"
                .replace("{".concat("conversationPbxAudioUuid", "}"), encodeURIComponent(String(conversationPbxAudioUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx audios
         * @summary Get pbx audios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudios: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/audio";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx menu
         * @summary Get pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxMenu: function (conversationPbxMenuUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxMenuUuid' is not null or undefined
            if (conversationPbxMenuUuid === null || conversationPbxMenuUuid === undefined) {
                throw new RequiredError('conversationPbxMenuUuid', 'Required parameter conversationPbxMenuUuid was null or undefined when calling getPbxMenu.');
            }
            var localVarPath = "/conversation/pbx/menu/{conversationPbxMenuUuid}"
                .replace("{".concat("conversationPbxMenuUuid", "}"), encodeURIComponent(String(conversationPbxMenuUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx menus
         * @summary Get pbx menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxMenus: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/menu";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx phoneNumber
         * @summary Get pbx phoneNumber
         * @param {string} conversationPbxPhoneNumberUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxPhoneNumber: function (conversationPbxPhoneNumberUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxPhoneNumberUuid' is not null or undefined
            if (conversationPbxPhoneNumberUuid === null || conversationPbxPhoneNumberUuid === undefined) {
                throw new RequiredError('conversationPbxPhoneNumberUuid', 'Required parameter conversationPbxPhoneNumberUuid was null or undefined when calling getPbxPhoneNumber.');
            }
            var localVarPath = "/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}"
                .replace("{".concat("conversationPbxPhoneNumberUuid", "}"), encodeURIComponent(String(conversationPbxPhoneNumberUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx phoneNumbers
         * @summary Get pbx phoneNumbers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxPhoneNumbers: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/phone_number";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx queue
         * @summary Get pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueue: function (conversationPbxQueueUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxQueueUuid' is not null or undefined
            if (conversationPbxQueueUuid === null || conversationPbxQueueUuid === undefined) {
                throw new RequiredError('conversationPbxQueueUuid', 'Required parameter conversationPbxQueueUuid was null or undefined when calling getPbxQueue.');
            }
            var localVarPath = "/conversation/pbx/queue/{conversationPbxQueueUuid}"
                .replace("{".concat("conversationPbxQueueUuid", "}"), encodeURIComponent(String(conversationPbxQueueUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx queue Voicemail
         * @summary Get Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queue_uuid' is not null or undefined
            if (queue_uuid === null || queue_uuid === undefined) {
                throw new RequiredError('queue_uuid', 'Required parameter queue_uuid was null or undefined when calling getPbxQueueVoicemail.');
            }
            // verify required parameter 'recording_sid' is not null or undefined
            if (recording_sid === null || recording_sid === undefined) {
                throw new RequiredError('recording_sid', 'Required parameter recording_sid was null or undefined when calling getPbxQueueVoicemail.');
            }
            var localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}"
                .replace("{".concat("queue_uuid", "}"), encodeURIComponent(String(queue_uuid)))
                .replace("{".concat("recording_sid", "}"), encodeURIComponent(String(recording_sid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx queue voicemails
         * @summary Get Queue Voicemails
         * @param {string} queue_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueueVoicemails: function (queue_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queue_uuid' is not null or undefined
            if (queue_uuid === null || queue_uuid === undefined) {
                throw new RequiredError('queue_uuid', 'Required parameter queue_uuid was null or undefined when calling getPbxQueueVoicemails.');
            }
            var localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails"
                .replace("{".concat("queue_uuid", "}"), encodeURIComponent(String(queue_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx queues
         * @summary Get pbx queues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/queue";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx timeBased
         * @summary Get pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeBased: function (conversationPbxTimeBasedUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxTimeBasedUuid' is not null or undefined
            if (conversationPbxTimeBasedUuid === null || conversationPbxTimeBasedUuid === undefined) {
                throw new RequiredError('conversationPbxTimeBasedUuid', 'Required parameter conversationPbxTimeBasedUuid was null or undefined when calling getPbxTimeBased.');
            }
            var localVarPath = "/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}"
                .replace("{".concat("conversationPbxTimeBasedUuid", "}"), encodeURIComponent(String(conversationPbxTimeBasedUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx timeBaseds
         * @summary Get pbx timeBaseds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeBaseds: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/time_based";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx timeRange
         * @summary Get pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeRange: function (conversationPbxTimeRangeUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxTimeRangeUuid' is not null or undefined
            if (conversationPbxTimeRangeUuid === null || conversationPbxTimeRangeUuid === undefined) {
                throw new RequiredError('conversationPbxTimeRangeUuid', 'Required parameter conversationPbxTimeRangeUuid was null or undefined when calling getPbxTimeRange.');
            }
            var localVarPath = "/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}"
                .replace("{".concat("conversationPbxTimeRangeUuid", "}"), encodeURIComponent(String(conversationPbxTimeRangeUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx timeRanges
         * @summary Get pbx timeRanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeRanges: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/time_range";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a pbx voicemailMailbox
         * @summary Get pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxVoicemailMailboxUuid' is not null or undefined
            if (conversationPbxVoicemailMailboxUuid === null || conversationPbxVoicemailMailboxUuid === undefined) {
                throw new RequiredError('conversationPbxVoicemailMailboxUuid', 'Required parameter conversationPbxVoicemailMailboxUuid was null or undefined when calling getPbxVoicemailMailbox.');
            }
            var localVarPath = "/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}"
                .replace("{".concat("conversationPbxVoicemailMailboxUuid", "}"), encodeURIComponent(String(conversationPbxVoicemailMailboxUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve pbx voicemailMailboxes
         * @summary Get pbx voicemailMailboxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxVoicemailMailboxes: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/conversation/pbx/voicemail_mailbox";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a canned message
         * @summary Insert a canned message
         * @param {ConversationCannedMessage} canned_message Canned message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationCannedMessage: function (canned_message, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'canned_message' is not null or undefined
            if (canned_message === null || canned_message === undefined) {
                throw new RequiredError('canned_message', 'Required parameter canned_message was null or undefined when calling insertConversationCannedMessage.');
            }
            var localVarPath = "/conversation/canned_messages";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationCannedMessage" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(canned_message || {}) : (canned_message || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a department
         * @summary Insert a department
         * @param {ConversationDepartment} department Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationDepartment: function (department, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'department' is not null or undefined
            if (department === null || department === undefined) {
                throw new RequiredError('department', 'Required parameter department was null or undefined when calling insertConversationDepartment.');
            }
            var localVarPath = "/conversation/departments";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationDepartment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(department || {}) : (department || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a engagement
         * @summary Insert a engagement
         * @param {ConversationEngagement} engagement Engagement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationEngagement: function (engagement, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'engagement' is not null or undefined
            if (engagement === null || engagement === undefined) {
                throw new RequiredError('engagement', 'Required parameter engagement was null or undefined when calling insertConversationEngagement.');
            }
            var localVarPath = "/conversation/engagements";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationEngagement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(engagement || {}) : (engagement || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a pbx audio
         * @summary Insert pbx audio
         * @param {ConversationPbxAudio} pbx_audio Pbx Audio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxAudio: function (pbx_audio, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_audio' is not null or undefined
            if (pbx_audio === null || pbx_audio === undefined) {
                throw new RequiredError('pbx_audio', 'Required parameter pbx_audio was null or undefined when calling insertPbxAudio.');
            }
            var localVarPath = "/conversation/pbx/audio";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxAudio" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_audio || {}) : (pbx_audio || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a pbx menu
         * @summary Insert pbx menu
         * @param {ConversationPbxMenu} pbx_menu Pbx Menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxMenu: function (pbx_menu, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_menu' is not null or undefined
            if (pbx_menu === null || pbx_menu === undefined) {
                throw new RequiredError('pbx_menu', 'Required parameter pbx_menu was null or undefined when calling insertPbxMenu.');
            }
            var localVarPath = "/conversation/pbx/menu";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxMenu" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_menu || {}) : (pbx_menu || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a pbx queue
         * @summary Insert pbx queue
         * @param {ConversationPbxQueue} pbx_queue Pbx Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxQueue: function (pbx_queue, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_queue' is not null or undefined
            if (pbx_queue === null || pbx_queue === undefined) {
                throw new RequiredError('pbx_queue', 'Required parameter pbx_queue was null or undefined when calling insertPbxQueue.');
            }
            var localVarPath = "/conversation/pbx/queue";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxQueue" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_queue || {}) : (pbx_queue || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a pbx timeBased
         * @summary Insert pbx timeBased
         * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxTimeBased: function (pbx_timeBased, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_timeBased' is not null or undefined
            if (pbx_timeBased === null || pbx_timeBased === undefined) {
                throw new RequiredError('pbx_timeBased', 'Required parameter pbx_timeBased was null or undefined when calling insertPbxTimeBased.');
            }
            var localVarPath = "/conversation/pbx/time_based";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxTimeBased" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_timeBased || {}) : (pbx_timeBased || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a pbx timeRange
         * @summary Insert pbx timeRange
         * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxTimeRange: function (pbx_timeRange, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_timeRange' is not null or undefined
            if (pbx_timeRange === null || pbx_timeRange === undefined) {
                throw new RequiredError('pbx_timeRange', 'Required parameter pbx_timeRange was null or undefined when calling insertPbxTimeRange.');
            }
            var localVarPath = "/conversation/pbx/time_range";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxTimeRange" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_timeRange || {}) : (pbx_timeRange || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a pbx voicemailMailbox
         * @summary Insert pbx voicemailMailbox
         * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxVoicemailMailbox: function (pbx_voicemailMailbox, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pbx_voicemailMailbox' is not null or undefined
            if (pbx_voicemailMailbox === null || pbx_voicemailMailbox === undefined) {
                throw new RequiredError('pbx_voicemailMailbox', 'Required parameter pbx_voicemailMailbox was null or undefined when calling insertPbxVoicemailMailbox.');
            }
            var localVarPath = "/conversation/pbx/voicemail_mailbox";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxVoicemailMailbox" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_voicemailMailbox || {}) : (pbx_voicemailMailbox || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Join a conversation
         * @summary Join a conversation
         * @param {string} conversation_uuid
         * @param {ConversationJoinRequest} [join_request] Join request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinConversation: function (conversation_uuid, join_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling joinConversation.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}/join"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationJoinRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(join_request || {}) : (join_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Leave a conversation
         * @summary Leave a conversation
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveConversation: function (conversation_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling leaveConversation.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}/leave"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Listened pbx agent Voicemail
         * @summary Listened Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listenedPbxAgentVoicemail: function (recording_sid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'recording_sid' is not null or undefined
            if (recording_sid === null || recording_sid === undefined) {
                throw new RequiredError('recording_sid', 'Required parameter recording_sid was null or undefined when calling listenedPbxAgentVoicemail.');
            }
            var localVarPath = "/conversation/pbx/agent/voicemails/{recording_sid}/listened"
                .replace("{".concat("recording_sid", "}"), encodeURIComponent(String(recording_sid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Listened pbx queue Voicemail
         * @summary Listened Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listenedPbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queue_uuid' is not null or undefined
            if (queue_uuid === null || queue_uuid === undefined) {
                throw new RequiredError('queue_uuid', 'Required parameter queue_uuid was null or undefined when calling listenedPbxQueueVoicemail.');
            }
            // verify required parameter 'recording_sid' is not null or undefined
            if (recording_sid === null || recording_sid === undefined) {
                throw new RequiredError('recording_sid', 'Required parameter recording_sid was null or undefined when calling listenedPbxQueueVoicemail.');
            }
            var localVarPath = "/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}/listened"
                .replace("{".concat("queue_uuid", "}"), encodeURIComponent(String(queue_uuid)))
                .replace("{".concat("recording_sid", "}"), encodeURIComponent(String(recording_sid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark a conversation as read
         * @summary Mark a conversation as read
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadConversation: function (conversation_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling markReadConversation.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}/markread"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * reset statistics within the queue
         * @summary reset statistics within the queue
         * @param {string} queue_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetConversationPbxQueueStatistics: function (queue_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queue_uuid' is not null or undefined
            if (queue_uuid === null || queue_uuid === undefined) {
                throw new RequiredError('queue_uuid', 'Required parameter queue_uuid was null or undefined when calling resetConversationPbxQueueStatistics.');
            }
            var localVarPath = "/conversation/pbx/queues/{queue_uuid}/reset_statistics"
                .replace("{".concat("queue_uuid", "}"), encodeURIComponent(String(queue_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for canned messages by short_code
         * @summary Search for canned messages by short_code
         * @param {ConversationCannedMessagesSearch} search_request Search request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchConversationCannedMessages: function (search_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'search_request' is not null or undefined
            if (search_request === null || search_request === undefined) {
                throw new RequiredError('search_request', 'Required parameter search_request was null or undefined when calling searchConversationCannedMessages.');
            }
            var localVarPath = "/conversation/canned_messages/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationCannedMessagesSearch" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(search_request || {}) : (search_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unsubscribe any SMS participants in this conversation
         * @summary Unsubscribe any SMS participants in this conversation
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsUnsubscribeConversation: function (conversation_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_uuid' is not null or undefined
            if (conversation_uuid === null || conversation_uuid === undefined) {
                throw new RequiredError('conversation_uuid', 'Required parameter conversation_uuid was null or undefined when calling smsUnsubscribeConversation.');
            }
            var localVarPath = "/conversation/conversations/{conversation_uuid}/sms_unsubscribe"
                .replace("{".concat("conversation_uuid", "}"), encodeURIComponent(String(conversation_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new conversation
         * @summary Start a conversation
         * @param {ConversationStartRequest} start_request Start request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversation: function (start_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'start_request' is not null or undefined
            if (start_request === null || start_request === undefined) {
                throw new RequiredError('start_request', 'Required parameter start_request was null or undefined when calling startConversation.');
            }
            var localVarPath = "/conversation/conversations";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationStartRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(start_request || {}) : (start_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update agent profile
         * @summary Update agent profile
         * @param {ConversationAgentProfile} profile_request Profile request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentProfile: function (profile_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'profile_request' is not null or undefined
            if (profile_request === null || profile_request === undefined) {
                throw new RequiredError('profile_request', 'Required parameter profile_request was null or undefined when calling updateAgentProfile.');
            }
            var localVarPath = "/conversation/agent/profile";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationAgentProfile" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(profile_request || {}) : (profile_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a canned message
         * @summary Update a canned message
         * @param {number} conversation_canned_message_oid
         * @param {ConversationCannedMessage} canned_message Canned message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationCannedMessage: function (conversation_canned_message_oid, canned_message, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_canned_message_oid' is not null or undefined
            if (conversation_canned_message_oid === null || conversation_canned_message_oid === undefined) {
                throw new RequiredError('conversation_canned_message_oid', 'Required parameter conversation_canned_message_oid was null or undefined when calling updateConversationCannedMessage.');
            }
            // verify required parameter 'canned_message' is not null or undefined
            if (canned_message === null || canned_message === undefined) {
                throw new RequiredError('canned_message', 'Required parameter canned_message was null or undefined when calling updateConversationCannedMessage.');
            }
            var localVarPath = "/conversation/canned_messages/{conversation_canned_message_oid}"
                .replace("{".concat("conversation_canned_message_oid", "}"), encodeURIComponent(String(conversation_canned_message_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationCannedMessage" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(canned_message || {}) : (canned_message || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a department
         * @summary Update a department
         * @param {number} conversation_department_oid
         * @param {ConversationDepartment} department Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationDepartment: function (conversation_department_oid, department, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_department_oid' is not null or undefined
            if (conversation_department_oid === null || conversation_department_oid === undefined) {
                throw new RequiredError('conversation_department_oid', 'Required parameter conversation_department_oid was null or undefined when calling updateConversationDepartment.');
            }
            // verify required parameter 'department' is not null or undefined
            if (department === null || department === undefined) {
                throw new RequiredError('department', 'Required parameter department was null or undefined when calling updateConversationDepartment.');
            }
            var localVarPath = "/conversation/departments/{conversation_department_oid}"
                .replace("{".concat("conversation_department_oid", "}"), encodeURIComponent(String(conversation_department_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationDepartment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(department || {}) : (department || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a engagement
         * @summary Update a engagement
         * @param {number} conversation_engagement_oid
         * @param {ConversationEngagement} engagement Engagement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationEngagement: function (conversation_engagement_oid, engagement, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversation_engagement_oid' is not null or undefined
            if (conversation_engagement_oid === null || conversation_engagement_oid === undefined) {
                throw new RequiredError('conversation_engagement_oid', 'Required parameter conversation_engagement_oid was null or undefined when calling updateConversationEngagement.');
            }
            // verify required parameter 'engagement' is not null or undefined
            if (engagement === null || engagement === undefined) {
                throw new RequiredError('engagement', 'Required parameter engagement was null or undefined when calling updateConversationEngagement.');
            }
            var localVarPath = "/conversation/engagements/{conversation_engagement_oid}"
                .replace("{".concat("conversation_engagement_oid", "}"), encodeURIComponent(String(conversation_engagement_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationEngagement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(engagement || {}) : (engagement || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update status within the queue
         * @summary Update status within the queue
         * @param {string} queue_name
         * @param {ConversationWebchatQueueStatusUpdateRequest} status_request Status request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationWebchatQueueStatus: function (queue_name, status_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'queue_name' is not null or undefined
            if (queue_name === null || queue_name === undefined) {
                throw new RequiredError('queue_name', 'Required parameter queue_name was null or undefined when calling updateConversationWebchatQueueStatus.');
            }
            // verify required parameter 'status_request' is not null or undefined
            if (status_request === null || status_request === undefined) {
                throw new RequiredError('status_request', 'Required parameter status_request was null or undefined when calling updateConversationWebchatQueueStatus.');
            }
            var localVarPath = "/conversation/conversations/queues/{queue_name}/status"
                .replace("{".concat("queue_name", "}"), encodeURIComponent(String(queue_name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationWebchatQueueStatusUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(status_request || {}) : (status_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx agent
         * @summary Update pbx agent
         * @param {string} conversationPbxAgentUuid
         * @param {ConversationPbxAgent} pbx_agent Pbx Agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxAgent: function (conversationPbxAgentUuid, pbx_agent, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxAgentUuid' is not null or undefined
            if (conversationPbxAgentUuid === null || conversationPbxAgentUuid === undefined) {
                throw new RequiredError('conversationPbxAgentUuid', 'Required parameter conversationPbxAgentUuid was null or undefined when calling updatePbxAgent.');
            }
            // verify required parameter 'pbx_agent' is not null or undefined
            if (pbx_agent === null || pbx_agent === undefined) {
                throw new RequiredError('pbx_agent', 'Required parameter pbx_agent was null or undefined when calling updatePbxAgent.');
            }
            var localVarPath = "/conversation/pbx/agent/{conversationPbxAgentUuid}"
                .replace("{".concat("conversationPbxAgentUuid", "}"), encodeURIComponent(String(conversationPbxAgentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxAgent" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_agent || {}) : (pbx_agent || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx audio
         * @summary Update pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {ConversationPbxAudio} pbx_audio Pbx Audio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxAudio: function (conversationPbxAudioUuid, pbx_audio, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxAudioUuid' is not null or undefined
            if (conversationPbxAudioUuid === null || conversationPbxAudioUuid === undefined) {
                throw new RequiredError('conversationPbxAudioUuid', 'Required parameter conversationPbxAudioUuid was null or undefined when calling updatePbxAudio.');
            }
            // verify required parameter 'pbx_audio' is not null or undefined
            if (pbx_audio === null || pbx_audio === undefined) {
                throw new RequiredError('pbx_audio', 'Required parameter pbx_audio was null or undefined when calling updatePbxAudio.');
            }
            var localVarPath = "/conversation/pbx/audio/{conversationPbxAudioUuid}"
                .replace("{".concat("conversationPbxAudioUuid", "}"), encodeURIComponent(String(conversationPbxAudioUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxAudio" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_audio || {}) : (pbx_audio || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx menu
         * @summary Update pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {ConversationPbxMenu} pbx_menu Pbx Menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxMenu: function (conversationPbxMenuUuid, pbx_menu, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxMenuUuid' is not null or undefined
            if (conversationPbxMenuUuid === null || conversationPbxMenuUuid === undefined) {
                throw new RequiredError('conversationPbxMenuUuid', 'Required parameter conversationPbxMenuUuid was null or undefined when calling updatePbxMenu.');
            }
            // verify required parameter 'pbx_menu' is not null or undefined
            if (pbx_menu === null || pbx_menu === undefined) {
                throw new RequiredError('pbx_menu', 'Required parameter pbx_menu was null or undefined when calling updatePbxMenu.');
            }
            var localVarPath = "/conversation/pbx/menu/{conversationPbxMenuUuid}"
                .replace("{".concat("conversationPbxMenuUuid", "}"), encodeURIComponent(String(conversationPbxMenuUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxMenu" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_menu || {}) : (pbx_menu || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx phoneNumber
         * @summary Update pbx phoneNumber
         * @param {string} conversationPbxPhoneNumberUuid
         * @param {ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxPhoneNumber: function (conversationPbxPhoneNumberUuid, pbx_phoneNumber, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxPhoneNumberUuid' is not null or undefined
            if (conversationPbxPhoneNumberUuid === null || conversationPbxPhoneNumberUuid === undefined) {
                throw new RequiredError('conversationPbxPhoneNumberUuid', 'Required parameter conversationPbxPhoneNumberUuid was null or undefined when calling updatePbxPhoneNumber.');
            }
            // verify required parameter 'pbx_phoneNumber' is not null or undefined
            if (pbx_phoneNumber === null || pbx_phoneNumber === undefined) {
                throw new RequiredError('pbx_phoneNumber', 'Required parameter pbx_phoneNumber was null or undefined when calling updatePbxPhoneNumber.');
            }
            var localVarPath = "/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}"
                .replace("{".concat("conversationPbxPhoneNumberUuid", "}"), encodeURIComponent(String(conversationPbxPhoneNumberUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxPhoneNumber" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_phoneNumber || {}) : (pbx_phoneNumber || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx queue
         * @summary Update pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {ConversationPbxQueue} pbx_queue Pbx Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxQueue: function (conversationPbxQueueUuid, pbx_queue, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxQueueUuid' is not null or undefined
            if (conversationPbxQueueUuid === null || conversationPbxQueueUuid === undefined) {
                throw new RequiredError('conversationPbxQueueUuid', 'Required parameter conversationPbxQueueUuid was null or undefined when calling updatePbxQueue.');
            }
            // verify required parameter 'pbx_queue' is not null or undefined
            if (pbx_queue === null || pbx_queue === undefined) {
                throw new RequiredError('pbx_queue', 'Required parameter pbx_queue was null or undefined when calling updatePbxQueue.');
            }
            var localVarPath = "/conversation/pbx/queue/{conversationPbxQueueUuid}"
                .replace("{".concat("conversationPbxQueueUuid", "}"), encodeURIComponent(String(conversationPbxQueueUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxQueue" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_queue || {}) : (pbx_queue || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx timeBased
         * @summary Update pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxTimeBased: function (conversationPbxTimeBasedUuid, pbx_timeBased, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxTimeBasedUuid' is not null or undefined
            if (conversationPbxTimeBasedUuid === null || conversationPbxTimeBasedUuid === undefined) {
                throw new RequiredError('conversationPbxTimeBasedUuid', 'Required parameter conversationPbxTimeBasedUuid was null or undefined when calling updatePbxTimeBased.');
            }
            // verify required parameter 'pbx_timeBased' is not null or undefined
            if (pbx_timeBased === null || pbx_timeBased === undefined) {
                throw new RequiredError('pbx_timeBased', 'Required parameter pbx_timeBased was null or undefined when calling updatePbxTimeBased.');
            }
            var localVarPath = "/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}"
                .replace("{".concat("conversationPbxTimeBasedUuid", "}"), encodeURIComponent(String(conversationPbxTimeBasedUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxTimeBased" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_timeBased || {}) : (pbx_timeBased || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx timeRange
         * @summary Update pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxTimeRange: function (conversationPbxTimeRangeUuid, pbx_timeRange, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxTimeRangeUuid' is not null or undefined
            if (conversationPbxTimeRangeUuid === null || conversationPbxTimeRangeUuid === undefined) {
                throw new RequiredError('conversationPbxTimeRangeUuid', 'Required parameter conversationPbxTimeRangeUuid was null or undefined when calling updatePbxTimeRange.');
            }
            // verify required parameter 'pbx_timeRange' is not null or undefined
            if (pbx_timeRange === null || pbx_timeRange === undefined) {
                throw new RequiredError('pbx_timeRange', 'Required parameter pbx_timeRange was null or undefined when calling updatePbxTimeRange.');
            }
            var localVarPath = "/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}"
                .replace("{".concat("conversationPbxTimeRangeUuid", "}"), encodeURIComponent(String(conversationPbxTimeRangeUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxTimeRange" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_timeRange || {}) : (pbx_timeRange || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pbx voicemailMailbox
         * @summary Update pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conversationPbxVoicemailMailboxUuid' is not null or undefined
            if (conversationPbxVoicemailMailboxUuid === null || conversationPbxVoicemailMailboxUuid === undefined) {
                throw new RequiredError('conversationPbxVoicemailMailboxUuid', 'Required parameter conversationPbxVoicemailMailboxUuid was null or undefined when calling updatePbxVoicemailMailbox.');
            }
            // verify required parameter 'pbx_voicemailMailbox' is not null or undefined
            if (pbx_voicemailMailbox === null || pbx_voicemailMailbox === undefined) {
                throw new RequiredError('pbx_voicemailMailbox', 'Required parameter pbx_voicemailMailbox was null or undefined when calling updatePbxVoicemailMailbox.');
            }
            var localVarPath = "/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}"
                .replace("{".concat("conversationPbxVoicemailMailboxUuid", "}"), encodeURIComponent(String(conversationPbxVoicemailMailboxUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["conversation_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ConversationPbxVoicemailMailbox" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(pbx_voicemailMailbox || {}) : (pbx_voicemailMailbox || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ConversationApiFetchParamCreator = ConversationApiFetchParamCreator;
/**
 * ConversationApi - functional programming interface
 * @export
 */
var ConversationApiFp = function (configuration) {
    return {
        /**
         * Delete a conversation canned message
         * @summary Delete a conversation canned message
         * @param {number} conversation_canned_message_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversationCannedMessage: function (conversation_canned_message_oid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deleteConversationCannedMessage(conversation_canned_message_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a conversation department
         * @summary Delete a conversation department
         * @param {number} conversation_department_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: function (conversation_department_oid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deleteDepartment(conversation_department_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a conversation engagement
         * @summary Delete a conversation engagement
         * @param {number} conversation_engagement_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEngagement: function (conversation_engagement_oid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deleteEngagement(conversation_engagement_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete pbx agent Voicemail
         * @summary Delete Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxAgentVoicemail: function (recording_sid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxAgentVoicemail(recording_sid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a pbx audio
         * @summary Delete pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxAudio: function (conversationPbxAudioUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxAudio(conversationPbxAudioUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a pbx menu
         * @summary Delete pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxMenu: function (conversationPbxMenuUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxMenu(conversationPbxMenuUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a pbx queue
         * @summary Delete pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxQueue: function (conversationPbxQueueUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxQueue(conversationPbxQueueUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete pbx queue Voicemail
         * @summary Delete Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxQueueVoicemail(queue_uuid, recording_sid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a pbx timeBased
         * @summary Delete pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxTimeBased: function (conversationPbxTimeBasedUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxTimeBased(conversationPbxTimeBasedUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a pbx timeRange
         * @summary Delete pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxTimeRange: function (conversationPbxTimeRangeUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxTimeRange(conversationPbxTimeRangeUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a pbx voicemailMailbox
         * @summary Delete pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).deletePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called periodically by the conversation API to keep the session alive.
         * @summary Agent keep alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentKeepAlive: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getAgentKeepAlive(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the agents profile
         * @summary Get agent profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentProfile: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getAgentProfile(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the agents profile
         * @summary Get agent profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentProfiles: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getAgentProfiles(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a JWT to authorize an agent to make a websocket connection.
         * @summary Get agent websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentWebsocketAuthorization: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getAgentWebsocketAuthorization(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a conversation including the participants and messages
         * @summary Retrieve a conversation
         * @param {string} conversation_uuid
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation: function (conversation_uuid, limit, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversation(conversation_uuid, limit, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of canned messages ordered by short_code
         * @summary Retrieve a list of canned messages ordered by short_code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationCannedMessages: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationCannedMessages(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a webchat conversation context
         * @summary Get a webchat conversation context
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationContext: function (conversation_uuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationContext(conversation_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of possible department members
         * @summary Retrieve a list of possible department members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationDepartmentMemberList: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationDepartmentMemberList(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of departments ordered by name
         * @summary Retrieve a list of departments ordered by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationDepartments: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationDepartments(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve an engagement
         * @summary Retrieve an engagement
         * @param {number} conversation_engagement_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationEngagement: function (conversation_engagement_oid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationEngagement(conversation_engagement_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of engagements ordered by name
         * @summary Retrieve a list of engagements ordered by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationEngagements: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationEngagements(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve conversation messages since a particular time
         * @summary Retrieve conversation messages
         * @param {string} conversation_uuid
         * @param {number} since
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMessages: function (conversation_uuid, since, limit, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationMessages(conversation_uuid, since, limit, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a presigned conversation multimedia upload URL
         * @summary Get a presigned conversation multimedia upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMultimediaUploadUrl: function (extension, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationMultimediaUploadUrl(extension, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a pre-signed conversation multimedia upload URL
         * @summary Get a pre-signed conversation multimedia upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPbxAudioUploadUrl: function (extension, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationPbxAudioUploadUrl(extension, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves all the orders, auto orders, and customer profile for a given phone number
         * @summary Get orders and customer information for a phone number
         * @param {ConversationPbxCustomerSnapshotRequest} pbx_customer_snapshot_request Conversation pbx customer snapshot request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPbxCustomerSnapshot: function (pbx_customer_snapshot_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationPbxCustomerSnapshot(pbx_customer_snapshot_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve conversation permissions
         * @summary Retrieve conversation permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPermissions: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationPermissions(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a conversation webchat queue statuses including agent status and queue entries
         * @summary Retrieve a conversation webchat queue statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationWebchatQueueStatuses: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationWebchatQueueStatuses(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read.
         * @summary Retrieve a list of conversation summaries newest to oldest
         * @param {string} [medium]
         * @param {string} [before]
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversations: function (medium, before, _limit, _offset, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversations(medium, before, _limit, _offset, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of matching terms for a search field
         * @summary Retrieve a list of matching terms for a search field
         * @param {ConversationAutocompleteRequest} autocomplete_request Autocomplete Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsAutocomplete: function (autocomplete_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationsAutocomplete(autocomplete_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search conversations
         * @summary Search conversations
         * @param {ConversationSearchRequest} search_request Search Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsSearch: function (search_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getConversationsSearch(search_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get location data for engagement configuration
         * @summary Get location data for engagement configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationsForEngagement: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getLocationsForEngagement(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx agent
         * @summary Get pbx agent
         * @param {string} conversationPbxAgentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgent: function (conversationPbxAgentUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAgent(conversationPbxAgentUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx agent Voicemail
         * @summary Get Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgentVoicemail: function (recording_sid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAgentVoicemail(recording_sid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx agent Voicemails
         * @summary Get Agent Voicemails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgentVoicemails: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAgentVoicemails(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx agents
         * @summary Get pbx agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgents: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAgents(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx audio
         * @summary Get pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudio: function (conversationPbxAudioUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAudio(conversationPbxAudioUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx audio usage
         * @summary Get pbx audio usage
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudioUsage: function (conversationPbxAudioUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAudioUsage(conversationPbxAudioUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx audios
         * @summary Get pbx audios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudios: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxAudios(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx menu
         * @summary Get pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxMenu: function (conversationPbxMenuUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxMenu(conversationPbxMenuUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx menus
         * @summary Get pbx menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxMenus: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxMenus(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx phoneNumber
         * @summary Get pbx phoneNumber
         * @param {string} conversationPbxPhoneNumberUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxPhoneNumber: function (conversationPbxPhoneNumberUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxPhoneNumber(conversationPbxPhoneNumberUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx phoneNumbers
         * @summary Get pbx phoneNumbers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxPhoneNumbers: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxPhoneNumbers(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx queue
         * @summary Get pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueue: function (conversationPbxQueueUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxQueue(conversationPbxQueueUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx queue Voicemail
         * @summary Get Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxQueueVoicemail(queue_uuid, recording_sid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx queue voicemails
         * @summary Get Queue Voicemails
         * @param {string} queue_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueueVoicemails: function (queue_uuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxQueueVoicemails(queue_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx queues
         * @summary Get pbx queues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueues: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxQueues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx timeBased
         * @summary Get pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeBased: function (conversationPbxTimeBasedUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxTimeBased(conversationPbxTimeBasedUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx timeBaseds
         * @summary Get pbx timeBaseds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeBaseds: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxTimeBaseds(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx timeRange
         * @summary Get pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeRange: function (conversationPbxTimeRangeUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxTimeRange(conversationPbxTimeRangeUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx timeRanges
         * @summary Get pbx timeRanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeRanges: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxTimeRanges(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a pbx voicemailMailbox
         * @summary Get pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve pbx voicemailMailboxes
         * @summary Get pbx voicemailMailboxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxVoicemailMailboxes: function (options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).getPbxVoicemailMailboxes(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a canned message
         * @summary Insert a canned message
         * @param {ConversationCannedMessage} canned_message Canned message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationCannedMessage: function (canned_message, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertConversationCannedMessage(canned_message, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a department
         * @summary Insert a department
         * @param {ConversationDepartment} department Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationDepartment: function (department, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertConversationDepartment(department, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a engagement
         * @summary Insert a engagement
         * @param {ConversationEngagement} engagement Engagement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationEngagement: function (engagement, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertConversationEngagement(engagement, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a pbx audio
         * @summary Insert pbx audio
         * @param {ConversationPbxAudio} pbx_audio Pbx Audio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxAudio: function (pbx_audio, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertPbxAudio(pbx_audio, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a pbx menu
         * @summary Insert pbx menu
         * @param {ConversationPbxMenu} pbx_menu Pbx Menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxMenu: function (pbx_menu, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertPbxMenu(pbx_menu, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a pbx queue
         * @summary Insert pbx queue
         * @param {ConversationPbxQueue} pbx_queue Pbx Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxQueue: function (pbx_queue, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertPbxQueue(pbx_queue, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a pbx timeBased
         * @summary Insert pbx timeBased
         * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxTimeBased: function (pbx_timeBased, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertPbxTimeBased(pbx_timeBased, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a pbx timeRange
         * @summary Insert pbx timeRange
         * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxTimeRange: function (pbx_timeRange, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertPbxTimeRange(pbx_timeRange, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a pbx voicemailMailbox
         * @summary Insert pbx voicemailMailbox
         * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxVoicemailMailbox: function (pbx_voicemailMailbox, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).insertPbxVoicemailMailbox(pbx_voicemailMailbox, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Join a conversation
         * @summary Join a conversation
         * @param {string} conversation_uuid
         * @param {ConversationJoinRequest} [join_request] Join request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinConversation: function (conversation_uuid, join_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).joinConversation(conversation_uuid, join_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Leave a conversation
         * @summary Leave a conversation
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveConversation: function (conversation_uuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).leaveConversation(conversation_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Listened pbx agent Voicemail
         * @summary Listened Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listenedPbxAgentVoicemail: function (recording_sid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).listenedPbxAgentVoicemail(recording_sid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Listened pbx queue Voicemail
         * @summary Listened Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listenedPbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).listenedPbxQueueVoicemail(queue_uuid, recording_sid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Mark a conversation as read
         * @summary Mark a conversation as read
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadConversation: function (conversation_uuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).markReadConversation(conversation_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * reset statistics within the queue
         * @summary reset statistics within the queue
         * @param {string} queue_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetConversationPbxQueueStatistics: function (queue_uuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).resetConversationPbxQueueStatistics(queue_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search for canned messages by short_code
         * @summary Search for canned messages by short_code
         * @param {ConversationCannedMessagesSearch} search_request Search request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchConversationCannedMessages: function (search_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).searchConversationCannedMessages(search_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Unsubscribe any SMS participants in this conversation
         * @summary Unsubscribe any SMS participants in this conversation
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsUnsubscribeConversation: function (conversation_uuid, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).smsUnsubscribeConversation(conversation_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Start a new conversation
         * @summary Start a conversation
         * @param {ConversationStartRequest} start_request Start request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversation: function (start_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).startConversation(start_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update agent profile
         * @summary Update agent profile
         * @param {ConversationAgentProfile} profile_request Profile request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentProfile: function (profile_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updateAgentProfile(profile_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a canned message
         * @summary Update a canned message
         * @param {number} conversation_canned_message_oid
         * @param {ConversationCannedMessage} canned_message Canned message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationCannedMessage: function (conversation_canned_message_oid, canned_message, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updateConversationCannedMessage(conversation_canned_message_oid, canned_message, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a department
         * @summary Update a department
         * @param {number} conversation_department_oid
         * @param {ConversationDepartment} department Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationDepartment: function (conversation_department_oid, department, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updateConversationDepartment(conversation_department_oid, department, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a engagement
         * @summary Update a engagement
         * @param {number} conversation_engagement_oid
         * @param {ConversationEngagement} engagement Engagement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationEngagement: function (conversation_engagement_oid, engagement, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updateConversationEngagement(conversation_engagement_oid, engagement, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update status within the queue
         * @summary Update status within the queue
         * @param {string} queue_name
         * @param {ConversationWebchatQueueStatusUpdateRequest} status_request Status request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationWebchatQueueStatus: function (queue_name, status_request, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updateConversationWebchatQueueStatus(queue_name, status_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx agent
         * @summary Update pbx agent
         * @param {string} conversationPbxAgentUuid
         * @param {ConversationPbxAgent} pbx_agent Pbx Agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxAgent: function (conversationPbxAgentUuid, pbx_agent, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxAgent(conversationPbxAgentUuid, pbx_agent, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx audio
         * @summary Update pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {ConversationPbxAudio} pbx_audio Pbx Audio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxAudio: function (conversationPbxAudioUuid, pbx_audio, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxAudio(conversationPbxAudioUuid, pbx_audio, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx menu
         * @summary Update pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {ConversationPbxMenu} pbx_menu Pbx Menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxMenu: function (conversationPbxMenuUuid, pbx_menu, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxMenu(conversationPbxMenuUuid, pbx_menu, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx phoneNumber
         * @summary Update pbx phoneNumber
         * @param {string} conversationPbxPhoneNumberUuid
         * @param {ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxPhoneNumber: function (conversationPbxPhoneNumberUuid, pbx_phoneNumber, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxPhoneNumber(conversationPbxPhoneNumberUuid, pbx_phoneNumber, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx queue
         * @summary Update pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {ConversationPbxQueue} pbx_queue Pbx Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxQueue: function (conversationPbxQueueUuid, pbx_queue, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxQueue(conversationPbxQueueUuid, pbx_queue, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx timeBased
         * @summary Update pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxTimeBased: function (conversationPbxTimeBasedUuid, pbx_timeBased, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxTimeBased(conversationPbxTimeBasedUuid, pbx_timeBased, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx timeRange
         * @summary Update pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxTimeRange: function (conversationPbxTimeRangeUuid, pbx_timeRange, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxTimeRange(conversationPbxTimeRangeUuid, pbx_timeRange, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a pbx voicemailMailbox
         * @summary Update pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options) {
            var localVarFetchArgs = (0, exports.ConversationApiFetchParamCreator)(configuration).updatePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ConversationApiFp = ConversationApiFp;
/**
 * ConversationApi - factory interface
 * @export
 */
var ConversationApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a conversation canned message
         * @summary Delete a conversation canned message
         * @param {number} conversation_canned_message_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConversationCannedMessage: function (conversation_canned_message_oid, options) {
            return (0, exports.ConversationApiFp)(configuration).deleteConversationCannedMessage(conversation_canned_message_oid, options)(fetch, basePath);
        },
        /**
         * Delete a conversation department
         * @summary Delete a conversation department
         * @param {number} conversation_department_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: function (conversation_department_oid, options) {
            return (0, exports.ConversationApiFp)(configuration).deleteDepartment(conversation_department_oid, options)(fetch, basePath);
        },
        /**
         * Delete a conversation engagement
         * @summary Delete a conversation engagement
         * @param {number} conversation_engagement_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEngagement: function (conversation_engagement_oid, options) {
            return (0, exports.ConversationApiFp)(configuration).deleteEngagement(conversation_engagement_oid, options)(fetch, basePath);
        },
        /**
         * Delete pbx agent Voicemail
         * @summary Delete Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxAgentVoicemail: function (recording_sid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxAgentVoicemail(recording_sid, options)(fetch, basePath);
        },
        /**
         * Delete a pbx audio
         * @summary Delete pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxAudio: function (conversationPbxAudioUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxAudio(conversationPbxAudioUuid, options)(fetch, basePath);
        },
        /**
         * Delete a pbx menu
         * @summary Delete pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxMenu: function (conversationPbxMenuUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxMenu(conversationPbxMenuUuid, options)(fetch, basePath);
        },
        /**
         * Delete a pbx queue
         * @summary Delete pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxQueue: function (conversationPbxQueueUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxQueue(conversationPbxQueueUuid, options)(fetch, basePath);
        },
        /**
         * Delete pbx queue Voicemail
         * @summary Delete Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxQueueVoicemail(queue_uuid, recording_sid, options)(fetch, basePath);
        },
        /**
         * Delete a pbx timeBased
         * @summary Delete pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxTimeBased: function (conversationPbxTimeBasedUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxTimeBased(conversationPbxTimeBasedUuid, options)(fetch, basePath);
        },
        /**
         * Delete a pbx timeRange
         * @summary Delete pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxTimeRange: function (conversationPbxTimeRangeUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxTimeRange(conversationPbxTimeRangeUuid, options)(fetch, basePath);
        },
        /**
         * Delete a pbx voicemailMailbox
         * @summary Delete pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).deletePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, options)(fetch, basePath);
        },
        /**
         * Called periodically by the conversation API to keep the session alive.
         * @summary Agent keep alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentKeepAlive: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getAgentKeepAlive(options)(fetch, basePath);
        },
        /**
         * Retrieve the agents profile
         * @summary Get agent profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentProfile: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getAgentProfile(options)(fetch, basePath);
        },
        /**
         * Retrieve the agents profile
         * @summary Get agent profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentProfiles: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getAgentProfiles(options)(fetch, basePath);
        },
        /**
         * Retrieve a JWT to authorize an agent to make a websocket connection.
         * @summary Get agent websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentWebsocketAuthorization: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getAgentWebsocketAuthorization(options)(fetch, basePath);
        },
        /**
         * Retrieve a conversation including the participants and messages
         * @summary Retrieve a conversation
         * @param {string} conversation_uuid
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversation: function (conversation_uuid, limit, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversation(conversation_uuid, limit, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of canned messages ordered by short_code
         * @summary Retrieve a list of canned messages ordered by short_code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationCannedMessages: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationCannedMessages(options)(fetch, basePath);
        },
        /**
         * Get a webchat conversation context
         * @summary Get a webchat conversation context
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationContext: function (conversation_uuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationContext(conversation_uuid, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of possible department members
         * @summary Retrieve a list of possible department members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationDepartmentMemberList: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationDepartmentMemberList(options)(fetch, basePath);
        },
        /**
         * Retrieve a list of departments ordered by name
         * @summary Retrieve a list of departments ordered by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationDepartments: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationDepartments(options)(fetch, basePath);
        },
        /**
         * Retrieve an engagement
         * @summary Retrieve an engagement
         * @param {number} conversation_engagement_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationEngagement: function (conversation_engagement_oid, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationEngagement(conversation_engagement_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of engagements ordered by name
         * @summary Retrieve a list of engagements ordered by name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationEngagements: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationEngagements(options)(fetch, basePath);
        },
        /**
         * Retrieve conversation messages since a particular time
         * @summary Retrieve conversation messages
         * @param {string} conversation_uuid
         * @param {number} since
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMessages: function (conversation_uuid, since, limit, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationMessages(conversation_uuid, since, limit, options)(fetch, basePath);
        },
        /**
         * Get a presigned conversation multimedia upload URL
         * @summary Get a presigned conversation multimedia upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationMultimediaUploadUrl: function (extension, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationMultimediaUploadUrl(extension, options)(fetch, basePath);
        },
        /**
         * Get a pre-signed conversation multimedia upload URL
         * @summary Get a pre-signed conversation multimedia upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPbxAudioUploadUrl: function (extension, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationPbxAudioUploadUrl(extension, options)(fetch, basePath);
        },
        /**
         * Retrieves all the orders, auto orders, and customer profile for a given phone number
         * @summary Get orders and customer information for a phone number
         * @param {ConversationPbxCustomerSnapshotRequest} pbx_customer_snapshot_request Conversation pbx customer snapshot request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPbxCustomerSnapshot: function (pbx_customer_snapshot_request, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationPbxCustomerSnapshot(pbx_customer_snapshot_request, options)(fetch, basePath);
        },
        /**
         * Retrieve conversation permissions
         * @summary Retrieve conversation permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationPermissions: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationPermissions(options)(fetch, basePath);
        },
        /**
         * Retrieve a conversation webchat queue statuses including agent status and queue entries
         * @summary Retrieve a conversation webchat queue statuses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationWebchatQueueStatuses: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationWebchatQueueStatuses(options)(fetch, basePath);
        },
        /**
         * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read.
         * @summary Retrieve a list of conversation summaries newest to oldest
         * @param {string} [medium]
         * @param {string} [before]
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversations: function (medium, before, _limit, _offset, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversations(medium, before, _limit, _offset, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of matching terms for a search field
         * @summary Retrieve a list of matching terms for a search field
         * @param {ConversationAutocompleteRequest} autocomplete_request Autocomplete Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsAutocomplete: function (autocomplete_request, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationsAutocomplete(autocomplete_request, options)(fetch, basePath);
        },
        /**
         * Search conversations
         * @summary Search conversations
         * @param {ConversationSearchRequest} search_request Search Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsSearch: function (search_request, options) {
            return (0, exports.ConversationApiFp)(configuration).getConversationsSearch(search_request, options)(fetch, basePath);
        },
        /**
         * Get location data for engagement configuration
         * @summary Get location data for engagement configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationsForEngagement: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getLocationsForEngagement(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx agent
         * @summary Get pbx agent
         * @param {string} conversationPbxAgentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgent: function (conversationPbxAgentUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAgent(conversationPbxAgentUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx agent Voicemail
         * @summary Get Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgentVoicemail: function (recording_sid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAgentVoicemail(recording_sid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx agent Voicemails
         * @summary Get Agent Voicemails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgentVoicemails: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAgentVoicemails(options)(fetch, basePath);
        },
        /**
         * Retrieve pbx agents
         * @summary Get pbx agents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAgents: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAgents(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx audio
         * @summary Get pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudio: function (conversationPbxAudioUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAudio(conversationPbxAudioUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx audio usage
         * @summary Get pbx audio usage
         * @param {string} conversationPbxAudioUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudioUsage: function (conversationPbxAudioUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAudioUsage(conversationPbxAudioUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx audios
         * @summary Get pbx audios
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxAudios: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxAudios(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx menu
         * @summary Get pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxMenu: function (conversationPbxMenuUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxMenu(conversationPbxMenuUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx menus
         * @summary Get pbx menus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxMenus: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxMenus(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx phoneNumber
         * @summary Get pbx phoneNumber
         * @param {string} conversationPbxPhoneNumberUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxPhoneNumber: function (conversationPbxPhoneNumberUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxPhoneNumber(conversationPbxPhoneNumberUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx phoneNumbers
         * @summary Get pbx phoneNumbers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxPhoneNumbers: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxPhoneNumbers(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx queue
         * @summary Get pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueue: function (conversationPbxQueueUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxQueue(conversationPbxQueueUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx queue Voicemail
         * @summary Get Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxQueueVoicemail(queue_uuid, recording_sid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx queue voicemails
         * @summary Get Queue Voicemails
         * @param {string} queue_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueueVoicemails: function (queue_uuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxQueueVoicemails(queue_uuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx queues
         * @summary Get pbx queues
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxQueues: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxQueues(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx timeBased
         * @summary Get pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeBased: function (conversationPbxTimeBasedUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxTimeBased(conversationPbxTimeBasedUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx timeBaseds
         * @summary Get pbx timeBaseds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeBaseds: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxTimeBaseds(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx timeRange
         * @summary Get pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeRange: function (conversationPbxTimeRangeUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxTimeRange(conversationPbxTimeRangeUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx timeRanges
         * @summary Get pbx timeRanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxTimeRanges: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxTimeRanges(options)(fetch, basePath);
        },
        /**
         * Retrieve a pbx voicemailMailbox
         * @summary Get pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, options)(fetch, basePath);
        },
        /**
         * Retrieve pbx voicemailMailboxes
         * @summary Get pbx voicemailMailboxes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPbxVoicemailMailboxes: function (options) {
            return (0, exports.ConversationApiFp)(configuration).getPbxVoicemailMailboxes(options)(fetch, basePath);
        },
        /**
         * Insert a canned message
         * @summary Insert a canned message
         * @param {ConversationCannedMessage} canned_message Canned message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationCannedMessage: function (canned_message, options) {
            return (0, exports.ConversationApiFp)(configuration).insertConversationCannedMessage(canned_message, options)(fetch, basePath);
        },
        /**
         * Insert a department
         * @summary Insert a department
         * @param {ConversationDepartment} department Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationDepartment: function (department, options) {
            return (0, exports.ConversationApiFp)(configuration).insertConversationDepartment(department, options)(fetch, basePath);
        },
        /**
         * Insert a engagement
         * @summary Insert a engagement
         * @param {ConversationEngagement} engagement Engagement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertConversationEngagement: function (engagement, options) {
            return (0, exports.ConversationApiFp)(configuration).insertConversationEngagement(engagement, options)(fetch, basePath);
        },
        /**
         * Insert a pbx audio
         * @summary Insert pbx audio
         * @param {ConversationPbxAudio} pbx_audio Pbx Audio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxAudio: function (pbx_audio, options) {
            return (0, exports.ConversationApiFp)(configuration).insertPbxAudio(pbx_audio, options)(fetch, basePath);
        },
        /**
         * Insert a pbx menu
         * @summary Insert pbx menu
         * @param {ConversationPbxMenu} pbx_menu Pbx Menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxMenu: function (pbx_menu, options) {
            return (0, exports.ConversationApiFp)(configuration).insertPbxMenu(pbx_menu, options)(fetch, basePath);
        },
        /**
         * Insert a pbx queue
         * @summary Insert pbx queue
         * @param {ConversationPbxQueue} pbx_queue Pbx Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxQueue: function (pbx_queue, options) {
            return (0, exports.ConversationApiFp)(configuration).insertPbxQueue(pbx_queue, options)(fetch, basePath);
        },
        /**
         * Insert a pbx timeBased
         * @summary Insert pbx timeBased
         * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxTimeBased: function (pbx_timeBased, options) {
            return (0, exports.ConversationApiFp)(configuration).insertPbxTimeBased(pbx_timeBased, options)(fetch, basePath);
        },
        /**
         * Insert a pbx timeRange
         * @summary Insert pbx timeRange
         * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxTimeRange: function (pbx_timeRange, options) {
            return (0, exports.ConversationApiFp)(configuration).insertPbxTimeRange(pbx_timeRange, options)(fetch, basePath);
        },
        /**
         * Insert a pbx voicemailMailbox
         * @summary Insert pbx voicemailMailbox
         * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertPbxVoicemailMailbox: function (pbx_voicemailMailbox, options) {
            return (0, exports.ConversationApiFp)(configuration).insertPbxVoicemailMailbox(pbx_voicemailMailbox, options)(fetch, basePath);
        },
        /**
         * Join a conversation
         * @summary Join a conversation
         * @param {string} conversation_uuid
         * @param {ConversationJoinRequest} [join_request] Join request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinConversation: function (conversation_uuid, join_request, options) {
            return (0, exports.ConversationApiFp)(configuration).joinConversation(conversation_uuid, join_request, options)(fetch, basePath);
        },
        /**
         * Leave a conversation
         * @summary Leave a conversation
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveConversation: function (conversation_uuid, options) {
            return (0, exports.ConversationApiFp)(configuration).leaveConversation(conversation_uuid, options)(fetch, basePath);
        },
        /**
         * Listened pbx agent Voicemail
         * @summary Listened Agent Voicemail
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listenedPbxAgentVoicemail: function (recording_sid, options) {
            return (0, exports.ConversationApiFp)(configuration).listenedPbxAgentVoicemail(recording_sid, options)(fetch, basePath);
        },
        /**
         * Listened pbx queue Voicemail
         * @summary Listened Queue Voicemail
         * @param {string} queue_uuid
         * @param {string} recording_sid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listenedPbxQueueVoicemail: function (queue_uuid, recording_sid, options) {
            return (0, exports.ConversationApiFp)(configuration).listenedPbxQueueVoicemail(queue_uuid, recording_sid, options)(fetch, basePath);
        },
        /**
         * Mark a conversation as read
         * @summary Mark a conversation as read
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markReadConversation: function (conversation_uuid, options) {
            return (0, exports.ConversationApiFp)(configuration).markReadConversation(conversation_uuid, options)(fetch, basePath);
        },
        /**
         * reset statistics within the queue
         * @summary reset statistics within the queue
         * @param {string} queue_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetConversationPbxQueueStatistics: function (queue_uuid, options) {
            return (0, exports.ConversationApiFp)(configuration).resetConversationPbxQueueStatistics(queue_uuid, options)(fetch, basePath);
        },
        /**
         * Search for canned messages by short_code
         * @summary Search for canned messages by short_code
         * @param {ConversationCannedMessagesSearch} search_request Search request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchConversationCannedMessages: function (search_request, options) {
            return (0, exports.ConversationApiFp)(configuration).searchConversationCannedMessages(search_request, options)(fetch, basePath);
        },
        /**
         * Unsubscribe any SMS participants in this conversation
         * @summary Unsubscribe any SMS participants in this conversation
         * @param {string} conversation_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smsUnsubscribeConversation: function (conversation_uuid, options) {
            return (0, exports.ConversationApiFp)(configuration).smsUnsubscribeConversation(conversation_uuid, options)(fetch, basePath);
        },
        /**
         * Start a new conversation
         * @summary Start a conversation
         * @param {ConversationStartRequest} start_request Start request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startConversation: function (start_request, options) {
            return (0, exports.ConversationApiFp)(configuration).startConversation(start_request, options)(fetch, basePath);
        },
        /**
         * Update agent profile
         * @summary Update agent profile
         * @param {ConversationAgentProfile} profile_request Profile request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentProfile: function (profile_request, options) {
            return (0, exports.ConversationApiFp)(configuration).updateAgentProfile(profile_request, options)(fetch, basePath);
        },
        /**
         * Update a canned message
         * @summary Update a canned message
         * @param {number} conversation_canned_message_oid
         * @param {ConversationCannedMessage} canned_message Canned message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationCannedMessage: function (conversation_canned_message_oid, canned_message, options) {
            return (0, exports.ConversationApiFp)(configuration).updateConversationCannedMessage(conversation_canned_message_oid, canned_message, options)(fetch, basePath);
        },
        /**
         * Update a department
         * @summary Update a department
         * @param {number} conversation_department_oid
         * @param {ConversationDepartment} department Department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationDepartment: function (conversation_department_oid, department, options) {
            return (0, exports.ConversationApiFp)(configuration).updateConversationDepartment(conversation_department_oid, department, options)(fetch, basePath);
        },
        /**
         * Update a engagement
         * @summary Update a engagement
         * @param {number} conversation_engagement_oid
         * @param {ConversationEngagement} engagement Engagement
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationEngagement: function (conversation_engagement_oid, engagement, options) {
            return (0, exports.ConversationApiFp)(configuration).updateConversationEngagement(conversation_engagement_oid, engagement, options)(fetch, basePath);
        },
        /**
         * Update status within the queue
         * @summary Update status within the queue
         * @param {string} queue_name
         * @param {ConversationWebchatQueueStatusUpdateRequest} status_request Status request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConversationWebchatQueueStatus: function (queue_name, status_request, options) {
            return (0, exports.ConversationApiFp)(configuration).updateConversationWebchatQueueStatus(queue_name, status_request, options)(fetch, basePath);
        },
        /**
         * Update a pbx agent
         * @summary Update pbx agent
         * @param {string} conversationPbxAgentUuid
         * @param {ConversationPbxAgent} pbx_agent Pbx Agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxAgent: function (conversationPbxAgentUuid, pbx_agent, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxAgent(conversationPbxAgentUuid, pbx_agent, options)(fetch, basePath);
        },
        /**
         * Update a pbx audio
         * @summary Update pbx audio
         * @param {string} conversationPbxAudioUuid
         * @param {ConversationPbxAudio} pbx_audio Pbx Audio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxAudio: function (conversationPbxAudioUuid, pbx_audio, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxAudio(conversationPbxAudioUuid, pbx_audio, options)(fetch, basePath);
        },
        /**
         * Update a pbx menu
         * @summary Update pbx menu
         * @param {string} conversationPbxMenuUuid
         * @param {ConversationPbxMenu} pbx_menu Pbx Menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxMenu: function (conversationPbxMenuUuid, pbx_menu, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxMenu(conversationPbxMenuUuid, pbx_menu, options)(fetch, basePath);
        },
        /**
         * Update a pbx phoneNumber
         * @summary Update pbx phoneNumber
         * @param {string} conversationPbxPhoneNumberUuid
         * @param {ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxPhoneNumber: function (conversationPbxPhoneNumberUuid, pbx_phoneNumber, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxPhoneNumber(conversationPbxPhoneNumberUuid, pbx_phoneNumber, options)(fetch, basePath);
        },
        /**
         * Update a pbx queue
         * @summary Update pbx queue
         * @param {string} conversationPbxQueueUuid
         * @param {ConversationPbxQueue} pbx_queue Pbx Queue
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxQueue: function (conversationPbxQueueUuid, pbx_queue, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxQueue(conversationPbxQueueUuid, pbx_queue, options)(fetch, basePath);
        },
        /**
         * Update a pbx timeBased
         * @summary Update pbx timeBased
         * @param {string} conversationPbxTimeBasedUuid
         * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxTimeBased: function (conversationPbxTimeBasedUuid, pbx_timeBased, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxTimeBased(conversationPbxTimeBasedUuid, pbx_timeBased, options)(fetch, basePath);
        },
        /**
         * Update a pbx timeRange
         * @summary Update pbx timeRange
         * @param {string} conversationPbxTimeRangeUuid
         * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxTimeRange: function (conversationPbxTimeRangeUuid, pbx_timeRange, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxTimeRange(conversationPbxTimeRangeUuid, pbx_timeRange, options)(fetch, basePath);
        },
        /**
         * Update a pbx voicemailMailbox
         * @summary Update pbx voicemailMailbox
         * @param {string} conversationPbxVoicemailMailboxUuid
         * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePbxVoicemailMailbox: function (conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options) {
            return (0, exports.ConversationApiFp)(configuration).updatePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options)(fetch, basePath);
        },
    };
};
exports.ConversationApiFactory = ConversationApiFactory;
/**
 * ConversationApi - object-oriented interface
 * @export
 * @class ConversationApi
 * @extends {BaseAPI}
 */
var ConversationApi = /** @class */ (function (_super) {
    __extends(ConversationApi, _super);
    function ConversationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a conversation canned message
     * @summary Delete a conversation canned message
     * @param {number} conversation_canned_message_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deleteConversationCannedMessage = function (conversation_canned_message_oid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deleteConversationCannedMessage(conversation_canned_message_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a conversation department
     * @summary Delete a conversation department
     * @param {number} conversation_department_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deleteDepartment = function (conversation_department_oid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deleteDepartment(conversation_department_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a conversation engagement
     * @summary Delete a conversation engagement
     * @param {number} conversation_engagement_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deleteEngagement = function (conversation_engagement_oid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deleteEngagement(conversation_engagement_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete pbx agent Voicemail
     * @summary Delete Agent Voicemail
     * @param {string} recording_sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxAgentVoicemail = function (recording_sid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxAgentVoicemail(recording_sid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a pbx audio
     * @summary Delete pbx audio
     * @param {string} conversationPbxAudioUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxAudio = function (conversationPbxAudioUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxAudio(conversationPbxAudioUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a pbx menu
     * @summary Delete pbx menu
     * @param {string} conversationPbxMenuUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxMenu = function (conversationPbxMenuUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxMenu(conversationPbxMenuUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a pbx queue
     * @summary Delete pbx queue
     * @param {string} conversationPbxQueueUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxQueue = function (conversationPbxQueueUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxQueue(conversationPbxQueueUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete pbx queue Voicemail
     * @summary Delete Queue Voicemail
     * @param {string} queue_uuid
     * @param {string} recording_sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxQueueVoicemail = function (queue_uuid, recording_sid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxQueueVoicemail(queue_uuid, recording_sid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a pbx timeBased
     * @summary Delete pbx timeBased
     * @param {string} conversationPbxTimeBasedUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxTimeBased = function (conversationPbxTimeBasedUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxTimeBased(conversationPbxTimeBasedUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a pbx timeRange
     * @summary Delete pbx timeRange
     * @param {string} conversationPbxTimeRangeUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxTimeRange = function (conversationPbxTimeRangeUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxTimeRange(conversationPbxTimeRangeUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a pbx voicemailMailbox
     * @summary Delete pbx voicemailMailbox
     * @param {string} conversationPbxVoicemailMailboxUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.deletePbxVoicemailMailbox = function (conversationPbxVoicemailMailboxUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).deletePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Called periodically by the conversation API to keep the session alive.
     * @summary Agent keep alive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getAgentKeepAlive = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getAgentKeepAlive(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the agents profile
     * @summary Get agent profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getAgentProfile = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getAgentProfile(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the agents profile
     * @summary Get agent profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getAgentProfiles = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getAgentProfiles(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a JWT to authorize an agent to make a websocket connection.
     * @summary Get agent websocket authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getAgentWebsocketAuthorization = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getAgentWebsocketAuthorization(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a conversation including the participants and messages
     * @summary Retrieve a conversation
     * @param {string} conversation_uuid
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversation = function (conversation_uuid, limit, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversation(conversation_uuid, limit, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of canned messages ordered by short_code
     * @summary Retrieve a list of canned messages ordered by short_code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationCannedMessages = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationCannedMessages(options)(this.fetch, this.basePath);
    };
    /**
     * Get a webchat conversation context
     * @summary Get a webchat conversation context
     * @param {string} conversation_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationContext = function (conversation_uuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationContext(conversation_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of possible department members
     * @summary Retrieve a list of possible department members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationDepartmentMemberList = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationDepartmentMemberList(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of departments ordered by name
     * @summary Retrieve a list of departments ordered by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationDepartments = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationDepartments(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve an engagement
     * @summary Retrieve an engagement
     * @param {number} conversation_engagement_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationEngagement = function (conversation_engagement_oid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationEngagement(conversation_engagement_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of engagements ordered by name
     * @summary Retrieve a list of engagements ordered by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationEngagements = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationEngagements(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve conversation messages since a particular time
     * @summary Retrieve conversation messages
     * @param {string} conversation_uuid
     * @param {number} since
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationMessages = function (conversation_uuid, since, limit, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationMessages(conversation_uuid, since, limit, options)(this.fetch, this.basePath);
    };
    /**
     * Get a presigned conversation multimedia upload URL
     * @summary Get a presigned conversation multimedia upload URL
     * @param {string} extension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationMultimediaUploadUrl = function (extension, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationMultimediaUploadUrl(extension, options)(this.fetch, this.basePath);
    };
    /**
     * Get a pre-signed conversation multimedia upload URL
     * @summary Get a pre-signed conversation multimedia upload URL
     * @param {string} extension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationPbxAudioUploadUrl = function (extension, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationPbxAudioUploadUrl(extension, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves all the orders, auto orders, and customer profile for a given phone number
     * @summary Get orders and customer information for a phone number
     * @param {ConversationPbxCustomerSnapshotRequest} pbx_customer_snapshot_request Conversation pbx customer snapshot request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationPbxCustomerSnapshot = function (pbx_customer_snapshot_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationPbxCustomerSnapshot(pbx_customer_snapshot_request, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve conversation permissions
     * @summary Retrieve conversation permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationPermissions = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationPermissions(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a conversation webchat queue statuses including agent status and queue entries
     * @summary Retrieve a conversation webchat queue statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationWebchatQueueStatuses = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationWebchatQueueStatuses(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read.
     * @summary Retrieve a list of conversation summaries newest to oldest
     * @param {string} [medium]
     * @param {string} [before]
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversations = function (medium, before, _limit, _offset, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversations(medium, before, _limit, _offset, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of matching terms for a search field
     * @summary Retrieve a list of matching terms for a search field
     * @param {ConversationAutocompleteRequest} autocomplete_request Autocomplete Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationsAutocomplete = function (autocomplete_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationsAutocomplete(autocomplete_request, options)(this.fetch, this.basePath);
    };
    /**
     * Search conversations
     * @summary Search conversations
     * @param {ConversationSearchRequest} search_request Search Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getConversationsSearch = function (search_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getConversationsSearch(search_request, options)(this.fetch, this.basePath);
    };
    /**
     * Get location data for engagement configuration
     * @summary Get location data for engagement configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getLocationsForEngagement = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getLocationsForEngagement(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx agent
     * @summary Get pbx agent
     * @param {string} conversationPbxAgentUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAgent = function (conversationPbxAgentUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAgent(conversationPbxAgentUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx agent Voicemail
     * @summary Get Agent Voicemail
     * @param {string} recording_sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAgentVoicemail = function (recording_sid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAgentVoicemail(recording_sid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx agent Voicemails
     * @summary Get Agent Voicemails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAgentVoicemails = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAgentVoicemails(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx agents
     * @summary Get pbx agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAgents = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAgents(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx audio
     * @summary Get pbx audio
     * @param {string} conversationPbxAudioUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAudio = function (conversationPbxAudioUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAudio(conversationPbxAudioUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx audio usage
     * @summary Get pbx audio usage
     * @param {string} conversationPbxAudioUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAudioUsage = function (conversationPbxAudioUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAudioUsage(conversationPbxAudioUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx audios
     * @summary Get pbx audios
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxAudios = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxAudios(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx menu
     * @summary Get pbx menu
     * @param {string} conversationPbxMenuUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxMenu = function (conversationPbxMenuUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxMenu(conversationPbxMenuUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx menus
     * @summary Get pbx menus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxMenus = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxMenus(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx phoneNumber
     * @summary Get pbx phoneNumber
     * @param {string} conversationPbxPhoneNumberUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxPhoneNumber = function (conversationPbxPhoneNumberUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxPhoneNumber(conversationPbxPhoneNumberUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx phoneNumbers
     * @summary Get pbx phoneNumbers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxPhoneNumbers = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxPhoneNumbers(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx queue
     * @summary Get pbx queue
     * @param {string} conversationPbxQueueUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxQueue = function (conversationPbxQueueUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxQueue(conversationPbxQueueUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx queue Voicemail
     * @summary Get Queue Voicemail
     * @param {string} queue_uuid
     * @param {string} recording_sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxQueueVoicemail = function (queue_uuid, recording_sid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxQueueVoicemail(queue_uuid, recording_sid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx queue voicemails
     * @summary Get Queue Voicemails
     * @param {string} queue_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxQueueVoicemails = function (queue_uuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxQueueVoicemails(queue_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx queues
     * @summary Get pbx queues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxQueues = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxQueues(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx timeBased
     * @summary Get pbx timeBased
     * @param {string} conversationPbxTimeBasedUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxTimeBased = function (conversationPbxTimeBasedUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxTimeBased(conversationPbxTimeBasedUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx timeBaseds
     * @summary Get pbx timeBaseds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxTimeBaseds = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxTimeBaseds(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx timeRange
     * @summary Get pbx timeRange
     * @param {string} conversationPbxTimeRangeUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxTimeRange = function (conversationPbxTimeRangeUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxTimeRange(conversationPbxTimeRangeUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx timeRanges
     * @summary Get pbx timeRanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxTimeRanges = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxTimeRanges(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a pbx voicemailMailbox
     * @summary Get pbx voicemailMailbox
     * @param {string} conversationPbxVoicemailMailboxUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxVoicemailMailbox = function (conversationPbxVoicemailMailboxUuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve pbx voicemailMailboxes
     * @summary Get pbx voicemailMailboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.getPbxVoicemailMailboxes = function (options) {
        return (0, exports.ConversationApiFp)(this.configuration).getPbxVoicemailMailboxes(options)(this.fetch, this.basePath);
    };
    /**
     * Insert a canned message
     * @summary Insert a canned message
     * @param {ConversationCannedMessage} canned_message Canned message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertConversationCannedMessage = function (canned_message, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertConversationCannedMessage(canned_message, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a department
     * @summary Insert a department
     * @param {ConversationDepartment} department Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertConversationDepartment = function (department, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertConversationDepartment(department, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a engagement
     * @summary Insert a engagement
     * @param {ConversationEngagement} engagement Engagement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertConversationEngagement = function (engagement, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertConversationEngagement(engagement, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a pbx audio
     * @summary Insert pbx audio
     * @param {ConversationPbxAudio} pbx_audio Pbx Audio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertPbxAudio = function (pbx_audio, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertPbxAudio(pbx_audio, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a pbx menu
     * @summary Insert pbx menu
     * @param {ConversationPbxMenu} pbx_menu Pbx Menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertPbxMenu = function (pbx_menu, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertPbxMenu(pbx_menu, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a pbx queue
     * @summary Insert pbx queue
     * @param {ConversationPbxQueue} pbx_queue Pbx Queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertPbxQueue = function (pbx_queue, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertPbxQueue(pbx_queue, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a pbx timeBased
     * @summary Insert pbx timeBased
     * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertPbxTimeBased = function (pbx_timeBased, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertPbxTimeBased(pbx_timeBased, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a pbx timeRange
     * @summary Insert pbx timeRange
     * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertPbxTimeRange = function (pbx_timeRange, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertPbxTimeRange(pbx_timeRange, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a pbx voicemailMailbox
     * @summary Insert pbx voicemailMailbox
     * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.insertPbxVoicemailMailbox = function (pbx_voicemailMailbox, options) {
        return (0, exports.ConversationApiFp)(this.configuration).insertPbxVoicemailMailbox(pbx_voicemailMailbox, options)(this.fetch, this.basePath);
    };
    /**
     * Join a conversation
     * @summary Join a conversation
     * @param {string} conversation_uuid
     * @param {ConversationJoinRequest} [join_request] Join request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.joinConversation = function (conversation_uuid, join_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).joinConversation(conversation_uuid, join_request, options)(this.fetch, this.basePath);
    };
    /**
     * Leave a conversation
     * @summary Leave a conversation
     * @param {string} conversation_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.leaveConversation = function (conversation_uuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).leaveConversation(conversation_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Listened pbx agent Voicemail
     * @summary Listened Agent Voicemail
     * @param {string} recording_sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.listenedPbxAgentVoicemail = function (recording_sid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).listenedPbxAgentVoicemail(recording_sid, options)(this.fetch, this.basePath);
    };
    /**
     * Listened pbx queue Voicemail
     * @summary Listened Queue Voicemail
     * @param {string} queue_uuid
     * @param {string} recording_sid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.listenedPbxQueueVoicemail = function (queue_uuid, recording_sid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).listenedPbxQueueVoicemail(queue_uuid, recording_sid, options)(this.fetch, this.basePath);
    };
    /**
     * Mark a conversation as read
     * @summary Mark a conversation as read
     * @param {string} conversation_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.markReadConversation = function (conversation_uuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).markReadConversation(conversation_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * reset statistics within the queue
     * @summary reset statistics within the queue
     * @param {string} queue_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.resetConversationPbxQueueStatistics = function (queue_uuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).resetConversationPbxQueueStatistics(queue_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Search for canned messages by short_code
     * @summary Search for canned messages by short_code
     * @param {ConversationCannedMessagesSearch} search_request Search request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.searchConversationCannedMessages = function (search_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).searchConversationCannedMessages(search_request, options)(this.fetch, this.basePath);
    };
    /**
     * Unsubscribe any SMS participants in this conversation
     * @summary Unsubscribe any SMS participants in this conversation
     * @param {string} conversation_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.smsUnsubscribeConversation = function (conversation_uuid, options) {
        return (0, exports.ConversationApiFp)(this.configuration).smsUnsubscribeConversation(conversation_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Start a new conversation
     * @summary Start a conversation
     * @param {ConversationStartRequest} start_request Start request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.startConversation = function (start_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).startConversation(start_request, options)(this.fetch, this.basePath);
    };
    /**
     * Update agent profile
     * @summary Update agent profile
     * @param {ConversationAgentProfile} profile_request Profile request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updateAgentProfile = function (profile_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updateAgentProfile(profile_request, options)(this.fetch, this.basePath);
    };
    /**
     * Update a canned message
     * @summary Update a canned message
     * @param {number} conversation_canned_message_oid
     * @param {ConversationCannedMessage} canned_message Canned message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updateConversationCannedMessage = function (conversation_canned_message_oid, canned_message, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updateConversationCannedMessage(conversation_canned_message_oid, canned_message, options)(this.fetch, this.basePath);
    };
    /**
     * Update a department
     * @summary Update a department
     * @param {number} conversation_department_oid
     * @param {ConversationDepartment} department Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updateConversationDepartment = function (conversation_department_oid, department, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updateConversationDepartment(conversation_department_oid, department, options)(this.fetch, this.basePath);
    };
    /**
     * Update a engagement
     * @summary Update a engagement
     * @param {number} conversation_engagement_oid
     * @param {ConversationEngagement} engagement Engagement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updateConversationEngagement = function (conversation_engagement_oid, engagement, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updateConversationEngagement(conversation_engagement_oid, engagement, options)(this.fetch, this.basePath);
    };
    /**
     * Update status within the queue
     * @summary Update status within the queue
     * @param {string} queue_name
     * @param {ConversationWebchatQueueStatusUpdateRequest} status_request Status request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updateConversationWebchatQueueStatus = function (queue_name, status_request, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updateConversationWebchatQueueStatus(queue_name, status_request, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx agent
     * @summary Update pbx agent
     * @param {string} conversationPbxAgentUuid
     * @param {ConversationPbxAgent} pbx_agent Pbx Agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxAgent = function (conversationPbxAgentUuid, pbx_agent, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxAgent(conversationPbxAgentUuid, pbx_agent, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx audio
     * @summary Update pbx audio
     * @param {string} conversationPbxAudioUuid
     * @param {ConversationPbxAudio} pbx_audio Pbx Audio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxAudio = function (conversationPbxAudioUuid, pbx_audio, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxAudio(conversationPbxAudioUuid, pbx_audio, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx menu
     * @summary Update pbx menu
     * @param {string} conversationPbxMenuUuid
     * @param {ConversationPbxMenu} pbx_menu Pbx Menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxMenu = function (conversationPbxMenuUuid, pbx_menu, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxMenu(conversationPbxMenuUuid, pbx_menu, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx phoneNumber
     * @summary Update pbx phoneNumber
     * @param {string} conversationPbxPhoneNumberUuid
     * @param {ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxPhoneNumber = function (conversationPbxPhoneNumberUuid, pbx_phoneNumber, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxPhoneNumber(conversationPbxPhoneNumberUuid, pbx_phoneNumber, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx queue
     * @summary Update pbx queue
     * @param {string} conversationPbxQueueUuid
     * @param {ConversationPbxQueue} pbx_queue Pbx Queue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxQueue = function (conversationPbxQueueUuid, pbx_queue, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxQueue(conversationPbxQueueUuid, pbx_queue, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx timeBased
     * @summary Update pbx timeBased
     * @param {string} conversationPbxTimeBasedUuid
     * @param {ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxTimeBased = function (conversationPbxTimeBasedUuid, pbx_timeBased, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxTimeBased(conversationPbxTimeBasedUuid, pbx_timeBased, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx timeRange
     * @summary Update pbx timeRange
     * @param {string} conversationPbxTimeRangeUuid
     * @param {ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxTimeRange = function (conversationPbxTimeRangeUuid, pbx_timeRange, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxTimeRange(conversationPbxTimeRangeUuid, pbx_timeRange, options)(this.fetch, this.basePath);
    };
    /**
     * Update a pbx voicemailMailbox
     * @summary Update pbx voicemailMailbox
     * @param {string} conversationPbxVoicemailMailboxUuid
     * @param {ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApi
     */
    ConversationApi.prototype.updatePbxVoicemailMailbox = function (conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options) {
        return (0, exports.ConversationApiFp)(this.configuration).updatePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, options)(this.fetch, this.basePath);
    };
    return ConversationApi;
}(BaseAPI));
exports.ConversationApi = ConversationApi;
/**
 * CouponApi - fetch parameter creator
 * @export
 */
var CouponApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a coupon on the UltraCart account.
         * @summary Delete a coupon
         * @param {number} coupon_oid The coupon_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: function (coupon_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_oid' is not null or undefined
            if (coupon_oid === null || coupon_oid === undefined) {
                throw new RequiredError('coupon_oid', 'Required parameter coupon_oid was null or undefined when calling deleteCoupon.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}"
                .replace("{".concat("coupon_oid", "}"), encodeURIComponent(String(coupon_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete coupons on the UltraCart account.
         * @summary Deletes multiple coupons
         * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponsByCode: function (coupon_delete_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_delete_request' is not null or undefined
            if (coupon_delete_request === null || coupon_delete_request === undefined) {
                throw new RequiredError('coupon_delete_request', 'Required parameter coupon_delete_request was null or undefined when calling deleteCouponsByCode.');
            }
            var localVarPath = "/coupon/coupons/by_code";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponDeletesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon_delete_request || {}) : (coupon_delete_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete coupons on the UltraCart account.
         * @summary Deletes multiple coupons
         * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponsByOid: function (coupon_delete_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_delete_request' is not null or undefined
            if (coupon_delete_request === null || coupon_delete_request === undefined) {
                throw new RequiredError('coupon_delete_request', 'Required parameter coupon_delete_request was null or undefined when calling deleteCouponsByOid.');
            }
            var localVarPath = "/coupon/coupons/by_oid";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponDeletesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon_delete_request || {}) : (coupon_delete_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Determines if a coupon merchant code already exists.
         * @summary Determines if a coupon merchant code already exists
         * @param {string} merchant_code The coupon merchant code to examine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doesCouponCodeExist: function (merchant_code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_code' is not null or undefined
            if (merchant_code === null || merchant_code === undefined) {
                throw new RequiredError('merchant_code', 'Required parameter merchant_code was null or undefined when calling doesCouponCodeExist.');
            }
            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/exists"
                .replace("{".concat("merchant_code", "}"), encodeURIComponent(String(merchant_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate one time codes for a coupon
         * @summary Generates one time codes for a coupon
         * @param {number} coupon_oid The coupon oid to generate codes.
         * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCouponCodes: function (coupon_oid, coupon_codes_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_oid' is not null or undefined
            if (coupon_oid === null || coupon_oid === undefined) {
                throw new RequiredError('coupon_oid', 'Required parameter coupon_oid was null or undefined when calling generateCouponCodes.');
            }
            // verify required parameter 'coupon_codes_request' is not null or undefined
            if (coupon_codes_request === null || coupon_codes_request === undefined) {
                throw new RequiredError('coupon_codes_request', 'Required parameter coupon_codes_request was null or undefined when calling generateCouponCodes.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}/generate_codes"
                .replace("{".concat("coupon_oid", "}"), encodeURIComponent(String(coupon_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponCodesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon_codes_request || {}) : (coupon_codes_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate one time codes by merchant code
         * @summary Generates one time codes by merchant code
         * @param {string} merchant_code The merchant code to generate one time codes.
         * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOneTimeCodesByMerchantCode: function (merchant_code, coupon_codes_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_code' is not null or undefined
            if (merchant_code === null || merchant_code === undefined) {
                throw new RequiredError('merchant_code', 'Required parameter merchant_code was null or undefined when calling generateOneTimeCodesByMerchantCode.');
            }
            // verify required parameter 'coupon_codes_request' is not null or undefined
            if (coupon_codes_request === null || coupon_codes_request === undefined) {
                throw new RequiredError('coupon_codes_request', 'Required parameter coupon_codes_request was null or undefined when calling generateOneTimeCodesByMerchantCode.');
            }
            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/generate_codes"
                .replace("{".concat("merchant_code", "}"), encodeURIComponent(String(merchant_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponCodesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon_codes_request || {}) : (coupon_codes_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve auto apply rules and conditions
         * @summary Retrieve auto apply rules and conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoApply: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/coupon/auto_apply";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single coupon using the specified coupon profile oid.
         * @summary Retrieve a coupon
         * @param {number} coupon_oid The coupon oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: function (coupon_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_oid' is not null or undefined
            if (coupon_oid === null || coupon_oid === undefined) {
                throw new RequiredError('coupon_oid', 'Required parameter coupon_oid was null or undefined when calling getCoupon.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}"
                .replace("{".concat("coupon_oid", "}"), encodeURIComponent(String(coupon_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single coupon using the specified merchant code.
         * @summary Retrieve a coupon by merchant code
         * @param {string} merchant_code The coupon merchant code to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchantCode: function (merchant_code, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_code' is not null or undefined
            if (merchant_code === null || merchant_code === undefined) {
                throw new RequiredError('merchant_code', 'Required parameter merchant_code was null or undefined when calling getCouponByMerchantCode.');
            }
            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}"
                .replace("{".concat("merchant_code", "}"), encodeURIComponent(String(merchant_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons
         * @param {string} [merchant_code] Merchant code
         * @param {string} [description] Description
         * @param {string} [coupon_type] Coupon type
         * @param {string} [start_date_begin] Start date begin
         * @param {string} [start_date_end] Start date end
         * @param {string} [expiration_date_begin] Expiration date begin
         * @param {string} [expiration_date_end] Expiration date end
         * @param {number} [affiliate_oid] Affiliate oid
         * @param {boolean} [exclude_expired] Exclude expired
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: function (merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/coupon/coupons";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (merchant_code !== undefined) {
                localVarQueryParameter['merchant_code'] = merchant_code;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (coupon_type !== undefined) {
                localVarQueryParameter['coupon_type'] = coupon_type;
            }
            if (start_date_begin !== undefined) {
                localVarQueryParameter['start_date_begin'] = start_date_begin;
            }
            if (start_date_end !== undefined) {
                localVarQueryParameter['start_date_end'] = start_date_end;
            }
            if (expiration_date_begin !== undefined) {
                localVarQueryParameter['expiration_date_begin'] = expiration_date_begin;
            }
            if (expiration_date_end !== undefined) {
                localVarQueryParameter['expiration_date_end'] = expiration_date_end;
            }
            if (affiliate_oid !== undefined) {
                localVarQueryParameter['affiliate_oid'] = affiliate_oid;
            }
            if (exclude_expired !== undefined) {
                localVarQueryParameter['exclude_expired'] = exclude_expired;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons by query
         * @param {CouponQuery} coupon_query Coupon query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsByQuery: function (coupon_query, _limit, _offset, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_query' is not null or undefined
            if (coupon_query === null || coupon_query === undefined) {
                throw new RequiredError('coupon_query', 'Required parameter coupon_query was null or undefined when calling getCouponsByQuery.');
            }
            var localVarPath = "/coupon/coupons/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon_query || {}) : (coupon_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve values needed for a coupon editor
         * @summary Retrieve values needed for a coupon editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/coupon/editor_values";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a coupon on the UltraCart account.
         * @summary Insert a coupon
         * @param {Coupon} coupon Coupon to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupon: function (coupon, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon' is not null or undefined
            if (coupon === null || coupon === undefined) {
                throw new RequiredError('coupon', 'Required parameter coupon was null or undefined when calling insertCoupon.');
            }
            var localVarPath = "/coupon/coupons";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Coupon" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon || {}) : (coupon || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert multiple coupon on the UltraCart account.
         * @summary Insert multiple coupons
         * @param {CouponsRequest} coupons_request Coupons to insert (maximum 50)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupons: function (coupons_request, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupons_request' is not null or undefined
            if (coupons_request === null || coupons_request === undefined) {
                throw new RequiredError('coupons_request', 'Required parameter coupons_request was null or undefined when calling insertCoupons.');
            }
            var localVarPath = "/coupon/coupons/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupons_request || {}) : (coupons_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for items to display within a coupon editor and assign to coupons
         * @summary Searches for items to display within a coupon editor and assign to coupons
         * @param {string} [s]
         * @param {number} [m]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchItems: function (s, m, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/coupon/searchItems";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }
            if (m !== undefined) {
                localVarQueryParameter['m'] = m;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update auto apply rules and conditions
         * @summary Update auto apply rules and conditions
         * @param {CouponAutoApplyConditions} conditions Conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoApply: function (conditions, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'conditions' is not null or undefined
            if (conditions === null || conditions === undefined) {
                throw new RequiredError('conditions', 'Required parameter conditions was null or undefined when calling updateAutoApply.');
            }
            var localVarPath = "/coupon/auto_apply";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponAutoApplyConditions" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(conditions || {}) : (conditions || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a coupon on the UltraCart account.
         * @summary Update a coupon
         * @param {Coupon} coupon Coupon to update
         * @param {number} coupon_oid The coupon_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: function (coupon, coupon_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon' is not null or undefined
            if (coupon === null || coupon === undefined) {
                throw new RequiredError('coupon', 'Required parameter coupon was null or undefined when calling updateCoupon.');
            }
            // verify required parameter 'coupon_oid' is not null or undefined
            if (coupon_oid === null || coupon_oid === undefined) {
                throw new RequiredError('coupon_oid', 'Required parameter coupon_oid was null or undefined when calling updateCoupon.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}"
                .replace("{".concat("coupon_oid", "}"), encodeURIComponent(String(coupon_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Coupon" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon || {}) : (coupon || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple coupon on the UltraCart account.
         * @summary Update multiple coupons
         * @param {CouponsRequest} coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupons: function (coupons_request, _expand, _placeholders, _async, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupons_request' is not null or undefined
            if (coupons_request === null || coupons_request === undefined) {
                throw new RequiredError('coupons_request', 'Required parameter coupons_request was null or undefined when calling updateCoupons.');
            }
            var localVarPath = "/coupon/coupons/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            if (_async !== undefined) {
                localVarQueryParameter['_async'] = _async;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupons_request || {}) : (coupons_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload one-time codes for a coupon
         * @summary Upload one-time codes for a coupon
         * @param {number} coupon_oid The coupon oid to associate with the provided one-time codes.
         * @param {UploadCouponCodesRequest} upload_coupon_codes_request One-time coupon codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCouponCodes: function (coupon_oid, upload_coupon_codes_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon_oid' is not null or undefined
            if (coupon_oid === null || coupon_oid === undefined) {
                throw new RequiredError('coupon_oid', 'Required parameter coupon_oid was null or undefined when calling uploadCouponCodes.');
            }
            // verify required parameter 'upload_coupon_codes_request' is not null or undefined
            if (upload_coupon_codes_request === null || upload_coupon_codes_request === undefined) {
                throw new RequiredError('upload_coupon_codes_request', 'Required parameter upload_coupon_codes_request was null or undefined when calling uploadCouponCodes.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}/upload_codes"
                .replace("{".concat("coupon_oid", "}"), encodeURIComponent(String(coupon_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("UploadCouponCodesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(upload_coupon_codes_request || {}) : (upload_coupon_codes_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CouponApiFetchParamCreator = CouponApiFetchParamCreator;
/**
 * CouponApi - functional programming interface
 * @export
 */
var CouponApiFp = function (configuration) {
    return {
        /**
         * Delete a coupon on the UltraCart account.
         * @summary Delete a coupon
         * @param {number} coupon_oid The coupon_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: function (coupon_oid, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).deleteCoupon(coupon_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete coupons on the UltraCart account.
         * @summary Deletes multiple coupons
         * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponsByCode: function (coupon_delete_request, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).deleteCouponsByCode(coupon_delete_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete coupons on the UltraCart account.
         * @summary Deletes multiple coupons
         * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponsByOid: function (coupon_delete_request, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).deleteCouponsByOid(coupon_delete_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Determines if a coupon merchant code already exists.
         * @summary Determines if a coupon merchant code already exists
         * @param {string} merchant_code The coupon merchant code to examine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doesCouponCodeExist: function (merchant_code, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).doesCouponCodeExist(merchant_code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generate one time codes for a coupon
         * @summary Generates one time codes for a coupon
         * @param {number} coupon_oid The coupon oid to generate codes.
         * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCouponCodes: function (coupon_oid, coupon_codes_request, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).generateCouponCodes(coupon_oid, coupon_codes_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generate one time codes by merchant code
         * @summary Generates one time codes by merchant code
         * @param {string} merchant_code The merchant code to generate one time codes.
         * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOneTimeCodesByMerchantCode: function (merchant_code, coupon_codes_request, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).generateOneTimeCodesByMerchantCode(merchant_code, coupon_codes_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve auto apply rules and conditions
         * @summary Retrieve auto apply rules and conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoApply: function (options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).getAutoApply(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single coupon using the specified coupon profile oid.
         * @summary Retrieve a coupon
         * @param {number} coupon_oid The coupon oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: function (coupon_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).getCoupon(coupon_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single coupon using the specified merchant code.
         * @summary Retrieve a coupon by merchant code
         * @param {string} merchant_code The coupon merchant code to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchantCode: function (merchant_code, _expand, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).getCouponByMerchantCode(merchant_code, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons
         * @param {string} [merchant_code] Merchant code
         * @param {string} [description] Description
         * @param {string} [coupon_type] Coupon type
         * @param {string} [start_date_begin] Start date begin
         * @param {string} [start_date_end] Start date end
         * @param {string} [expiration_date_begin] Expiration date begin
         * @param {string} [expiration_date_end] Expiration date end
         * @param {number} [affiliate_oid] Affiliate oid
         * @param {boolean} [exclude_expired] Exclude expired
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: function (merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).getCoupons(merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons by query
         * @param {CouponQuery} coupon_query Coupon query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsByQuery: function (coupon_query, _limit, _offset, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).getCouponsByQuery(coupon_query, _limit, _offset, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve values needed for a coupon editor
         * @summary Retrieve values needed for a coupon editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).getEditorValues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a coupon on the UltraCart account.
         * @summary Insert a coupon
         * @param {Coupon} coupon Coupon to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupon: function (coupon, _expand, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).insertCoupon(coupon, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert multiple coupon on the UltraCart account.
         * @summary Insert multiple coupons
         * @param {CouponsRequest} coupons_request Coupons to insert (maximum 50)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupons: function (coupons_request, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).insertCoupons(coupons_request, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Searches for items to display within a coupon editor and assign to coupons
         * @summary Searches for items to display within a coupon editor and assign to coupons
         * @param {string} [s]
         * @param {number} [m]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchItems: function (s, m, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).searchItems(s, m, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update auto apply rules and conditions
         * @summary Update auto apply rules and conditions
         * @param {CouponAutoApplyConditions} conditions Conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoApply: function (conditions, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).updateAutoApply(conditions, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a coupon on the UltraCart account.
         * @summary Update a coupon
         * @param {Coupon} coupon Coupon to update
         * @param {number} coupon_oid The coupon_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: function (coupon, coupon_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).updateCoupon(coupon, coupon_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update multiple coupon on the UltraCart account.
         * @summary Update multiple coupons
         * @param {CouponsRequest} coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupons: function (coupons_request, _expand, _placeholders, _async, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).updateCoupons(coupons_request, _expand, _placeholders, _async, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Upload one-time codes for a coupon
         * @summary Upload one-time codes for a coupon
         * @param {number} coupon_oid The coupon oid to associate with the provided one-time codes.
         * @param {UploadCouponCodesRequest} upload_coupon_codes_request One-time coupon codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCouponCodes: function (coupon_oid, upload_coupon_codes_request, options) {
            var localVarFetchArgs = (0, exports.CouponApiFetchParamCreator)(configuration).uploadCouponCodes(coupon_oid, upload_coupon_codes_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.CouponApiFp = CouponApiFp;
/**
 * CouponApi - factory interface
 * @export
 */
var CouponApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a coupon on the UltraCart account.
         * @summary Delete a coupon
         * @param {number} coupon_oid The coupon_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: function (coupon_oid, options) {
            return (0, exports.CouponApiFp)(configuration).deleteCoupon(coupon_oid, options)(fetch, basePath);
        },
        /**
         * Delete coupons on the UltraCart account.
         * @summary Deletes multiple coupons
         * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponsByCode: function (coupon_delete_request, options) {
            return (0, exports.CouponApiFp)(configuration).deleteCouponsByCode(coupon_delete_request, options)(fetch, basePath);
        },
        /**
         * Delete coupons on the UltraCart account.
         * @summary Deletes multiple coupons
         * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCouponsByOid: function (coupon_delete_request, options) {
            return (0, exports.CouponApiFp)(configuration).deleteCouponsByOid(coupon_delete_request, options)(fetch, basePath);
        },
        /**
         * Determines if a coupon merchant code already exists.
         * @summary Determines if a coupon merchant code already exists
         * @param {string} merchant_code The coupon merchant code to examine.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        doesCouponCodeExist: function (merchant_code, options) {
            return (0, exports.CouponApiFp)(configuration).doesCouponCodeExist(merchant_code, options)(fetch, basePath);
        },
        /**
         * Generate one time codes for a coupon
         * @summary Generates one time codes for a coupon
         * @param {number} coupon_oid The coupon oid to generate codes.
         * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCouponCodes: function (coupon_oid, coupon_codes_request, options) {
            return (0, exports.CouponApiFp)(configuration).generateCouponCodes(coupon_oid, coupon_codes_request, options)(fetch, basePath);
        },
        /**
         * Generate one time codes by merchant code
         * @summary Generates one time codes by merchant code
         * @param {string} merchant_code The merchant code to generate one time codes.
         * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOneTimeCodesByMerchantCode: function (merchant_code, coupon_codes_request, options) {
            return (0, exports.CouponApiFp)(configuration).generateOneTimeCodesByMerchantCode(merchant_code, coupon_codes_request, options)(fetch, basePath);
        },
        /**
         * Retrieve auto apply rules and conditions
         * @summary Retrieve auto apply rules and conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoApply: function (options) {
            return (0, exports.CouponApiFp)(configuration).getAutoApply(options)(fetch, basePath);
        },
        /**
         * Retrieves a single coupon using the specified coupon profile oid.
         * @summary Retrieve a coupon
         * @param {number} coupon_oid The coupon oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: function (coupon_oid, _expand, options) {
            return (0, exports.CouponApiFp)(configuration).getCoupon(coupon_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single coupon using the specified merchant code.
         * @summary Retrieve a coupon by merchant code
         * @param {string} merchant_code The coupon merchant code to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchantCode: function (merchant_code, _expand, options) {
            return (0, exports.CouponApiFp)(configuration).getCouponByMerchantCode(merchant_code, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons
         * @param {string} [merchant_code] Merchant code
         * @param {string} [description] Description
         * @param {string} [coupon_type] Coupon type
         * @param {string} [start_date_begin] Start date begin
         * @param {string} [start_date_end] Start date end
         * @param {string} [expiration_date_begin] Expiration date begin
         * @param {string} [expiration_date_end] Expiration date end
         * @param {number} [affiliate_oid] Affiliate oid
         * @param {boolean} [exclude_expired] Exclude expired
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: function (merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options) {
            return (0, exports.CouponApiFp)(configuration).getCoupons(merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons by query
         * @param {CouponQuery} coupon_query Coupon query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsByQuery: function (coupon_query, _limit, _offset, _sort, _expand, options) {
            return (0, exports.CouponApiFp)(configuration).getCouponsByQuery(coupon_query, _limit, _offset, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieve values needed for a coupon editor
         * @summary Retrieve values needed for a coupon editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            return (0, exports.CouponApiFp)(configuration).getEditorValues(options)(fetch, basePath);
        },
        /**
         * Insert a coupon on the UltraCart account.
         * @summary Insert a coupon
         * @param {Coupon} coupon Coupon to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupon: function (coupon, _expand, options) {
            return (0, exports.CouponApiFp)(configuration).insertCoupon(coupon, _expand, options)(fetch, basePath);
        },
        /**
         * Insert multiple coupon on the UltraCart account.
         * @summary Insert multiple coupons
         * @param {CouponsRequest} coupons_request Coupons to insert (maximum 50)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupons: function (coupons_request, _expand, _placeholders, options) {
            return (0, exports.CouponApiFp)(configuration).insertCoupons(coupons_request, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Searches for items to display within a coupon editor and assign to coupons
         * @summary Searches for items to display within a coupon editor and assign to coupons
         * @param {string} [s]
         * @param {number} [m]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchItems: function (s, m, options) {
            return (0, exports.CouponApiFp)(configuration).searchItems(s, m, options)(fetch, basePath);
        },
        /**
         * Update auto apply rules and conditions
         * @summary Update auto apply rules and conditions
         * @param {CouponAutoApplyConditions} conditions Conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoApply: function (conditions, options) {
            return (0, exports.CouponApiFp)(configuration).updateAutoApply(conditions, options)(fetch, basePath);
        },
        /**
         * Update a coupon on the UltraCart account.
         * @summary Update a coupon
         * @param {Coupon} coupon Coupon to update
         * @param {number} coupon_oid The coupon_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: function (coupon, coupon_oid, _expand, options) {
            return (0, exports.CouponApiFp)(configuration).updateCoupon(coupon, coupon_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Update multiple coupon on the UltraCart account.
         * @summary Update multiple coupons
         * @param {CouponsRequest} coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupons: function (coupons_request, _expand, _placeholders, _async, options) {
            return (0, exports.CouponApiFp)(configuration).updateCoupons(coupons_request, _expand, _placeholders, _async, options)(fetch, basePath);
        },
        /**
         * Upload one-time codes for a coupon
         * @summary Upload one-time codes for a coupon
         * @param {number} coupon_oid The coupon oid to associate with the provided one-time codes.
         * @param {UploadCouponCodesRequest} upload_coupon_codes_request One-time coupon codes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCouponCodes: function (coupon_oid, upload_coupon_codes_request, options) {
            return (0, exports.CouponApiFp)(configuration).uploadCouponCodes(coupon_oid, upload_coupon_codes_request, options)(fetch, basePath);
        },
    };
};
exports.CouponApiFactory = CouponApiFactory;
/**
 * CouponApi - object-oriented interface
 * @export
 * @class CouponApi
 * @extends {BaseAPI}
 */
var CouponApi = /** @class */ (function (_super) {
    __extends(CouponApi, _super);
    function CouponApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a coupon on the UltraCart account.
     * @summary Delete a coupon
     * @param {number} coupon_oid The coupon_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.deleteCoupon = function (coupon_oid, options) {
        return (0, exports.CouponApiFp)(this.configuration).deleteCoupon(coupon_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete coupons on the UltraCart account.
     * @summary Deletes multiple coupons
     * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.deleteCouponsByCode = function (coupon_delete_request, options) {
        return (0, exports.CouponApiFp)(this.configuration).deleteCouponsByCode(coupon_delete_request, options)(this.fetch, this.basePath);
    };
    /**
     * Delete coupons on the UltraCart account.
     * @summary Deletes multiple coupons
     * @param {CouponDeletesRequest} coupon_delete_request Coupon oids to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.deleteCouponsByOid = function (coupon_delete_request, options) {
        return (0, exports.CouponApiFp)(this.configuration).deleteCouponsByOid(coupon_delete_request, options)(this.fetch, this.basePath);
    };
    /**
     * Determines if a coupon merchant code already exists.
     * @summary Determines if a coupon merchant code already exists
     * @param {string} merchant_code The coupon merchant code to examine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.doesCouponCodeExist = function (merchant_code, options) {
        return (0, exports.CouponApiFp)(this.configuration).doesCouponCodeExist(merchant_code, options)(this.fetch, this.basePath);
    };
    /**
     * Generate one time codes for a coupon
     * @summary Generates one time codes for a coupon
     * @param {number} coupon_oid The coupon oid to generate codes.
     * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.generateCouponCodes = function (coupon_oid, coupon_codes_request, options) {
        return (0, exports.CouponApiFp)(this.configuration).generateCouponCodes(coupon_oid, coupon_codes_request, options)(this.fetch, this.basePath);
    };
    /**
     * Generate one time codes by merchant code
     * @summary Generates one time codes by merchant code
     * @param {string} merchant_code The merchant code to generate one time codes.
     * @param {CouponCodesRequest} coupon_codes_request Coupon code generation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.generateOneTimeCodesByMerchantCode = function (merchant_code, coupon_codes_request, options) {
        return (0, exports.CouponApiFp)(this.configuration).generateOneTimeCodesByMerchantCode(merchant_code, coupon_codes_request, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve auto apply rules and conditions
     * @summary Retrieve auto apply rules and conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getAutoApply = function (options) {
        return (0, exports.CouponApiFp)(this.configuration).getAutoApply(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single coupon using the specified coupon profile oid.
     * @summary Retrieve a coupon
     * @param {number} coupon_oid The coupon oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCoupon = function (coupon_oid, _expand, options) {
        return (0, exports.CouponApiFp)(this.configuration).getCoupon(coupon_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single coupon using the specified merchant code.
     * @summary Retrieve a coupon by merchant code
     * @param {string} merchant_code The coupon merchant code to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCouponByMerchantCode = function (merchant_code, _expand, options) {
        return (0, exports.CouponApiFp)(this.configuration).getCouponByMerchantCode(merchant_code, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve coupons
     * @param {string} [merchant_code] Merchant code
     * @param {string} [description] Description
     * @param {string} [coupon_type] Coupon type
     * @param {string} [start_date_begin] Start date begin
     * @param {string} [start_date_end] Start date end
     * @param {string} [expiration_date_begin] Expiration date begin
     * @param {string} [expiration_date_end] Expiration date end
     * @param {number} [affiliate_oid] Affiliate oid
     * @param {boolean} [exclude_expired] Exclude expired
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCoupons = function (merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options) {
        return (0, exports.CouponApiFp)(this.configuration).getCoupons(merchant_code, description, coupon_type, start_date_begin, start_date_end, expiration_date_begin, expiration_date_end, affiliate_oid, exclude_expired, _limit, _offset, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve coupons by query
     * @param {CouponQuery} coupon_query Coupon query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCouponsByQuery = function (coupon_query, _limit, _offset, _sort, _expand, options) {
        return (0, exports.CouponApiFp)(this.configuration).getCouponsByQuery(coupon_query, _limit, _offset, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve values needed for a coupon editor
     * @summary Retrieve values needed for a coupon editor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getEditorValues = function (options) {
        return (0, exports.CouponApiFp)(this.configuration).getEditorValues(options)(this.fetch, this.basePath);
    };
    /**
     * Insert a coupon on the UltraCart account.
     * @summary Insert a coupon
     * @param {Coupon} coupon Coupon to insert
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.insertCoupon = function (coupon, _expand, options) {
        return (0, exports.CouponApiFp)(this.configuration).insertCoupon(coupon, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Insert multiple coupon on the UltraCart account.
     * @summary Insert multiple coupons
     * @param {CouponsRequest} coupons_request Coupons to insert (maximum 50)
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.insertCoupons = function (coupons_request, _expand, _placeholders, options) {
        return (0, exports.CouponApiFp)(this.configuration).insertCoupons(coupons_request, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Searches for items to display within a coupon editor and assign to coupons
     * @summary Searches for items to display within a coupon editor and assign to coupons
     * @param {string} [s]
     * @param {number} [m]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.searchItems = function (s, m, options) {
        return (0, exports.CouponApiFp)(this.configuration).searchItems(s, m, options)(this.fetch, this.basePath);
    };
    /**
     * Update auto apply rules and conditions
     * @summary Update auto apply rules and conditions
     * @param {CouponAutoApplyConditions} conditions Conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.updateAutoApply = function (conditions, options) {
        return (0, exports.CouponApiFp)(this.configuration).updateAutoApply(conditions, options)(this.fetch, this.basePath);
    };
    /**
     * Update a coupon on the UltraCart account.
     * @summary Update a coupon
     * @param {Coupon} coupon Coupon to update
     * @param {number} coupon_oid The coupon_oid to update.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.updateCoupon = function (coupon, coupon_oid, _expand, options) {
        return (0, exports.CouponApiFp)(this.configuration).updateCoupon(coupon, coupon_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update multiple coupon on the UltraCart account.
     * @summary Update multiple coupons
     * @param {CouponsRequest} coupons_request Coupons to update (synchronous maximum 50 / asynchronous maximum 100)
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [_async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.updateCoupons = function (coupons_request, _expand, _placeholders, _async, options) {
        return (0, exports.CouponApiFp)(this.configuration).updateCoupons(coupons_request, _expand, _placeholders, _async, options)(this.fetch, this.basePath);
    };
    /**
     * Upload one-time codes for a coupon
     * @summary Upload one-time codes for a coupon
     * @param {number} coupon_oid The coupon oid to associate with the provided one-time codes.
     * @param {UploadCouponCodesRequest} upload_coupon_codes_request One-time coupon codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.uploadCouponCodes = function (coupon_oid, upload_coupon_codes_request, options) {
        return (0, exports.CouponApiFp)(this.configuration).uploadCouponCodes(coupon_oid, upload_coupon_codes_request, options)(this.fetch, this.basePath);
    };
    return CouponApi;
}(BaseAPI));
exports.CouponApi = CouponApi;
/**
 * CustomerApi - fetch parameter creator
 * @export
 */
var CustomerApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Adds store credit to a customer
         * @summary Adds store credit to a customer
         * @param {number} customer_profile_oid The customer oid to credit.
         * @param {CustomerStoreCreditAddRequest} store_credit_request Store credit to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerStoreCredit: function (customer_profile_oid, store_credit_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling addCustomerStoreCredit.');
            }
            // verify required parameter 'store_credit_request' is not null or undefined
            if (store_credit_request === null || store_credit_request === undefined) {
                throw new RequiredError('store_credit_request', 'Required parameter store_credit_request was null or undefined when calling addCustomerStoreCredit.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/store_credit"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerStoreCreditAddRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(store_credit_request || {}) : (store_credit_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
         * @summary Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
         * @param {number} customer_profile_oid The customer profile oid
         * @param {AdjustInternalCertificateRequest} adjust_internal_certificate_request adjustInternalCertificateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInternalCertificate: function (customer_profile_oid, adjust_internal_certificate_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling adjustInternalCertificate.');
            }
            // verify required parameter 'adjust_internal_certificate_request' is not null or undefined
            if (adjust_internal_certificate_request === null || adjust_internal_certificate_request === undefined) {
                throw new RequiredError('adjust_internal_certificate_request', 'Required parameter adjust_internal_certificate_request was null or undefined when calling adjustInternalCertificate.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/adjust_cashback_balance"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AdjustInternalCertificateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(adjust_internal_certificate_request || {}) : (adjust_internal_certificate_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a customer on the UltraCart account.
         * @summary Delete a customer
         * @param {number} customer_profile_oid The customer_profile_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customer_profile_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling deleteCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a customer wishlist item
         * @summary Delete a customer wishlist item
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWishListItem: function (customer_profile_oid, customer_wishlist_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling deleteWishListItem.');
            }
            // verify required parameter 'customer_wishlist_item_oid' is not null or undefined
            if (customer_wishlist_item_oid === null || customer_wishlist_item_oid === undefined) {
                throw new RequiredError('customer_wishlist_item_oid', 'Required parameter customer_wishlist_item_oid was null or undefined when calling deleteWishListItem.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)))
                .replace("{".concat("customer_wishlist_item_oid", "}"), encodeURIComponent(String(customer_wishlist_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single customer using the specified customer profile oid.
         * @summary Retrieve a customer
         * @param {number} customer_profile_oid The customer oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customer_profile_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling getCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single customer using the specified customer email address.
         * @summary Retrieve a customer by Email
         * @param {string} email The email address of the customer to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerByEmail: function (email, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling getCustomerByEmail.');
            }
            var localVarPath = "/customer/customers/by_email/{email}"
                .replace("{".concat("email", "}"), encodeURIComponent(String(email)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve values needed for a customer profile editor.
         * @summary Retrieve values needed for a customer profile editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerEditorValues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/editor_values";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all email lists across all storefronts
         * @summary Retrieve all email lists across all storefronts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerEmailLists: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/email_lists";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the customer store credit accumulated through loyalty programs
         * @summary Retrieve the customer store credit accumulated through loyalty programs
         * @param {number} customer_profile_oid The customer oid to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerStoreCredit: function (customer_profile_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling getCustomerStoreCredit.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/store_credit"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve wishlist items for customer.
         * @summary Retrieve wishlist items for customer
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerWishList: function (customer_profile_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling getCustomerWishList.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve wishlist item for customer.
         * @summary Retrieve wishlist item for customer
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerWishListItem: function (customer_profile_oid, customer_wishlist_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling getCustomerWishListItem.');
            }
            // verify required parameter 'customer_wishlist_item_oid' is not null or undefined
            if (customer_wishlist_item_oid === null || customer_wishlist_item_oid === undefined) {
                throw new RequiredError('customer_wishlist_item_oid', 'Required parameter customer_wishlist_item_oid was null or undefined when calling getCustomerWishListItem.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)))
                .replace("{".concat("customer_wishlist_item_oid", "}"), encodeURIComponent(String(customer_wishlist_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers
         * @param {string} [email] Email
         * @param {string} [qb_class] Quickbooks class
         * @param {string} [quickbooks_code] Quickbooks code
         * @param {string} [last_modified_dts_start] Last modified date start
         * @param {string} [last_modified_dts_end] Last modified date end
         * @param {string} [signup_dts_start] Signup date start
         * @param {string} [signup_dts_end] Signup date end
         * @param {string} [billing_first_name] Billing first name
         * @param {string} [billing_last_name] Billing last name
         * @param {string} [billing_company] Billing company
         * @param {string} [billing_city] Billing city
         * @param {string} [billing_state] Billing state
         * @param {string} [billing_postal_code] Billing postal code
         * @param {string} [billing_country_code] Billing country code
         * @param {string} [billing_day_phone] Billing day phone
         * @param {string} [billing_evening_phone] Billing evening phone
         * @param {string} [shipping_first_name] Shipping first name
         * @param {string} [shipping_last_name] Shipping last name
         * @param {string} [shipping_company] Shipping company
         * @param {string} [shipping_city] Shipping city
         * @param {string} [shipping_state] Shipping state
         * @param {string} [shipping_postal_code] Shipping postal code
         * @param {string} [shipping_country_code] Shipping country code
         * @param {string} [shipping_day_phone] Shipping day phone
         * @param {string} [shipping_evening_phone] Shipping evening phone
         * @param {number} [pricing_tier_oid] Pricing tier oid
         * @param {string} [pricing_tier_name] Pricing tier name
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: function (email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/customers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (qb_class !== undefined) {
                localVarQueryParameter['qb_class'] = qb_class;
            }
            if (quickbooks_code !== undefined) {
                localVarQueryParameter['quickbooks_code'] = quickbooks_code;
            }
            if (last_modified_dts_start !== undefined) {
                localVarQueryParameter['last_modified_dts_start'] = last_modified_dts_start;
            }
            if (last_modified_dts_end !== undefined) {
                localVarQueryParameter['last_modified_dts_end'] = last_modified_dts_end;
            }
            if (signup_dts_start !== undefined) {
                localVarQueryParameter['signup_dts_start'] = signup_dts_start;
            }
            if (signup_dts_end !== undefined) {
                localVarQueryParameter['signup_dts_end'] = signup_dts_end;
            }
            if (billing_first_name !== undefined) {
                localVarQueryParameter['billing_first_name'] = billing_first_name;
            }
            if (billing_last_name !== undefined) {
                localVarQueryParameter['billing_last_name'] = billing_last_name;
            }
            if (billing_company !== undefined) {
                localVarQueryParameter['billing_company'] = billing_company;
            }
            if (billing_city !== undefined) {
                localVarQueryParameter['billing_city'] = billing_city;
            }
            if (billing_state !== undefined) {
                localVarQueryParameter['billing_state'] = billing_state;
            }
            if (billing_postal_code !== undefined) {
                localVarQueryParameter['billing_postal_code'] = billing_postal_code;
            }
            if (billing_country_code !== undefined) {
                localVarQueryParameter['billing_country_code'] = billing_country_code;
            }
            if (billing_day_phone !== undefined) {
                localVarQueryParameter['billing_day_phone'] = billing_day_phone;
            }
            if (billing_evening_phone !== undefined) {
                localVarQueryParameter['billing_evening_phone'] = billing_evening_phone;
            }
            if (shipping_first_name !== undefined) {
                localVarQueryParameter['shipping_first_name'] = shipping_first_name;
            }
            if (shipping_last_name !== undefined) {
                localVarQueryParameter['shipping_last_name'] = shipping_last_name;
            }
            if (shipping_company !== undefined) {
                localVarQueryParameter['shipping_company'] = shipping_company;
            }
            if (shipping_city !== undefined) {
                localVarQueryParameter['shipping_city'] = shipping_city;
            }
            if (shipping_state !== undefined) {
                localVarQueryParameter['shipping_state'] = shipping_state;
            }
            if (shipping_postal_code !== undefined) {
                localVarQueryParameter['shipping_postal_code'] = shipping_postal_code;
            }
            if (shipping_country_code !== undefined) {
                localVarQueryParameter['shipping_country_code'] = shipping_country_code;
            }
            if (shipping_day_phone !== undefined) {
                localVarQueryParameter['shipping_day_phone'] = shipping_day_phone;
            }
            if (shipping_evening_phone !== undefined) {
                localVarQueryParameter['shipping_evening_phone'] = shipping_evening_phone;
            }
            if (pricing_tier_oid !== undefined) {
                localVarQueryParameter['pricing_tier_oid'] = pricing_tier_oid;
            }
            if (pricing_tier_name !== undefined) {
                localVarQueryParameter['pricing_tier_name'] = pricing_tier_name;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers by query
         * @param {CustomerQuery} customer_query Customer query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersByQuery: function (customer_query, _limit, _offset, _since, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_query' is not null or undefined
            if (customer_query === null || customer_query === undefined) {
                throw new RequiredError('customer_query', 'Required parameter customer_query was null or undefined when calling getCustomersByQuery.');
            }
            var localVarPath = "/customer/customers/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customer_query || {}) : (customer_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
         * @summary Retrieve customers for DataTables plugin
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersForDataTables: function (_expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/customers/dataTables";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
         * @summary Create a token that can be used to verify a customer email address
         * @param {EmailVerifyTokenRequest} token_request Token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailVerificationToken: function (token_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'token_request' is not null or undefined
            if (token_request === null || token_request === undefined) {
                throw new RequiredError('token_request', 'Required parameter token_request was null or undefined when calling getEmailVerificationToken.');
            }
            var localVarPath = "/customer/customers/email_verify/get_token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailVerifyTokenRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(token_request || {}) : (token_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally.
         * @summary getMagicLink
         * @param {number} customer_profile_oid The customer_profile_oid of the customer.
         * @param {string} storefront_host_name The storefront to log into.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMagicLink: function (customer_profile_oid, storefront_host_name, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling getMagicLink.');
            }
            // verify required parameter 'storefront_host_name' is not null or undefined
            if (storefront_host_name === null || storefront_host_name === undefined) {
                throw new RequiredError('storefront_host_name', 'Required parameter storefront_host_name was null or undefined when calling getMagicLink.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/magic_link/{storefront_host_name}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)))
                .replace("{".concat("storefront_host_name", "}"), encodeURIComponent(String(storefront_host_name)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a customer on the UltraCart account.
         * @summary Insert a customer
         * @param {Customer} customer Customer to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCustomer: function (customer, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError('customer', 'Required parameter customer was null or undefined when calling insertCustomer.');
            }
            var localVarPath = "/customer/customers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Customer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customer || {}) : (customer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a customer wishlist item
         * @summary Insert a customer wishlist item
         * @param {CustomerWishListItem} wishlist_item Wishlist item to insert
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWishListItem: function (wishlist_item, customer_profile_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'wishlist_item' is not null or undefined
            if (wishlist_item === null || wishlist_item === undefined) {
                throw new RequiredError('wishlist_item', 'Required parameter wishlist_item was null or undefined when calling insertWishListItem.');
            }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling insertWishListItem.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerWishListItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(wishlist_item || {}) : (wishlist_item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Merge customer into this customer.
         * @summary Merge customer into this customer
         * @param {CustomerMergeRequest} customer Customer to merge into this profile.
         * @param {number} customer_profile_oid The customer_profile_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeCustomer: function (customer, customer_profile_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError('customer', 'Required parameter customer was null or undefined when calling mergeCustomer.');
            }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling mergeCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/merge"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerMergeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customer || {}) : (customer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookup_request LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomerProfileValues: function (lookup_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'lookup_request' is not null or undefined
            if (lookup_request === null || lookup_request === undefined) {
                throw new RequiredError('lookup_request', 'Required parameter lookup_request was null or undefined when calling searchCustomerProfileValues.');
            }
            var localVarPath = "/customer/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LookupRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(lookup_request || {}) : (lookup_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a customer on the UltraCart account.
         * @summary Update a customer
         * @param {Customer} customer Customer to update
         * @param {number} customer_profile_oid The customer_profile_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customer, customer_profile_oid, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError('customer', 'Required parameter customer was null or undefined when calling updateCustomer.');
            }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling updateCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Customer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customer || {}) : (customer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update email list subscriptions for a customer
         * @summary Update email list subscriptions for a customer
         * @param {number} customer_profile_oid The customer profile oid
         * @param {CustomerEmailListChanges} list_changes List changes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerEmailLists: function (customer_profile_oid, list_changes, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling updateCustomerEmailLists.');
            }
            // verify required parameter 'list_changes' is not null or undefined
            if (list_changes === null || list_changes === undefined) {
                throw new RequiredError('list_changes', 'Required parameter list_changes was null or undefined when calling updateCustomerEmailLists.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/email_lists"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerEmailListChanges" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(list_changes || {}) : (list_changes || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a customer wishlist item
         * @summary Update a customer wishlist item
         * @param {CustomerWishListItem} wishlist_item Wishlist item to update
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWishListItem: function (wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'wishlist_item' is not null or undefined
            if (wishlist_item === null || wishlist_item === undefined) {
                throw new RequiredError('wishlist_item', 'Required parameter wishlist_item was null or undefined when calling updateWishListItem.');
            }
            // verify required parameter 'customer_profile_oid' is not null or undefined
            if (customer_profile_oid === null || customer_profile_oid === undefined) {
                throw new RequiredError('customer_profile_oid', 'Required parameter customer_profile_oid was null or undefined when calling updateWishListItem.');
            }
            // verify required parameter 'customer_wishlist_item_oid' is not null or undefined
            if (customer_wishlist_item_oid === null || customer_wishlist_item_oid === undefined) {
                throw new RequiredError('customer_wishlist_item_oid', 'Required parameter customer_wishlist_item_oid was null or undefined when calling updateWishListItem.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/wishlist/{customer_wishlist_item_oid}"
                .replace("{".concat("customer_profile_oid", "}"), encodeURIComponent(String(customer_profile_oid)))
                .replace("{".concat("customer_wishlist_item_oid", "}"), encodeURIComponent(String(customer_wishlist_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerWishListItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(wishlist_item || {}) : (wishlist_item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
         * @summary Validate a token that can be used to verify a customer email address
         * @param {EmailVerifyTokenValidateRequest} validation_request Token validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailVerificationToken: function (validation_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validation_request' is not null or undefined
            if (validation_request === null || validation_request === undefined) {
                throw new RequiredError('validation_request', 'Required parameter validation_request was null or undefined when calling validateEmailVerificationToken.');
            }
            var localVarPath = "/customer/customers/email_verify/validate_token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailVerifyTokenValidateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(validation_request || {}) : (validation_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CustomerApiFetchParamCreator = CustomerApiFetchParamCreator;
/**
 * CustomerApi - functional programming interface
 * @export
 */
var CustomerApiFp = function (configuration) {
    return {
        /**
         * Adds store credit to a customer
         * @summary Adds store credit to a customer
         * @param {number} customer_profile_oid The customer oid to credit.
         * @param {CustomerStoreCreditAddRequest} store_credit_request Store credit to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerStoreCredit: function (customer_profile_oid, store_credit_request, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).addCustomerStoreCredit(customer_profile_oid, store_credit_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
         * @summary Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
         * @param {number} customer_profile_oid The customer profile oid
         * @param {AdjustInternalCertificateRequest} adjust_internal_certificate_request adjustInternalCertificateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInternalCertificate: function (customer_profile_oid, adjust_internal_certificate_request, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).adjustInternalCertificate(customer_profile_oid, adjust_internal_certificate_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a customer on the UltraCart account.
         * @summary Delete a customer
         * @param {number} customer_profile_oid The customer_profile_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customer_profile_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).deleteCustomer(customer_profile_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a customer wishlist item
         * @summary Delete a customer wishlist item
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWishListItem: function (customer_profile_oid, customer_wishlist_item_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).deleteWishListItem(customer_profile_oid, customer_wishlist_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single customer using the specified customer profile oid.
         * @summary Retrieve a customer
         * @param {number} customer_profile_oid The customer oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customer_profile_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomer(customer_profile_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single customer using the specified customer email address.
         * @summary Retrieve a customer by Email
         * @param {string} email The email address of the customer to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerByEmail: function (email, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomerByEmail(email, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve values needed for a customer profile editor.
         * @summary Retrieve values needed for a customer profile editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerEditorValues: function (options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomerEditorValues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all email lists across all storefronts
         * @summary Retrieve all email lists across all storefronts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerEmailLists: function (options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomerEmailLists(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve the customer store credit accumulated through loyalty programs
         * @summary Retrieve the customer store credit accumulated through loyalty programs
         * @param {number} customer_profile_oid The customer oid to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerStoreCredit: function (customer_profile_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomerStoreCredit(customer_profile_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve wishlist items for customer.
         * @summary Retrieve wishlist items for customer
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerWishList: function (customer_profile_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomerWishList(customer_profile_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve wishlist item for customer.
         * @summary Retrieve wishlist item for customer
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerWishListItem: function (customer_profile_oid, customer_wishlist_item_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomerWishListItem(customer_profile_oid, customer_wishlist_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers
         * @param {string} [email] Email
         * @param {string} [qb_class] Quickbooks class
         * @param {string} [quickbooks_code] Quickbooks code
         * @param {string} [last_modified_dts_start] Last modified date start
         * @param {string} [last_modified_dts_end] Last modified date end
         * @param {string} [signup_dts_start] Signup date start
         * @param {string} [signup_dts_end] Signup date end
         * @param {string} [billing_first_name] Billing first name
         * @param {string} [billing_last_name] Billing last name
         * @param {string} [billing_company] Billing company
         * @param {string} [billing_city] Billing city
         * @param {string} [billing_state] Billing state
         * @param {string} [billing_postal_code] Billing postal code
         * @param {string} [billing_country_code] Billing country code
         * @param {string} [billing_day_phone] Billing day phone
         * @param {string} [billing_evening_phone] Billing evening phone
         * @param {string} [shipping_first_name] Shipping first name
         * @param {string} [shipping_last_name] Shipping last name
         * @param {string} [shipping_company] Shipping company
         * @param {string} [shipping_city] Shipping city
         * @param {string} [shipping_state] Shipping state
         * @param {string} [shipping_postal_code] Shipping postal code
         * @param {string} [shipping_country_code] Shipping country code
         * @param {string} [shipping_day_phone] Shipping day phone
         * @param {string} [shipping_evening_phone] Shipping evening phone
         * @param {number} [pricing_tier_oid] Pricing tier oid
         * @param {string} [pricing_tier_name] Pricing tier name
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: function (email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomers(email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers by query
         * @param {CustomerQuery} customer_query Customer query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersByQuery: function (customer_query, _limit, _offset, _since, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomersByQuery(customer_query, _limit, _offset, _since, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
         * @summary Retrieve customers for DataTables plugin
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersForDataTables: function (_expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getCustomersForDataTables(_expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
         * @summary Create a token that can be used to verify a customer email address
         * @param {EmailVerifyTokenRequest} token_request Token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailVerificationToken: function (token_request, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getEmailVerificationToken(token_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally.
         * @summary getMagicLink
         * @param {number} customer_profile_oid The customer_profile_oid of the customer.
         * @param {string} storefront_host_name The storefront to log into.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMagicLink: function (customer_profile_oid, storefront_host_name, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).getMagicLink(customer_profile_oid, storefront_host_name, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a customer on the UltraCart account.
         * @summary Insert a customer
         * @param {Customer} customer Customer to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCustomer: function (customer, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).insertCustomer(customer, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a customer wishlist item
         * @summary Insert a customer wishlist item
         * @param {CustomerWishListItem} wishlist_item Wishlist item to insert
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWishListItem: function (wishlist_item, customer_profile_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).insertWishListItem(wishlist_item, customer_profile_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Merge customer into this customer.
         * @summary Merge customer into this customer
         * @param {CustomerMergeRequest} customer Customer to merge into this profile.
         * @param {number} customer_profile_oid The customer_profile_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeCustomer: function (customer, customer_profile_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).mergeCustomer(customer, customer_profile_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookup_request LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomerProfileValues: function (lookup_request, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).searchCustomerProfileValues(lookup_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a customer on the UltraCart account.
         * @summary Update a customer
         * @param {Customer} customer Customer to update
         * @param {number} customer_profile_oid The customer_profile_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customer, customer_profile_oid, _expand, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).updateCustomer(customer, customer_profile_oid, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update email list subscriptions for a customer
         * @summary Update email list subscriptions for a customer
         * @param {number} customer_profile_oid The customer profile oid
         * @param {CustomerEmailListChanges} list_changes List changes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerEmailLists: function (customer_profile_oid, list_changes, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).updateCustomerEmailLists(customer_profile_oid, list_changes, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a customer wishlist item
         * @summary Update a customer wishlist item
         * @param {CustomerWishListItem} wishlist_item Wishlist item to update
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWishListItem: function (wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).updateWishListItem(wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
         * @summary Validate a token that can be used to verify a customer email address
         * @param {EmailVerifyTokenValidateRequest} validation_request Token validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailVerificationToken: function (validation_request, options) {
            var localVarFetchArgs = (0, exports.CustomerApiFetchParamCreator)(configuration).validateEmailVerificationToken(validation_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.CustomerApiFp = CustomerApiFp;
/**
 * CustomerApi - factory interface
 * @export
 */
var CustomerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Adds store credit to a customer
         * @summary Adds store credit to a customer
         * @param {number} customer_profile_oid The customer oid to credit.
         * @param {CustomerStoreCreditAddRequest} store_credit_request Store credit to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomerStoreCredit: function (customer_profile_oid, store_credit_request, options) {
            return (0, exports.CustomerApiFp)(configuration).addCustomerStoreCredit(customer_profile_oid, store_credit_request, options)(fetch, basePath);
        },
        /**
         * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
         * @summary Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
         * @param {number} customer_profile_oid The customer profile oid
         * @param {AdjustInternalCertificateRequest} adjust_internal_certificate_request adjustInternalCertificateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustInternalCertificate: function (customer_profile_oid, adjust_internal_certificate_request, options) {
            return (0, exports.CustomerApiFp)(configuration).adjustInternalCertificate(customer_profile_oid, adjust_internal_certificate_request, options)(fetch, basePath);
        },
        /**
         * Delete a customer on the UltraCart account.
         * @summary Delete a customer
         * @param {number} customer_profile_oid The customer_profile_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customer_profile_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).deleteCustomer(customer_profile_oid, options)(fetch, basePath);
        },
        /**
         * Delete a customer wishlist item
         * @summary Delete a customer wishlist item
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWishListItem: function (customer_profile_oid, customer_wishlist_item_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).deleteWishListItem(customer_profile_oid, customer_wishlist_item_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves a single customer using the specified customer profile oid.
         * @summary Retrieve a customer
         * @param {number} customer_profile_oid The customer oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customer_profile_oid, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomer(customer_profile_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single customer using the specified customer email address.
         * @summary Retrieve a customer by Email
         * @param {string} email The email address of the customer to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerByEmail: function (email, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomerByEmail(email, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieve values needed for a customer profile editor.
         * @summary Retrieve values needed for a customer profile editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerEditorValues: function (options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomerEditorValues(options)(fetch, basePath);
        },
        /**
         * Retrieve all email lists across all storefronts
         * @summary Retrieve all email lists across all storefronts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerEmailLists: function (options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomerEmailLists(options)(fetch, basePath);
        },
        /**
         * Retrieve the customer store credit accumulated through loyalty programs
         * @summary Retrieve the customer store credit accumulated through loyalty programs
         * @param {number} customer_profile_oid The customer oid to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerStoreCredit: function (customer_profile_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomerStoreCredit(customer_profile_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve wishlist items for customer.
         * @summary Retrieve wishlist items for customer
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerWishList: function (customer_profile_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomerWishList(customer_profile_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve wishlist item for customer.
         * @summary Retrieve wishlist item for customer
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerWishListItem: function (customer_profile_oid, customer_wishlist_item_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomerWishListItem(customer_profile_oid, customer_wishlist_item_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers
         * @param {string} [email] Email
         * @param {string} [qb_class] Quickbooks class
         * @param {string} [quickbooks_code] Quickbooks code
         * @param {string} [last_modified_dts_start] Last modified date start
         * @param {string} [last_modified_dts_end] Last modified date end
         * @param {string} [signup_dts_start] Signup date start
         * @param {string} [signup_dts_end] Signup date end
         * @param {string} [billing_first_name] Billing first name
         * @param {string} [billing_last_name] Billing last name
         * @param {string} [billing_company] Billing company
         * @param {string} [billing_city] Billing city
         * @param {string} [billing_state] Billing state
         * @param {string} [billing_postal_code] Billing postal code
         * @param {string} [billing_country_code] Billing country code
         * @param {string} [billing_day_phone] Billing day phone
         * @param {string} [billing_evening_phone] Billing evening phone
         * @param {string} [shipping_first_name] Shipping first name
         * @param {string} [shipping_last_name] Shipping last name
         * @param {string} [shipping_company] Shipping company
         * @param {string} [shipping_city] Shipping city
         * @param {string} [shipping_state] Shipping state
         * @param {string} [shipping_postal_code] Shipping postal code
         * @param {string} [shipping_country_code] Shipping country code
         * @param {string} [shipping_day_phone] Shipping day phone
         * @param {string} [shipping_evening_phone] Shipping evening phone
         * @param {number} [pricing_tier_oid] Pricing tier oid
         * @param {string} [pricing_tier_name] Pricing tier name
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: function (email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomers(email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers by query
         * @param {CustomerQuery} customer_query Customer query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersByQuery: function (customer_query, _limit, _offset, _since, _sort, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomersByQuery(customer_query, _limit, _offset, _since, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
         * @summary Retrieve customers for DataTables plugin
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersForDataTables: function (_expand, options) {
            return (0, exports.CustomerApiFp)(configuration).getCustomersForDataTables(_expand, options)(fetch, basePath);
        },
        /**
         * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
         * @summary Create a token that can be used to verify a customer email address
         * @param {EmailVerifyTokenRequest} token_request Token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailVerificationToken: function (token_request, options) {
            return (0, exports.CustomerApiFp)(configuration).getEmailVerificationToken(token_request, options)(fetch, basePath);
        },
        /**
         * Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally.
         * @summary getMagicLink
         * @param {number} customer_profile_oid The customer_profile_oid of the customer.
         * @param {string} storefront_host_name The storefront to log into.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMagicLink: function (customer_profile_oid, storefront_host_name, options) {
            return (0, exports.CustomerApiFp)(configuration).getMagicLink(customer_profile_oid, storefront_host_name, options)(fetch, basePath);
        },
        /**
         * Insert a customer on the UltraCart account.
         * @summary Insert a customer
         * @param {Customer} customer Customer to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCustomer: function (customer, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).insertCustomer(customer, _expand, options)(fetch, basePath);
        },
        /**
         * Insert a customer wishlist item
         * @summary Insert a customer wishlist item
         * @param {CustomerWishListItem} wishlist_item Wishlist item to insert
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWishListItem: function (wishlist_item, customer_profile_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).insertWishListItem(wishlist_item, customer_profile_oid, options)(fetch, basePath);
        },
        /**
         * Merge customer into this customer.
         * @summary Merge customer into this customer
         * @param {CustomerMergeRequest} customer Customer to merge into this profile.
         * @param {number} customer_profile_oid The customer_profile_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mergeCustomer: function (customer, customer_profile_oid, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).mergeCustomer(customer, customer_profile_oid, _expand, options)(fetch, basePath);
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookup_request LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCustomerProfileValues: function (lookup_request, options) {
            return (0, exports.CustomerApiFp)(configuration).searchCustomerProfileValues(lookup_request, options)(fetch, basePath);
        },
        /**
         * Update a customer on the UltraCart account.
         * @summary Update a customer
         * @param {Customer} customer Customer to update
         * @param {number} customer_profile_oid The customer_profile_oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customer, customer_profile_oid, _expand, options) {
            return (0, exports.CustomerApiFp)(configuration).updateCustomer(customer, customer_profile_oid, _expand, options)(fetch, basePath);
        },
        /**
         * Update email list subscriptions for a customer
         * @summary Update email list subscriptions for a customer
         * @param {number} customer_profile_oid The customer profile oid
         * @param {CustomerEmailListChanges} list_changes List changes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerEmailLists: function (customer_profile_oid, list_changes, options) {
            return (0, exports.CustomerApiFp)(configuration).updateCustomerEmailLists(customer_profile_oid, list_changes, options)(fetch, basePath);
        },
        /**
         * Update a customer wishlist item
         * @summary Update a customer wishlist item
         * @param {CustomerWishListItem} wishlist_item Wishlist item to update
         * @param {number} customer_profile_oid The customer oid for this wishlist.
         * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWishListItem: function (wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options) {
            return (0, exports.CustomerApiFp)(configuration).updateWishListItem(wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options)(fetch, basePath);
        },
        /**
         * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
         * @summary Validate a token that can be used to verify a customer email address
         * @param {EmailVerifyTokenValidateRequest} validation_request Token validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateEmailVerificationToken: function (validation_request, options) {
            return (0, exports.CustomerApiFp)(configuration).validateEmailVerificationToken(validation_request, options)(fetch, basePath);
        },
    };
};
exports.CustomerApiFactory = CustomerApiFactory;
/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
var CustomerApi = /** @class */ (function (_super) {
    __extends(CustomerApi, _super);
    function CustomerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds store credit to a customer
     * @summary Adds store credit to a customer
     * @param {number} customer_profile_oid The customer oid to credit.
     * @param {CustomerStoreCreditAddRequest} store_credit_request Store credit to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.addCustomerStoreCredit = function (customer_profile_oid, store_credit_request, options) {
        return (0, exports.CustomerApiFp)(this.configuration).addCustomerStoreCredit(customer_profile_oid, store_credit_request, options)(this.fetch, this.basePath);
    };
    /**
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     * @summary Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     * @param {number} customer_profile_oid The customer profile oid
     * @param {AdjustInternalCertificateRequest} adjust_internal_certificate_request adjustInternalCertificateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.adjustInternalCertificate = function (customer_profile_oid, adjust_internal_certificate_request, options) {
        return (0, exports.CustomerApiFp)(this.configuration).adjustInternalCertificate(customer_profile_oid, adjust_internal_certificate_request, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a customer on the UltraCart account.
     * @summary Delete a customer
     * @param {number} customer_profile_oid The customer_profile_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.deleteCustomer = function (customer_profile_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).deleteCustomer(customer_profile_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a customer wishlist item
     * @summary Delete a customer wishlist item
     * @param {number} customer_profile_oid The customer oid for this wishlist.
     * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.deleteWishListItem = function (customer_profile_oid, customer_wishlist_item_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).deleteWishListItem(customer_profile_oid, customer_wishlist_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single customer using the specified customer profile oid.
     * @summary Retrieve a customer
     * @param {number} customer_profile_oid The customer oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomer = function (customer_profile_oid, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomer(customer_profile_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single customer using the specified customer email address.
     * @summary Retrieve a customer by Email
     * @param {string} email The email address of the customer to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomerByEmail = function (email, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomerByEmail(email, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve values needed for a customer profile editor.
     * @summary Retrieve values needed for a customer profile editor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomerEditorValues = function (options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomerEditorValues(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all email lists across all storefronts
     * @summary Retrieve all email lists across all storefronts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomerEmailLists = function (options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomerEmailLists(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve the customer store credit accumulated through loyalty programs
     * @summary Retrieve the customer store credit accumulated through loyalty programs
     * @param {number} customer_profile_oid The customer oid to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomerStoreCredit = function (customer_profile_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomerStoreCredit(customer_profile_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve wishlist items for customer.
     * @summary Retrieve wishlist items for customer
     * @param {number} customer_profile_oid The customer oid for this wishlist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomerWishList = function (customer_profile_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomerWishList(customer_profile_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve wishlist item for customer.
     * @summary Retrieve wishlist item for customer
     * @param {number} customer_profile_oid The customer oid for this wishlist.
     * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomerWishListItem = function (customer_profile_oid, customer_wishlist_item_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomerWishListItem(customer_profile_oid, customer_wishlist_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve customers
     * @param {string} [email] Email
     * @param {string} [qb_class] Quickbooks class
     * @param {string} [quickbooks_code] Quickbooks code
     * @param {string} [last_modified_dts_start] Last modified date start
     * @param {string} [last_modified_dts_end] Last modified date end
     * @param {string} [signup_dts_start] Signup date start
     * @param {string} [signup_dts_end] Signup date end
     * @param {string} [billing_first_name] Billing first name
     * @param {string} [billing_last_name] Billing last name
     * @param {string} [billing_company] Billing company
     * @param {string} [billing_city] Billing city
     * @param {string} [billing_state] Billing state
     * @param {string} [billing_postal_code] Billing postal code
     * @param {string} [billing_country_code] Billing country code
     * @param {string} [billing_day_phone] Billing day phone
     * @param {string} [billing_evening_phone] Billing evening phone
     * @param {string} [shipping_first_name] Shipping first name
     * @param {string} [shipping_last_name] Shipping last name
     * @param {string} [shipping_company] Shipping company
     * @param {string} [shipping_city] Shipping city
     * @param {string} [shipping_state] Shipping state
     * @param {string} [shipping_postal_code] Shipping postal code
     * @param {string} [shipping_country_code] Shipping country code
     * @param {string} [shipping_day_phone] Shipping day phone
     * @param {string} [shipping_evening_phone] Shipping evening phone
     * @param {number} [pricing_tier_oid] Pricing tier oid
     * @param {string} [pricing_tier_name] Pricing tier name
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomers = function (email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomers(email, qb_class, quickbooks_code, last_modified_dts_start, last_modified_dts_end, signup_dts_start, signup_dts_end, billing_first_name, billing_last_name, billing_company, billing_city, billing_state, billing_postal_code, billing_country_code, billing_day_phone, billing_evening_phone, shipping_first_name, shipping_last_name, shipping_company, shipping_city, shipping_state, shipping_postal_code, shipping_country_code, shipping_day_phone, shipping_evening_phone, pricing_tier_oid, pricing_tier_name, _limit, _offset, _since, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve customers by query
     * @param {CustomerQuery} customer_query Customer query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomersByQuery = function (customer_query, _limit, _offset, _since, _sort, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomersByQuery(customer_query, _limit, _offset, _since, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
     * @summary Retrieve customers for DataTables plugin
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomersForDataTables = function (_expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getCustomersForDataTables(_expand, options)(this.fetch, this.basePath);
    };
    /**
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
     * @summary Create a token that can be used to verify a customer email address
     * @param {EmailVerifyTokenRequest} token_request Token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getEmailVerificationToken = function (token_request, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getEmailVerificationToken(token_request, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a magic link to allow a merchant to login as a customer.  This method is a PUT call intentionally.
     * @summary getMagicLink
     * @param {number} customer_profile_oid The customer_profile_oid of the customer.
     * @param {string} storefront_host_name The storefront to log into.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getMagicLink = function (customer_profile_oid, storefront_host_name, options) {
        return (0, exports.CustomerApiFp)(this.configuration).getMagicLink(customer_profile_oid, storefront_host_name, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a customer on the UltraCart account.
     * @summary Insert a customer
     * @param {Customer} customer Customer to insert
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.insertCustomer = function (customer, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).insertCustomer(customer, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a customer wishlist item
     * @summary Insert a customer wishlist item
     * @param {CustomerWishListItem} wishlist_item Wishlist item to insert
     * @param {number} customer_profile_oid The customer oid for this wishlist.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.insertWishListItem = function (wishlist_item, customer_profile_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).insertWishListItem(wishlist_item, customer_profile_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Merge customer into this customer.
     * @summary Merge customer into this customer
     * @param {CustomerMergeRequest} customer Customer to merge into this profile.
     * @param {number} customer_profile_oid The customer_profile_oid to update.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.mergeCustomer = function (customer, customer_profile_oid, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).mergeCustomer(customer, customer_profile_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Searches for all matching values (using POST)
     * @param {LookupRequest} lookup_request LookupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.searchCustomerProfileValues = function (lookup_request, options) {
        return (0, exports.CustomerApiFp)(this.configuration).searchCustomerProfileValues(lookup_request, options)(this.fetch, this.basePath);
    };
    /**
     * Update a customer on the UltraCart account.
     * @summary Update a customer
     * @param {Customer} customer Customer to update
     * @param {number} customer_profile_oid The customer_profile_oid to update.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.updateCustomer = function (customer, customer_profile_oid, _expand, options) {
        return (0, exports.CustomerApiFp)(this.configuration).updateCustomer(customer, customer_profile_oid, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update email list subscriptions for a customer
     * @summary Update email list subscriptions for a customer
     * @param {number} customer_profile_oid The customer profile oid
     * @param {CustomerEmailListChanges} list_changes List changes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.updateCustomerEmailLists = function (customer_profile_oid, list_changes, options) {
        return (0, exports.CustomerApiFp)(this.configuration).updateCustomerEmailLists(customer_profile_oid, list_changes, options)(this.fetch, this.basePath);
    };
    /**
     * Update a customer wishlist item
     * @summary Update a customer wishlist item
     * @param {CustomerWishListItem} wishlist_item Wishlist item to update
     * @param {number} customer_profile_oid The customer oid for this wishlist.
     * @param {number} customer_wishlist_item_oid The wishlist oid for this wishlist item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.updateWishListItem = function (wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options) {
        return (0, exports.CustomerApiFp)(this.configuration).updateWishListItem(wishlist_item, customer_profile_oid, customer_wishlist_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant.
     * @summary Validate a token that can be used to verify a customer email address
     * @param {EmailVerifyTokenValidateRequest} validation_request Token validation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.validateEmailVerificationToken = function (validation_request, options) {
        return (0, exports.CustomerApiFp)(this.configuration).validateEmailVerificationToken(validation_request, options)(this.fetch, this.basePath);
    };
    return CustomerApi;
}(BaseAPI));
exports.CustomerApi = CustomerApi;
/**
 * DatawarehouseApi - fetch parameter creator
 * @export
 */
var DatawarehouseApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a report on the UltraCart account.
         * @summary Delete a report
         * @param {number} report_oid The report oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: function (report_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'report_oid' is not null or undefined
            if (report_oid === null || report_oid === undefined) {
                throw new RequiredError('report_oid', 'Required parameter report_oid was null or undefined when calling deleteReport.');
            }
            var localVarPath = "/datawarehouse/reports/{report_oid}"
                .replace("{".concat("report_oid", "}"), encodeURIComponent(String(report_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Dry run the report queries
         * @summary Dry run the report queries
         * @param {ReportDryRunQueriesRequest} query_request Dry run request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dryRunReportQueries: function (query_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'query_request' is not null or undefined
            if (query_request === null || query_request === undefined) {
                throw new RequiredError('query_request', 'Required parameter query_request was null or undefined when calling dryRunReportQueries.');
            }
            var localVarPath = "/datawarehouse/reports/dryrun";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ReportDryRunQueriesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(query_request || {}) : (query_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute the report queries
         * @summary Execute the report queries
         * @param {ReportExecuteQueriesRequest} query_request Query request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReportQueries: function (query_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'query_request' is not null or undefined
            if (query_request === null || query_request === undefined) {
                throw new RequiredError('query_request', 'Required parameter query_request was null or undefined when calling executeReportQueries.');
            }
            var localVarPath = "/datawarehouse/reports/execute";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ReportExecuteQueriesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(query_request || {}) : (query_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report
         * @summary Get a report
         * @param {number} report_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: function (report_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'report_oid' is not null or undefined
            if (report_oid === null || report_oid === undefined) {
                throw new RequiredError('report_oid', 'Required parameter report_oid was null or undefined when calling getReport.');
            }
            var localVarPath = "/datawarehouse/reports/{report_oid}"
                .replace("{".concat("report_oid", "}"), encodeURIComponent(String(report_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report data set
         * @summary Get a report data set
         * @param {string} dataset_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataSet: function (dataset_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dataset_uuid' is not null or undefined
            if (dataset_uuid === null || dataset_uuid === undefined) {
                throw new RequiredError('dataset_uuid', 'Required parameter dataset_uuid was null or undefined when calling getReportDataSet.');
            }
            var localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}"
                .replace("{".concat("dataset_uuid", "}"), encodeURIComponent(String(dataset_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report data set page
         * @summary Get a report data set page
         * @param {string} dataset_uuid
         * @param {number} page_number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataSetPage: function (dataset_uuid, page_number, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dataset_uuid' is not null or undefined
            if (dataset_uuid === null || dataset_uuid === undefined) {
                throw new RequiredError('dataset_uuid', 'Required parameter dataset_uuid was null or undefined when calling getReportDataSetPage.');
            }
            // verify required parameter 'page_number' is not null or undefined
            if (page_number === null || page_number === undefined) {
                throw new RequiredError('page_number', 'Required parameter page_number was null or undefined when calling getReportDataSetPage.');
            }
            var localVarPath = "/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}"
                .replace("{".concat("dataset_uuid", "}"), encodeURIComponent(String(dataset_uuid)))
                .replace("{".concat("page_number", "}"), encodeURIComponent(String(page_number)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a JWT to authorize a report to make a websocket connection.
         * @summary Get report websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportWebsocketAuthorization: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/datawarehouse/reports/auth";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of reports available
         * @summary Get list of reports available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/datawarehouse/reports";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new report on the UltraCart account.
         * @summary Create a report
         * @param {Report} report Report to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertReport: function (report, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'report' is not null or undefined
            if (report === null || report === undefined) {
                throw new RequiredError('report', 'Required parameter report was null or undefined when calling insertReport.');
            }
            var localVarPath = "/datawarehouse/reports";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Report" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(report || {}) : (report || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a report on the UltraCart account.
         * @summary Update a report
         * @param {Report} report Report to update
         * @param {number} report_oid The report oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: function (report, report_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'report' is not null or undefined
            if (report === null || report === undefined) {
                throw new RequiredError('report', 'Required parameter report was null or undefined when calling updateReport.');
            }
            // verify required parameter 'report_oid' is not null or undefined
            if (report_oid === null || report_oid === undefined) {
                throw new RequiredError('report_oid', 'Required parameter report_oid was null or undefined when calling updateReport.');
            }
            var localVarPath = "/datawarehouse/reports/{report_oid}"
                .replace("{".concat("report_oid", "}"), encodeURIComponent(String(report_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Report" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(report || {}) : (report || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DatawarehouseApiFetchParamCreator = DatawarehouseApiFetchParamCreator;
/**
 * DatawarehouseApi - functional programming interface
 * @export
 */
var DatawarehouseApiFp = function (configuration) {
    return {
        /**
         * Delete a report on the UltraCart account.
         * @summary Delete a report
         * @param {number} report_oid The report oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: function (report_oid, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).deleteReport(report_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Dry run the report queries
         * @summary Dry run the report queries
         * @param {ReportDryRunQueriesRequest} query_request Dry run request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dryRunReportQueries: function (query_request, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).dryRunReportQueries(query_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Execute the report queries
         * @summary Execute the report queries
         * @param {ReportExecuteQueriesRequest} query_request Query request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReportQueries: function (query_request, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).executeReportQueries(query_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a report
         * @summary Get a report
         * @param {number} report_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: function (report_oid, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).getReport(report_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a report data set
         * @summary Get a report data set
         * @param {string} dataset_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataSet: function (dataset_uuid, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).getReportDataSet(dataset_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a report data set page
         * @summary Get a report data set page
         * @param {string} dataset_uuid
         * @param {number} page_number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataSetPage: function (dataset_uuid, page_number, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).getReportDataSetPage(dataset_uuid, page_number, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a JWT to authorize a report to make a websocket connection.
         * @summary Get report websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportWebsocketAuthorization: function (options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).getReportWebsocketAuthorization(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of reports available
         * @summary Get list of reports available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: function (options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).getReports(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new report on the UltraCart account.
         * @summary Create a report
         * @param {Report} report Report to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertReport: function (report, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).insertReport(report, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a report on the UltraCart account.
         * @summary Update a report
         * @param {Report} report Report to update
         * @param {number} report_oid The report oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: function (report, report_oid, options) {
            var localVarFetchArgs = (0, exports.DatawarehouseApiFetchParamCreator)(configuration).updateReport(report, report_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.DatawarehouseApiFp = DatawarehouseApiFp;
/**
 * DatawarehouseApi - factory interface
 * @export
 */
var DatawarehouseApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a report on the UltraCart account.
         * @summary Delete a report
         * @param {number} report_oid The report oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: function (report_oid, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).deleteReport(report_oid, options)(fetch, basePath);
        },
        /**
         * Dry run the report queries
         * @summary Dry run the report queries
         * @param {ReportDryRunQueriesRequest} query_request Dry run request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dryRunReportQueries: function (query_request, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).dryRunReportQueries(query_request, options)(fetch, basePath);
        },
        /**
         * Execute the report queries
         * @summary Execute the report queries
         * @param {ReportExecuteQueriesRequest} query_request Query request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeReportQueries: function (query_request, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).executeReportQueries(query_request, options)(fetch, basePath);
        },
        /**
         * Retrieve a report
         * @summary Get a report
         * @param {number} report_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: function (report_oid, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).getReport(report_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve a report data set
         * @summary Get a report data set
         * @param {string} dataset_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataSet: function (dataset_uuid, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).getReportDataSet(dataset_uuid, options)(fetch, basePath);
        },
        /**
         * Retrieve a report data set page
         * @summary Get a report data set page
         * @param {string} dataset_uuid
         * @param {number} page_number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataSetPage: function (dataset_uuid, page_number, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).getReportDataSetPage(dataset_uuid, page_number, options)(fetch, basePath);
        },
        /**
         * Retrieve a JWT to authorize a report to make a websocket connection.
         * @summary Get report websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportWebsocketAuthorization: function (options) {
            return (0, exports.DatawarehouseApiFp)(configuration).getReportWebsocketAuthorization(options)(fetch, basePath);
        },
        /**
         * Retrieve a list of reports available
         * @summary Get list of reports available
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: function (options) {
            return (0, exports.DatawarehouseApiFp)(configuration).getReports(options)(fetch, basePath);
        },
        /**
         * Create a new report on the UltraCart account.
         * @summary Create a report
         * @param {Report} report Report to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertReport: function (report, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).insertReport(report, options)(fetch, basePath);
        },
        /**
         * Update a report on the UltraCart account.
         * @summary Update a report
         * @param {Report} report Report to update
         * @param {number} report_oid The report oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: function (report, report_oid, options) {
            return (0, exports.DatawarehouseApiFp)(configuration).updateReport(report, report_oid, options)(fetch, basePath);
        },
    };
};
exports.DatawarehouseApiFactory = DatawarehouseApiFactory;
/**
 * DatawarehouseApi - object-oriented interface
 * @export
 * @class DatawarehouseApi
 * @extends {BaseAPI}
 */
var DatawarehouseApi = /** @class */ (function (_super) {
    __extends(DatawarehouseApi, _super);
    function DatawarehouseApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a report on the UltraCart account.
     * @summary Delete a report
     * @param {number} report_oid The report oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.deleteReport = function (report_oid, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).deleteReport(report_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Dry run the report queries
     * @summary Dry run the report queries
     * @param {ReportDryRunQueriesRequest} query_request Dry run request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.dryRunReportQueries = function (query_request, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).dryRunReportQueries(query_request, options)(this.fetch, this.basePath);
    };
    /**
     * Execute the report queries
     * @summary Execute the report queries
     * @param {ReportExecuteQueriesRequest} query_request Query request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.executeReportQueries = function (query_request, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).executeReportQueries(query_request, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a report
     * @summary Get a report
     * @param {number} report_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.getReport = function (report_oid, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).getReport(report_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a report data set
     * @summary Get a report data set
     * @param {string} dataset_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.getReportDataSet = function (dataset_uuid, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).getReportDataSet(dataset_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a report data set page
     * @summary Get a report data set page
     * @param {string} dataset_uuid
     * @param {number} page_number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.getReportDataSetPage = function (dataset_uuid, page_number, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).getReportDataSetPage(dataset_uuid, page_number, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a JWT to authorize a report to make a websocket connection.
     * @summary Get report websocket authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.getReportWebsocketAuthorization = function (options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).getReportWebsocketAuthorization(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of reports available
     * @summary Get list of reports available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.getReports = function (options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).getReports(options)(this.fetch, this.basePath);
    };
    /**
     * Create a new report on the UltraCart account.
     * @summary Create a report
     * @param {Report} report Report to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.insertReport = function (report, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).insertReport(report, options)(this.fetch, this.basePath);
    };
    /**
     * Update a report on the UltraCart account.
     * @summary Update a report
     * @param {Report} report Report to update
     * @param {number} report_oid The report oid to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApi
     */
    DatawarehouseApi.prototype.updateReport = function (report, report_oid, options) {
        return (0, exports.DatawarehouseApiFp)(this.configuration).updateReport(report, report_oid, options)(this.fetch, this.basePath);
    };
    return DatawarehouseApi;
}(BaseAPI));
exports.DatawarehouseApi = DatawarehouseApi;
/**
 * FulfillmentApi - fetch parameter creator
 * @export
 */
var FulfillmentApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
         * @summary Acknowledge receipt of orders.
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: function (distribution_center_code, orderIds, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distribution_center_code' is not null or undefined
            if (distribution_center_code === null || distribution_center_code === undefined) {
                throw new RequiredError('distribution_center_code', 'Required parameter distribution_center_code was null or undefined when calling acknowledgeOrders.');
            }
            // verify required parameter 'orderIds' is not null or undefined
            if (orderIds === null || orderIds === undefined) {
                throw new RequiredError('orderIds', 'Required parameter orderIds was null or undefined when calling acknowledgeOrders.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements"
                .replace("{".concat("distribution_center_code", "}"), encodeURIComponent(String(distribution_center_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;string&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(orderIds || {}) : (orderIds || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order for the given distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlip: function (distribution_center_code, order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distribution_center_code' is not null or undefined
            if (distribution_center_code === null || distribution_center_code === undefined) {
                throw new RequiredError('distribution_center_code', 'Required parameter distribution_center_code was null or undefined when calling generatePackingSlip.');
            }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling generatePackingSlip.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/orders/{order_id}"
                .replace("{".concat("distribution_center_code", "}"), encodeURIComponent(String(distribution_center_code)))
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
         * @summary Retrieve orders queued up for this distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenterOrders: function (distribution_center_code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distribution_center_code' is not null or undefined
            if (distribution_center_code === null || distribution_center_code === undefined) {
                throw new RequiredError('distribution_center_code', 'Required parameter distribution_center_code was null or undefined when calling getDistributionCenterOrders.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/orders"
                .replace("{".concat("distribution_center_code", "}"), encodeURIComponent(String(distribution_center_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the distribution centers that this user has access to.
         * @summary Retrieve distribution centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenters: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/fulfillment/distribution_centers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store the tracking information and mark the order shipped for this distribution center.
         * @summary Mark orders as shipped
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipOrders: function (distribution_center_code, shipments, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distribution_center_code' is not null or undefined
            if (distribution_center_code === null || distribution_center_code === undefined) {
                throw new RequiredError('distribution_center_code', 'Required parameter distribution_center_code was null or undefined when calling shipOrders.');
            }
            // verify required parameter 'shipments' is not null or undefined
            if (shipments === null || shipments === undefined) {
                throw new RequiredError('shipments', 'Required parameter shipments was null or undefined when calling shipOrders.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/shipments"
                .replace("{".concat("distribution_center_code", "}"), encodeURIComponent(String(distribution_center_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;FulfillmentShipment&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(shipments || {}) : (shipments || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the inventory for items associated with this distribution center
         * @summary Update inventory
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: function (distribution_center_code, inventories, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distribution_center_code' is not null or undefined
            if (distribution_center_code === null || distribution_center_code === undefined) {
                throw new RequiredError('distribution_center_code', 'Required parameter distribution_center_code was null or undefined when calling updateInventory.');
            }
            // verify required parameter 'inventories' is not null or undefined
            if (inventories === null || inventories === undefined) {
                throw new RequiredError('inventories', 'Required parameter inventories was null or undefined when calling updateInventory.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/inventory"
                .replace("{".concat("distribution_center_code", "}"), encodeURIComponent(String(distribution_center_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;FulfillmentInventory&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(inventories || {}) : (inventories || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FulfillmentApiFetchParamCreator = FulfillmentApiFetchParamCreator;
/**
 * FulfillmentApi - functional programming interface
 * @export
 */
var FulfillmentApiFp = function (configuration) {
    return {
        /**
         * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
         * @summary Acknowledge receipt of orders.
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: function (distribution_center_code, orderIds, options) {
            var localVarFetchArgs = (0, exports.FulfillmentApiFetchParamCreator)(configuration).acknowledgeOrders(distribution_center_code, orderIds, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order for the given distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlip: function (distribution_center_code, order_id, options) {
            var localVarFetchArgs = (0, exports.FulfillmentApiFetchParamCreator)(configuration).generatePackingSlip(distribution_center_code, order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
         * @summary Retrieve orders queued up for this distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenterOrders: function (distribution_center_code, options) {
            var localVarFetchArgs = (0, exports.FulfillmentApiFetchParamCreator)(configuration).getDistributionCenterOrders(distribution_center_code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the distribution centers that this user has access to.
         * @summary Retrieve distribution centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenters: function (options) {
            var localVarFetchArgs = (0, exports.FulfillmentApiFetchParamCreator)(configuration).getDistributionCenters(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Store the tracking information and mark the order shipped for this distribution center.
         * @summary Mark orders as shipped
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipOrders: function (distribution_center_code, shipments, options) {
            var localVarFetchArgs = (0, exports.FulfillmentApiFetchParamCreator)(configuration).shipOrders(distribution_center_code, shipments, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the inventory for items associated with this distribution center
         * @summary Update inventory
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: function (distribution_center_code, inventories, options) {
            var localVarFetchArgs = (0, exports.FulfillmentApiFetchParamCreator)(configuration).updateInventory(distribution_center_code, inventories, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.FulfillmentApiFp = FulfillmentApiFp;
/**
 * FulfillmentApi - factory interface
 * @export
 */
var FulfillmentApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
         * @summary Acknowledge receipt of orders.
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: function (distribution_center_code, orderIds, options) {
            return (0, exports.FulfillmentApiFp)(configuration).acknowledgeOrders(distribution_center_code, orderIds, options)(fetch, basePath);
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order for the given distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlip: function (distribution_center_code, order_id, options) {
            return (0, exports.FulfillmentApiFp)(configuration).generatePackingSlip(distribution_center_code, order_id, options)(fetch, basePath);
        },
        /**
         * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
         * @summary Retrieve orders queued up for this distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenterOrders: function (distribution_center_code, options) {
            return (0, exports.FulfillmentApiFp)(configuration).getDistributionCenterOrders(distribution_center_code, options)(fetch, basePath);
        },
        /**
         * Retrieves the distribution centers that this user has access to.
         * @summary Retrieve distribution centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenters: function (options) {
            return (0, exports.FulfillmentApiFp)(configuration).getDistributionCenters(options)(fetch, basePath);
        },
        /**
         * Store the tracking information and mark the order shipped for this distribution center.
         * @summary Mark orders as shipped
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipOrders: function (distribution_center_code, shipments, options) {
            return (0, exports.FulfillmentApiFp)(configuration).shipOrders(distribution_center_code, shipments, options)(fetch, basePath);
        },
        /**
         * Update the inventory for items associated with this distribution center
         * @summary Update inventory
         * @param {string} distribution_center_code Distribution center code
         * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: function (distribution_center_code, inventories, options) {
            return (0, exports.FulfillmentApiFp)(configuration).updateInventory(distribution_center_code, inventories, options)(fetch, basePath);
        },
    };
};
exports.FulfillmentApiFactory = FulfillmentApiFactory;
/**
 * FulfillmentApi - object-oriented interface
 * @export
 * @class FulfillmentApi
 * @extends {BaseAPI}
 */
var FulfillmentApi = /** @class */ (function (_super) {
    __extends(FulfillmentApi, _super);
    function FulfillmentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
     * @summary Acknowledge receipt of orders.
     * @param {string} distribution_center_code Distribution center code
     * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.acknowledgeOrders = function (distribution_center_code, orderIds, options) {
        return (0, exports.FulfillmentApiFp)(this.configuration).acknowledgeOrders(distribution_center_code, orderIds, options)(this.fetch, this.basePath);
    };
    /**
     * The packing slip PDF that is returned is base 64 encoded
     * @summary Generate a packing slip for this order for the given distribution center.
     * @param {string} distribution_center_code Distribution center code
     * @param {string} order_id Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.generatePackingSlip = function (distribution_center_code, order_id, options) {
        return (0, exports.FulfillmentApiFp)(this.configuration).generatePackingSlip(distribution_center_code, order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
     * @summary Retrieve orders queued up for this distribution center.
     * @param {string} distribution_center_code Distribution center code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.getDistributionCenterOrders = function (distribution_center_code, options) {
        return (0, exports.FulfillmentApiFp)(this.configuration).getDistributionCenterOrders(distribution_center_code, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the distribution centers that this user has access to.
     * @summary Retrieve distribution centers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.getDistributionCenters = function (options) {
        return (0, exports.FulfillmentApiFp)(this.configuration).getDistributionCenters(options)(this.fetch, this.basePath);
    };
    /**
     * Store the tracking information and mark the order shipped for this distribution center.
     * @summary Mark orders as shipped
     * @param {string} distribution_center_code Distribution center code
     * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.shipOrders = function (distribution_center_code, shipments, options) {
        return (0, exports.FulfillmentApiFp)(this.configuration).shipOrders(distribution_center_code, shipments, options)(this.fetch, this.basePath);
    };
    /**
     * Update the inventory for items associated with this distribution center
     * @summary Update inventory
     * @param {string} distribution_center_code Distribution center code
     * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.updateInventory = function (distribution_center_code, inventories, options) {
        return (0, exports.FulfillmentApiFp)(this.configuration).updateInventory(distribution_center_code, inventories, options)(this.fetch, this.basePath);
    };
    return FulfillmentApi;
}(BaseAPI));
exports.FulfillmentApi = FulfillmentApi;
/**
 * GiftCertificateApi - fetch parameter creator
 * @export
 */
var GiftCertificateApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Adds a ledger entry for this gift certificate.
         * @summary Add a gift certificate ledger entry
         * @param {number} gift_certificate_oid
         * @param {GiftCertificateLedgerEntry} gift_certificate_ledger_entry Gift certificate ledger entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGiftCertificateLedgerEntry: function (gift_certificate_oid, gift_certificate_ledger_entry, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'gift_certificate_oid' is not null or undefined
            if (gift_certificate_oid === null || gift_certificate_oid === undefined) {
                throw new RequiredError('gift_certificate_oid', 'Required parameter gift_certificate_oid was null or undefined when calling addGiftCertificateLedgerEntry.');
            }
            // verify required parameter 'gift_certificate_ledger_entry' is not null or undefined
            if (gift_certificate_ledger_entry === null || gift_certificate_ledger_entry === undefined) {
                throw new RequiredError('gift_certificate_ledger_entry', 'Required parameter gift_certificate_ledger_entry was null or undefined when calling addGiftCertificateLedgerEntry.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}/ledger_entry"
                .replace("{".concat("gift_certificate_oid", "}"), encodeURIComponent(String(gift_certificate_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GiftCertificateLedgerEntry" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(gift_certificate_ledger_entry || {}) : (gift_certificate_ledger_entry || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a gift certificate for this merchant account.
         * @summary Create a gift certificate
         * @param {GiftCertificateCreateRequest} gift_certificate_create_request Gift certificate create request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftCertificate: function (gift_certificate_create_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'gift_certificate_create_request' is not null or undefined
            if (gift_certificate_create_request === null || gift_certificate_create_request === undefined) {
                throw new RequiredError('gift_certificate_create_request', 'Required parameter gift_certificate_create_request was null or undefined when calling createGiftCertificate.');
            }
            var localVarPath = "/gift_certificate/gift_certificates";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GiftCertificateCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(gift_certificate_create_request || {}) : (gift_certificate_create_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a gift certificate for this merchant account.
         * @summary Delete a gift certificate
         * @param {number} gift_certificate_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGiftCertificate: function (gift_certificate_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'gift_certificate_oid' is not null or undefined
            if (gift_certificate_oid === null || gift_certificate_oid === undefined) {
                throw new RequiredError('gift_certificate_oid', 'Required parameter gift_certificate_oid was null or undefined when calling deleteGiftCertificate.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}"
                .replace("{".concat("gift_certificate_oid", "}"), encodeURIComponent(String(gift_certificate_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time).
         * @summary Retrieve gift certificate by code
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificateByCode: function (code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code', 'Required parameter code was null or undefined when calling getGiftCertificateByCode.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/by_code/{code}"
                .replace("{".concat("code", "}"), encodeURIComponent(String(code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a gift certificate from the account based on the internal primary key.
         * @summary Retrieve gift certificate by oid
         * @param {number} gift_certificate_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificateByOid: function (gift_certificate_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'gift_certificate_oid' is not null or undefined
            if (gift_certificate_oid === null || gift_certificate_oid === undefined) {
                throw new RequiredError('gift_certificate_oid', 'Required parameter gift_certificate_oid was null or undefined when calling getGiftCertificateByOid.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}"
                .replace("{".concat("gift_certificate_oid", "}"), encodeURIComponent(String(gift_certificate_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all gift certificates from the account based on customer email.
         * @summary Retrieve gift certificate by email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificatesByEmail: function (email, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling getGiftCertificatesByEmail.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/by_email/{email}"
                .replace("{".concat("email", "}"), encodeURIComponent(String(email)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve gift certificates by query
         * @param {GiftCertificateQuery} gift_certificate_query Gift certificates query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificatesByQuery: function (gift_certificate_query, _limit, _offset, _since, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'gift_certificate_query' is not null or undefined
            if (gift_certificate_query === null || gift_certificate_query === undefined) {
                throw new RequiredError('gift_certificate_query', 'Required parameter gift_certificate_query was null or undefined when calling getGiftCertificatesByQuery.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GiftCertificateQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(gift_certificate_query || {}) : (gift_certificate_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a gift certificate for this merchant account.
         * @summary Update a gift certificate
         * @param {number} gift_certificate_oid
         * @param {GiftCertificate} gift_certificate Gift certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGiftCertificate: function (gift_certificate_oid, gift_certificate, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'gift_certificate_oid' is not null or undefined
            if (gift_certificate_oid === null || gift_certificate_oid === undefined) {
                throw new RequiredError('gift_certificate_oid', 'Required parameter gift_certificate_oid was null or undefined when calling updateGiftCertificate.');
            }
            // verify required parameter 'gift_certificate' is not null or undefined
            if (gift_certificate === null || gift_certificate === undefined) {
                throw new RequiredError('gift_certificate', 'Required parameter gift_certificate was null or undefined when calling updateGiftCertificate.');
            }
            var localVarPath = "/gift_certificate/gift_certificates/{gift_certificate_oid}"
                .replace("{".concat("gift_certificate_oid", "}"), encodeURIComponent(String(gift_certificate_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["gift_certificate_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GiftCertificate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(gift_certificate || {}) : (gift_certificate || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.GiftCertificateApiFetchParamCreator = GiftCertificateApiFetchParamCreator;
/**
 * GiftCertificateApi - functional programming interface
 * @export
 */
var GiftCertificateApiFp = function (configuration) {
    return {
        /**
         * Adds a ledger entry for this gift certificate.
         * @summary Add a gift certificate ledger entry
         * @param {number} gift_certificate_oid
         * @param {GiftCertificateLedgerEntry} gift_certificate_ledger_entry Gift certificate ledger entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGiftCertificateLedgerEntry: function (gift_certificate_oid, gift_certificate_ledger_entry, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).addGiftCertificateLedgerEntry(gift_certificate_oid, gift_certificate_ledger_entry, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Creates a gift certificate for this merchant account.
         * @summary Create a gift certificate
         * @param {GiftCertificateCreateRequest} gift_certificate_create_request Gift certificate create request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftCertificate: function (gift_certificate_create_request, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).createGiftCertificate(gift_certificate_create_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a gift certificate for this merchant account.
         * @summary Delete a gift certificate
         * @param {number} gift_certificate_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGiftCertificate: function (gift_certificate_oid, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).deleteGiftCertificate(gift_certificate_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time).
         * @summary Retrieve gift certificate by code
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificateByCode: function (code, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).getGiftCertificateByCode(code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a gift certificate from the account based on the internal primary key.
         * @summary Retrieve gift certificate by oid
         * @param {number} gift_certificate_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificateByOid: function (gift_certificate_oid, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).getGiftCertificateByOid(gift_certificate_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves all gift certificates from the account based on customer email.
         * @summary Retrieve gift certificate by email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificatesByEmail: function (email, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).getGiftCertificatesByEmail(email, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve gift certificates by query
         * @param {GiftCertificateQuery} gift_certificate_query Gift certificates query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificatesByQuery: function (gift_certificate_query, _limit, _offset, _since, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).getGiftCertificatesByQuery(gift_certificate_query, _limit, _offset, _since, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a gift certificate for this merchant account.
         * @summary Update a gift certificate
         * @param {number} gift_certificate_oid
         * @param {GiftCertificate} gift_certificate Gift certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGiftCertificate: function (gift_certificate_oid, gift_certificate, options) {
            var localVarFetchArgs = (0, exports.GiftCertificateApiFetchParamCreator)(configuration).updateGiftCertificate(gift_certificate_oid, gift_certificate, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.GiftCertificateApiFp = GiftCertificateApiFp;
/**
 * GiftCertificateApi - factory interface
 * @export
 */
var GiftCertificateApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Adds a ledger entry for this gift certificate.
         * @summary Add a gift certificate ledger entry
         * @param {number} gift_certificate_oid
         * @param {GiftCertificateLedgerEntry} gift_certificate_ledger_entry Gift certificate ledger entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGiftCertificateLedgerEntry: function (gift_certificate_oid, gift_certificate_ledger_entry, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).addGiftCertificateLedgerEntry(gift_certificate_oid, gift_certificate_ledger_entry, options)(fetch, basePath);
        },
        /**
         * Creates a gift certificate for this merchant account.
         * @summary Create a gift certificate
         * @param {GiftCertificateCreateRequest} gift_certificate_create_request Gift certificate create request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGiftCertificate: function (gift_certificate_create_request, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).createGiftCertificate(gift_certificate_create_request, options)(fetch, basePath);
        },
        /**
         * Deletes a gift certificate for this merchant account.
         * @summary Delete a gift certificate
         * @param {number} gift_certificate_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGiftCertificate: function (gift_certificate_oid, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).deleteGiftCertificate(gift_certificate_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time).
         * @summary Retrieve gift certificate by code
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificateByCode: function (code, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).getGiftCertificateByCode(code, options)(fetch, basePath);
        },
        /**
         * Retrieves a gift certificate from the account based on the internal primary key.
         * @summary Retrieve gift certificate by oid
         * @param {number} gift_certificate_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificateByOid: function (gift_certificate_oid, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).getGiftCertificateByOid(gift_certificate_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves all gift certificates from the account based on customer email.
         * @summary Retrieve gift certificate by email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificatesByEmail: function (email, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).getGiftCertificatesByEmail(email, options)(fetch, basePath);
        },
        /**
         * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve gift certificates by query
         * @param {GiftCertificateQuery} gift_certificate_query Gift certificates query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftCertificatesByQuery: function (gift_certificate_query, _limit, _offset, _since, _sort, _expand, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).getGiftCertificatesByQuery(gift_certificate_query, _limit, _offset, _since, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Update a gift certificate for this merchant account.
         * @summary Update a gift certificate
         * @param {number} gift_certificate_oid
         * @param {GiftCertificate} gift_certificate Gift certificate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGiftCertificate: function (gift_certificate_oid, gift_certificate, options) {
            return (0, exports.GiftCertificateApiFp)(configuration).updateGiftCertificate(gift_certificate_oid, gift_certificate, options)(fetch, basePath);
        },
    };
};
exports.GiftCertificateApiFactory = GiftCertificateApiFactory;
/**
 * GiftCertificateApi - object-oriented interface
 * @export
 * @class GiftCertificateApi
 * @extends {BaseAPI}
 */
var GiftCertificateApi = /** @class */ (function (_super) {
    __extends(GiftCertificateApi, _super);
    function GiftCertificateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adds a ledger entry for this gift certificate.
     * @summary Add a gift certificate ledger entry
     * @param {number} gift_certificate_oid
     * @param {GiftCertificateLedgerEntry} gift_certificate_ledger_entry Gift certificate ledger entry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.addGiftCertificateLedgerEntry = function (gift_certificate_oid, gift_certificate_ledger_entry, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).addGiftCertificateLedgerEntry(gift_certificate_oid, gift_certificate_ledger_entry, options)(this.fetch, this.basePath);
    };
    /**
     * Creates a gift certificate for this merchant account.
     * @summary Create a gift certificate
     * @param {GiftCertificateCreateRequest} gift_certificate_create_request Gift certificate create request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.createGiftCertificate = function (gift_certificate_create_request, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).createGiftCertificate(gift_certificate_create_request, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a gift certificate for this merchant account.
     * @summary Delete a gift certificate
     * @param {number} gift_certificate_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.deleteGiftCertificate = function (gift_certificate_oid, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).deleteGiftCertificate(gift_certificate_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time).
     * @summary Retrieve gift certificate by code
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.getGiftCertificateByCode = function (code, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).getGiftCertificateByCode(code, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a gift certificate from the account based on the internal primary key.
     * @summary Retrieve gift certificate by oid
     * @param {number} gift_certificate_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.getGiftCertificateByOid = function (gift_certificate_oid, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).getGiftCertificateByOid(gift_certificate_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves all gift certificates from the account based on customer email.
     * @summary Retrieve gift certificate by email
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.getGiftCertificatesByEmail = function (email, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).getGiftCertificatesByEmail(email, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve gift certificates by query
     * @param {GiftCertificateQuery} gift_certificate_query Gift certificates query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.getGiftCertificatesByQuery = function (gift_certificate_query, _limit, _offset, _since, _sort, _expand, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).getGiftCertificatesByQuery(gift_certificate_query, _limit, _offset, _since, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update a gift certificate for this merchant account.
     * @summary Update a gift certificate
     * @param {number} gift_certificate_oid
     * @param {GiftCertificate} gift_certificate Gift certificate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApi
     */
    GiftCertificateApi.prototype.updateGiftCertificate = function (gift_certificate_oid, gift_certificate, options) {
        return (0, exports.GiftCertificateApiFp)(this.configuration).updateGiftCertificate(gift_certificate_oid, gift_certificate, options)(this.fetch, this.basePath);
    };
    return GiftCertificateApi;
}(BaseAPI));
exports.GiftCertificateApi = GiftCertificateApi;
/**
 * IntegrationLogApi - fetch parameter creator
 * @export
 */
var IntegrationLogApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieve an integration logs from the account based identifiers
         * @summary Retrieve an integration log
         * @param {string} pk
         * @param {string} sk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLog: function (pk, sk, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling getIntegrationLog.');
            }
            // verify required parameter 'sk' is not null or undefined
            if (sk === null || sk === undefined) {
                throw new RequiredError('sk', 'Required parameter sk was null or undefined when calling getIntegrationLog.');
            }
            var localVarPath = "/integration_log/query/{pk}/{sk}"
                .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)))
                .replace("{".concat("sk", "}"), encodeURIComponent(String(sk)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an integration log file from the account based identifiers
         * @summary Retrieve an integration log file
         * @param {string} pk
         * @param {string} sk
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogFile: function (pk, sk, uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling getIntegrationLogFile.');
            }
            // verify required parameter 'sk' is not null or undefined
            if (sk === null || sk === undefined) {
                throw new RequiredError('sk', 'Required parameter sk was null or undefined when calling getIntegrationLogFile.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getIntegrationLogFile.');
            }
            var localVarPath = "/integration_log/query/{pk}/{sk}/{uuid}"
                .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)))
                .replace("{".concat("sk", "}"), encodeURIComponent(String(sk)))
                .replace("{".concat("uuid", "}"), encodeURIComponent(String(uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an integration log file from the account based identifiers
         * @summary Retrieve an integration log file converted to PDF
         * @param {string} pk
         * @param {string} sk
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogFilePdf: function (pk, sk, uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'pk' is not null or undefined
            if (pk === null || pk === undefined) {
                throw new RequiredError('pk', 'Required parameter pk was null or undefined when calling getIntegrationLogFilePdf.');
            }
            // verify required parameter 'sk' is not null or undefined
            if (sk === null || sk === undefined) {
                throw new RequiredError('sk', 'Required parameter sk was null or undefined when calling getIntegrationLogFilePdf.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getIntegrationLogFilePdf.');
            }
            var localVarPath = "/integration_log/query/{pk}/{sk}/{uuid}/pdf"
                .replace("{".concat("pk", "}"), encodeURIComponent(String(pk)))
                .replace("{".concat("sk", "}"), encodeURIComponent(String(sk)))
                .replace("{".concat("uuid", "}"), encodeURIComponent(String(uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a set of integration log summaries from the account based on a query object.
         * @summary Retrieve integration log summaries
         * @param {IntegrationLogSummaryQueryRequest} integration_log_summaries_query Integration log summaries query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogSummariesQuery: function (integration_log_summaries_query, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration_log_summaries_query' is not null or undefined
            if (integration_log_summaries_query === null || integration_log_summaries_query === undefined) {
                throw new RequiredError('integration_log_summaries_query', 'Required parameter integration_log_summaries_query was null or undefined when calling getIntegrationLogSummariesQuery.');
            }
            var localVarPath = "/integration_log/summary/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("IntegrationLogSummaryQueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(integration_log_summaries_query || {}) : (integration_log_summaries_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a set of integration logs from the account based on a query object.
         * @summary Retrieve integration logs
         * @param {IntegrationLogQueryRequest} integration_log_query Integration log query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogsQuery: function (integration_log_query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'integration_log_query' is not null or undefined
            if (integration_log_query === null || integration_log_query === undefined) {
                throw new RequiredError('integration_log_query', 'Required parameter integration_log_query was null or undefined when calling getIntegrationLogsQuery.');
            }
            var localVarPath = "/integration_log/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("IntegrationLogQueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(integration_log_query || {}) : (integration_log_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.IntegrationLogApiFetchParamCreator = IntegrationLogApiFetchParamCreator;
/**
 * IntegrationLogApi - functional programming interface
 * @export
 */
var IntegrationLogApiFp = function (configuration) {
    return {
        /**
         * Retrieve an integration logs from the account based identifiers
         * @summary Retrieve an integration log
         * @param {string} pk
         * @param {string} sk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLog: function (pk, sk, options) {
            var localVarFetchArgs = (0, exports.IntegrationLogApiFetchParamCreator)(configuration).getIntegrationLog(pk, sk, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve an integration log file from the account based identifiers
         * @summary Retrieve an integration log file
         * @param {string} pk
         * @param {string} sk
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogFile: function (pk, sk, uuid, options) {
            var localVarFetchArgs = (0, exports.IntegrationLogApiFetchParamCreator)(configuration).getIntegrationLogFile(pk, sk, uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.blob();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve an integration log file from the account based identifiers
         * @summary Retrieve an integration log file converted to PDF
         * @param {string} pk
         * @param {string} sk
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogFilePdf: function (pk, sk, uuid, options) {
            var localVarFetchArgs = (0, exports.IntegrationLogApiFetchParamCreator)(configuration).getIntegrationLogFilePdf(pk, sk, uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.blob();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a set of integration log summaries from the account based on a query object.
         * @summary Retrieve integration log summaries
         * @param {IntegrationLogSummaryQueryRequest} integration_log_summaries_query Integration log summaries query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogSummariesQuery: function (integration_log_summaries_query, options) {
            var localVarFetchArgs = (0, exports.IntegrationLogApiFetchParamCreator)(configuration).getIntegrationLogSummariesQuery(integration_log_summaries_query, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a set of integration logs from the account based on a query object.
         * @summary Retrieve integration logs
         * @param {IntegrationLogQueryRequest} integration_log_query Integration log query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogsQuery: function (integration_log_query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.IntegrationLogApiFetchParamCreator)(configuration).getIntegrationLogsQuery(integration_log_query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.IntegrationLogApiFp = IntegrationLogApiFp;
/**
 * IntegrationLogApi - factory interface
 * @export
 */
var IntegrationLogApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieve an integration logs from the account based identifiers
         * @summary Retrieve an integration log
         * @param {string} pk
         * @param {string} sk
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLog: function (pk, sk, options) {
            return (0, exports.IntegrationLogApiFp)(configuration).getIntegrationLog(pk, sk, options)(fetch, basePath);
        },
        /**
         * Retrieve an integration log file from the account based identifiers
         * @summary Retrieve an integration log file
         * @param {string} pk
         * @param {string} sk
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogFile: function (pk, sk, uuid, options) {
            return (0, exports.IntegrationLogApiFp)(configuration).getIntegrationLogFile(pk, sk, uuid, options)(fetch, basePath);
        },
        /**
         * Retrieve an integration log file from the account based identifiers
         * @summary Retrieve an integration log file converted to PDF
         * @param {string} pk
         * @param {string} sk
         * @param {string} uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogFilePdf: function (pk, sk, uuid, options) {
            return (0, exports.IntegrationLogApiFp)(configuration).getIntegrationLogFilePdf(pk, sk, uuid, options)(fetch, basePath);
        },
        /**
         * Retrieves a set of integration log summaries from the account based on a query object.
         * @summary Retrieve integration log summaries
         * @param {IntegrationLogSummaryQueryRequest} integration_log_summaries_query Integration log summaries query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogSummariesQuery: function (integration_log_summaries_query, options) {
            return (0, exports.IntegrationLogApiFp)(configuration).getIntegrationLogSummariesQuery(integration_log_summaries_query, options)(fetch, basePath);
        },
        /**
         * Retrieves a set of integration logs from the account based on a query object.
         * @summary Retrieve integration logs
         * @param {IntegrationLogQueryRequest} integration_log_query Integration log query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLogsQuery: function (integration_log_query, _limit, _offset, _sort, options) {
            return (0, exports.IntegrationLogApiFp)(configuration).getIntegrationLogsQuery(integration_log_query, _limit, _offset, _sort, options)(fetch, basePath);
        },
    };
};
exports.IntegrationLogApiFactory = IntegrationLogApiFactory;
/**
 * IntegrationLogApi - object-oriented interface
 * @export
 * @class IntegrationLogApi
 * @extends {BaseAPI}
 */
var IntegrationLogApi = /** @class */ (function (_super) {
    __extends(IntegrationLogApi, _super);
    function IntegrationLogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve an integration logs from the account based identifiers
     * @summary Retrieve an integration log
     * @param {string} pk
     * @param {string} sk
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApi
     */
    IntegrationLogApi.prototype.getIntegrationLog = function (pk, sk, options) {
        return (0, exports.IntegrationLogApiFp)(this.configuration).getIntegrationLog(pk, sk, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve an integration log file from the account based identifiers
     * @summary Retrieve an integration log file
     * @param {string} pk
     * @param {string} sk
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApi
     */
    IntegrationLogApi.prototype.getIntegrationLogFile = function (pk, sk, uuid, options) {
        return (0, exports.IntegrationLogApiFp)(this.configuration).getIntegrationLogFile(pk, sk, uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve an integration log file from the account based identifiers
     * @summary Retrieve an integration log file converted to PDF
     * @param {string} pk
     * @param {string} sk
     * @param {string} uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApi
     */
    IntegrationLogApi.prototype.getIntegrationLogFilePdf = function (pk, sk, uuid, options) {
        return (0, exports.IntegrationLogApiFp)(this.configuration).getIntegrationLogFilePdf(pk, sk, uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a set of integration log summaries from the account based on a query object.
     * @summary Retrieve integration log summaries
     * @param {IntegrationLogSummaryQueryRequest} integration_log_summaries_query Integration log summaries query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApi
     */
    IntegrationLogApi.prototype.getIntegrationLogSummariesQuery = function (integration_log_summaries_query, options) {
        return (0, exports.IntegrationLogApiFp)(this.configuration).getIntegrationLogSummariesQuery(integration_log_summaries_query, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a set of integration logs from the account based on a query object.
     * @summary Retrieve integration logs
     * @param {IntegrationLogQueryRequest} integration_log_query Integration log query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApi
     */
    IntegrationLogApi.prototype.getIntegrationLogsQuery = function (integration_log_query, _limit, _offset, _sort, options) {
        return (0, exports.IntegrationLogApiFp)(this.configuration).getIntegrationLogsQuery(integration_log_query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    return IntegrationLogApi;
}(BaseAPI));
exports.IntegrationLogApi = IntegrationLogApi;
/**
 * ItemApi - fetch parameter creator
 * @export
 */
var ItemApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a digital item on the UltraCart account.
         * @summary Delete a digital item, which is a file within the digital library, not an actual merchant item
         * @param {number} digital_item_oid The digital item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDigitalItem: function (digital_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'digital_item_oid' is not null or undefined
            if (digital_item_oid === null || digital_item_oid === undefined) {
                throw new RequiredError('digital_item_oid', 'Required parameter digital_item_oid was null or undefined when calling deleteDigitalItem.');
            }
            var localVarPath = "/item/digital_library/{digital_item_oid}"
                .replace("{".concat("digital_item_oid", "}"), encodeURIComponent(String(digital_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an item on the UltraCart account.
         * @summary Delete an item
         * @param {number} merchant_item_oid The item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling deleteItem.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}"
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an item review.
         * @summary Delete a review
         * @param {number} review_oid The review oid to delete.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview: function (review_oid, merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'review_oid' is not null or undefined
            if (review_oid === null || review_oid === undefined) {
                throw new RequiredError('review_oid', 'Required parameter review_oid was null or undefined when calling deleteReview.');
            }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling deleteReview.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}"
                .replace("{".concat("review_oid", "}"), encodeURIComponent(String(review_oid)))
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
         * @summary Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
         * @param {number} digital_item_oid The digital item oid to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItem: function (digital_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'digital_item_oid' is not null or undefined
            if (digital_item_oid === null || digital_item_oid === undefined) {
                throw new RequiredError('digital_item_oid', 'Required parameter digital_item_oid was null or undefined when calling getDigitalItem.');
            }
            var localVarPath = "/item/digital_library/{digital_item_oid}"
                .replace("{".concat("digital_item_oid", "}"), encodeURIComponent(String(digital_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve digital items from the digital library which are digital files that may be attached to normal items
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItems: function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/digital_library";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
         * @summary Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
         * @param {string} external_id The external id to match against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItemsByExternalId: function (external_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'external_id' is not null or undefined
            if (external_id === null || external_id === undefined) {
                throw new RequiredError('external_id', 'Required parameter external_id was null or undefined when calling getDigitalItemsByExternalId.');
            }
            var localVarPath = "/item/digital_library/by_external/{external_id}"
                .replace("{".concat("external_id", "}"), encodeURIComponent(String(external_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
         * @summary Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventorySnapshot: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/items/inventory_snapshot";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single item using the specified item oid.
         * @summary Retrieve an item
         * @param {number} merchant_item_oid The item oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (merchant_item_oid, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling getItem.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}"
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single item using the specified item id.
         * @summary Retrieve an item by item id
         * @param {string} merchant_item_id The item id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByMerchantItemId: function (merchant_item_id, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_item_id' is not null or undefined
            if (merchant_item_id === null || merchant_item_id === undefined) {
                throw new RequiredError('merchant_item_id', 'Required parameter merchant_item_id was null or undefined when calling getItemByMerchantItemId.');
            }
            var localVarPath = "/item/items/merchant_item_id/{merchant_item_id}"
                .replace("{".concat("merchant_item_id", "}"), encodeURIComponent(String(merchant_item_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve items
         * @param {number} [parent_category_id] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
         * @param {string} [parent_category_path] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/items";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (parent_category_id !== undefined) {
                localVarQueryParameter['parent_category_id'] = parent_category_id;
            }
            if (parent_category_path !== undefined) {
                localVarQueryParameter['parent_category_path'] = parent_category_path;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTiers: function (_expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/pricing_tiers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an item review.
         * @summary Get a review
         * @param {number} review_oid The review oid to retrieve.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview: function (review_oid, merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'review_oid' is not null or undefined
            if (review_oid === null || review_oid === undefined) {
                throw new RequiredError('review_oid', 'Required parameter review_oid was null or undefined when calling getReview.');
            }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling getReview.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}"
                .replace("{".concat("review_oid", "}"), encodeURIComponent(String(review_oid)))
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve item reviews.
         * @summary Get reviews for an item
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviews: function (merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling getReviews.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}/reviews"
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassociatedDigitalItems: function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/digital_library/unassociated";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item.
         * @summary Create a file within the digital library
         * @param {ItemDigitalItem} digital_item Digital item to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertDigitalItem: function (digital_item, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'digital_item' is not null or undefined
            if (digital_item === null || digital_item === undefined) {
                throw new RequiredError('digital_item', 'Required parameter digital_item was null or undefined when calling insertDigitalItem.');
            }
            var localVarPath = "/item/digital_library";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemDigitalItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(digital_item || {}) : (digital_item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new item on the UltraCart account.
         * @summary Create an item
         * @param {Item} item Item to create
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: function (item, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item', 'Required parameter item was null or undefined when calling insertItem.');
            }
            var localVarPath = "/item/items";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Item" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item || {}) : (item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a item review.
         * @summary Insert a review
         * @param {ItemReview} review Review to insert
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertReview: function (review, merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'review' is not null or undefined
            if (review === null || review === undefined) {
                throw new RequiredError('review', 'Required parameter review was null or undefined when calling insertReview.');
            }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling insertReview.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}/reviews"
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemReview" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(review || {}) : (review || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an item content attribute, creating it new if it does not yet exist.
         * @summary Upsert an item content attribute
         * @param {ItemContentAttribute} item_attribute Item content attribute to upsert
         * @param {number} merchant_item_oid The item oid to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUpdateItemContentAttribute: function (item_attribute, merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item_attribute' is not null or undefined
            if (item_attribute === null || item_attribute === undefined) {
                throw new RequiredError('item_attribute', 'Required parameter item_attribute was null or undefined when calling insertUpdateItemContentAttribute.');
            }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling insertUpdateItemContentAttribute.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}/content/attributes"
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemContentAttribute" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item_attribute || {}) : (item_attribute || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item.
         * @summary Updates a file within the digital library
         * @param {number} digital_item_oid The digital item oid to update.
         * @param {ItemDigitalItem} digital_item Digital item to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDigitalItem: function (digital_item_oid, digital_item, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'digital_item_oid' is not null or undefined
            if (digital_item_oid === null || digital_item_oid === undefined) {
                throw new RequiredError('digital_item_oid', 'Required parameter digital_item_oid was null or undefined when calling updateDigitalItem.');
            }
            // verify required parameter 'digital_item' is not null or undefined
            if (digital_item === null || digital_item === undefined) {
                throw new RequiredError('digital_item', 'Required parameter digital_item was null or undefined when calling updateDigitalItem.');
            }
            var localVarPath = "/item/digital_library/{digital_item_oid}"
                .replace("{".concat("digital_item_oid", "}"), encodeURIComponent(String(digital_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemDigitalItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(digital_item || {}) : (digital_item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a new item on the UltraCart account.
         * @summary Update an item
         * @param {Item} item Item to update
         * @param {number} merchant_item_oid The item oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (item, merchant_item_oid, _expand, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item', 'Required parameter item was null or undefined when calling updateItem.');
            }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling updateItem.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}"
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Item" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item || {}) : (item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple item on the UltraCart account.
         * @summary Update multiple items
         * @param {ItemsRequest} items_request Items to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: function (items_request, _expand, _placeholders, _async, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'items_request' is not null or undefined
            if (items_request === null || items_request === undefined) {
                throw new RequiredError('items_request', 'Required parameter items_request was null or undefined when calling updateItems.');
            }
            var localVarPath = "/item/items/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            if (_async !== undefined) {
                localVarQueryParameter['_async'] = _async;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(items_request || {}) : (items_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an item review.
         * @summary Update a review
         * @param {ItemReview} review Review to update
         * @param {number} review_oid The review oid to update.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview: function (review, review_oid, merchant_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'review' is not null or undefined
            if (review === null || review === undefined) {
                throw new RequiredError('review', 'Required parameter review was null or undefined when calling updateReview.');
            }
            // verify required parameter 'review_oid' is not null or undefined
            if (review_oid === null || review_oid === undefined) {
                throw new RequiredError('review_oid', 'Required parameter review_oid was null or undefined when calling updateReview.');
            }
            // verify required parameter 'merchant_item_oid' is not null or undefined
            if (merchant_item_oid === null || merchant_item_oid === undefined) {
                throw new RequiredError('merchant_item_oid', 'Required parameter merchant_item_oid was null or undefined when calling updateReview.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}/reviews/{review_oid}"
                .replace("{".concat("review_oid", "}"), encodeURIComponent(String(review_oid)))
                .replace("{".concat("merchant_item_oid", "}"), encodeURIComponent(String(merchant_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemReview" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(review || {}) : (review || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
         * @summary Upload an image to the temporary multimedia.
         * @param {Blob} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTemporaryMultimedia: function (file, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file', 'Required parameter file was null or undefined when calling uploadTemporaryMultimedia.');
            }
            var localVarPath = "/item/temp_multimedia";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            var localVarFormParams = new url.URLSearchParams();
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (file !== undefined) {
                localVarFormParams.set('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ItemApiFetchParamCreator = ItemApiFetchParamCreator;
/**
 * ItemApi - functional programming interface
 * @export
 */
var ItemApiFp = function (configuration) {
    return {
        /**
         * Delete a digital item on the UltraCart account.
         * @summary Delete a digital item, which is a file within the digital library, not an actual merchant item
         * @param {number} digital_item_oid The digital item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDigitalItem: function (digital_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).deleteDigitalItem(digital_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an item on the UltraCart account.
         * @summary Delete an item
         * @param {number} merchant_item_oid The item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).deleteItem(merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an item review.
         * @summary Delete a review
         * @param {number} review_oid The review oid to delete.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview: function (review_oid, merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).deleteReview(review_oid, merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
         * @summary Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
         * @param {number} digital_item_oid The digital item oid to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItem: function (digital_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getDigitalItem(digital_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve digital items from the digital library which are digital files that may be attached to normal items
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItems: function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getDigitalItems(_limit, _offset, _since, _sort, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
         * @summary Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
         * @param {string} external_id The external id to match against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItemsByExternalId: function (external_id, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getDigitalItemsByExternalId(external_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
         * @summary Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventorySnapshot: function (options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getInventorySnapshot(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single item using the specified item oid.
         * @summary Retrieve an item
         * @param {number} merchant_item_oid The item oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (merchant_item_oid, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getItem(merchant_item_oid, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single item using the specified item id.
         * @summary Retrieve an item by item id
         * @param {string} merchant_item_id The item id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByMerchantItemId: function (merchant_item_id, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getItemByMerchantItemId(merchant_item_id, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve items
         * @param {number} [parent_category_id] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
         * @param {string} [parent_category_path] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getItems(parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTiers: function (_expand, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getPricingTiers(_expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve an item review.
         * @summary Get a review
         * @param {number} review_oid The review oid to retrieve.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview: function (review_oid, merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getReview(review_oid, merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve item reviews.
         * @summary Get reviews for an item
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviews: function (merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getReviews(merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassociatedDigitalItems: function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).getUnassociatedDigitalItems(_limit, _offset, _since, _sort, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item.
         * @summary Create a file within the digital library
         * @param {ItemDigitalItem} digital_item Digital item to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertDigitalItem: function (digital_item, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).insertDigitalItem(digital_item, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new item on the UltraCart account.
         * @summary Create an item
         * @param {Item} item Item to create
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: function (item, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).insertItem(item, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a item review.
         * @summary Insert a review
         * @param {ItemReview} review Review to insert
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertReview: function (review, merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).insertReview(review, merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an item content attribute, creating it new if it does not yet exist.
         * @summary Upsert an item content attribute
         * @param {ItemContentAttribute} item_attribute Item content attribute to upsert
         * @param {number} merchant_item_oid The item oid to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUpdateItemContentAttribute: function (item_attribute, merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).insertUpdateItemContentAttribute(item_attribute, merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item.
         * @summary Updates a file within the digital library
         * @param {number} digital_item_oid The digital item oid to update.
         * @param {ItemDigitalItem} digital_item Digital item to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDigitalItem: function (digital_item_oid, digital_item, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).updateDigitalItem(digital_item_oid, digital_item, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a new item on the UltraCart account.
         * @summary Update an item
         * @param {Item} item Item to update
         * @param {number} merchant_item_oid The item oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (item, merchant_item_oid, _expand, _placeholders, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).updateItem(item, merchant_item_oid, _expand, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update multiple item on the UltraCart account.
         * @summary Update multiple items
         * @param {ItemsRequest} items_request Items to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: function (items_request, _expand, _placeholders, _async, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).updateItems(items_request, _expand, _placeholders, _async, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an item review.
         * @summary Update a review
         * @param {ItemReview} review Review to update
         * @param {number} review_oid The review oid to update.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview: function (review, review_oid, merchant_item_oid, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).updateReview(review, review_oid, merchant_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
         * @summary Upload an image to the temporary multimedia.
         * @param {Blob} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTemporaryMultimedia: function (file, options) {
            var localVarFetchArgs = (0, exports.ItemApiFetchParamCreator)(configuration).uploadTemporaryMultimedia(file, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.ItemApiFp = ItemApiFp;
/**
 * ItemApi - factory interface
 * @export
 */
var ItemApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a digital item on the UltraCart account.
         * @summary Delete a digital item, which is a file within the digital library, not an actual merchant item
         * @param {number} digital_item_oid The digital item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDigitalItem: function (digital_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).deleteDigitalItem(digital_item_oid, options)(fetch, basePath);
        },
        /**
         * Delete an item on the UltraCart account.
         * @summary Delete an item
         * @param {number} merchant_item_oid The item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).deleteItem(merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Delete an item review.
         * @summary Delete a review
         * @param {number} review_oid The review oid to delete.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview: function (review_oid, merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).deleteReview(review_oid, merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
         * @summary Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
         * @param {number} digital_item_oid The digital item oid to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItem: function (digital_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).getDigitalItem(digital_item_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve digital items from the digital library which are digital files that may be attached to normal items
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItems: function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).getDigitalItems(_limit, _offset, _since, _sort, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
         * @summary Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
         * @param {string} external_id The external id to match against.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalItemsByExternalId: function (external_id, options) {
            return (0, exports.ItemApiFp)(configuration).getDigitalItemsByExternalId(external_id, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
         * @summary Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventorySnapshot: function (options) {
            return (0, exports.ItemApiFp)(configuration).getInventorySnapshot(options)(fetch, basePath);
        },
        /**
         * Retrieves a single item using the specified item oid.
         * @summary Retrieve an item
         * @param {number} merchant_item_oid The item oid to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (merchant_item_oid, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).getItem(merchant_item_oid, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves a single item using the specified item id.
         * @summary Retrieve an item by item id
         * @param {string} merchant_item_id The item id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByMerchantItemId: function (merchant_item_id, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).getItemByMerchantItemId(merchant_item_id, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve items
         * @param {number} [parent_category_id] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
         * @param {string} [parent_category_path] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).getItems(parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTiers: function (_expand, options) {
            return (0, exports.ItemApiFp)(configuration).getPricingTiers(_expand, options)(fetch, basePath);
        },
        /**
         * Retrieve an item review.
         * @summary Get a review
         * @param {number} review_oid The review oid to retrieve.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview: function (review_oid, merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).getReview(review_oid, merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Retrieve item reviews.
         * @summary Get reviews for an item
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReviews: function (merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).getReviews(merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch items that have been created/modified since this date/time.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnassociatedDigitalItems: function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).getUnassociatedDigitalItems(_limit, _offset, _since, _sort, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item.
         * @summary Create a file within the digital library
         * @param {ItemDigitalItem} digital_item Digital item to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertDigitalItem: function (digital_item, options) {
            return (0, exports.ItemApiFp)(configuration).insertDigitalItem(digital_item, options)(fetch, basePath);
        },
        /**
         * Create a new item on the UltraCart account.
         * @summary Create an item
         * @param {Item} item Item to create
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: function (item, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).insertItem(item, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Insert a item review.
         * @summary Insert a review
         * @param {ItemReview} review Review to insert
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertReview: function (review, merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).insertReview(review, merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Update an item content attribute, creating it new if it does not yet exist.
         * @summary Upsert an item content attribute
         * @param {ItemContentAttribute} item_attribute Item content attribute to upsert
         * @param {number} merchant_item_oid The item oid to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUpdateItemContentAttribute: function (item_attribute, merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).insertUpdateItemContentAttribute(item_attribute, merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item.
         * @summary Updates a file within the digital library
         * @param {number} digital_item_oid The digital item oid to update.
         * @param {ItemDigitalItem} digital_item Digital item to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDigitalItem: function (digital_item_oid, digital_item, options) {
            return (0, exports.ItemApiFp)(configuration).updateDigitalItem(digital_item_oid, digital_item, options)(fetch, basePath);
        },
        /**
         * Update a new item on the UltraCart account.
         * @summary Update an item
         * @param {Item} item Item to update
         * @param {number} merchant_item_oid The item oid to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (item, merchant_item_oid, _expand, _placeholders, options) {
            return (0, exports.ItemApiFp)(configuration).updateItem(item, merchant_item_oid, _expand, _placeholders, options)(fetch, basePath);
        },
        /**
         * Update multiple item on the UltraCart account.
         * @summary Update multiple items
         * @param {ItemsRequest} items_request Items to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [_async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: function (items_request, _expand, _placeholders, _async, options) {
            return (0, exports.ItemApiFp)(configuration).updateItems(items_request, _expand, _placeholders, _async, options)(fetch, basePath);
        },
        /**
         * Update an item review.
         * @summary Update a review
         * @param {ItemReview} review Review to update
         * @param {number} review_oid The review oid to update.
         * @param {number} merchant_item_oid The item oid the review is associated with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview: function (review, review_oid, merchant_item_oid, options) {
            return (0, exports.ItemApiFp)(configuration).updateReview(review, review_oid, merchant_item_oid, options)(fetch, basePath);
        },
        /**
         * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
         * @summary Upload an image to the temporary multimedia.
         * @param {Blob} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTemporaryMultimedia: function (file, options) {
            return (0, exports.ItemApiFp)(configuration).uploadTemporaryMultimedia(file, options)(fetch, basePath);
        },
    };
};
exports.ItemApiFactory = ItemApiFactory;
/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
var ItemApi = /** @class */ (function (_super) {
    __extends(ItemApi, _super);
    function ItemApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a digital item on the UltraCart account.
     * @summary Delete a digital item, which is a file within the digital library, not an actual merchant item
     * @param {number} digital_item_oid The digital item oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.deleteDigitalItem = function (digital_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).deleteDigitalItem(digital_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an item on the UltraCart account.
     * @summary Delete an item
     * @param {number} merchant_item_oid The item oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.deleteItem = function (merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).deleteItem(merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an item review.
     * @summary Delete a review
     * @param {number} review_oid The review oid to delete.
     * @param {number} merchant_item_oid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.deleteReview = function (review_oid, merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).deleteReview(review_oid, merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
     * @summary Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
     * @param {number} digital_item_oid The digital item oid to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getDigitalItem = function (digital_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).getDigitalItem(digital_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve digital items from the digital library which are digital files that may be attached to normal items
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch items that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getDigitalItems = function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).getDigitalItems(_limit, _offset, _since, _sort, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.
     * @summary Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
     * @param {string} external_id The external id to match against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getDigitalItemsByExternalId = function (external_id, options) {
        return (0, exports.ItemApiFp)(this.configuration).getDigitalItemsByExternalId(external_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
     * @summary Retrieve a list of item inventories.  This method may be called once every 15 minutes.  More than that will result in a 429 response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getInventorySnapshot = function (options) {
        return (0, exports.ItemApiFp)(this.configuration).getInventorySnapshot(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single item using the specified item oid.
     * @summary Retrieve an item
     * @param {number} merchant_item_oid The item oid to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getItem = function (merchant_item_oid, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).getItem(merchant_item_oid, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single item using the specified item id.
     * @summary Retrieve an item by item id
     * @param {string} merchant_item_id The item id to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getItemByMerchantItemId = function (merchant_item_id, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).getItemByMerchantItemId(merchant_item_id, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve items
     * @param {number} [parent_category_id] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
     * @param {string} [parent_category_path] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch items that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getItems = function (parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).getItems(parent_category_id, parent_category_path, _limit, _offset, _since, _sort, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the pricing tiers
     * @summary Retrieve pricing tiers
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getPricingTiers = function (_expand, options) {
        return (0, exports.ItemApiFp)(this.configuration).getPricingTiers(_expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve an item review.
     * @summary Get a review
     * @param {number} review_oid The review oid to retrieve.
     * @param {number} merchant_item_oid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getReview = function (review_oid, merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).getReview(review_oid, merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve item reviews.
     * @summary Get reviews for an item
     * @param {number} merchant_item_oid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getReviews = function (merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).getReviews(merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch items that have been created/modified since this date/time.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getUnassociatedDigitalItems = function (_limit, _offset, _since, _sort, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).getUnassociatedDigitalItems(_limit, _offset, _since, _sort, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item.
     * @summary Create a file within the digital library
     * @param {ItemDigitalItem} digital_item Digital item to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.insertDigitalItem = function (digital_item, options) {
        return (0, exports.ItemApiFp)(this.configuration).insertDigitalItem(digital_item, options)(this.fetch, this.basePath);
    };
    /**
     * Create a new item on the UltraCart account.
     * @summary Create an item
     * @param {Item} item Item to create
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.insertItem = function (item, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).insertItem(item, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a item review.
     * @summary Insert a review
     * @param {ItemReview} review Review to insert
     * @param {number} merchant_item_oid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.insertReview = function (review, merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).insertReview(review, merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Update an item content attribute, creating it new if it does not yet exist.
     * @summary Upsert an item content attribute
     * @param {ItemContentAttribute} item_attribute Item content attribute to upsert
     * @param {number} merchant_item_oid The item oid to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.insertUpdateItemContentAttribute = function (item_attribute, merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).insertUpdateItemContentAttribute(item_attribute, merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item.
     * @summary Updates a file within the digital library
     * @param {number} digital_item_oid The digital item oid to update.
     * @param {ItemDigitalItem} digital_item Digital item to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.updateDigitalItem = function (digital_item_oid, digital_item, options) {
        return (0, exports.ItemApiFp)(this.configuration).updateDigitalItem(digital_item_oid, digital_item, options)(this.fetch, this.basePath);
    };
    /**
     * Update a new item on the UltraCart account.
     * @summary Update an item
     * @param {Item} item Item to update
     * @param {number} merchant_item_oid The item oid to update.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.updateItem = function (item, merchant_item_oid, _expand, _placeholders, options) {
        return (0, exports.ItemApiFp)(this.configuration).updateItem(item, merchant_item_oid, _expand, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Update multiple item on the UltraCart account.
     * @summary Update multiple items
     * @param {ItemsRequest} items_request Items to update (synchronous maximum 20 / asynchronous maximum 100)
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [_async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.updateItems = function (items_request, _expand, _placeholders, _async, options) {
        return (0, exports.ItemApiFp)(this.configuration).updateItems(items_request, _expand, _placeholders, _async, options)(this.fetch, this.basePath);
    };
    /**
     * Update an item review.
     * @summary Update a review
     * @param {ItemReview} review Review to update
     * @param {number} review_oid The review oid to update.
     * @param {number} merchant_item_oid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.updateReview = function (review, review_oid, merchant_item_oid, options) {
        return (0, exports.ItemApiFp)(this.configuration).updateReview(review, review_oid, merchant_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
     * @summary Upload an image to the temporary multimedia.
     * @param {Blob} file File to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.uploadTemporaryMultimedia = function (file, options) {
        return (0, exports.ItemApiFp)(this.configuration).uploadTemporaryMultimedia(file, options)(this.fetch, this.basePath);
    };
    return ItemApi;
}(BaseAPI));
exports.ItemApi = ItemApi;
/**
 * OauthApi - fetch parameter creator
 * @export
 */
var OauthApiFetchParamCreator = function (configuration) {
    return {
        /**
         * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
         * @summary Exchange authorization code for access token.
         * @param {string} client_id The OAuth application client_id.
         * @param {string} grant_type Type of grant
         * @param {string} [code] Authorization code received back from the browser redirect
         * @param {string} [redirect_uri] The URI that you redirect the browser to start the authorization process
         * @param {string} [refresh_token] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAccessToken: function (client_id, grant_type, code, redirect_uri, refresh_token, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'client_id' is not null or undefined
            if (client_id === null || client_id === undefined) {
                throw new RequiredError('client_id', 'Required parameter client_id was null or undefined when calling oauthAccessToken.');
            }
            // verify required parameter 'grant_type' is not null or undefined
            if (grant_type === null || grant_type === undefined) {
                throw new RequiredError('grant_type', 'Required parameter grant_type was null or undefined when calling oauthAccessToken.');
            }
            var localVarPath = "/oauth/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            var localVarFormParams = new url.URLSearchParams();
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["ultrabooks_write", "auto_order_write", "coupon_read", "affiliate_read", "workflow_read", "coupon_write", "channel_partner_read", "tax_read", "conversation_write", "fulfillment_write", "tax_write", "gift_certificate_write", "workflow_write", "channel_partner_write", "item_read", "fulfillment_read", "webhook_write", "chargeback_write", "user_write", "gift_certificate_read", "checkout_write", "storefront_read", "webhook_read", "item_write", "auto_order_read", "customer_read", "user_read", "configuration_read", "customer_write", "order_read", "conversation_read", "affiliate_write", "storefront_write", "ultrabooks_read", "order_write", "chargeback_read", "integration_log_write", "configuration_write", "checkout_read", "integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (client_id !== undefined) {
                localVarFormParams.set('client_id', client_id);
            }
            if (grant_type !== undefined) {
                localVarFormParams.set('grant_type', grant_type);
            }
            if (code !== undefined) {
                localVarFormParams.set('code', code);
            }
            if (redirect_uri !== undefined) {
                localVarFormParams.set('redirect_uri', redirect_uri);
            }
            if (refresh_token !== undefined) {
                localVarFormParams.set('refresh_token', refresh_token);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revokes the OAuth application associated with the specified client_id and token.
         * @summary Revoke this OAuth application.
         * @param {string} client_id The OAuth application client_id.
         * @param {string} token The OAuth access token that is to be revoked..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthRevoke: function (client_id, token, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'client_id' is not null or undefined
            if (client_id === null || client_id === undefined) {
                throw new RequiredError('client_id', 'Required parameter client_id was null or undefined when calling oauthRevoke.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token', 'Required parameter token was null or undefined when calling oauthRevoke.');
            }
            var localVarPath = "/oauth/revoke";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            var localVarFormParams = new url.URLSearchParams();
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["ultrabooks_write", "auto_order_write", "coupon_read", "affiliate_read", "workflow_read", "coupon_write", "channel_partner_read", "tax_read", "conversation_write", "fulfillment_write", "tax_write", "gift_certificate_write", "workflow_write", "channel_partner_write", "item_read", "fulfillment_read", "webhook_write", "chargeback_write", "user_write", "gift_certificate_read", "checkout_write", "storefront_read", "webhook_read", "item_write", "auto_order_read", "customer_read", "user_read", "configuration_read", "customer_write", "order_read", "conversation_read", "affiliate_write", "storefront_write", "ultrabooks_read", "order_write", "chargeback_read", "integration_log_write", "configuration_write", "checkout_read", "integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (client_id !== undefined) {
                localVarFormParams.set('client_id', client_id);
            }
            if (token !== undefined) {
                localVarFormParams.set('token', token);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OauthApiFetchParamCreator = OauthApiFetchParamCreator;
/**
 * OauthApi - functional programming interface
 * @export
 */
var OauthApiFp = function (configuration) {
    return {
        /**
         * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
         * @summary Exchange authorization code for access token.
         * @param {string} client_id The OAuth application client_id.
         * @param {string} grant_type Type of grant
         * @param {string} [code] Authorization code received back from the browser redirect
         * @param {string} [redirect_uri] The URI that you redirect the browser to start the authorization process
         * @param {string} [refresh_token] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAccessToken: function (client_id, grant_type, code, redirect_uri, refresh_token, options) {
            var localVarFetchArgs = (0, exports.OauthApiFetchParamCreator)(configuration).oauthAccessToken(client_id, grant_type, code, redirect_uri, refresh_token, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Revokes the OAuth application associated with the specified client_id and token.
         * @summary Revoke this OAuth application.
         * @param {string} client_id The OAuth application client_id.
         * @param {string} token The OAuth access token that is to be revoked..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthRevoke: function (client_id, token, options) {
            var localVarFetchArgs = (0, exports.OauthApiFetchParamCreator)(configuration).oauthRevoke(client_id, token, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.OauthApiFp = OauthApiFp;
/**
 * OauthApi - factory interface
 * @export
 */
var OauthApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
         * @summary Exchange authorization code for access token.
         * @param {string} client_id The OAuth application client_id.
         * @param {string} grant_type Type of grant
         * @param {string} [code] Authorization code received back from the browser redirect
         * @param {string} [redirect_uri] The URI that you redirect the browser to start the authorization process
         * @param {string} [refresh_token] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAccessToken: function (client_id, grant_type, code, redirect_uri, refresh_token, options) {
            return (0, exports.OauthApiFp)(configuration).oauthAccessToken(client_id, grant_type, code, redirect_uri, refresh_token, options)(fetch, basePath);
        },
        /**
         * Revokes the OAuth application associated with the specified client_id and token.
         * @summary Revoke this OAuth application.
         * @param {string} client_id The OAuth application client_id.
         * @param {string} token The OAuth access token that is to be revoked..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthRevoke: function (client_id, token, options) {
            return (0, exports.OauthApiFp)(configuration).oauthRevoke(client_id, token, options)(fetch, basePath);
        },
    };
};
exports.OauthApiFactory = OauthApiFactory;
/**
 * OauthApi - object-oriented interface
 * @export
 * @class OauthApi
 * @extends {BaseAPI}
 */
var OauthApi = /** @class */ (function (_super) {
    __extends(OauthApi, _super);
    function OauthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
     * @summary Exchange authorization code for access token.
     * @param {string} client_id The OAuth application client_id.
     * @param {string} grant_type Type of grant
     * @param {string} [code] Authorization code received back from the browser redirect
     * @param {string} [redirect_uri] The URI that you redirect the browser to start the authorization process
     * @param {string} [refresh_token] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    OauthApi.prototype.oauthAccessToken = function (client_id, grant_type, code, redirect_uri, refresh_token, options) {
        return (0, exports.OauthApiFp)(this.configuration).oauthAccessToken(client_id, grant_type, code, redirect_uri, refresh_token, options)(this.fetch, this.basePath);
    };
    /**
     * Revokes the OAuth application associated with the specified client_id and token.
     * @summary Revoke this OAuth application.
     * @param {string} client_id The OAuth application client_id.
     * @param {string} token The OAuth access token that is to be revoked..
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    OauthApi.prototype.oauthRevoke = function (client_id, token, options) {
        return (0, exports.OauthApiFp)(this.configuration).oauthRevoke(client_id, token, options)(this.fetch, this.basePath);
    };
    return OauthApi;
}(BaseAPI));
exports.OauthApi = OauthApi;
/**
 * OrderApi - fetch parameter creator
 * @export
 */
var OrderApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details.
         * @summary Adjusts an order total
         * @param {string} order_id The order id to cancel.
         * @param {string} desired_total The desired total with no formatting. example 123.45
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustOrderTotal: function (order_id, desired_total, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling adjustOrderTotal.');
            }
            // verify required parameter 'desired_total' is not null or undefined
            if (desired_total === null || desired_total === undefined) {
                throw new RequiredError('desired_total', 'Required parameter desired_total was null or undefined when calling adjustOrderTotal.');
            }
            var localVarPath = "/order/orders/{order_id}/adjust_order_total/{desired_total}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)))
                .replace("{".concat("desired_total", "}"), encodeURIComponent(String(desired_total)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
         * @summary Cancel an order
         * @param {string} order_id The order id to cancel.
         * @param {boolean} [lock_self_ship_orders] Flag to prevent a order shipping during a refund process
         * @param {boolean} [skip_refund_and_hold] Skip refund and move order to Held Orders department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (order_id, lock_self_ship_orders, skip_refund_and_hold, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling cancelOrder.');
            }
            var localVarPath = "/order/orders/{order_id}/cancel"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (lock_self_ship_orders !== undefined) {
                localVarQueryParameter['lock_self_ship_orders'] = lock_self_ship_orders;
            }
            if (skip_refund_and_hold !== undefined) {
                localVarQueryParameter['skip_refund_and_hold'] = skip_refund_and_hold;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an order on the UltraCart account.
         * @summary Delete an order
         * @param {string} order_id The order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling deleteOrder.');
            }
            var localVarPath = "/order/orders/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable.
         * @summary Duplicate an order
         * @param {string} order_id The order id to duplicate.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOrder: function (order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling duplicateOrder.');
            }
            var localVarPath = "/order/orders/{order_id}/duplicate"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Format the order for display at text or html
         * @summary Format order
         * @param {string} order_id The order id to format
         * @param {OrderFormat} format_options Format options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        format: function (order_id, format_options, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling format.');
            }
            // verify required parameter 'format_options' is not null or undefined
            if (format_options === null || format_options === undefined) {
                throw new RequiredError('format_options', 'Required parameter format_options was null or undefined when calling format.');
            }
            var localVarPath = "/order/orders/{order_id}/format"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderFormat" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(format_options || {}) : (format_options || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The invoice PDF that is returned is base 64 encoded
         * @summary Generate an invoice for this order.
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateInvoice: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling generateInvoice.');
            }
            var localVarPath = "/order/orders/{order_id}/invoice"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
         * @summary Generate an order token for a given order id
         * @param {string} order_id The order id to generate a token for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderToken: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling generateOrderToken.');
            }
            var localVarPath = "/order/orders/token/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order across all distribution centers.
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlipAllDC: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling generatePackingSlipAllDC.');
            }
            var localVarPath = "/order/orders/{order_id}/packing_slip"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order for the given distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlipSpecificDC: function (distribution_center_code, order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distribution_center_code' is not null or undefined
            if (distribution_center_code === null || distribution_center_code === undefined) {
                throw new RequiredError('distribution_center_code', 'Required parameter distribution_center_code was null or undefined when calling generatePackingSlipSpecificDC.');
            }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling generatePackingSlipSpecificDC.');
            }
            var localVarPath = "/order/orders/{order_id}/packing_slip/{distribution_center_code}"
                .replace("{".concat("distribution_center_code", "}"), encodeURIComponent(String(distribution_center_code)))
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryConfig: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Statistics
         * @param {string} [from]
         * @param {string} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryStats: function (from, to, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/order/accountsReceivableRetryConfig/stats";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order using the specified order id.
         * @summary Retrieve an order
         * @param {string} order_id The order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling getOrder.');
            }
            var localVarPath = "/order/orders/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order using the specified order token.
         * @summary Retrieve an order using a token
         * @param {OrderByTokenQuery} order_by_token_query Order by token query
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByToken: function (order_by_token_query, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_by_token_query' is not null or undefined
            if (order_by_token_query === null || order_by_token_query === undefined) {
                throw new RequiredError('order_by_token_query', 'Required parameter order_by_token_query was null or undefined when calling getOrderByToken.');
            }
            var localVarPath = "/order/orders/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderByTokenQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order_by_token_query || {}) : (order_by_token_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve EDI documents associated with this order.
         * @summary Retrieve EDI documents associated with this order.
         * @param {string} order_id The order id to retrieve EDI documents for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderEdiDocuments: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling getOrderEdiDocuments.');
            }
            var localVarPath = "/order/orders/{order_id}/edi"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {string} [order_id] Order Id
         * @param {string} [payment_method] Payment Method
         * @param {string} [company] Company
         * @param {string} [first_name] First Name
         * @param {string} [last_name] Last Name
         * @param {string} [city] City
         * @param {string} [state_region] State/Region
         * @param {string} [postal_code] Postal Code
         * @param {string} [country_code] Country Code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [cc_email] CC Email
         * @param {number} [total] Total
         * @param {string} [screen_branding_theme_code] Screen Branding Theme Code
         * @param {string} [storefront_host_name] StoreFront Host Name
         * @param {string} [creation_date_begin] Creation Date Begin
         * @param {string} [creation_date_end] Creation Date End
         * @param {string} [payment_date_begin] Payment Date Begin
         * @param {string} [payment_date_end] Payment Date End
         * @param {string} [shipment_date_begin] Shipment Date Begin
         * @param {string} [shipment_date_end] Shipment Date End
         * @param {string} [rma] RMA
         * @param {string} [purchase_order_number] Purchase Order Number
         * @param {string} [item_id] Item Id
         * @param {string} [current_stage] Current Stage
         * @param {string} [channel_partner_code] Channel Partner Code
         * @param {string} [channel_partner_order_id] Channel Partner Order ID
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: function (order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/order/orders";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (order_id !== undefined) {
                localVarQueryParameter['order_id'] = order_id;
            }
            if (payment_method !== undefined) {
                localVarQueryParameter['payment_method'] = payment_method;
            }
            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }
            if (first_name !== undefined) {
                localVarQueryParameter['first_name'] = first_name;
            }
            if (last_name !== undefined) {
                localVarQueryParameter['last_name'] = last_name;
            }
            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }
            if (state_region !== undefined) {
                localVarQueryParameter['state_region'] = state_region;
            }
            if (postal_code !== undefined) {
                localVarQueryParameter['postal_code'] = postal_code;
            }
            if (country_code !== undefined) {
                localVarQueryParameter['country_code'] = country_code;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (cc_email !== undefined) {
                localVarQueryParameter['cc_email'] = cc_email;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (screen_branding_theme_code !== undefined) {
                localVarQueryParameter['screen_branding_theme_code'] = screen_branding_theme_code;
            }
            if (storefront_host_name !== undefined) {
                localVarQueryParameter['storefront_host_name'] = storefront_host_name;
            }
            if (creation_date_begin !== undefined) {
                localVarQueryParameter['creation_date_begin'] = creation_date_begin;
            }
            if (creation_date_end !== undefined) {
                localVarQueryParameter['creation_date_end'] = creation_date_end;
            }
            if (payment_date_begin !== undefined) {
                localVarQueryParameter['payment_date_begin'] = payment_date_begin;
            }
            if (payment_date_end !== undefined) {
                localVarQueryParameter['payment_date_end'] = payment_date_end;
            }
            if (shipment_date_begin !== undefined) {
                localVarQueryParameter['shipment_date_begin'] = shipment_date_begin;
            }
            if (shipment_date_end !== undefined) {
                localVarQueryParameter['shipment_date_end'] = shipment_date_end;
            }
            if (rma !== undefined) {
                localVarQueryParameter['rma'] = rma;
            }
            if (purchase_order_number !== undefined) {
                localVarQueryParameter['purchase_order_number'] = purchase_order_number;
            }
            if (item_id !== undefined) {
                localVarQueryParameter['item_id'] = item_id;
            }
            if (current_stage !== undefined) {
                localVarQueryParameter['current_stage'] = current_stage;
            }
            if (channel_partner_code !== undefined) {
                localVarQueryParameter['channel_partner_code'] = channel_partner_code;
            }
            if (channel_partner_order_id !== undefined) {
                localVarQueryParameter['channel_partner_order_id'] = channel_partner_order_id;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve order batch
         * @param {OrderQueryBatch} order_batch Order batch
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBatch: function (order_batch, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_batch' is not null or undefined
            if (order_batch === null || order_batch === undefined) {
                throw new RequiredError('order_batch', 'Required parameter order_batch was null or undefined when calling getOrdersBatch.');
            }
            var localVarPath = "/order/orders/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderQueryBatch" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order_batch || {}) : (order_batch || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders by query
         * @param {OrderQuery} order_query Order query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByQuery: function (order_query, _limit, _offset, _sort, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_query' is not null or undefined
            if (order_query === null || order_query === undefined) {
                throw new RequiredError('order_query', 'Required parameter order_query was null or undefined when calling getOrdersByQuery.');
            }
            var localVarPath = "/order/orders/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order_query || {}) : (order_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
         * @summary Insert an order
         * @param {Order} order Order to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOrder: function (order, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling insertOrder.');
            }
            var localVarPath = "/order/orders";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Determine if an order can be refunded based upon payment method and age
         * @summary Determine if an order can be refunded
         * @param {string} order_id The order id to check for refundable order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundableOrder: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling isRefundableOrder.');
            }
            var localVarPath = "/order/orders/{order_id}/refundable"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process payment on order
         * @summary Process payment
         * @param {string} order_id The order id to process payment on
         * @param {OrderProcessPaymentRequest} process_payment_request Process payment parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPayment: function (order_id, process_payment_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling processPayment.');
            }
            // verify required parameter 'process_payment_request' is not null or undefined
            if (process_payment_request === null || process_payment_request === undefined) {
                throw new RequiredError('process_payment_request', 'Required parameter process_payment_request was null or undefined when calling processPayment.');
            }
            var localVarPath = "/order/orders/{order_id}/process_payment"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderProcessPaymentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(process_payment_request || {}) : (process_payment_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
         * @summary Refund an order
         * @param {Order} order Order to refund
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrder: function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling refundOrder.');
            }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling refundOrder.');
            }
            var localVarPath = "/order/orders/{order_id}/refund"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (reject_after_refund !== undefined) {
                localVarQueryParameter['reject_after_refund'] = reject_after_refund;
            }
            if (skip_customer_notification !== undefined) {
                localVarQueryParameter['skip_customer_notification'] = skip_customer_notification;
            }
            if (auto_order_cancel !== undefined) {
                localVarQueryParameter['auto_order_cancel'] = auto_order_cancel;
            }
            if (manual_refund !== undefined) {
                localVarQueryParameter['manual_refund'] = manual_refund;
            }
            if (reverse_affiliate_transactions !== undefined) {
                localVarQueryParameter['reverse_affiliate_transactions'] = reverse_affiliate_transactions;
            }
            if (issue_store_credit !== undefined) {
                localVarQueryParameter['issue_store_credit'] = issue_store_credit;
            }
            if (auto_order_cancel_reason !== undefined) {
                localVarQueryParameter['auto_order_cancel_reason'] = auto_order_cancel_reason;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform a refund operation on an order and then update the order if successful.
         * @summary Refund an order completely
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [refund_reason] Reason for refund
         * @param {string} [reject_reason] Reason for reject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrderCompletely: function (order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling refundOrderCompletely.');
            }
            var localVarPath = "/order/orders/{order_id}/refund_completely"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (reject_after_refund !== undefined) {
                localVarQueryParameter['reject_after_refund'] = reject_after_refund;
            }
            if (skip_customer_notification !== undefined) {
                localVarQueryParameter['skip_customer_notification'] = skip_customer_notification;
            }
            if (auto_order_cancel !== undefined) {
                localVarQueryParameter['auto_order_cancel'] = auto_order_cancel;
            }
            if (manual_refund !== undefined) {
                localVarQueryParameter['manual_refund'] = manual_refund;
            }
            if (reverse_affiliate_transactions !== undefined) {
                localVarQueryParameter['reverse_affiliate_transactions'] = reverse_affiliate_transactions;
            }
            if (issue_store_credit !== undefined) {
                localVarQueryParameter['issue_store_credit'] = issue_store_credit;
            }
            if (auto_order_cancel_reason !== undefined) {
                localVarQueryParameter['auto_order_cancel_reason'] = auto_order_cancel_reason;
            }
            if (refund_reason !== undefined) {
                localVarQueryParameter['refund_reason'] = refund_reason;
            }
            if (reject_reason !== undefined) {
                localVarQueryParameter['reject_reason'] = reject_reason;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a replacement order based upon a previous order
         * @summary Replacement order
         * @param {string} order_id The order id to generate a replacement for.
         * @param {OrderReplacement} replacement Replacement order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacement: function (order_id, replacement, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling replacement.');
            }
            // verify required parameter 'replacement' is not null or undefined
            if (replacement === null || replacement === undefined) {
                throw new RequiredError('replacement', 'Required parameter replacement was null or undefined when calling replacement.');
            }
            var localVarPath = "/order/orders/{order_id}/replacement"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderReplacement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(replacement || {}) : (replacement || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend the receipt for an order on the UltraCart account.
         * @summary Resend receipt
         * @param {string} order_id The order id to resend the receipt for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReceipt: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling resendReceipt.');
            }
            var localVarPath = "/order/orders/{order_id}/resend_receipt"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend shipment confirmation for an order on the UltraCart account.
         * @summary Resend shipment confirmation
         * @param {string} order_id The order id to resend the shipment notification for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendShipmentConfirmation: function (order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling resendShipmentConfirmation.');
            }
            var localVarPath = "/order/orders/{order_id}/resend_shipment_confirmation"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Update A/R Retry Configuration
         * @param {AccountsReceivableRetryConfig} retry_config AccountsReceivableRetryConfig object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountsReceivableRetryConfig: function (retry_config, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'retry_config' is not null or undefined
            if (retry_config === null || retry_config === undefined) {
                throw new RequiredError('retry_config', 'Required parameter retry_config was null or undefined when calling updateAccountsReceivableRetryConfig.');
            }
            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AccountsReceivableRetryConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(retry_config || {}) : (retry_config || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
         * @summary Update an order
         * @param {Order} order Order to update
         * @param {string} order_id The order id to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (order, order_id, _expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling updateOrder.');
            }
            var localVarPath = "/order/orders/{order_id}"
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions.
         * @summary Validate
         * @param {OrderValidationRequest} validation_request Validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOrder: function (validation_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validation_request' is not null or undefined
            if (validation_request === null || validation_request === undefined) {
                throw new RequiredError('validation_request', 'Required parameter validation_request was null or undefined when calling validateOrder.');
            }
            var localVarPath = "/order/validate";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read", "order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderValidationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(validation_request || {}) : (validation_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OrderApiFetchParamCreator = OrderApiFetchParamCreator;
/**
 * OrderApi - functional programming interface
 * @export
 */
var OrderApiFp = function (configuration) {
    return {
        /**
         * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details.
         * @summary Adjusts an order total
         * @param {string} order_id The order id to cancel.
         * @param {string} desired_total The desired total with no formatting. example 123.45
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustOrderTotal: function (order_id, desired_total, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).adjustOrderTotal(order_id, desired_total, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
         * @summary Cancel an order
         * @param {string} order_id The order id to cancel.
         * @param {boolean} [lock_self_ship_orders] Flag to prevent a order shipping during a refund process
         * @param {boolean} [skip_refund_and_hold] Skip refund and move order to Held Orders department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (order_id, lock_self_ship_orders, skip_refund_and_hold, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).cancelOrder(order_id, lock_self_ship_orders, skip_refund_and_hold, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an order on the UltraCart account.
         * @summary Delete an order
         * @param {string} order_id The order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).deleteOrder(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable.
         * @summary Duplicate an order
         * @param {string} order_id The order id to duplicate.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOrder: function (order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).duplicateOrder(order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Format the order for display at text or html
         * @summary Format order
         * @param {string} order_id The order id to format
         * @param {OrderFormat} format_options Format options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        format: function (order_id, format_options, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).format(order_id, format_options, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The invoice PDF that is returned is base 64 encoded
         * @summary Generate an invoice for this order.
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateInvoice: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).generateInvoice(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
         * @summary Generate an order token for a given order id
         * @param {string} order_id The order id to generate a token for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderToken: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).generateOrderToken(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order across all distribution centers.
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlipAllDC: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).generatePackingSlipAllDC(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order for the given distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlipSpecificDC: function (distribution_center_code, order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).generatePackingSlipSpecificDC(distribution_center_code, order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryConfig: function (options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getAccountsReceivableRetryConfig(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Statistics
         * @param {string} [from]
         * @param {string} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryStats: function (from, to, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getAccountsReceivableRetryStats(from, to, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order using the specified order id.
         * @summary Retrieve an order
         * @param {string} order_id The order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getOrder(order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order using the specified order token.
         * @summary Retrieve an order using a token
         * @param {OrderByTokenQuery} order_by_token_query Order by token query
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByToken: function (order_by_token_query, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getOrderByToken(order_by_token_query, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve EDI documents associated with this order.
         * @summary Retrieve EDI documents associated with this order.
         * @param {string} order_id The order id to retrieve EDI documents for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderEdiDocuments: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getOrderEdiDocuments(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {string} [order_id] Order Id
         * @param {string} [payment_method] Payment Method
         * @param {string} [company] Company
         * @param {string} [first_name] First Name
         * @param {string} [last_name] Last Name
         * @param {string} [city] City
         * @param {string} [state_region] State/Region
         * @param {string} [postal_code] Postal Code
         * @param {string} [country_code] Country Code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [cc_email] CC Email
         * @param {number} [total] Total
         * @param {string} [screen_branding_theme_code] Screen Branding Theme Code
         * @param {string} [storefront_host_name] StoreFront Host Name
         * @param {string} [creation_date_begin] Creation Date Begin
         * @param {string} [creation_date_end] Creation Date End
         * @param {string} [payment_date_begin] Payment Date Begin
         * @param {string} [payment_date_end] Payment Date End
         * @param {string} [shipment_date_begin] Shipment Date Begin
         * @param {string} [shipment_date_end] Shipment Date End
         * @param {string} [rma] RMA
         * @param {string} [purchase_order_number] Purchase Order Number
         * @param {string} [item_id] Item Id
         * @param {string} [current_stage] Current Stage
         * @param {string} [channel_partner_code] Channel Partner Code
         * @param {string} [channel_partner_order_id] Channel Partner Order ID
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: function (order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getOrders(order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve order batch
         * @param {OrderQueryBatch} order_batch Order batch
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBatch: function (order_batch, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getOrdersBatch(order_batch, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders by query
         * @param {OrderQuery} order_query Order query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByQuery: function (order_query, _limit, _offset, _sort, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).getOrdersByQuery(order_query, _limit, _offset, _sort, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
         * @summary Insert an order
         * @param {Order} order Order to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOrder: function (order, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).insertOrder(order, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Determine if an order can be refunded based upon payment method and age
         * @summary Determine if an order can be refunded
         * @param {string} order_id The order id to check for refundable order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundableOrder: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).isRefundableOrder(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Process payment on order
         * @summary Process payment
         * @param {string} order_id The order id to process payment on
         * @param {OrderProcessPaymentRequest} process_payment_request Process payment parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPayment: function (order_id, process_payment_request, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).processPayment(order_id, process_payment_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
         * @summary Refund an order
         * @param {Order} order Order to refund
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrder: function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).refundOrder(order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Perform a refund operation on an order and then update the order if successful.
         * @summary Refund an order completely
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [refund_reason] Reason for refund
         * @param {string} [reject_reason] Reason for reject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrderCompletely: function (order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).refundOrderCompletely(order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a replacement order based upon a previous order
         * @summary Replacement order
         * @param {string} order_id The order id to generate a replacement for.
         * @param {OrderReplacement} replacement Replacement order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacement: function (order_id, replacement, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).replacement(order_id, replacement, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resend the receipt for an order on the UltraCart account.
         * @summary Resend receipt
         * @param {string} order_id The order id to resend the receipt for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReceipt: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).resendReceipt(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resend shipment confirmation for an order on the UltraCart account.
         * @summary Resend shipment confirmation
         * @param {string} order_id The order id to resend the shipment notification for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendShipmentConfirmation: function (order_id, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).resendShipmentConfirmation(order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Update A/R Retry Configuration
         * @param {AccountsReceivableRetryConfig} retry_config AccountsReceivableRetryConfig object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountsReceivableRetryConfig: function (retry_config, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).updateAccountsReceivableRetryConfig(retry_config, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
         * @summary Update an order
         * @param {Order} order Order to update
         * @param {string} order_id The order id to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (order, order_id, _expand, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).updateOrder(order, order_id, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions.
         * @summary Validate
         * @param {OrderValidationRequest} validation_request Validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOrder: function (validation_request, options) {
            var localVarFetchArgs = (0, exports.OrderApiFetchParamCreator)(configuration).validateOrder(validation_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.OrderApiFp = OrderApiFp;
/**
 * OrderApi - factory interface
 * @export
 */
var OrderApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details.
         * @summary Adjusts an order total
         * @param {string} order_id The order id to cancel.
         * @param {string} desired_total The desired total with no formatting. example 123.45
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustOrderTotal: function (order_id, desired_total, options) {
            return (0, exports.OrderApiFp)(configuration).adjustOrderTotal(order_id, desired_total, options)(fetch, basePath);
        },
        /**
         * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
         * @summary Cancel an order
         * @param {string} order_id The order id to cancel.
         * @param {boolean} [lock_self_ship_orders] Flag to prevent a order shipping during a refund process
         * @param {boolean} [skip_refund_and_hold] Skip refund and move order to Held Orders department
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (order_id, lock_self_ship_orders, skip_refund_and_hold, options) {
            return (0, exports.OrderApiFp)(configuration).cancelOrder(order_id, lock_self_ship_orders, skip_refund_and_hold, options)(fetch, basePath);
        },
        /**
         * Delete an order on the UltraCart account.
         * @summary Delete an order
         * @param {string} order_id The order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).deleteOrder(order_id, options)(fetch, basePath);
        },
        /**
         * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable.
         * @summary Duplicate an order
         * @param {string} order_id The order id to duplicate.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOrder: function (order_id, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).duplicateOrder(order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Format the order for display at text or html
         * @summary Format order
         * @param {string} order_id The order id to format
         * @param {OrderFormat} format_options Format options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        format: function (order_id, format_options, options) {
            return (0, exports.OrderApiFp)(configuration).format(order_id, format_options, options)(fetch, basePath);
        },
        /**
         * The invoice PDF that is returned is base 64 encoded
         * @summary Generate an invoice for this order.
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateInvoice: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).generateInvoice(order_id, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
         * @summary Generate an order token for a given order id
         * @param {string} order_id The order id to generate a token for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderToken: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).generateOrderToken(order_id, options)(fetch, basePath);
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order across all distribution centers.
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlipAllDC: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).generatePackingSlipAllDC(order_id, options)(fetch, basePath);
        },
        /**
         * The packing slip PDF that is returned is base 64 encoded
         * @summary Generate a packing slip for this order for the given distribution center.
         * @param {string} distribution_center_code Distribution center code
         * @param {string} order_id Order ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingSlipSpecificDC: function (distribution_center_code, order_id, options) {
            return (0, exports.OrderApiFp)(configuration).generatePackingSlipSpecificDC(distribution_center_code, order_id, options)(fetch, basePath);
        },
        /**
         * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryConfig: function (options) {
            return (0, exports.OrderApiFp)(configuration).getAccountsReceivableRetryConfig(options)(fetch, basePath);
        },
        /**
         * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Statistics
         * @param {string} [from]
         * @param {string} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryStats: function (from, to, options) {
            return (0, exports.OrderApiFp)(configuration).getAccountsReceivableRetryStats(from, to, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order using the specified order id.
         * @summary Retrieve an order
         * @param {string} order_id The order id to retrieve.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (order_id, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).getOrder(order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order using the specified order token.
         * @summary Retrieve an order using a token
         * @param {OrderByTokenQuery} order_by_token_query Order by token query
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByToken: function (order_by_token_query, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).getOrderByToken(order_by_token_query, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieve EDI documents associated with this order.
         * @summary Retrieve EDI documents associated with this order.
         * @param {string} order_id The order id to retrieve EDI documents for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderEdiDocuments: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).getOrderEdiDocuments(order_id, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {string} [order_id] Order Id
         * @param {string} [payment_method] Payment Method
         * @param {string} [company] Company
         * @param {string} [first_name] First Name
         * @param {string} [last_name] Last Name
         * @param {string} [city] City
         * @param {string} [state_region] State/Region
         * @param {string} [postal_code] Postal Code
         * @param {string} [country_code] Country Code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [cc_email] CC Email
         * @param {number} [total] Total
         * @param {string} [screen_branding_theme_code] Screen Branding Theme Code
         * @param {string} [storefront_host_name] StoreFront Host Name
         * @param {string} [creation_date_begin] Creation Date Begin
         * @param {string} [creation_date_end] Creation Date End
         * @param {string} [payment_date_begin] Payment Date Begin
         * @param {string} [payment_date_end] Payment Date End
         * @param {string} [shipment_date_begin] Shipment Date Begin
         * @param {string} [shipment_date_end] Shipment Date End
         * @param {string} [rma] RMA
         * @param {string} [purchase_order_number] Purchase Order Number
         * @param {string} [item_id] Item Id
         * @param {string} [current_stage] Current Stage
         * @param {string} [channel_partner_code] Channel Partner Code
         * @param {string} [channel_partner_order_id] Channel Partner Order ID
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: function (order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).getOrders(order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve order batch
         * @param {OrderQueryBatch} order_batch Order batch
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBatch: function (order_batch, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).getOrdersBatch(order_batch, _expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders by query
         * @param {OrderQuery} order_query Order query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [_expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByQuery: function (order_query, _limit, _offset, _sort, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).getOrdersByQuery(order_query, _limit, _offset, _sort, _expand, options)(fetch, basePath);
        },
        /**
         * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
         * @summary Insert an order
         * @param {Order} order Order to insert
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOrder: function (order, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).insertOrder(order, _expand, options)(fetch, basePath);
        },
        /**
         * Determine if an order can be refunded based upon payment method and age
         * @summary Determine if an order can be refunded
         * @param {string} order_id The order id to check for refundable order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isRefundableOrder: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).isRefundableOrder(order_id, options)(fetch, basePath);
        },
        /**
         * Process payment on order
         * @summary Process payment
         * @param {string} order_id The order id to process payment on
         * @param {OrderProcessPaymentRequest} process_payment_request Process payment parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPayment: function (order_id, process_payment_request, options) {
            return (0, exports.OrderApiFp)(configuration).processPayment(order_id, process_payment_request, options)(fetch, basePath);
        },
        /**
         * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
         * @summary Refund an order
         * @param {Order} order Order to refund
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrder: function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).refundOrder(order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options)(fetch, basePath);
        },
        /**
         * Perform a refund operation on an order and then update the order if successful.
         * @summary Refund an order completely
         * @param {string} order_id The order id to refund.
         * @param {boolean} [reject_after_refund] Reject order after refund
         * @param {boolean} [skip_customer_notification] Skip customer email notification
         * @param {boolean} [auto_order_cancel] Cancel associated auto orders
         * @param {boolean} [manual_refund] Consider a manual refund done externally
         * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
         * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
         * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
         * @param {string} [refund_reason] Reason for refund
         * @param {string} [reject_reason] Reason for reject
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrderCompletely: function (order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options) {
            return (0, exports.OrderApiFp)(configuration).refundOrderCompletely(order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options)(fetch, basePath);
        },
        /**
         * Create a replacement order based upon a previous order
         * @summary Replacement order
         * @param {string} order_id The order id to generate a replacement for.
         * @param {OrderReplacement} replacement Replacement order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacement: function (order_id, replacement, options) {
            return (0, exports.OrderApiFp)(configuration).replacement(order_id, replacement, options)(fetch, basePath);
        },
        /**
         * Resend the receipt for an order on the UltraCart account.
         * @summary Resend receipt
         * @param {string} order_id The order id to resend the receipt for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReceipt: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).resendReceipt(order_id, options)(fetch, basePath);
        },
        /**
         * Resend shipment confirmation for an order on the UltraCart account.
         * @summary Resend shipment confirmation
         * @param {string} order_id The order id to resend the shipment notification for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendShipmentConfirmation: function (order_id, options) {
            return (0, exports.OrderApiFp)(configuration).resendShipmentConfirmation(order_id, options)(fetch, basePath);
        },
        /**
         * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Update A/R Retry Configuration
         * @param {AccountsReceivableRetryConfig} retry_config AccountsReceivableRetryConfig object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountsReceivableRetryConfig: function (retry_config, options) {
            return (0, exports.OrderApiFp)(configuration).updateAccountsReceivableRetryConfig(retry_config, options)(fetch, basePath);
        },
        /**
         * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
         * @summary Update an order
         * @param {Order} order Order to update
         * @param {string} order_id The order id to update.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (order, order_id, _expand, options) {
            return (0, exports.OrderApiFp)(configuration).updateOrder(order, order_id, _expand, options)(fetch, basePath);
        },
        /**
         * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions.
         * @summary Validate
         * @param {OrderValidationRequest} validation_request Validation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOrder: function (validation_request, options) {
            return (0, exports.OrderApiFp)(configuration).validateOrder(validation_request, options)(fetch, basePath);
        },
    };
};
exports.OrderApiFactory = OrderApiFactory;
/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
var OrderApi = /** @class */ (function (_super) {
    __extends(OrderApi, _super);
    function OrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details.
     * @summary Adjusts an order total
     * @param {string} order_id The order id to cancel.
     * @param {string} desired_total The desired total with no formatting. example 123.45
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.adjustOrderTotal = function (order_id, desired_total, options) {
        return (0, exports.OrderApiFp)(this.configuration).adjustOrderTotal(order_id, desired_total, options)(this.fetch, this.basePath);
    };
    /**
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
     * @summary Cancel an order
     * @param {string} order_id The order id to cancel.
     * @param {boolean} [lock_self_ship_orders] Flag to prevent a order shipping during a refund process
     * @param {boolean} [skip_refund_and_hold] Skip refund and move order to Held Orders department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.cancelOrder = function (order_id, lock_self_ship_orders, skip_refund_and_hold, options) {
        return (0, exports.OrderApiFp)(this.configuration).cancelOrder(order_id, lock_self_ship_orders, skip_refund_and_hold, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an order on the UltraCart account.
     * @summary Delete an order
     * @param {string} order_id The order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.deleteOrder = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).deleteOrder(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable.
     * @summary Duplicate an order
     * @param {string} order_id The order id to duplicate.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.duplicateOrder = function (order_id, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).duplicateOrder(order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Format the order for display at text or html
     * @summary Format order
     * @param {string} order_id The order id to format
     * @param {OrderFormat} format_options Format options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.format = function (order_id, format_options, options) {
        return (0, exports.OrderApiFp)(this.configuration).format(order_id, format_options, options)(this.fetch, this.basePath);
    };
    /**
     * The invoice PDF that is returned is base 64 encoded
     * @summary Generate an invoice for this order.
     * @param {string} order_id Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.generateInvoice = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).generateInvoice(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
     * @summary Generate an order token for a given order id
     * @param {string} order_id The order id to generate a token for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.generateOrderToken = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).generateOrderToken(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * The packing slip PDF that is returned is base 64 encoded
     * @summary Generate a packing slip for this order across all distribution centers.
     * @param {string} order_id Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.generatePackingSlipAllDC = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).generatePackingSlipAllDC(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * The packing slip PDF that is returned is base 64 encoded
     * @summary Generate a packing slip for this order for the given distribution center.
     * @param {string} distribution_center_code Distribution center code
     * @param {string} order_id Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.generatePackingSlipSpecificDC = function (distribution_center_code, order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).generatePackingSlipSpecificDC(distribution_center_code, order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
     * @summary Retrieve A/R Retry Configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getAccountsReceivableRetryConfig = function (options) {
        return (0, exports.OrderApiFp)(this.configuration).getAccountsReceivableRetryConfig(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
     * @summary Retrieve A/R Retry Statistics
     * @param {string} [from]
     * @param {string} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getAccountsReceivableRetryStats = function (from, to, options) {
        return (0, exports.OrderApiFp)(this.configuration).getAccountsReceivableRetryStats(from, to, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order using the specified order id.
     * @summary Retrieve an order
     * @param {string} order_id The order id to retrieve.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrder = function (order_id, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).getOrder(order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order using the specified order token.
     * @summary Retrieve an order using a token
     * @param {OrderByTokenQuery} order_by_token_query Order by token query
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrderByToken = function (order_by_token_query, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).getOrderByToken(order_by_token_query, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve EDI documents associated with this order.
     * @summary Retrieve EDI documents associated with this order.
     * @param {string} order_id The order id to retrieve EDI documents for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrderEdiDocuments = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).getOrderEdiDocuments(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve orders
     * @param {string} [order_id] Order Id
     * @param {string} [payment_method] Payment Method
     * @param {string} [company] Company
     * @param {string} [first_name] First Name
     * @param {string} [last_name] Last Name
     * @param {string} [city] City
     * @param {string} [state_region] State/Region
     * @param {string} [postal_code] Postal Code
     * @param {string} [country_code] Country Code (ISO-3166 two letter)
     * @param {string} [phone] Phone
     * @param {string} [email] Email
     * @param {string} [cc_email] CC Email
     * @param {number} [total] Total
     * @param {string} [screen_branding_theme_code] Screen Branding Theme Code
     * @param {string} [storefront_host_name] StoreFront Host Name
     * @param {string} [creation_date_begin] Creation Date Begin
     * @param {string} [creation_date_end] Creation Date End
     * @param {string} [payment_date_begin] Payment Date Begin
     * @param {string} [payment_date_end] Payment Date End
     * @param {string} [shipment_date_begin] Shipment Date Begin
     * @param {string} [shipment_date_end] Shipment Date End
     * @param {string} [rma] RMA
     * @param {string} [purchase_order_number] Purchase Order Number
     * @param {string} [item_id] Item Id
     * @param {string} [current_stage] Current Stage
     * @param {string} [channel_partner_code] Channel Partner Code
     * @param {string} [channel_partner_order_id] Channel Partner Order ID
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrders = function (order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).getOrders(order_id, payment_method, company, first_name, last_name, city, state_region, postal_code, country_code, phone, email, cc_email, total, screen_branding_theme_code, storefront_host_name, creation_date_begin, creation_date_end, payment_date_begin, payment_date_end, shipment_date_begin, shipment_date_end, rma, purchase_order_number, item_id, current_stage, channel_partner_code, channel_partner_order_id, _limit, _offset, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
     * @summary Retrieve order batch
     * @param {OrderQueryBatch} order_batch Order batch
     * @param {string} [_expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrdersBatch = function (order_batch, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).getOrdersBatch(order_batch, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve orders by query
     * @param {OrderQuery} order_query Order query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [_expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrdersByQuery = function (order_query, _limit, _offset, _sort, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).getOrdersByQuery(order_query, _limit, _offset, _sort, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
     * @summary Insert an order
     * @param {Order} order Order to insert
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.insertOrder = function (order, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).insertOrder(order, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Determine if an order can be refunded based upon payment method and age
     * @summary Determine if an order can be refunded
     * @param {string} order_id The order id to check for refundable order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.isRefundableOrder = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).isRefundableOrder(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Process payment on order
     * @summary Process payment
     * @param {string} order_id The order id to process payment on
     * @param {OrderProcessPaymentRequest} process_payment_request Process payment parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.processPayment = function (order_id, process_payment_request, options) {
        return (0, exports.OrderApiFp)(this.configuration).processPayment(order_id, process_payment_request, options)(this.fetch, this.basePath);
    };
    /**
     * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds.
     * @summary Refund an order
     * @param {Order} order Order to refund
     * @param {string} order_id The order id to refund.
     * @param {boolean} [reject_after_refund] Reject order after refund
     * @param {boolean} [skip_customer_notification] Skip customer email notification
     * @param {boolean} [auto_order_cancel] Cancel associated auto orders
     * @param {boolean} [manual_refund] Consider a manual refund done externally
     * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
     * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
     * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.refundOrder = function (order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).refundOrder(order, order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Perform a refund operation on an order and then update the order if successful.
     * @summary Refund an order completely
     * @param {string} order_id The order id to refund.
     * @param {boolean} [reject_after_refund] Reject order after refund
     * @param {boolean} [skip_customer_notification] Skip customer email notification
     * @param {boolean} [auto_order_cancel] Cancel associated auto orders
     * @param {boolean} [manual_refund] Consider a manual refund done externally
     * @param {boolean} [reverse_affiliate_transactions] Reverse affiliate transactions
     * @param {boolean} [issue_store_credit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
     * @param {string} [auto_order_cancel_reason] Reason for auto orders cancellation
     * @param {string} [refund_reason] Reason for refund
     * @param {string} [reject_reason] Reason for reject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.refundOrderCompletely = function (order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options) {
        return (0, exports.OrderApiFp)(this.configuration).refundOrderCompletely(order_id, reject_after_refund, skip_customer_notification, auto_order_cancel, manual_refund, reverse_affiliate_transactions, issue_store_credit, auto_order_cancel_reason, refund_reason, reject_reason, options)(this.fetch, this.basePath);
    };
    /**
     * Create a replacement order based upon a previous order
     * @summary Replacement order
     * @param {string} order_id The order id to generate a replacement for.
     * @param {OrderReplacement} replacement Replacement order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.replacement = function (order_id, replacement, options) {
        return (0, exports.OrderApiFp)(this.configuration).replacement(order_id, replacement, options)(this.fetch, this.basePath);
    };
    /**
     * Resend the receipt for an order on the UltraCart account.
     * @summary Resend receipt
     * @param {string} order_id The order id to resend the receipt for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.resendReceipt = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).resendReceipt(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Resend shipment confirmation for an order on the UltraCart account.
     * @summary Resend shipment confirmation
     * @param {string} order_id The order id to resend the shipment notification for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.resendShipmentConfirmation = function (order_id, options) {
        return (0, exports.OrderApiFp)(this.configuration).resendShipmentConfirmation(order_id, options)(this.fetch, this.basePath);
    };
    /**
     * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
     * @summary Update A/R Retry Configuration
     * @param {AccountsReceivableRetryConfig} retry_config AccountsReceivableRetryConfig object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.updateAccountsReceivableRetryConfig = function (retry_config, options) {
        return (0, exports.OrderApiFp)(this.configuration).updateAccountsReceivableRetryConfig(retry_config, options)(this.fetch, this.basePath);
    };
    /**
     * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
     * @summary Update an order
     * @param {Order} order Order to update
     * @param {string} order_id The order id to update.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.updateOrder = function (order, order_id, _expand, options) {
        return (0, exports.OrderApiFp)(this.configuration).updateOrder(order, order_id, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions.
     * @summary Validate
     * @param {OrderValidationRequest} validation_request Validation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.validateOrder = function (validation_request, options) {
        return (0, exports.OrderApiFp)(this.configuration).validateOrder(validation_request, options)(this.fetch, this.basePath);
    };
    return OrderApi;
}(BaseAPI));
exports.OrderApi = OrderApi;
/**
 * SsoApi - fetch parameter creator
 * @export
 */
var SsoApiFetchParamCreator = function (configuration) {
    return {
        /**
         * This is the equivalent of logging out of the single sign on session
         * @summary Get single sign on session user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsoSessionUser: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/sso/session/user";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the process of authorizing a single sign on session.
         * @summary Authorize a single sign on session
         * @param {SingleSignOnAuthorizeRequest} authorization_request Authorization request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoAuthorize: function (authorization_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'authorization_request' is not null or undefined
            if (authorization_request === null || authorization_request === undefined) {
                throw new RequiredError('authorization_request', 'Required parameter authorization_request was null or undefined when calling ssoAuthorize.');
            }
            var localVarPath = "/sso/authorize";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SingleSignOnAuthorizeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(authorization_request || {}) : (authorization_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is the equivalent of logging out of the single sign on session
         * @summary Revoke single sign on session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoSessionRevoke: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/sso/session/revoke";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with
         * @summary Exchange a single sign on code for a simple key token
         * @param {SingleSignOnTokenRequest} token_request Token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoToken: function (token_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'token_request' is not null or undefined
            if (token_request === null || token_request === undefined) {
                throw new RequiredError('token_request', 'Required parameter token_request was null or undefined when calling ssoToken.');
            }
            var localVarPath = "/sso/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SingleSignOnTokenRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(token_request || {}) : (token_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SsoApiFetchParamCreator = SsoApiFetchParamCreator;
/**
 * SsoApi - functional programming interface
 * @export
 */
var SsoApiFp = function (configuration) {
    return {
        /**
         * This is the equivalent of logging out of the single sign on session
         * @summary Get single sign on session user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsoSessionUser: function (options) {
            var localVarFetchArgs = (0, exports.SsoApiFetchParamCreator)(configuration).getSsoSessionUser(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Starts the process of authorizing a single sign on session.
         * @summary Authorize a single sign on session
         * @param {SingleSignOnAuthorizeRequest} authorization_request Authorization request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoAuthorize: function (authorization_request, options) {
            var localVarFetchArgs = (0, exports.SsoApiFetchParamCreator)(configuration).ssoAuthorize(authorization_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is the equivalent of logging out of the single sign on session
         * @summary Revoke single sign on session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoSessionRevoke: function (options) {
            var localVarFetchArgs = (0, exports.SsoApiFetchParamCreator)(configuration).ssoSessionRevoke(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with
         * @summary Exchange a single sign on code for a simple key token
         * @param {SingleSignOnTokenRequest} token_request Token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoToken: function (token_request, options) {
            var localVarFetchArgs = (0, exports.SsoApiFetchParamCreator)(configuration).ssoToken(token_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.SsoApiFp = SsoApiFp;
/**
 * SsoApi - factory interface
 * @export
 */
var SsoApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * This is the equivalent of logging out of the single sign on session
         * @summary Get single sign on session user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSsoSessionUser: function (options) {
            return (0, exports.SsoApiFp)(configuration).getSsoSessionUser(options)(fetch, basePath);
        },
        /**
         * Starts the process of authorizing a single sign on session.
         * @summary Authorize a single sign on session
         * @param {SingleSignOnAuthorizeRequest} authorization_request Authorization request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoAuthorize: function (authorization_request, options) {
            return (0, exports.SsoApiFp)(configuration).ssoAuthorize(authorization_request, options)(fetch, basePath);
        },
        /**
         * This is the equivalent of logging out of the single sign on session
         * @summary Revoke single sign on session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoSessionRevoke: function (options) {
            return (0, exports.SsoApiFp)(configuration).ssoSessionRevoke(options)(fetch, basePath);
        },
        /**
         * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with
         * @summary Exchange a single sign on code for a simple key token
         * @param {SingleSignOnTokenRequest} token_request Token request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ssoToken: function (token_request, options) {
            return (0, exports.SsoApiFp)(configuration).ssoToken(token_request, options)(fetch, basePath);
        },
    };
};
exports.SsoApiFactory = SsoApiFactory;
/**
 * SsoApi - object-oriented interface
 * @export
 * @class SsoApi
 * @extends {BaseAPI}
 */
var SsoApi = /** @class */ (function (_super) {
    __extends(SsoApi, _super);
    function SsoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This is the equivalent of logging out of the single sign on session
     * @summary Get single sign on session user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    SsoApi.prototype.getSsoSessionUser = function (options) {
        return (0, exports.SsoApiFp)(this.configuration).getSsoSessionUser(options)(this.fetch, this.basePath);
    };
    /**
     * Starts the process of authorizing a single sign on session.
     * @summary Authorize a single sign on session
     * @param {SingleSignOnAuthorizeRequest} authorization_request Authorization request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    SsoApi.prototype.ssoAuthorize = function (authorization_request, options) {
        return (0, exports.SsoApiFp)(this.configuration).ssoAuthorize(authorization_request, options)(this.fetch, this.basePath);
    };
    /**
     * This is the equivalent of logging out of the single sign on session
     * @summary Revoke single sign on session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    SsoApi.prototype.ssoSessionRevoke = function (options) {
        return (0, exports.SsoApiFp)(this.configuration).ssoSessionRevoke(options)(this.fetch, this.basePath);
    };
    /**
     * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with
     * @summary Exchange a single sign on code for a simple key token
     * @param {SingleSignOnTokenRequest} token_request Token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApi
     */
    SsoApi.prototype.ssoToken = function (token_request, options) {
        return (0, exports.SsoApiFp)(this.configuration).ssoToken(token_request, options)(this.fetch, this.basePath);
    };
    return SsoApi;
}(BaseAPI));
exports.SsoApi = SsoApi;
/**
 * StorefrontApi - fetch parameter creator
 * @export
 */
var StorefrontApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Add to library
         * @param {AddLibraryItemRequest} add_library_request New library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToLibrary: function (add_library_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'add_library_request' is not null or undefined
            if (add_library_request === null || add_library_request === undefined) {
                throw new RequiredError('add_library_request', 'Required parameter add_library_request was null or undefined when calling addToLibrary.');
            }
            var localVarPath = "/storefront/code_library";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AddLibraryItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(add_library_request || {}) : (add_library_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Apply library item to storefront.
         * @param {ApplyLibraryItemRequest} apply_library_request New library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToStoreFront: function (apply_library_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'apply_library_request' is not null or undefined
            if (apply_library_request === null || apply_library_request === undefined) {
                throw new RequiredError('apply_library_request', 'Required parameter apply_library_request was null or undefined when calling applyToStoreFront.');
            }
            var localVarPath = "/storefront/code_library/apply";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ApplyLibraryItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(apply_library_request || {}) : (apply_library_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Archive email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailList: function (storefront_oid, email_list_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling archiveEmailList.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling archiveEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Archive email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling archiveEmailSegment.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling archiveEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Back populate email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {EmailFlowBackPopulateRequest} back_populate_request The request to back populate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backPopulateEmailFlow: function (storefront_oid, email_flow_uuid, back_populate_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling backPopulateEmailFlow.');
            }
            // verify required parameter 'email_flow_uuid' is not null or undefined
            if (email_flow_uuid === null || email_flow_uuid === undefined) {
                throw new RequiredError('email_flow_uuid', 'Required parameter email_flow_uuid was null or undefined when calling backPopulateEmailFlow.');
            }
            // verify required parameter 'back_populate_request' is not null or undefined
            if (back_populate_request === null || back_populate_request === undefined) {
                throw new RequiredError('back_populate_request', 'Required parameter back_populate_request was null or undefined when calling backPopulateEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_uuid", "}"), encodeURIComponent(String(email_flow_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlowBackPopulateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(back_populate_request || {}) : (back_populate_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check download of email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} email_segment_rebuild_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDownloadEmailSegment: function (storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling checkDownloadEmailSegment.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling checkDownloadEmailSegment.');
            }
            // verify required parameter 'email_segment_rebuild_uuid' is not null or undefined
            if (email_segment_rebuild_uuid === null || email_segment_rebuild_uuid === undefined) {
                throw new RequiredError('email_segment_rebuild_uuid', 'Required parameter email_segment_rebuild_uuid was null or undefined when calling checkDownloadEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)))
                .replace("{".concat("email_segment_rebuild_uuid", "}"), encodeURIComponent(String(email_segment_rebuild_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Clone email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {number} [target_storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailCampaign: function (storefront_oid, email_campaign_uuid, target_storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling cloneEmailCampaign.');
            }
            // verify required parameter 'email_campaign_uuid' is not null or undefined
            if (email_campaign_uuid === null || email_campaign_uuid === undefined) {
                throw new RequiredError('email_campaign_uuid', 'Required parameter email_campaign_uuid was null or undefined when calling cloneEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_uuid", "}"), encodeURIComponent(String(email_campaign_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (target_storefront_oid !== undefined) {
                localVarQueryParameter['target_storefront_oid'] = target_storefront_oid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Clone email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {number} [target_storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailFlow: function (storefront_oid, email_flow_uuid, target_storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling cloneEmailFlow.');
            }
            // verify required parameter 'email_flow_uuid' is not null or undefined
            if (email_flow_uuid === null || email_flow_uuid === undefined) {
                throw new RequiredError('email_flow_uuid', 'Required parameter email_flow_uuid was null or undefined when calling cloneEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_uuid", "}"), encodeURIComponent(String(email_flow_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (target_storefront_oid !== undefined) {
                localVarQueryParameter['target_storefront_oid'] = target_storefront_oid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling createEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}/create"
                .replace("{".concat("domain", "}"), encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create email sending domain for various providers
         * @param {EmailDomain} email_domain EmailDomain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain2: function (email_domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'email_domain' is not null or undefined
            if (email_domain === null || email_domain === undefined) {
                throw new RequiredError('email_domain', 'Required parameter email_domain was null or undefined when calling createEmailSendingDomain2.');
            }
            var localVarPath = "/storefront/email/sending_domains";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailDomain" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_domain || {}) : (email_domain || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create file manager directory
         * @param {number} id
         * @param {string} [name]
         * @param {number} [parent_storefront_fs_directory_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFsDirectory: function (id, name, parent_storefront_fs_directory_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling createFsDirectory.');
            }
            var localVarPath = "/storefront/{id}/fs/dir"
                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (parent_storefront_fs_directory_oid !== undefined) {
                localVarQueryParameter['parent_storefront_fs_directory_oid'] = parent_storefront_fs_directory_oid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create Twilio account
         * @param {Twilio} twilio Twilio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTwilioAccount: function (twilio, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'twilio' is not null or undefined
            if (twilio === null || twilio === undefined) {
                throw new RequiredError('twilio', 'Required parameter twilio was null or undefined when calling createTwilioAccount.');
            }
            var localVarPath = "/storefront/twilio/accounts";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Twilio" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(twilio || {}) : (twilio || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email campaignFolder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailCampaignFolder.');
            }
            // verify required parameter 'email_campaign_folder_uuid' is not null or undefined
            if (email_campaign_folder_uuid === null || email_campaign_folder_uuid === undefined) {
                throw new RequiredError('email_campaign_folder_uuid', 'Required parameter email_campaign_folder_uuid was null or undefined when calling deleteEmailCampaignFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_folder_uuid", "}"), encodeURIComponent(String(email_campaign_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete communication sequence stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCommseqStat: function (storefront_oid, commseq_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailCommseqStat.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling deleteEmailCommseqStat.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailEmail: function (storefront_oid, commseq_email_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailEmail.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling deleteEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email flowFolder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailFlowFolder.');
            }
            // verify required parameter 'email_flow_folder_uuid' is not null or undefined
            if (email_flow_folder_uuid === null || email_flow_folder_uuid === undefined) {
                throw new RequiredError('email_flow_folder_uuid', 'Required parameter email_flow_folder_uuid was null or undefined when calling deleteEmailFlowFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_folder_uuid", "}"), encodeURIComponent(String(email_flow_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email list customer
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListCustomer: function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailListCustomer.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling deleteEmailListCustomer.');
            }
            // verify required parameter 'email_customer_uuid' is not null or undefined
            if (email_customer_uuid === null || email_customer_uuid === undefined) {
                throw new RequiredError('email_customer_uuid', 'Required parameter email_customer_uuid was null or undefined when calling deleteEmailListCustomer.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)))
                .replace("{".concat("email_customer_uuid", "}"), encodeURIComponent(String(email_customer_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email ListSegmentFolder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailListSegmentFolder.');
            }
            // verify required parameter 'email_list_segment_folder_uuid' is not null or undefined
            if (email_list_segment_folder_uuid === null || email_list_segment_folder_uuid === undefined) {
                throw new RequiredError('email_list_segment_folder_uuid', 'Required parameter email_list_segment_folder_uuid was null or undefined when calling deleteEmailListSegmentFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_segment_folder_uuid", "}"), encodeURIComponent(String(email_list_segment_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailPostcard: function (storefront_oid, commseq_postcard_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteEmailPostcard.');
            }
            // verify required parameter 'commseq_postcard_uuid' is not null or undefined
            if (commseq_postcard_uuid === null || commseq_postcard_uuid === undefined) {
                throw new RequiredError('commseq_postcard_uuid', 'Required parameter commseq_postcard_uuid was null or undefined when calling deleteEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_postcard_uuid", "}"), encodeURIComponent(String(commseq_postcard_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary delete email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailSendingDomain: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling deleteEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}"
                .replace("{".concat("domain", "}"), encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete experiment
         * @param {number} storefront_oid
         * @param {number} storefront_experiment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: function (storefront_oid, storefront_experiment_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteExperiment.');
            }
            // verify required parameter 'storefront_experiment_oid' is not null or undefined
            if (storefront_experiment_oid === null || storefront_experiment_oid === undefined) {
                throw new RequiredError('storefront_experiment_oid', 'Required parameter storefront_experiment_oid was null or undefined when calling deleteExperiment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("storefront_experiment_oid", "}"), encodeURIComponent(String(storefront_experiment_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete file manager directory
         * @param {number} id
         * @param {number} [parent_storefront_fs_directory_oid]
         * @param {number} [storefront_fs_file_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFsFile: function (id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteFsFile.');
            }
            var localVarPath = "/storefront/{id}/fs/file"
                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (parent_storefront_fs_directory_oid !== undefined) {
                localVarQueryParameter['parent_storefront_fs_directory_oid'] = parent_storefront_fs_directory_oid;
            }
            if (storefront_fs_file_oid !== undefined) {
                localVarQueryParameter['storefront_fs_file_oid'] = storefront_fs_file_oid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete screen recording heatmap
         * @summary Delete screen recording heatmap
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapReset} query Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHeatmap: function (storefront_oid, query, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteHeatmap.');
            }
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query', 'Required parameter query was null or undefined when calling deleteHeatmap.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingHeatmapReset" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(query || {}) : (query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete library item
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItem: function (library_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling deleteLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete all published versions for a library item, including anything in review.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItemPublishedVersions: function (library_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling deleteLibraryItemPublishedVersions.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/published_versions"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling deleteScreenRecordingSegment.');
            }
            // verify required parameter 'screen_recording_segment_oid' is not null or undefined
            if (screen_recording_segment_oid === null || screen_recording_segment_oid === undefined) {
                throw new RequiredError('screen_recording_segment_oid', 'Required parameter screen_recording_segment_oid was null or undefined when calling deleteScreenRecordingSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_segment_oid", "}"), encodeURIComponent(String(screen_recording_segment_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary delete Twilio account
         * @param {string} esp_twilio_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTwilioAccount: function (esp_twilio_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'esp_twilio_uuid' is not null or undefined
            if (esp_twilio_uuid === null || esp_twilio_uuid === undefined) {
                throw new RequiredError('esp_twilio_uuid', 'Required parameter esp_twilio_uuid was null or undefined when calling deleteTwilioAccount.');
            }
            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}"
                .replace("{".concat("esp_twilio_uuid", "}"), encodeURIComponent(String(esp_twilio_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Duplicate library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateLibraryItem: function (library_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling duplicateLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/duplicate"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update favorite flag on screen recording
         * @summary Update favorite flag on screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling favoriteScreenRecording.');
            }
            // verify required parameter 'screen_recording_uuid' is not null or undefined
            if (screen_recording_uuid === null || screen_recording_uuid === undefined) {
                throw new RequiredError('screen_recording_uuid', 'Required parameter screen_recording_uuid was null or undefined when calling favoriteScreenRecording.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_uuid", "}"), encodeURIComponent(String(screen_recording_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Obtain lat/long for an address
         * @param {number} storefront_oid
         * @param {GeocodeRequest} geocode_request geocode request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodeAddress: function (storefront_oid, geocode_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling geocodeAddress.');
            }
            // verify required parameter 'geocode_request' is not null or undefined
            if (geocode_request === null || geocode_request === undefined) {
                throw new RequiredError('geocode_request', 'Required parameter geocode_request was null or undefined when calling geocodeAddress.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/geocode"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GeocodeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(geocode_request || {}) : (geocode_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of all the countries
         * @summary Get countries
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getCountries.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/countries"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a temporary authentication token for the editor
         * @summary Gets editor token
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorToken: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEditorToken.');
            }
            var localVarPath = "/storefront/{storefront_oid}/editor_token"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication base templates
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailBaseTemplates: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailBaseTemplates.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/baseTemplates"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaign: function (storefront_oid, email_campaign_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCampaign.');
            }
            // verify required parameter 'email_campaign_uuid' is not null or undefined
            if (email_campaign_uuid === null || email_campaign_uuid === undefined) {
                throw new RequiredError('email_campaign_uuid', 'Required parameter email_campaign_uuid was null or undefined when calling getEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_uuid", "}"), encodeURIComponent(String(email_campaign_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCampaignFolder.');
            }
            // verify required parameter 'email_campaign_folder_uuid' is not null or undefined
            if (email_campaign_folder_uuid === null || email_campaign_folder_uuid === undefined) {
                throw new RequiredError('email_campaign_folder_uuid', 'Required parameter email_campaign_folder_uuid was null or undefined when calling getEmailCampaignFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_folder_uuid", "}"), encodeURIComponent(String(email_campaign_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignFolders: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCampaignFolders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign screenshots
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignScreenshots: function (storefront_oid, email_campaign_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCampaignScreenshots.');
            }
            // verify required parameter 'email_campaign_uuid' is not null or undefined
            if (email_campaign_uuid === null || email_campaign_uuid === undefined) {
                throw new RequiredError('email_campaign_uuid', 'Required parameter email_campaign_uuid was null or undefined when calling getEmailCampaignScreenshots.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_uuid", "}"), encodeURIComponent(String(email_campaign_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaigns
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaigns: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCampaigns.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaigns with stats
         * @param {number} storefront_oid
         * @param {string} stat_days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignsWithStats: function (storefront_oid, stat_days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCampaignsWithStats.');
            }
            // verify required parameter 'stat_days' is not null or undefined
            if (stat_days === null || stat_days === undefined) {
                throw new RequiredError('stat_days', 'Required parameter stat_days was null or undefined when calling getEmailCampaignsWithStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("stat_days", "}"), encodeURIComponent(String(stat_days)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email commseq
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseq: function (storefront_oid, commseq_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseq.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseq.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence emails stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqEmailStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqEmailStats.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqEmailStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqEmailStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStatSummaryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence postcard stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqPostcardStats.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqPostcardStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqPostcardStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStatPostcardSummaryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication postcard tracking
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardTracking: function (storefront_oid, commseq_postcard_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqPostcardTracking.');
            }
            // verify required parameter 'commseq_postcard_uuid' is not null or undefined
            if (commseq_postcard_uuid === null || commseq_postcard_uuid === undefined) {
                throw new RequiredError('commseq_postcard_uuid', 'Required parameter commseq_postcard_uuid was null or undefined when calling getEmailCommseqPostcardTracking.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/tracking"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_postcard_uuid", "}"), encodeURIComponent(String(commseq_postcard_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email commseq rate limiters
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqRateLimiters: function (storefront_oid, commseq_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqRateLimiters.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqRateLimiters.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/rate_limiters"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence sms stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatSmsSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqSmsStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqSmsStats.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqSmsStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqSmsStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/smsStats"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStatSmsSummaryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get communication sequence stats overall
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStatOverall: function (storefront_oid, commseq_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqStatOverall.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqStatOverall.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence step stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStepStatRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqStepStats.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqStepStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqStepStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStepStatRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence customers waiting at each requested step
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepWaiting: function (storefront_oid, commseq_uuid, waitingRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqStepWaiting.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqStepWaiting.');
            }
            // verify required parameter 'waitingRequest' is not null or undefined
            if (waitingRequest === null || waitingRequest === undefined) {
                throw new RequiredError('waitingRequest', 'Required parameter waitingRequest was null or undefined when calling getEmailCommseqStepWaiting.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStepWaitingRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(waitingRequest || {}) : (waitingRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email webhook editor values
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqWebhookEditorValues: function (storefront_oid, commseq_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqWebhookEditorValues.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailCommseqWebhookEditorValues.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email commseqs
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqs: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCommseqs.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get customers editor URL
         * @param {number} storefront_oid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomerEditorUrl: function (storefront_oid, email_customer_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCustomerEditorUrl.');
            }
            // verify required parameter 'email_customer_uuid' is not null or undefined
            if (email_customer_uuid === null || email_customer_uuid === undefined) {
                throw new RequiredError('email_customer_uuid', 'Required parameter email_customer_uuid was null or undefined when calling getEmailCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_customer_uuid", "}"), encodeURIComponent(String(email_customer_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email customers
         * @param {number} storefront_oid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {string} [searchEmailPrefix]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomers: function (storefront_oid, pageNumber, pageSize, searchEmailPrefix, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/customers"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (searchEmailPrefix !== undefined) {
                localVarQueryParameter['searchEmailPrefix'] = searchEmailPrefix;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email dashboard activity
         * @param {number} storefront_oid
         * @param {number} [last_records]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardActivity: function (storefront_oid, last_records, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailDashboardActivity.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (last_records !== undefined) {
                localVarQueryParameter['last_records'] = last_records;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get dashboard stats
         * @param {number} storefront_oid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardStats: function (storefront_oid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailDashboardStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email dispatch logs
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDispatchLogs: function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailDispatchLogs.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailDispatchLogs.');
            }
            // verify required parameter 'commseq_step_uuid' is not null or undefined
            if (commseq_step_uuid === null || commseq_step_uuid === undefined) {
                throw new RequiredError('commseq_step_uuid', 'Required parameter commseq_step_uuid was null or undefined when calling getEmailDispatchLogs.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)))
                .replace("{".concat("commseq_step_uuid", "}"), encodeURIComponent(String(commseq_step_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmail: function (storefront_oid, commseq_email_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailEmail.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling getEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email email clicks
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {string} commseq_email_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailClicks: function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailEmailClicks.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailEmailClicks.');
            }
            // verify required parameter 'commseq_step_uuid' is not null or undefined
            if (commseq_step_uuid === null || commseq_step_uuid === undefined) {
                throw new RequiredError('commseq_step_uuid', 'Required parameter commseq_step_uuid was null or undefined when calling getEmailEmailClicks.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling getEmailEmailClicks.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)))
                .replace("{".concat("commseq_step_uuid", "}"), encodeURIComponent(String(commseq_step_uuid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email order customer editor url
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {string} order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailCustomerEditorUrl: function (storefront_oid, commseq_email_uuid, order_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
            }
            // verify required parameter 'order_id' is not null or undefined
            if (order_id === null || order_id === undefined) {
                throw new RequiredError('order_id', 'Required parameter order_id was null or undefined when calling getEmailEmailCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)))
                .replace("{".concat("order_id", "}"), encodeURIComponent(String(order_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email email orders
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {string} commseq_email_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailOrders: function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailEmailOrders.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailEmailOrders.');
            }
            // verify required parameter 'commseq_step_uuid' is not null or undefined
            if (commseq_step_uuid === null || commseq_step_uuid === undefined) {
                throw new RequiredError('commseq_step_uuid', 'Required parameter commseq_step_uuid was null or undefined when calling getEmailEmailOrders.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling getEmailEmailOrders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)))
                .replace("{".concat("commseq_step_uuid", "}"), encodeURIComponent(String(commseq_step_uuid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email emails
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmails: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailEmails.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email emails multiple
         * @param {number} storefront_oid
         * @param {EmailCommseqEmailsRequest} email_commseq_emails_request Request of email uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailsMultiple: function (storefront_oid, email_commseq_emails_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailEmailsMultiple.');
            }
            // verify required parameter 'email_commseq_emails_request' is not null or undefined
            if (email_commseq_emails_request === null || email_commseq_emails_request === undefined) {
                throw new RequiredError('email_commseq_emails_request', 'Required parameter email_commseq_emails_request was null or undefined when calling getEmailEmailsMultiple.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/multiple"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmailsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_emails_request || {}) : (email_commseq_emails_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlow: function (storefront_oid, email_flow_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailFlow.');
            }
            // verify required parameter 'email_flow_uuid' is not null or undefined
            if (email_flow_uuid === null || email_flow_uuid === undefined) {
                throw new RequiredError('email_flow_uuid', 'Required parameter email_flow_uuid was null or undefined when calling getEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_uuid", "}"), encodeURIComponent(String(email_flow_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flow folder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailFlowFolder.');
            }
            // verify required parameter 'email_flow_folder_uuid' is not null or undefined
            if (email_flow_folder_uuid === null || email_flow_folder_uuid === undefined) {
                throw new RequiredError('email_flow_folder_uuid', 'Required parameter email_flow_folder_uuid was null or undefined when calling getEmailFlowFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_folder_uuid", "}"), encodeURIComponent(String(email_flow_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flow folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowFolders: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailFlowFolders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flow screenshots
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowScreenshots: function (storefront_oid, email_flow_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailFlowScreenshots.');
            }
            // verify required parameter 'email_flow_uuid' is not null or undefined
            if (email_flow_uuid === null || email_flow_uuid === undefined) {
                throw new RequiredError('email_flow_uuid', 'Required parameter email_flow_uuid was null or undefined when calling getEmailFlowScreenshots.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_uuid", "}"), encodeURIComponent(String(email_flow_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flows
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlows: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailFlows.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email globalsettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailGlobalSettings: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/email/global_settings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailList: function (storefront_oid, email_list_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailList.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling getEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email list customer editor url
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomerEditorUrl: function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailListCustomerEditorUrl.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling getEmailListCustomerEditorUrl.');
            }
            // verify required parameter 'email_customer_uuid' is not null or undefined
            if (email_customer_uuid === null || email_customer_uuid === undefined) {
                throw new RequiredError('email_customer_uuid', 'Required parameter email_customer_uuid was null or undefined when calling getEmailListCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)))
                .replace("{".concat("email_customer_uuid", "}"), encodeURIComponent(String(email_customer_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email list customers
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomers: function (storefront_oid, email_list_uuid, pageNumber, pageSize, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailListCustomers.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling getEmailListCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailListSegmentFolder.');
            }
            // verify required parameter 'email_list_segment_folder_uuid' is not null or undefined
            if (email_list_segment_folder_uuid === null || email_list_segment_folder_uuid === undefined) {
                throw new RequiredError('email_list_segment_folder_uuid', 'Required parameter email_list_segment_folder_uuid was null or undefined when calling getEmailListSegmentFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_segment_folder_uuid", "}"), encodeURIComponent(String(email_list_segment_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListSegmentFolders: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailListSegmentFolders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email lists
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailLists.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email performance
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPerformance: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailPerformance.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/performance"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email plan
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlan: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailPlan.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/plan"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcard: function (storefront_oid, commseq_postcard_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailPostcard.');
            }
            // verify required parameter 'commseq_postcard_uuid' is not null or undefined
            if (commseq_postcard_uuid === null || commseq_postcard_uuid === undefined) {
                throw new RequiredError('commseq_postcard_uuid', 'Required parameter commseq_postcard_uuid was null or undefined when calling getEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_postcard_uuid", "}"), encodeURIComponent(String(commseq_postcard_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email postcards
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcards: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailPostcards.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email postcards multiple
         * @param {number} storefront_oid
         * @param {EmailCommseqPostcardsRequest} email_commseq_postcards_request Request of postcard uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcardsMultiple: function (storefront_oid, email_commseq_postcards_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailPostcardsMultiple.');
            }
            // verify required parameter 'email_commseq_postcards_request' is not null or undefined
            if (email_commseq_postcards_request === null || email_commseq_postcards_request === undefined) {
                throw new RequiredError('email_commseq_postcards_request', 'Required parameter email_commseq_postcards_request was null or undefined when calling getEmailPostcardsMultiple.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/multiple"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcardsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_postcards_request || {}) : (email_commseq_postcards_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailSegment.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling getEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segment customers editor URL
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomerEditorUrl: function (storefront_oid, email_segment_uuid, email_customer_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
            }
            // verify required parameter 'email_customer_uuid' is not null or undefined
            if (email_customer_uuid === null || email_customer_uuid === undefined) {
                throw new RequiredError('email_customer_uuid', 'Required parameter email_customer_uuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)))
                .replace("{".concat("email_customer_uuid", "}"), encodeURIComponent(String(email_customer_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segment customers
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomers: function (storefront_oid, email_segment_uuid, pageNumber, pageSize, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailSegmentCustomers.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling getEmailSegmentCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegments: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailSegments.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sending domain
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomain: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling getEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domain/{domain}"
                .replace("{".concat("domain", "}"), encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sending domain status
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomainStatus: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling getEmailSendingDomainStatus.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}/status"
                .replace("{".concat("domain", "}"), encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomains: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/email/sending_domains";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email settings
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSettings: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailSettings.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/settings"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sms orders
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSmsOrders: function (storefront_oid, commseq_uuid, commseq_step_uuid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailSmsOrders.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling getEmailSmsOrders.');
            }
            // verify required parameter 'commseq_step_uuid' is not null or undefined
            if (commseq_step_uuid === null || commseq_step_uuid === undefined) {
                throw new RequiredError('commseq_step_uuid', 'Required parameter commseq_step_uuid was null or undefined when calling getEmailSmsOrders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/sms/orders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)))
                .replace("{".concat("commseq_step_uuid", "}"), encodeURIComponent(String(commseq_step_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email template
         * @param {number} storefront_oid
         * @param {number} email_template_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: function (storefront_oid, email_template_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailTemplate.');
            }
            // verify required parameter 'email_template_oid' is not null or undefined
            if (email_template_oid === null || email_template_oid === undefined) {
                throw new RequiredError('email_template_oid', 'Required parameter email_template_oid was null or undefined when calling getEmailTemplate.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_template_oid", "}"), encodeURIComponent(String(email_template_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email templates
         * @param {number} storefront_oid
         * @param {string} [trigger_type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplates: function (storefront_oid, trigger_type, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailTemplates.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/templates"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (trigger_type !== undefined) {
                localVarQueryParameter['trigger_type'] = trigger_type;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a list of third party email providers
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailThirdPartyProviders: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getEmailThirdPartyProviders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get experiments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getExperiments.');
            }
            var localVarPath = "/storefront/{storefront_oid}/experiments"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get file manager directory
         * @param {number} id
         * @param {string} [path]
         * @param {number} [storefront_fs_directory_oid]
         * @param {number} [storefront_theme_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFsDirectory: function (id, path, storefront_fs_directory_oid, storefront_theme_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling getFsDirectory.');
            }
            var localVarPath = "/storefront/{id}/fs/dir"
                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (storefront_fs_directory_oid !== undefined) {
                localVarQueryParameter['storefront_fs_directory_oid'] = storefront_fs_directory_oid;
            }
            if (storefront_theme_oid !== undefined) {
                localVarQueryParameter['storefront_theme_oid'] = storefront_theme_oid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get screen recording heatmap
         * @summary Get screen recording heatmap
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapRequest} query Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeatmap: function (storefront_oid, query, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getHeatmap.');
            }
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query', 'Required parameter query was null or undefined when calling getHeatmap.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingHeatmapRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(query || {}) : (query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get screen recording heatmap index
         * @summary Get screen recording heatmap index
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapIndexRequest} query Query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeatmapIndex: function (storefront_oid, query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getHeatmapIndex.');
            }
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query', 'Required parameter query was null or undefined when calling getHeatmapIndex.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/heatmap/index"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingHeatmapIndexRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(query || {}) : (query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of property names for a given property type
         * @summary Get histogram property names
         * @param {number} storefront_oid
         * @param {string} [property_type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyNames: function (storefront_oid, property_type, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getHistogramPropertyNames.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (property_type !== undefined) {
                localVarQueryParameter['property_type'] = property_type;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of property values for a given property name and type
         * @summary Get histogram property values
         * @param {number} storefront_oid
         * @param {string} [property_name]
         * @param {string} [property_type]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyValues: function (storefront_oid, property_name, property_type, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getHistogramPropertyValues.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (property_name !== undefined) {
                localVarQueryParameter['property_name'] = property_name;
            }
            if (property_type !== undefined) {
                localVarQueryParameter['property_type'] = property_type;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get library values used to populate drop down boxes for filtering.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryFilterValues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/code_library/filter_values";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItem: function (library_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling getLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all published versions for a library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItemPublishedVersions: function (library_item_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling getLibraryItemPublishedVersions.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/published_versions"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get screen recording
         * @summary Get screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecording.');
            }
            // verify required parameter 'screen_recording_uuid' is not null or undefined
            if (screen_recording_uuid === null || screen_recording_uuid === undefined) {
                throw new RequiredError('screen_recording_uuid', 'Required parameter screen_recording_uuid was null or undefined when calling getScreenRecording.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_uuid", "}"), encodeURIComponent(String(screen_recording_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get screen recording page view data
         * @summary Get screen recording page view data
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {string} screen_recording_page_view_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingPageViewData: function (storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingPageViewData.');
            }
            // verify required parameter 'screen_recording_uuid' is not null or undefined
            if (screen_recording_uuid === null || screen_recording_uuid === undefined) {
                throw new RequiredError('screen_recording_uuid', 'Required parameter screen_recording_uuid was null or undefined when calling getScreenRecordingPageViewData.');
            }
            // verify required parameter 'screen_recording_page_view_uuid' is not null or undefined
            if (screen_recording_page_view_uuid === null || screen_recording_page_view_uuid === undefined) {
                throw new RequiredError('screen_recording_page_view_uuid', 'Required parameter screen_recording_page_view_uuid was null or undefined when calling getScreenRecordingPageViewData.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_uuid", "}"), encodeURIComponent(String(screen_recording_uuid)))
                .replace("{".concat("screen_recording_page_view_uuid", "}"), encodeURIComponent(String(screen_recording_page_view_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingSegment.');
            }
            // verify required parameter 'screen_recording_segment_oid' is not null or undefined
            if (screen_recording_segment_oid === null || screen_recording_segment_oid === undefined) {
                throw new RequiredError('screen_recording_segment_oid', 'Required parameter screen_recording_segment_oid was null or undefined when calling getScreenRecordingSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_segment_oid", "}"), encodeURIComponent(String(screen_recording_segment_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get screen recording segments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSegments: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingSegments.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get screen recording settings
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSettings: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingSettings.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tags used by screen recording
         * @summary Get tags used by screen recording
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingTags: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingTags.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/tags"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query screen recordings
         * @summary Query screen recordings
         * @param {number} storefront_oid
         * @param {ScreenRecordingQueryRequest} query Query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingsByQuery: function (storefront_oid, query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingsByQuery.');
            }
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query', 'Required parameter query was null or undefined when calling getScreenRecordingsByQuery.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/query"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingQueryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(query || {}) : (query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get screen recordings by segment
         * @summary Get screen recordings by segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingsBySegment: function (storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getScreenRecordingsBySegment.');
            }
            // verify required parameter 'screen_recording_segment_oid' is not null or undefined
            if (screen_recording_segment_oid === null || screen_recording_segment_oid === undefined) {
                throw new RequiredError('screen_recording_segment_oid', 'Required parameter screen_recording_segment_oid was null or undefined when calling getScreenRecordingsBySegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_segment_oid", "}"), encodeURIComponent(String(screen_recording_segment_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreFrontPricingTiers: function (_expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/pricing_tiers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get storefronts (internal use only for security reasons)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreFronts: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["ultrabooks_write", "auto_order_write", "coupon_read", "affiliate_read", "workflow_read", "coupon_write", "channel_partner_read", "tax_read", "conversation_write", "fulfillment_write", "tax_write", "gift_certificate_write", "workflow_write", "channel_partner_write", "item_read", "fulfillment_read", "webhook_write", "chargeback_write", "user_write", "gift_certificate_read", "checkout_write", "storefront_read", "webhook_read", "item_write", "auto_order_read", "customer_read", "user_read", "configuration_read", "customer_write", "order_read", "conversation_read", "affiliate_write", "storefront_write", "ultrabooks_read", "order_write", "chargeback_read", "integration_log_write", "configuration_write", "checkout_read", "integration_log_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get thumbnail parameters
         * @param {ThumbnailParametersRequest} thumbnail_parameters Thumbnail Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailParameters: function (thumbnail_parameters, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'thumbnail_parameters' is not null or undefined
            if (thumbnail_parameters === null || thumbnail_parameters === undefined) {
                throw new RequiredError('thumbnail_parameters', 'Required parameter thumbnail_parameters was null or undefined when calling getThumbnailParameters.');
            }
            var localVarPath = "/storefront/thumbnailParameters";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ThumbnailParametersRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(thumbnail_parameters || {}) : (thumbnail_parameters || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a transactional email
         * @summary Gets a transaction email object
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmail: function (storefront_oid, email_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getTransactionEmail.');
            }
            // verify required parameter 'email_id' is not null or undefined
            if (email_id === null || email_id === undefined) {
                throw new RequiredError('email_id', 'Required parameter email_id was null or undefined when calling getTransactionEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_id", "}"), encodeURIComponent(String(email_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of all transactional emails and return back just their names
         * @summary Gets a list of transaction email names
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailList: function (storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getTransactionEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get transactional email screenshots
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailScreenshots: function (storefront_oid, email_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling getTransactionEmailScreenshots.');
            }
            // verify required parameter 'email_id' is not null or undefined
            if (email_id === null || email_id === undefined) {
                throw new RequiredError('email_id', 'Required parameter email_id was null or undefined when calling getTransactionEmailScreenshots.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_id", "}"), encodeURIComponent(String(email_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Twilio account
         * @param {string} esp_twilio_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwilioAccount: function (esp_twilio_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'esp_twilio_uuid' is not null or undefined
            if (esp_twilio_uuid === null || esp_twilio_uuid === undefined) {
                throw new RequiredError('esp_twilio_uuid', 'Required parameter esp_twilio_uuid was null or undefined when calling getTwilioAccount.');
            }
            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}"
                .replace("{".concat("esp_twilio_uuid", "}"), encodeURIComponent(String(esp_twilio_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all Twilio accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwilioAccounts: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/twilio/accounts";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
         * @param {number} id
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFsFileUrl: function (id, extension, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling getUploadFsFileUrl.');
            }
            // verify required parameter 'extension' is not null or undefined
            if (extension === null || extension === undefined) {
                throw new RequiredError('extension', 'Required parameter extension was null or undefined when calling getUploadFsFileUrl.');
            }
            var localVarPath = "/storefront/{id}/fs/upload_url/{extension}"
                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                .replace("{".concat("extension", "}"), encodeURIComponent(String(extension)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Globally unsubscribe a customer
         * @param {number} storefront_oid
         * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalUnsubscribe: function (storefront_oid, unsubscribe, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling globalUnsubscribe.');
            }
            // verify required parameter 'unsubscribe' is not null or undefined
            if (unsubscribe === null || unsubscribe === undefined) {
                throw new RequiredError('unsubscribe', 'Required parameter unsubscribe was null or undefined when calling globalUnsubscribe.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/globalUnsubscribe"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailGlobalUnsubscribeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(unsubscribe || {}) : (unsubscribe || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Import a third party provider list
         * @param {number} storefront_oid
         * @param {EmailThirdPartyListImportRequest} import_request lists to import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importEmailThirdPartyProviderList: function (storefront_oid, import_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling importEmailThirdPartyProviderList.');
            }
            // verify required parameter 'import_request' is not null or undefined
            if (import_request === null || import_request === undefined) {
                throw new RequiredError('import_request', 'Required parameter import_request was null or undefined when calling importEmailThirdPartyProviderList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailThirdPartyListImportRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(import_request || {}) : (import_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email campaign
         * @param {number} storefront_oid
         * @param {EmailCampaign} email_campaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaign: function (storefront_oid, email_campaign, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailCampaign.');
            }
            // verify required parameter 'email_campaign' is not null or undefined
            if (email_campaign === null || email_campaign === undefined) {
                throw new RequiredError('email_campaign', 'Required parameter email_campaign was null or undefined when calling insertEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCampaign" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_campaign || {}) : (email_campaign || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email campaign folder
         * @param {number} storefront_oid
         * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaignFolder: function (storefront_oid, email_campaign_folder, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailCampaignFolder.');
            }
            // verify required parameter 'email_campaign_folder' is not null or undefined
            if (email_campaign_folder === null || email_campaign_folder === undefined) {
                throw new RequiredError('email_campaign_folder', 'Required parameter email_campaign_folder was null or undefined when calling insertEmailCampaignFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCampaignFolder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_campaign_folder || {}) : (email_campaign_folder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email commseq
         * @param {number} storefront_oid
         * @param {EmailCommseq} email_commseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCommseq: function (storefront_oid, email_commseq, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailCommseq.');
            }
            // verify required parameter 'email_commseq' is not null or undefined
            if (email_commseq === null || email_commseq === undefined) {
                throw new RequiredError('email_commseq', 'Required parameter email_commseq was null or undefined when calling insertEmailCommseq.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq || {}) : (email_commseq || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email email
         * @param {number} storefront_oid
         * @param {EmailCommseqEmail} email_commseq_email Email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailEmail: function (storefront_oid, email_commseq_email, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailEmail.');
            }
            // verify required parameter 'email_commseq_email' is not null or undefined
            if (email_commseq_email === null || email_commseq_email === undefined) {
                throw new RequiredError('email_commseq_email', 'Required parameter email_commseq_email was null or undefined when calling insertEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_email || {}) : (email_commseq_email || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email flow
         * @param {number} storefront_oid
         * @param {EmailFlow} email_flow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlow: function (storefront_oid, email_flow, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailFlow.');
            }
            // verify required parameter 'email_flow' is not null or undefined
            if (email_flow === null || email_flow === undefined) {
                throw new RequiredError('email_flow', 'Required parameter email_flow was null or undefined when calling insertEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_flow || {}) : (email_flow || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email flow folder
         * @param {number} storefront_oid
         * @param {EmailFlowFolder} email_flow_folder Email flow folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlowFolder: function (storefront_oid, email_flow_folder, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailFlowFolder.');
            }
            // verify required parameter 'email_flow_folder' is not null or undefined
            if (email_flow_folder === null || email_flow_folder === undefined) {
                throw new RequiredError('email_flow_folder', 'Required parameter email_flow_folder was null or undefined when calling insertEmailFlowFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlowFolder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_flow_folder || {}) : (email_flow_folder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email list
         * @param {number} storefront_oid
         * @param {EmailList} email_list Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailList: function (storefront_oid, email_list, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailList.');
            }
            // verify required parameter 'email_list' is not null or undefined
            if (email_list === null || email_list === undefined) {
                throw new RequiredError('email_list', 'Required parameter email_list was null or undefined when calling insertEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailList" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_list || {}) : (email_list || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email campaign folder
         * @param {number} storefront_oid
         * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailListSegmentFolder.');
            }
            // verify required parameter 'email_list_segment_folder' is not null or undefined
            if (email_list_segment_folder === null || email_list_segment_folder === undefined) {
                throw new RequiredError('email_list_segment_folder', 'Required parameter email_list_segment_folder was null or undefined when calling insertEmailListSegmentFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailListSegmentFolder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_list_segment_folder || {}) : (email_list_segment_folder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email postcard
         * @param {number} storefront_oid
         * @param {EmailCommseqPostcard} email_commseq_postcard Email postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailPostcard: function (storefront_oid, email_commseq_postcard, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailPostcard.');
            }
            // verify required parameter 'email_commseq_postcard' is not null or undefined
            if (email_commseq_postcard === null || email_commseq_postcard === undefined) {
                throw new RequiredError('email_commseq_postcard', 'Required parameter email_commseq_postcard was null or undefined when calling insertEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcard" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_postcard || {}) : (email_commseq_postcard || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email segment
         * @param {number} storefront_oid
         * @param {EmailSegment} email_segment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailSegment: function (storefront_oid, email_segment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertEmailSegment.');
            }
            // verify required parameter 'email_segment' is not null or undefined
            if (email_segment === null || email_segment === undefined) {
                throw new RequiredError('email_segment', 'Required parameter email_segment was null or undefined when calling insertEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailSegment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_segment || {}) : (email_segment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert screen recording segment
         * @param {number} storefront_oid
         * @param {ScreenRecordingSegment} segment Segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertScreenRecordingSegment: function (storefront_oid, segment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertScreenRecordingSegment.');
            }
            // verify required parameter 'segment' is not null or undefined
            if (segment === null || segment === undefined) {
                throw new RequiredError('segment', 'Required parameter segment was null or undefined when calling insertScreenRecordingSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingSegment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(segment || {}) : (segment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a page content attribute, creating it new if it does not yet exist.
         * @summary Upsert a page content attribute
         * @param {StoreFrontPageContentAttribute} page_attribute Page content attribute to upsert
         * @param {number} storefront_oid
         * @param {number} page_oid The page oid to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUpdatePageContentAttribute: function (page_attribute, storefront_oid, page_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'page_attribute' is not null or undefined
            if (page_attribute === null || page_attribute === undefined) {
                throw new RequiredError('page_attribute', 'Required parameter page_attribute was null or undefined when calling insertUpdatePageContentAttribute.');
            }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling insertUpdatePageContentAttribute.');
            }
            // verify required parameter 'page_oid' is not null or undefined
            if (page_oid === null || page_oid === undefined) {
                throw new RequiredError('page_oid', 'Required parameter page_oid was null or undefined when calling insertUpdatePageContentAttribute.');
            }
            var localVarPath = "/storefront/{storefront_oid}/pages/{page_oid}/content/attributes"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("page_oid", "}"), encodeURIComponent(String(page_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("StoreFrontPageContentAttribute" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(page_attribute || {}) : (page_attribute || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Prepare download of email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareDownloadEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling prepareDownloadEmailSegment.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling prepareDownloadEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Publish library item.
         * @param {number} library_item_oid
         * @param {PublishLibraryItemRequest} publish_library_request Publish library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishLibraryItem: function (library_item_oid, publish_library_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling publishLibraryItem.');
            }
            // verify required parameter 'publish_library_request' is not null or undefined
            if (publish_library_request === null || publish_library_request === undefined) {
                throw new RequiredError('publish_library_request', 'Required parameter publish_library_request was null or undefined when calling publishLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/publish"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("PublishLibraryItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(publish_library_request || {}) : (publish_library_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Purchase public library item, which creates a copy of the item in your personal code library
         * @param {number} library_item_oid
         * @param {number} [storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLibraryItem: function (library_item_oid, storefront_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling purchaseLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/purchase"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (storefront_oid !== undefined) {
                localVarQueryParameter['storefront_oid'] = storefront_oid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Release email communication sequence customers waiting at the specified step
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseEmailCommseqStepWaiting: function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling releaseEmailCommseqStepWaiting.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
            }
            // verify required parameter 'commseq_step_uuid' is not null or undefined
            if (commseq_step_uuid === null || commseq_step_uuid === undefined) {
                throw new RequiredError('commseq_step_uuid', 'Required parameter commseq_step_uuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)))
                .replace("{".concat("commseq_step_uuid", "}"), encodeURIComponent(String(commseq_step_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset email commseq rate limiters (only callable by UltraCart Support)
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmailCommseqRateLimiters: function (storefront_oid, commseq_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling resetEmailCommseqRateLimiters.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling resetEmailCommseqRateLimiters.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/rate_limiters"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Request a review of an email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_review_request Email commseq email review request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        review: function (storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling review.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling review.');
            }
            // verify required parameter 'email_commseq_email_review_request' is not null or undefined
            if (email_commseq_email_review_request === null || email_commseq_email_review_request === undefined) {
                throw new RequiredError('email_commseq_email_review_request', 'Required parameter email_commseq_email_review_request was null or undefined when calling review.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmailSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_email_review_request || {}) : (email_commseq_email_review_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for all matching values
         * @param {string} [category]
         * @param {string} [matches]
         * @param {string} [storefront_oid]
         * @param {number} [max_hits]
         * @param {string} [subcategory]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (category, matches, storefront_oid, max_hits, subcategory, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (matches !== undefined) {
                localVarQueryParameter['matches'] = matches;
            }
            if (storefront_oid !== undefined) {
                localVarQueryParameter['storefront_oid'] = storefront_oid;
            }
            if (max_hits !== undefined) {
                localVarQueryParameter['max_hits'] = max_hits;
            }
            if (subcategory !== undefined) {
                localVarQueryParameter['subcategory'] = subcategory;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookup_request LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (lookup_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'lookup_request' is not null or undefined
            if (lookup_request === null || lookup_request === undefined) {
                throw new RequiredError('lookup_request', 'Required parameter lookup_request was null or undefined when calling search2.');
            }
            var localVarPath = "/storefront/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LookupRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(lookup_request || {}) : (lookup_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search email list customers
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailListCustomers: function (storefront_oid, email_list_uuid, startsWith, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling searchEmailListCustomers.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling searchEmailListCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (startsWith !== undefined) {
                localVarQueryParameter['startsWith'] = startsWith;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search email segment customers
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailSegmentCustomers: function (storefront_oid, email_segment_uuid, startsWith, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling searchEmailSegmentCustomers.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling searchEmailSegmentCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (startsWith !== undefined) {
                localVarQueryParameter['startsWith'] = startsWith;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLibraryItems: function (item_query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item_query' is not null or undefined
            if (item_query === null || item_query === undefined) {
                throw new RequiredError('item_query', 'Required parameter item_query was null or undefined when calling searchLibraryItems.');
            }
            var localVarPath = "/storefront/code_library/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item_query || {}) : (item_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPublishedItems: function (item_query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item_query' is not null or undefined
            if (item_query === null || item_query === undefined) {
                throw new RequiredError('item_query', 'Required parameter item_query was null or undefined when calling searchPublishedItems.');
            }
            var localVarPath = "/storefront/code_library/search_published";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item_query || {}) : (item_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items needing review or rejected
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchReviewItems: function (item_query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item_query' is not null or undefined
            if (item_query === null || item_query === undefined) {
                throw new RequiredError('item_query', 'Required parameter item_query was null or undefined when calling searchReviewItems.');
            }
            var localVarPath = "/storefront/code_library/search_review";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item_query || {}) : (item_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSharedItems: function (item_query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item_query' is not null or undefined
            if (item_query === null || item_query === undefined) {
                throw new RequiredError('item_query', 'Required parameter item_query was null or undefined when calling searchSharedItems.');
            }
            var localVarPath = "/storefront/code_library/search_shared";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item_query || {}) : (item_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send email test
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_test_request Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTest: function (storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling sendEmailTest.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling sendEmailTest.');
            }
            // verify required parameter 'email_commseq_email_test_request' is not null or undefined
            if (email_commseq_email_test_request === null || email_commseq_email_test_request === undefined) {
                throw new RequiredError('email_commseq_email_test_request', 'Required parameter email_commseq_email_test_request was null or undefined when calling sendEmailTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmailSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_email_test_request || {}) : (email_commseq_email_test_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send postcard test
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {EmailCommseqPostcardSendTestRequest} email_commseq_postcard_test_request Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcardTest: function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling sendPostcardTest.');
            }
            // verify required parameter 'commseq_postcard_uuid' is not null or undefined
            if (commseq_postcard_uuid === null || commseq_postcard_uuid === undefined) {
                throw new RequiredError('commseq_postcard_uuid', 'Required parameter commseq_postcard_uuid was null or undefined when calling sendPostcardTest.');
            }
            // verify required parameter 'email_commseq_postcard_test_request' is not null or undefined
            if (email_commseq_postcard_test_request === null || email_commseq_postcard_test_request === undefined) {
                throw new RequiredError('email_commseq_postcard_test_request', 'Required parameter email_commseq_postcard_test_request was null or undefined when calling sendPostcardTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_postcard_uuid", "}"), encodeURIComponent(String(commseq_postcard_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcardSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_postcard_test_request || {}) : (email_commseq_postcard_test_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send SMS test
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {EmailCommseqSmsSendTestRequest} email_commseq_sms_test_request Email commseq sms test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsTest: function (storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling sendSmsTest.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling sendSmsTest.');
            }
            // verify required parameter 'commseq_step_uuid' is not null or undefined
            if (commseq_step_uuid === null || commseq_step_uuid === undefined) {
                throw new RequiredError('commseq_step_uuid', 'Required parameter commseq_step_uuid was null or undefined when calling sendSmsTest.');
            }
            // verify required parameter 'email_commseq_sms_test_request' is not null or undefined
            if (email_commseq_sms_test_request === null || email_commseq_sms_test_request === undefined) {
                throw new RequiredError('email_commseq_sms_test_request', 'Required parameter email_commseq_sms_test_request was null or undefined when calling sendSmsTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/sms/{commseq_uuid}/{commseq_step_uuid}/test"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)))
                .replace("{".concat("commseq_step_uuid", "}"), encodeURIComponent(String(commseq_step_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqSmsSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_sms_test_request || {}) : (email_commseq_sms_test_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send webhook test
         * @param {number} storefront_oid
         * @param {EmailCommseqWebhookSendTestRequest} email_commseq_webhook_test_request Email commseq webhook test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendWebhookTest: function (storefront_oid, email_commseq_webhook_test_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling sendWebhookTest.');
            }
            // verify required parameter 'email_commseq_webhook_test_request' is not null or undefined
            if (email_commseq_webhook_test_request === null || email_commseq_webhook_test_request === undefined) {
                throw new RequiredError('email_commseq_webhook_test_request', 'Required parameter email_commseq_webhook_test_request was null or undefined when calling sendWebhookTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/webhooks/test"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqWebhookSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_webhook_test_request || {}) : (email_commseq_webhook_test_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sequence test
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailCommseqSequenceTestRequest} email_commseq_sequence_test_request Commseq test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sequenceTest: function (storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling sequenceTest.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling sequenceTest.');
            }
            // verify required parameter 'email_commseq_sequence_test_request' is not null or undefined
            if (email_commseq_sequence_test_request === null || email_commseq_sequence_test_request === undefined) {
                throw new RequiredError('email_commseq_sequence_test_request', 'Required parameter email_commseq_sequence_test_request was null or undefined when calling sequenceTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/test"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqSequenceTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_sequence_test_request || {}) : (email_commseq_sequence_test_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Start email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailCampaign: function (storefront_oid, email_campaign_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling startEmailCampaign.');
            }
            // verify required parameter 'email_campaign_uuid' is not null or undefined
            if (email_campaign_uuid === null || email_campaign_uuid === undefined) {
                throw new RequiredError('email_campaign_uuid', 'Required parameter email_campaign_uuid was null or undefined when calling startEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_uuid", "}"), encodeURIComponent(String(email_campaign_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Subscribe customers to email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {Array<EmailCustomer>} customers Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEmailList: function (storefront_oid, email_list_uuid, customers, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling subscribeToEmailList.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling subscribeToEmailList.');
            }
            // verify required parameter 'customers' is not null or undefined
            if (customers === null || customers === undefined) {
                throw new RequiredError('customers', 'Required parameter customers was null or undefined when calling subscribeToEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;EmailCustomer&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customers || {}) : (customers || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Sunset email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sunsetEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling sunsetEmailSegment.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling sunsetEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/sunset"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove favorite flag on screen recording
         * @summary Remove favorite flag on screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling unfavoriteScreenRecording.');
            }
            // verify required parameter 'screen_recording_uuid' is not null or undefined
            if (screen_recording_uuid === null || screen_recording_uuid === undefined) {
                throw new RequiredError('screen_recording_uuid', 'Required parameter screen_recording_uuid was null or undefined when calling unfavoriteScreenRecording.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_uuid", "}"), encodeURIComponent(String(screen_recording_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {EmailCampaign} email_campaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaign: function (storefront_oid, email_campaign_uuid, email_campaign, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailCampaign.');
            }
            // verify required parameter 'email_campaign_uuid' is not null or undefined
            if (email_campaign_uuid === null || email_campaign_uuid === undefined) {
                throw new RequiredError('email_campaign_uuid', 'Required parameter email_campaign_uuid was null or undefined when calling updateEmailCampaign.');
            }
            // verify required parameter 'email_campaign' is not null or undefined
            if (email_campaign === null || email_campaign === undefined) {
                throw new RequiredError('email_campaign', 'Required parameter email_campaign was null or undefined when calling updateEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_uuid", "}"), encodeURIComponent(String(email_campaign_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCampaign" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_campaign || {}) : (email_campaign || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailCampaignFolder.');
            }
            // verify required parameter 'email_campaign_folder_uuid' is not null or undefined
            if (email_campaign_folder_uuid === null || email_campaign_folder_uuid === undefined) {
                throw new RequiredError('email_campaign_folder_uuid', 'Required parameter email_campaign_folder_uuid was null or undefined when calling updateEmailCampaignFolder.');
            }
            // verify required parameter 'email_campaign_folder' is not null or undefined
            if (email_campaign_folder === null || email_campaign_folder === undefined) {
                throw new RequiredError('email_campaign_folder', 'Required parameter email_campaign_folder was null or undefined when calling updateEmailCampaignFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_campaign_folder_uuid", "}"), encodeURIComponent(String(email_campaign_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCampaignFolder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_campaign_folder || {}) : (email_campaign_folder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email commseq
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailCommseq} email_commseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCommseq: function (storefront_oid, commseq_uuid, email_commseq, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailCommseq.');
            }
            // verify required parameter 'commseq_uuid' is not null or undefined
            if (commseq_uuid === null || commseq_uuid === undefined) {
                throw new RequiredError('commseq_uuid', 'Required parameter commseq_uuid was null or undefined when calling updateEmailCommseq.');
            }
            // verify required parameter 'email_commseq' is not null or undefined
            if (email_commseq === null || email_commseq === undefined) {
                throw new RequiredError('email_commseq', 'Required parameter email_commseq was null or undefined when calling updateEmailCommseq.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_uuid", "}"), encodeURIComponent(String(commseq_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq || {}) : (email_commseq || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email customer
         * @param {number} storefront_oid
         * @param {string} email_customer_uuid
         * @param {EmailCustomer} email_customer Email customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCustomer: function (storefront_oid, email_customer_uuid, email_customer, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailCustomer.');
            }
            // verify required parameter 'email_customer_uuid' is not null or undefined
            if (email_customer_uuid === null || email_customer_uuid === undefined) {
                throw new RequiredError('email_customer_uuid', 'Required parameter email_customer_uuid was null or undefined when calling updateEmailCustomer.');
            }
            // verify required parameter 'email_customer' is not null or undefined
            if (email_customer === null || email_customer === undefined) {
                throw new RequiredError('email_customer', 'Required parameter email_customer was null or undefined when calling updateEmailCustomer.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_customer_uuid", "}"), encodeURIComponent(String(email_customer_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCustomer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_customer || {}) : (email_customer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmail} email_commseq_email Email commseq email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailEmail: function (storefront_oid, commseq_email_uuid, email_commseq_email, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailEmail.');
            }
            // verify required parameter 'commseq_email_uuid' is not null or undefined
            if (commseq_email_uuid === null || commseq_email_uuid === undefined) {
                throw new RequiredError('commseq_email_uuid', 'Required parameter commseq_email_uuid was null or undefined when calling updateEmailEmail.');
            }
            // verify required parameter 'email_commseq_email' is not null or undefined
            if (email_commseq_email === null || email_commseq_email === undefined) {
                throw new RequiredError('email_commseq_email', 'Required parameter email_commseq_email was null or undefined when calling updateEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_email_uuid", "}"), encodeURIComponent(String(commseq_email_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_email || {}) : (email_commseq_email || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {EmailFlow} email_flow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlow: function (storefront_oid, email_flow_uuid, email_flow, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailFlow.');
            }
            // verify required parameter 'email_flow_uuid' is not null or undefined
            if (email_flow_uuid === null || email_flow_uuid === undefined) {
                throw new RequiredError('email_flow_uuid', 'Required parameter email_flow_uuid was null or undefined when calling updateEmailFlow.');
            }
            // verify required parameter 'email_flow' is not null or undefined
            if (email_flow === null || email_flow === undefined) {
                throw new RequiredError('email_flow', 'Required parameter email_flow was null or undefined when calling updateEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_uuid", "}"), encodeURIComponent(String(email_flow_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_flow || {}) : (email_flow || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email flow folder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {EmailFlowFolder} email_flow_folder Email flow folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, email_flow_folder, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailFlowFolder.');
            }
            // verify required parameter 'email_flow_folder_uuid' is not null or undefined
            if (email_flow_folder_uuid === null || email_flow_folder_uuid === undefined) {
                throw new RequiredError('email_flow_folder_uuid', 'Required parameter email_flow_folder_uuid was null or undefined when calling updateEmailFlowFolder.');
            }
            // verify required parameter 'email_flow_folder' is not null or undefined
            if (email_flow_folder === null || email_flow_folder === undefined) {
                throw new RequiredError('email_flow_folder', 'Required parameter email_flow_folder was null or undefined when calling updateEmailFlowFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_flow_folder_uuid", "}"), encodeURIComponent(String(email_flow_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlowFolder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_flow_folder || {}) : (email_flow_folder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email global settings
         * @param {EmailGlobalSettings} global_settings global settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailGlobalSettings: function (global_settings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'global_settings' is not null or undefined
            if (global_settings === null || global_settings === undefined) {
                throw new RequiredError('global_settings', 'Required parameter global_settings was null or undefined when calling updateEmailGlobalSettings.');
            }
            var localVarPath = "/storefront/email/global_settings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailGlobalSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(global_settings || {}) : (global_settings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {EmailList} email_list Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailList: function (storefront_oid, email_list_uuid, email_list, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailList.');
            }
            // verify required parameter 'email_list_uuid' is not null or undefined
            if (email_list_uuid === null || email_list_uuid === undefined) {
                throw new RequiredError('email_list_uuid', 'Required parameter email_list_uuid was null or undefined when calling updateEmailList.');
            }
            // verify required parameter 'email_list' is not null or undefined
            if (email_list === null || email_list === undefined) {
                throw new RequiredError('email_list', 'Required parameter email_list was null or undefined when calling updateEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_uuid", "}"), encodeURIComponent(String(email_list_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailList" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_list || {}) : (email_list || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailListSegmentFolder.');
            }
            // verify required parameter 'email_list_segment_folder_uuid' is not null or undefined
            if (email_list_segment_folder_uuid === null || email_list_segment_folder_uuid === undefined) {
                throw new RequiredError('email_list_segment_folder_uuid', 'Required parameter email_list_segment_folder_uuid was null or undefined when calling updateEmailListSegmentFolder.');
            }
            // verify required parameter 'email_list_segment_folder' is not null or undefined
            if (email_list_segment_folder === null || email_list_segment_folder === undefined) {
                throw new RequiredError('email_list_segment_folder', 'Required parameter email_list_segment_folder was null or undefined when calling updateEmailListSegmentFolder.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_list_segment_folder_uuid", "}"), encodeURIComponent(String(email_list_segment_folder_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailListSegmentFolder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_list_segment_folder || {}) : (email_list_segment_folder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email plan
         * @param {number} storefront_oid
         * @param {EmailPlan} settings plan request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPlan: function (storefront_oid, settings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailPlan.');
            }
            // verify required parameter 'settings' is not null or undefined
            if (settings === null || settings === undefined) {
                throw new RequiredError('settings', 'Required parameter settings was null or undefined when calling updateEmailPlan.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/plan"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailPlan" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {EmailCommseqPostcard} email_commseq_postcard Email commseq postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPostcard: function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailPostcard.');
            }
            // verify required parameter 'commseq_postcard_uuid' is not null or undefined
            if (commseq_postcard_uuid === null || commseq_postcard_uuid === undefined) {
                throw new RequiredError('commseq_postcard_uuid', 'Required parameter commseq_postcard_uuid was null or undefined when calling updateEmailPostcard.');
            }
            // verify required parameter 'email_commseq_postcard' is not null or undefined
            if (email_commseq_postcard === null || email_commseq_postcard === undefined) {
                throw new RequiredError('email_commseq_postcard', 'Required parameter email_commseq_postcard was null or undefined when calling updateEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("commseq_postcard_uuid", "}"), encodeURIComponent(String(commseq_postcard_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcard" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_commseq_postcard || {}) : (email_commseq_postcard || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {EmailSegment} email_segment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSegment: function (storefront_oid, email_segment_uuid, email_segment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailSegment.');
            }
            // verify required parameter 'email_segment_uuid' is not null or undefined
            if (email_segment_uuid === null || email_segment_uuid === undefined) {
                throw new RequiredError('email_segment_uuid', 'Required parameter email_segment_uuid was null or undefined when calling updateEmailSegment.');
            }
            // verify required parameter 'email_segment' is not null or undefined
            if (email_segment === null || email_segment === undefined) {
                throw new RequiredError('email_segment', 'Required parameter email_segment was null or undefined when calling updateEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_segment_uuid", "}"), encodeURIComponent(String(email_segment_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailSegment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_segment || {}) : (email_segment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email sending domain
         * @param {string} domain
         * @param {EmailDomain} email_domain EmailDomain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSendingDomain: function (domain, email_domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling updateEmailSendingDomain.');
            }
            // verify required parameter 'email_domain' is not null or undefined
            if (email_domain === null || email_domain === undefined) {
                throw new RequiredError('email_domain', 'Required parameter email_domain was null or undefined when calling updateEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}"
                .replace("{".concat("domain", "}"), encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailDomain" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(email_domain || {}) : (email_domain || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email settings
         * @param {number} storefront_oid
         * @param {EmailSettings} settings settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSettings: function (storefront_oid, settings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateEmailSettings.');
            }
            // verify required parameter 'settings' is not null or undefined
            if (settings === null || settings === undefined) {
                throw new RequiredError('settings', 'Required parameter settings was null or undefined when calling updateEmailSettings.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/settings"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update experiment
         * @param {number} storefront_oid
         * @param {number} storefront_experiment_oid
         * @param {Experiment} experiment Experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: function (storefront_oid, storefront_experiment_oid, experiment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateExperiment.');
            }
            // verify required parameter 'storefront_experiment_oid' is not null or undefined
            if (storefront_experiment_oid === null || storefront_experiment_oid === undefined) {
                throw new RequiredError('storefront_experiment_oid', 'Required parameter storefront_experiment_oid was null or undefined when calling updateExperiment.');
            }
            // verify required parameter 'experiment' is not null or undefined
            if (experiment === null || experiment === undefined) {
                throw new RequiredError('experiment', 'Required parameter experiment was null or undefined when calling updateExperiment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("storefront_experiment_oid", "}"), encodeURIComponent(String(storefront_experiment_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Experiment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(experiment || {}) : (experiment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update library item. Note that only certain fields may be updated via this method.
         * @param {number} library_item_oid
         * @param {LibraryItem} library_item Library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryItem: function (library_item_oid, library_item, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'library_item_oid' is not null or undefined
            if (library_item_oid === null || library_item_oid === undefined) {
                throw new RequiredError('library_item_oid', 'Required parameter library_item_oid was null or undefined when calling updateLibraryItem.');
            }
            // verify required parameter 'library_item' is not null or undefined
            if (library_item === null || library_item === undefined) {
                throw new RequiredError('library_item', 'Required parameter library_item was null or undefined when calling updateLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}"
                .replace("{".concat("library_item_oid", "}"), encodeURIComponent(String(library_item_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(library_item || {}) : (library_item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update merchant notes on a screen recording
         * @summary Update merchant notes on a screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {ScreenRecordingMerchantNotesRequest} merchant_notes_request Merchant Notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingMerchantNotes: function (storefront_oid, screen_recording_uuid, merchant_notes_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateScreenRecordingMerchantNotes.');
            }
            // verify required parameter 'screen_recording_uuid' is not null or undefined
            if (screen_recording_uuid === null || screen_recording_uuid === undefined) {
                throw new RequiredError('screen_recording_uuid', 'Required parameter screen_recording_uuid was null or undefined when calling updateScreenRecordingMerchantNotes.');
            }
            // verify required parameter 'merchant_notes_request' is not null or undefined
            if (merchant_notes_request === null || merchant_notes_request === undefined) {
                throw new RequiredError('merchant_notes_request', 'Required parameter merchant_notes_request was null or undefined when calling updateScreenRecordingMerchantNotes.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_uuid", "}"), encodeURIComponent(String(screen_recording_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingMerchantNotesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(merchant_notes_request || {}) : (merchant_notes_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {ScreenRecordingSegment} segment Segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, segment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateScreenRecordingSegment.');
            }
            // verify required parameter 'screen_recording_segment_oid' is not null or undefined
            if (screen_recording_segment_oid === null || screen_recording_segment_oid === undefined) {
                throw new RequiredError('screen_recording_segment_oid', 'Required parameter screen_recording_segment_oid was null or undefined when calling updateScreenRecordingSegment.');
            }
            // verify required parameter 'segment' is not null or undefined
            if (segment === null || segment === undefined) {
                throw new RequiredError('segment', 'Required parameter segment was null or undefined when calling updateScreenRecordingSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_segment_oid", "}"), encodeURIComponent(String(screen_recording_segment_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingSegment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(segment || {}) : (segment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update screen recording settings
         * @param {number} storefront_oid
         * @param {ScreenRecordingSettings} settings Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingSettings: function (storefront_oid, settings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateScreenRecordingSettings.');
            }
            // verify required parameter 'settings' is not null or undefined
            if (settings === null || settings === undefined) {
                throw new RequiredError('settings', 'Required parameter settings was null or undefined when calling updateScreenRecordingSettings.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/settings"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags on a screen recording
         * @summary Update tags on a screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {ScreenRecordingTagsRequest} tags Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingTags: function (storefront_oid, screen_recording_uuid, tags, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateScreenRecordingTags.');
            }
            // verify required parameter 'screen_recording_uuid' is not null or undefined
            if (screen_recording_uuid === null || screen_recording_uuid === undefined) {
                throw new RequiredError('screen_recording_uuid', 'Required parameter screen_recording_uuid was null or undefined when calling updateScreenRecordingTags.');
            }
            // verify required parameter 'tags' is not null or undefined
            if (tags === null || tags === undefined) {
                throw new RequiredError('tags', 'Required parameter tags was null or undefined when calling updateScreenRecordingTags.');
            }
            var localVarPath = "/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("screen_recording_uuid", "}"), encodeURIComponent(String(screen_recording_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ScreenRecordingTagsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tags || {}) : (tags || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a transactional email
         * @summary Updates a transaction email object
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {TransactionEmail} transaction_email TransactionEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionEmail: function (storefront_oid, email_id, transaction_email, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefront_oid' is not null or undefined
            if (storefront_oid === null || storefront_oid === undefined) {
                throw new RequiredError('storefront_oid', 'Required parameter storefront_oid was null or undefined when calling updateTransactionEmail.');
            }
            // verify required parameter 'email_id' is not null or undefined
            if (email_id === null || email_id === undefined) {
                throw new RequiredError('email_id', 'Required parameter email_id was null or undefined when calling updateTransactionEmail.');
            }
            // verify required parameter 'transaction_email' is not null or undefined
            if (transaction_email === null || transaction_email === undefined) {
                throw new RequiredError('transaction_email', 'Required parameter transaction_email was null or undefined when calling updateTransactionEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}"
                .replace("{".concat("storefront_oid", "}"), encodeURIComponent(String(storefront_oid)))
                .replace("{".concat("email_id", "}"), encodeURIComponent(String(email_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransactionEmail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(transaction_email || {}) : (transaction_email || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Twilio account
         * @param {string} esp_twilio_uuid
         * @param {Twilio} twilio Twilio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTwilioAccount: function (esp_twilio_uuid, twilio, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'esp_twilio_uuid' is not null or undefined
            if (esp_twilio_uuid === null || esp_twilio_uuid === undefined) {
                throw new RequiredError('esp_twilio_uuid', 'Required parameter esp_twilio_uuid was null or undefined when calling updateTwilioAccount.');
            }
            // verify required parameter 'twilio' is not null or undefined
            if (twilio === null || twilio === undefined) {
                throw new RequiredError('twilio', 'Required parameter twilio was null or undefined when calling updateTwilioAccount.');
            }
            var localVarPath = "/storefront/twilio/accounts/{esp_twilio_uuid}"
                .replace("{".concat("esp_twilio_uuid", "}"), encodeURIComponent(String(esp_twilio_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Twilio" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(twilio || {}) : (twilio || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
         * @param {number} id
         * @param {FileManagerUploadRequest} upload_request UploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFsFile: function (id, upload_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling uploadFsFile.');
            }
            // verify required parameter 'upload_request' is not null or undefined
            if (upload_request === null || upload_request === undefined) {
                throw new RequiredError('upload_request', 'Required parameter upload_request was null or undefined when calling uploadFsFile.');
            }
            var localVarPath = "/storefront/{id}/fs/upload"
                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("FileManagerUploadRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(upload_request || {}) : (upload_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Validate AWS Event Ruler
         * @param {RulerValidationRequest} ruler_validate_request Ruler Validate Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateRuler: function (ruler_validate_request, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'ruler_validate_request' is not null or undefined
            if (ruler_validate_request === null || ruler_validate_request === undefined) {
                throw new RequiredError('ruler_validate_request', 'Required parameter ruler_validate_request was null or undefined when calling validateRuler.');
            }
            var localVarPath = "/storefront/ruler/validate";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RulerValidationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(ruler_validate_request || {}) : (ruler_validate_request || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.StorefrontApiFetchParamCreator = StorefrontApiFetchParamCreator;
/**
 * StorefrontApi - functional programming interface
 * @export
 */
var StorefrontApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Add to library
         * @param {AddLibraryItemRequest} add_library_request New library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToLibrary: function (add_library_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).addToLibrary(add_library_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Apply library item to storefront.
         * @param {ApplyLibraryItemRequest} apply_library_request New library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToStoreFront: function (apply_library_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).applyToStoreFront(apply_library_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Archive email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailList: function (storefront_oid, email_list_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).archiveEmailList(storefront_oid, email_list_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Archive email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).archiveEmailSegment(storefront_oid, email_segment_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Back populate email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {EmailFlowBackPopulateRequest} back_populate_request The request to back populate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backPopulateEmailFlow: function (storefront_oid, email_flow_uuid, back_populate_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).backPopulateEmailFlow(storefront_oid, email_flow_uuid, back_populate_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Check download of email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} email_segment_rebuild_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDownloadEmailSegment: function (storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).checkDownloadEmailSegment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Clone email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {number} [target_storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailCampaign: function (storefront_oid, email_campaign_uuid, target_storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).cloneEmailCampaign(storefront_oid, email_campaign_uuid, target_storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Clone email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {number} [target_storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailFlow: function (storefront_oid, email_flow_uuid, target_storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).cloneEmailFlow(storefront_oid, email_flow_uuid, target_storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain: function (domain, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).createEmailSendingDomain(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create email sending domain for various providers
         * @param {EmailDomain} email_domain EmailDomain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain2: function (email_domain, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).createEmailSendingDomain2(email_domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create file manager directory
         * @param {number} id
         * @param {string} [name]
         * @param {number} [parent_storefront_fs_directory_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFsDirectory: function (id, name, parent_storefront_fs_directory_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).createFsDirectory(id, name, parent_storefront_fs_directory_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create Twilio account
         * @param {Twilio} twilio Twilio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTwilioAccount: function (twilio, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).createTwilioAccount(twilio, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email campaignFolder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete communication sequence stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCommseqStat: function (storefront_oid, commseq_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailCommseqStat(storefront_oid, commseq_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailEmail: function (storefront_oid, commseq_email_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailEmail(storefront_oid, commseq_email_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email flowFolder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailFlowFolder(storefront_oid, email_flow_folder_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email list customer
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListCustomer: function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailListCustomer(storefront_oid, email_list_uuid, email_customer_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email ListSegmentFolder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailPostcard: function (storefront_oid, commseq_postcard_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailPostcard(storefront_oid, commseq_postcard_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary delete email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailSendingDomain: function (domain, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteEmailSendingDomain(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete experiment
         * @param {number} storefront_oid
         * @param {number} storefront_experiment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: function (storefront_oid, storefront_experiment_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteExperiment(storefront_oid, storefront_experiment_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete file manager directory
         * @param {number} id
         * @param {number} [parent_storefront_fs_directory_oid]
         * @param {number} [storefront_fs_file_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFsFile: function (id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteFsFile(id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete screen recording heatmap
         * @summary Delete screen recording heatmap
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapReset} query Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHeatmap: function (storefront_oid, query, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteHeatmap(storefront_oid, query, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete library item
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItem: function (library_item_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteLibraryItem(library_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete all published versions for a library item, including anything in review.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItemPublishedVersions: function (library_item_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteLibraryItemPublishedVersions(library_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary delete Twilio account
         * @param {string} esp_twilio_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTwilioAccount: function (esp_twilio_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).deleteTwilioAccount(esp_twilio_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Duplicate library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateLibraryItem: function (library_item_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).duplicateLibraryItem(library_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update favorite flag on screen recording
         * @summary Update favorite flag on screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).favoriteScreenRecording(storefront_oid, screen_recording_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Obtain lat/long for an address
         * @param {number} storefront_oid
         * @param {GeocodeRequest} geocode_request geocode request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodeAddress: function (storefront_oid, geocode_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).geocodeAddress(storefront_oid, geocode_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of all the countries
         * @summary Get countries
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getCountries(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetches a temporary authentication token for the editor
         * @summary Gets editor token
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorToken: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEditorToken(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication base templates
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailBaseTemplates: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailBaseTemplates(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaign: function (storefront_oid, email_campaign_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCampaign(storefront_oid, email_campaign_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignFolders: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCampaignFolders(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign screenshots
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignScreenshots: function (storefront_oid, email_campaign_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCampaignScreenshots(storefront_oid, email_campaign_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaigns
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaigns: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCampaigns(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaigns with stats
         * @param {number} storefront_oid
         * @param {string} stat_days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignsWithStats: function (storefront_oid, stat_days, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCampaignsWithStats(storefront_oid, stat_days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email commseq
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseq: function (storefront_oid, commseq_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseq(storefront_oid, commseq_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence emails stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqEmailStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqEmailStats(storefront_oid, commseq_uuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence postcard stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqPostcardStats(storefront_oid, commseq_uuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication postcard tracking
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardTracking: function (storefront_oid, commseq_postcard_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqPostcardTracking(storefront_oid, commseq_postcard_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email commseq rate limiters
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqRateLimiters: function (storefront_oid, commseq_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqRateLimiters(storefront_oid, commseq_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence sms stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatSmsSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqSmsStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqSmsStats(storefront_oid, commseq_uuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get communication sequence stats overall
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStatOverall: function (storefront_oid, commseq_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqStatOverall(storefront_oid, commseq_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence step stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStepStatRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqStepStats(storefront_oid, commseq_uuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence customers waiting at each requested step
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepWaiting: function (storefront_oid, commseq_uuid, waitingRequest, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqStepWaiting(storefront_oid, commseq_uuid, waitingRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email webhook editor values
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqWebhookEditorValues: function (storefront_oid, commseq_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqWebhookEditorValues(storefront_oid, commseq_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email commseqs
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqs: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCommseqs(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get customers editor URL
         * @param {number} storefront_oid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomerEditorUrl: function (storefront_oid, email_customer_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCustomerEditorUrl(storefront_oid, email_customer_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email customers
         * @param {number} storefront_oid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {string} [searchEmailPrefix]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomers: function (storefront_oid, pageNumber, pageSize, searchEmailPrefix, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailCustomers(storefront_oid, pageNumber, pageSize, searchEmailPrefix, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email dashboard activity
         * @param {number} storefront_oid
         * @param {number} [last_records]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardActivity: function (storefront_oid, last_records, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailDashboardActivity(storefront_oid, last_records, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get dashboard stats
         * @param {number} storefront_oid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardStats: function (storefront_oid, days, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailDashboardStats(storefront_oid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email dispatch logs
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDispatchLogs: function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailDispatchLogs(storefront_oid, commseq_uuid, commseq_step_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmail: function (storefront_oid, commseq_email_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailEmail(storefront_oid, commseq_email_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email email clicks
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {string} commseq_email_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailClicks: function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailEmailClicks(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email order customer editor url
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {string} order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailCustomerEditorUrl: function (storefront_oid, commseq_email_uuid, order_id, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailEmailCustomerEditorUrl(storefront_oid, commseq_email_uuid, order_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email email orders
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {string} commseq_email_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailOrders: function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailEmailOrders(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email emails
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmails: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailEmails(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email emails multiple
         * @param {number} storefront_oid
         * @param {EmailCommseqEmailsRequest} email_commseq_emails_request Request of email uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailsMultiple: function (storefront_oid, email_commseq_emails_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailEmailsMultiple(storefront_oid, email_commseq_emails_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlow: function (storefront_oid, email_flow_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailFlow(storefront_oid, email_flow_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flow folder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailFlowFolder(storefront_oid, email_flow_folder_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flow folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowFolders: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailFlowFolders(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flow screenshots
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowScreenshots: function (storefront_oid, email_flow_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailFlowScreenshots(storefront_oid, email_flow_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flows
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlows: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailFlows(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email globalsettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailGlobalSettings: function (options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailGlobalSettings(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailList: function (storefront_oid, email_list_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailList(storefront_oid, email_list_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email list customer editor url
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomerEditorUrl: function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailListCustomerEditorUrl(storefront_oid, email_list_uuid, email_customer_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email list customers
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomers: function (storefront_oid, email_list_uuid, pageNumber, pageSize, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailListCustomers(storefront_oid, email_list_uuid, pageNumber, pageSize, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListSegmentFolders: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailListSegmentFolders(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email lists
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailLists(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email performance
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPerformance: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailPerformance(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email plan
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlan: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailPlan(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcard: function (storefront_oid, commseq_postcard_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailPostcard(storefront_oid, commseq_postcard_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email postcards
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcards: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailPostcards(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email postcards multiple
         * @param {number} storefront_oid
         * @param {EmailCommseqPostcardsRequest} email_commseq_postcards_request Request of postcard uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcardsMultiple: function (storefront_oid, email_commseq_postcards_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailPostcardsMultiple(storefront_oid, email_commseq_postcards_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSegment(storefront_oid, email_segment_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segment customers editor URL
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomerEditorUrl: function (storefront_oid, email_segment_uuid, email_customer_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSegmentCustomerEditorUrl(storefront_oid, email_segment_uuid, email_customer_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segment customers
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomers: function (storefront_oid, email_segment_uuid, pageNumber, pageSize, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSegmentCustomers(storefront_oid, email_segment_uuid, pageNumber, pageSize, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegments: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSegments(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sending domain
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomain: function (domain, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSendingDomain(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sending domain status
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomainStatus: function (domain, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSendingDomainStatus(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomains: function (options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSendingDomains(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email settings
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSettings: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSettings(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sms orders
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSmsOrders: function (storefront_oid, commseq_uuid, commseq_step_uuid, days, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailSmsOrders(storefront_oid, commseq_uuid, commseq_step_uuid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email template
         * @param {number} storefront_oid
         * @param {number} email_template_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: function (storefront_oid, email_template_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailTemplate(storefront_oid, email_template_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email templates
         * @param {number} storefront_oid
         * @param {string} [trigger_type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplates: function (storefront_oid, trigger_type, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailTemplates(storefront_oid, trigger_type, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get a list of third party email providers
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailThirdPartyProviders: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getEmailThirdPartyProviders(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get experiments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getExperiments(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get file manager directory
         * @param {number} id
         * @param {string} [path]
         * @param {number} [storefront_fs_directory_oid]
         * @param {number} [storefront_theme_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFsDirectory: function (id, path, storefront_fs_directory_oid, storefront_theme_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getFsDirectory(id, path, storefront_fs_directory_oid, storefront_theme_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get screen recording heatmap
         * @summary Get screen recording heatmap
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapRequest} query Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeatmap: function (storefront_oid, query, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getHeatmap(storefront_oid, query, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get screen recording heatmap index
         * @summary Get screen recording heatmap index
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapIndexRequest} query Query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeatmapIndex: function (storefront_oid, query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getHeatmapIndex(storefront_oid, query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of property names for a given property type
         * @summary Get histogram property names
         * @param {number} storefront_oid
         * @param {string} [property_type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyNames: function (storefront_oid, property_type, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getHistogramPropertyNames(storefront_oid, property_type, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of property values for a given property name and type
         * @summary Get histogram property values
         * @param {number} storefront_oid
         * @param {string} [property_name]
         * @param {string} [property_type]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyValues: function (storefront_oid, property_name, property_type, limit, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getHistogramPropertyValues(storefront_oid, property_name, property_type, limit, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get library values used to populate drop down boxes for filtering.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryFilterValues: function (options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getLibraryFilterValues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItem: function (library_item_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getLibraryItem(library_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get all published versions for a library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItemPublishedVersions: function (library_item_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getLibraryItemPublishedVersions(library_item_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get screen recording
         * @summary Get screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecording(storefront_oid, screen_recording_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get screen recording page view data
         * @summary Get screen recording page view data
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {string} screen_recording_page_view_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingPageViewData: function (storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingPageViewData(storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get screen recording segments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSegments: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingSegments(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get screen recording settings
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSettings: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingSettings(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get tags used by screen recording
         * @summary Get tags used by screen recording
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingTags: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingTags(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Query screen recordings
         * @summary Query screen recordings
         * @param {number} storefront_oid
         * @param {ScreenRecordingQueryRequest} query Query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingsByQuery: function (storefront_oid, query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingsByQuery(storefront_oid, query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get screen recordings by segment
         * @summary Get screen recordings by segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingsBySegment: function (storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getScreenRecordingsBySegment(storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreFrontPricingTiers: function (_expand, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getStoreFrontPricingTiers(_expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get storefronts (internal use only for security reasons)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreFronts: function (options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getStoreFronts(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get thumbnail parameters
         * @param {ThumbnailParametersRequest} thumbnail_parameters Thumbnail Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailParameters: function (thumbnail_parameters, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getThumbnailParameters(thumbnail_parameters, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetch a transactional email
         * @summary Gets a transaction email object
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmail: function (storefront_oid, email_id, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getTransactionEmail(storefront_oid, email_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of all transactional emails and return back just their names
         * @summary Gets a list of transaction email names
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailList: function (storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getTransactionEmailList(storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get transactional email screenshots
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailScreenshots: function (storefront_oid, email_id, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getTransactionEmailScreenshots(storefront_oid, email_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get Twilio account
         * @param {string} esp_twilio_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwilioAccount: function (esp_twilio_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getTwilioAccount(esp_twilio_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get all Twilio accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwilioAccounts: function (options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getTwilioAccounts(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
         * @param {number} id
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFsFileUrl: function (id, extension, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).getUploadFsFileUrl(id, extension, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Globally unsubscribe a customer
         * @param {number} storefront_oid
         * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalUnsubscribe: function (storefront_oid, unsubscribe, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).globalUnsubscribe(storefront_oid, unsubscribe, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Import a third party provider list
         * @param {number} storefront_oid
         * @param {EmailThirdPartyListImportRequest} import_request lists to import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importEmailThirdPartyProviderList: function (storefront_oid, import_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).importEmailThirdPartyProviderList(storefront_oid, import_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email campaign
         * @param {number} storefront_oid
         * @param {EmailCampaign} email_campaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaign: function (storefront_oid, email_campaign, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailCampaign(storefront_oid, email_campaign, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email campaign folder
         * @param {number} storefront_oid
         * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaignFolder: function (storefront_oid, email_campaign_folder, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailCampaignFolder(storefront_oid, email_campaign_folder, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email commseq
         * @param {number} storefront_oid
         * @param {EmailCommseq} email_commseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCommseq: function (storefront_oid, email_commseq, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailCommseq(storefront_oid, email_commseq, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email email
         * @param {number} storefront_oid
         * @param {EmailCommseqEmail} email_commseq_email Email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailEmail: function (storefront_oid, email_commseq_email, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailEmail(storefront_oid, email_commseq_email, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email flow
         * @param {number} storefront_oid
         * @param {EmailFlow} email_flow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlow: function (storefront_oid, email_flow, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailFlow(storefront_oid, email_flow, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email flow folder
         * @param {number} storefront_oid
         * @param {EmailFlowFolder} email_flow_folder Email flow folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlowFolder: function (storefront_oid, email_flow_folder, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailFlowFolder(storefront_oid, email_flow_folder, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email list
         * @param {number} storefront_oid
         * @param {EmailList} email_list Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailList: function (storefront_oid, email_list, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailList(storefront_oid, email_list, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email campaign folder
         * @param {number} storefront_oid
         * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailListSegmentFolder(storefront_oid, email_list_segment_folder, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email postcard
         * @param {number} storefront_oid
         * @param {EmailCommseqPostcard} email_commseq_postcard Email postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailPostcard: function (storefront_oid, email_commseq_postcard, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailPostcard(storefront_oid, email_commseq_postcard, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email segment
         * @param {number} storefront_oid
         * @param {EmailSegment} email_segment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailSegment: function (storefront_oid, email_segment, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertEmailSegment(storefront_oid, email_segment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert screen recording segment
         * @param {number} storefront_oid
         * @param {ScreenRecordingSegment} segment Segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertScreenRecordingSegment: function (storefront_oid, segment, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertScreenRecordingSegment(storefront_oid, segment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a page content attribute, creating it new if it does not yet exist.
         * @summary Upsert a page content attribute
         * @param {StoreFrontPageContentAttribute} page_attribute Page content attribute to upsert
         * @param {number} storefront_oid
         * @param {number} page_oid The page oid to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUpdatePageContentAttribute: function (page_attribute, storefront_oid, page_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).insertUpdatePageContentAttribute(page_attribute, storefront_oid, page_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Prepare download of email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareDownloadEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).prepareDownloadEmailSegment(storefront_oid, email_segment_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Publish library item.
         * @param {number} library_item_oid
         * @param {PublishLibraryItemRequest} publish_library_request Publish library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishLibraryItem: function (library_item_oid, publish_library_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).publishLibraryItem(library_item_oid, publish_library_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Purchase public library item, which creates a copy of the item in your personal code library
         * @param {number} library_item_oid
         * @param {number} [storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLibraryItem: function (library_item_oid, storefront_oid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).purchaseLibraryItem(library_item_oid, storefront_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Release email communication sequence customers waiting at the specified step
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseEmailCommseqStepWaiting: function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).releaseEmailCommseqStepWaiting(storefront_oid, commseq_uuid, commseq_step_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Reset email commseq rate limiters (only callable by UltraCart Support)
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmailCommseqRateLimiters: function (storefront_oid, commseq_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).resetEmailCommseqRateLimiters(storefront_oid, commseq_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Request a review of an email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_review_request Email commseq email review request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        review: function (storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).review(storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Searches for all matching values
         * @param {string} [category]
         * @param {string} [matches]
         * @param {string} [storefront_oid]
         * @param {number} [max_hits]
         * @param {string} [subcategory]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (category, matches, storefront_oid, max_hits, subcategory, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).search(category, matches, storefront_oid, max_hits, subcategory, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookup_request LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (lookup_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).search2(lookup_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Search email list customers
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailListCustomers: function (storefront_oid, email_list_uuid, startsWith, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).searchEmailListCustomers(storefront_oid, email_list_uuid, startsWith, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Search email segment customers
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailSegmentCustomers: function (storefront_oid, email_segment_uuid, startsWith, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).searchEmailSegmentCustomers(storefront_oid, email_segment_uuid, startsWith, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLibraryItems: function (item_query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).searchLibraryItems(item_query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPublishedItems: function (item_query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).searchPublishedItems(item_query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items needing review or rejected
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchReviewItems: function (item_query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).searchReviewItems(item_query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSharedItems: function (item_query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).searchSharedItems(item_query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Send email test
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_test_request Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTest: function (storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).sendEmailTest(storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Send postcard test
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {EmailCommseqPostcardSendTestRequest} email_commseq_postcard_test_request Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcardTest: function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).sendPostcardTest(storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Send SMS test
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {EmailCommseqSmsSendTestRequest} email_commseq_sms_test_request Email commseq sms test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsTest: function (storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).sendSmsTest(storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Send webhook test
         * @param {number} storefront_oid
         * @param {EmailCommseqWebhookSendTestRequest} email_commseq_webhook_test_request Email commseq webhook test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendWebhookTest: function (storefront_oid, email_commseq_webhook_test_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).sendWebhookTest(storefront_oid, email_commseq_webhook_test_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Sequence test
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailCommseqSequenceTestRequest} email_commseq_sequence_test_request Commseq test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sequenceTest: function (storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).sequenceTest(storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Start email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailCampaign: function (storefront_oid, email_campaign_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).startEmailCampaign(storefront_oid, email_campaign_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Subscribe customers to email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {Array<EmailCustomer>} customers Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEmailList: function (storefront_oid, email_list_uuid, customers, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).subscribeToEmailList(storefront_oid, email_list_uuid, customers, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Sunset email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sunsetEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).sunsetEmailSegment(storefront_oid, email_segment_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove favorite flag on screen recording
         * @summary Remove favorite flag on screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).unfavoriteScreenRecording(storefront_oid, screen_recording_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {EmailCampaign} email_campaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaign: function (storefront_oid, email_campaign_uuid, email_campaign, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailCampaign(storefront_oid, email_campaign_uuid, email_campaign, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email commseq
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailCommseq} email_commseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCommseq: function (storefront_oid, commseq_uuid, email_commseq, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailCommseq(storefront_oid, commseq_uuid, email_commseq, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email customer
         * @param {number} storefront_oid
         * @param {string} email_customer_uuid
         * @param {EmailCustomer} email_customer Email customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCustomer: function (storefront_oid, email_customer_uuid, email_customer, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailCustomer(storefront_oid, email_customer_uuid, email_customer, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmail} email_commseq_email Email commseq email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailEmail: function (storefront_oid, commseq_email_uuid, email_commseq_email, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailEmail(storefront_oid, commseq_email_uuid, email_commseq_email, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {EmailFlow} email_flow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlow: function (storefront_oid, email_flow_uuid, email_flow, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailFlow(storefront_oid, email_flow_uuid, email_flow, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email flow folder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {EmailFlowFolder} email_flow_folder Email flow folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, email_flow_folder, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailFlowFolder(storefront_oid, email_flow_folder_uuid, email_flow_folder, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email global settings
         * @param {EmailGlobalSettings} global_settings global settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailGlobalSettings: function (global_settings, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailGlobalSettings(global_settings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {EmailList} email_list Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailList: function (storefront_oid, email_list_uuid, email_list, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailList(storefront_oid, email_list_uuid, email_list, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email plan
         * @param {number} storefront_oid
         * @param {EmailPlan} settings plan request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPlan: function (storefront_oid, settings, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailPlan(storefront_oid, settings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {EmailCommseqPostcard} email_commseq_postcard Email commseq postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPostcard: function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailPostcard(storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {EmailSegment} email_segment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSegment: function (storefront_oid, email_segment_uuid, email_segment, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailSegment(storefront_oid, email_segment_uuid, email_segment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email sending domain
         * @param {string} domain
         * @param {EmailDomain} email_domain EmailDomain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSendingDomain: function (domain, email_domain, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailSendingDomain(domain, email_domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email settings
         * @param {number} storefront_oid
         * @param {EmailSettings} settings settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSettings: function (storefront_oid, settings, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateEmailSettings(storefront_oid, settings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update experiment
         * @param {number} storefront_oid
         * @param {number} storefront_experiment_oid
         * @param {Experiment} experiment Experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: function (storefront_oid, storefront_experiment_oid, experiment, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateExperiment(storefront_oid, storefront_experiment_oid, experiment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update library item. Note that only certain fields may be updated via this method.
         * @param {number} library_item_oid
         * @param {LibraryItem} library_item Library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryItem: function (library_item_oid, library_item, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateLibraryItem(library_item_oid, library_item, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update merchant notes on a screen recording
         * @summary Update merchant notes on a screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {ScreenRecordingMerchantNotesRequest} merchant_notes_request Merchant Notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingMerchantNotes: function (storefront_oid, screen_recording_uuid, merchant_notes_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateScreenRecordingMerchantNotes(storefront_oid, screen_recording_uuid, merchant_notes_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {ScreenRecordingSegment} segment Segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, segment, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, segment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update screen recording settings
         * @param {number} storefront_oid
         * @param {ScreenRecordingSettings} settings Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingSettings: function (storefront_oid, settings, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateScreenRecordingSettings(storefront_oid, settings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update tags on a screen recording
         * @summary Update tags on a screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {ScreenRecordingTagsRequest} tags Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingTags: function (storefront_oid, screen_recording_uuid, tags, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateScreenRecordingTags(storefront_oid, screen_recording_uuid, tags, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a transactional email
         * @summary Updates a transaction email object
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {TransactionEmail} transaction_email TransactionEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionEmail: function (storefront_oid, email_id, transaction_email, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateTransactionEmail(storefront_oid, email_id, transaction_email, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update Twilio account
         * @param {string} esp_twilio_uuid
         * @param {Twilio} twilio Twilio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTwilioAccount: function (esp_twilio_uuid, twilio, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).updateTwilioAccount(esp_twilio_uuid, twilio, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
         * @param {number} id
         * @param {FileManagerUploadRequest} upload_request UploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFsFile: function (id, upload_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).uploadFsFile(id, upload_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Validate AWS Event Ruler
         * @param {RulerValidationRequest} ruler_validate_request Ruler Validate Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateRuler: function (ruler_validate_request, options) {
            var localVarFetchArgs = (0, exports.StorefrontApiFetchParamCreator)(configuration).validateRuler(ruler_validate_request, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.StorefrontApiFp = StorefrontApiFp;
/**
 * StorefrontApi - factory interface
 * @export
 */
var StorefrontApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Add to library
         * @param {AddLibraryItemRequest} add_library_request New library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToLibrary: function (add_library_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).addToLibrary(add_library_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Apply library item to storefront.
         * @param {ApplyLibraryItemRequest} apply_library_request New library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToStoreFront: function (apply_library_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).applyToStoreFront(apply_library_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Archive email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailList: function (storefront_oid, email_list_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).archiveEmailList(storefront_oid, email_list_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Archive email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).archiveEmailSegment(storefront_oid, email_segment_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Back populate email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {EmailFlowBackPopulateRequest} back_populate_request The request to back populate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backPopulateEmailFlow: function (storefront_oid, email_flow_uuid, back_populate_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).backPopulateEmailFlow(storefront_oid, email_flow_uuid, back_populate_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Check download of email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} email_segment_rebuild_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDownloadEmailSegment: function (storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).checkDownloadEmailSegment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Clone email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {number} [target_storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailCampaign: function (storefront_oid, email_campaign_uuid, target_storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).cloneEmailCampaign(storefront_oid, email_campaign_uuid, target_storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Clone email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {number} [target_storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailFlow: function (storefront_oid, email_flow_uuid, target_storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).cloneEmailFlow(storefront_oid, email_flow_uuid, target_storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain: function (domain, options) {
            return (0, exports.StorefrontApiFp)(configuration).createEmailSendingDomain(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create email sending domain for various providers
         * @param {EmailDomain} email_domain EmailDomain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain2: function (email_domain, options) {
            return (0, exports.StorefrontApiFp)(configuration).createEmailSendingDomain2(email_domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create file manager directory
         * @param {number} id
         * @param {string} [name]
         * @param {number} [parent_storefront_fs_directory_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFsDirectory: function (id, name, parent_storefront_fs_directory_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).createFsDirectory(id, name, parent_storefront_fs_directory_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create Twilio account
         * @param {Twilio} twilio Twilio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTwilioAccount: function (twilio, options) {
            return (0, exports.StorefrontApiFp)(configuration).createTwilioAccount(twilio, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email campaignFolder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete communication sequence stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCommseqStat: function (storefront_oid, commseq_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailCommseqStat(storefront_oid, commseq_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailEmail: function (storefront_oid, commseq_email_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailEmail(storefront_oid, commseq_email_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email flowFolder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailFlowFolder(storefront_oid, email_flow_folder_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email list customer
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListCustomer: function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailListCustomer(storefront_oid, email_list_uuid, email_customer_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email ListSegmentFolder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailPostcard: function (storefront_oid, commseq_postcard_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailPostcard(storefront_oid, commseq_postcard_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary delete email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailSendingDomain: function (domain, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteEmailSendingDomain(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete experiment
         * @param {number} storefront_oid
         * @param {number} storefront_experiment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: function (storefront_oid, storefront_experiment_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteExperiment(storefront_oid, storefront_experiment_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete file manager directory
         * @param {number} id
         * @param {number} [parent_storefront_fs_directory_oid]
         * @param {number} [storefront_fs_file_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFsFile: function (id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteFsFile(id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options)(fetch, basePath);
        },
        /**
         * Delete screen recording heatmap
         * @summary Delete screen recording heatmap
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapReset} query Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHeatmap: function (storefront_oid, query, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteHeatmap(storefront_oid, query, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete library item
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItem: function (library_item_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteLibraryItem(library_item_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete all published versions for a library item, including anything in review.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItemPublishedVersions: function (library_item_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteLibraryItemPublishedVersions(library_item_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary delete Twilio account
         * @param {string} esp_twilio_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTwilioAccount: function (esp_twilio_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).deleteTwilioAccount(esp_twilio_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Duplicate library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateLibraryItem: function (library_item_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).duplicateLibraryItem(library_item_oid, options)(fetch, basePath);
        },
        /**
         * Update favorite flag on screen recording
         * @summary Update favorite flag on screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).favoriteScreenRecording(storefront_oid, screen_recording_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Obtain lat/long for an address
         * @param {number} storefront_oid
         * @param {GeocodeRequest} geocode_request geocode request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodeAddress: function (storefront_oid, geocode_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).geocodeAddress(storefront_oid, geocode_request, options)(fetch, basePath);
        },
        /**
         * Obtain a list of all the countries
         * @summary Get countries
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getCountries(storefront_oid, options)(fetch, basePath);
        },
        /**
         * Fetches a temporary authentication token for the editor
         * @summary Gets editor token
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorToken: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEditorToken(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication base templates
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailBaseTemplates: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailBaseTemplates(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaign: function (storefront_oid, email_campaign_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCampaign(storefront_oid, email_campaign_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignFolders: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCampaignFolders(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign screenshots
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignScreenshots: function (storefront_oid, email_campaign_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCampaignScreenshots(storefront_oid, email_campaign_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaigns
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaigns: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCampaigns(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaigns with stats
         * @param {number} storefront_oid
         * @param {string} stat_days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignsWithStats: function (storefront_oid, stat_days, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCampaignsWithStats(storefront_oid, stat_days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email commseq
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseq: function (storefront_oid, commseq_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseq(storefront_oid, commseq_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence emails stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqEmailStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqEmailStats(storefront_oid, commseq_uuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence postcard stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqPostcardStats(storefront_oid, commseq_uuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication postcard tracking
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardTracking: function (storefront_oid, commseq_postcard_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqPostcardTracking(storefront_oid, commseq_postcard_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email commseq rate limiters
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqRateLimiters: function (storefront_oid, commseq_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqRateLimiters(storefront_oid, commseq_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence sms stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStatSmsSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqSmsStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqSmsStats(storefront_oid, commseq_uuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get communication sequence stats overall
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStatOverall: function (storefront_oid, commseq_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqStatOverall(storefront_oid, commseq_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence step stats
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStepStatRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepStats: function (storefront_oid, commseq_uuid, statsRequest, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqStepStats(storefront_oid, commseq_uuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence customers waiting at each requested step
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepWaiting: function (storefront_oid, commseq_uuid, waitingRequest, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqStepWaiting(storefront_oid, commseq_uuid, waitingRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email webhook editor values
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqWebhookEditorValues: function (storefront_oid, commseq_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqWebhookEditorValues(storefront_oid, commseq_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email commseqs
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqs: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCommseqs(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get customers editor URL
         * @param {number} storefront_oid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomerEditorUrl: function (storefront_oid, email_customer_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCustomerEditorUrl(storefront_oid, email_customer_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email customers
         * @param {number} storefront_oid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {string} [searchEmailPrefix]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomers: function (storefront_oid, pageNumber, pageSize, searchEmailPrefix, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailCustomers(storefront_oid, pageNumber, pageSize, searchEmailPrefix, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email dashboard activity
         * @param {number} storefront_oid
         * @param {number} [last_records]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardActivity: function (storefront_oid, last_records, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailDashboardActivity(storefront_oid, last_records, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get dashboard stats
         * @param {number} storefront_oid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardStats: function (storefront_oid, days, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailDashboardStats(storefront_oid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email dispatch logs
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDispatchLogs: function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailDispatchLogs(storefront_oid, commseq_uuid, commseq_step_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmail: function (storefront_oid, commseq_email_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailEmail(storefront_oid, commseq_email_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email email clicks
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {string} commseq_email_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailClicks: function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailEmailClicks(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email order customer editor url
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {string} order_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailCustomerEditorUrl: function (storefront_oid, commseq_email_uuid, order_id, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailEmailCustomerEditorUrl(storefront_oid, commseq_email_uuid, order_id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email email orders
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {string} commseq_email_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailOrders: function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailEmailOrders(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email emails
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmails: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailEmails(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email emails multiple
         * @param {number} storefront_oid
         * @param {EmailCommseqEmailsRequest} email_commseq_emails_request Request of email uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailsMultiple: function (storefront_oid, email_commseq_emails_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailEmailsMultiple(storefront_oid, email_commseq_emails_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlow: function (storefront_oid, email_flow_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailFlow(storefront_oid, email_flow_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flow folder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailFlowFolder(storefront_oid, email_flow_folder_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flow folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowFolders: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailFlowFolders(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flow screenshots
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowScreenshots: function (storefront_oid, email_flow_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailFlowScreenshots(storefront_oid, email_flow_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flows
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlows: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailFlows(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email globalsettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailGlobalSettings: function (options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailGlobalSettings(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailList: function (storefront_oid, email_list_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailList(storefront_oid, email_list_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email list customer editor url
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomerEditorUrl: function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailListCustomerEditorUrl(storefront_oid, email_list_uuid, email_customer_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email list customers
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomers: function (storefront_oid, email_list_uuid, pageNumber, pageSize, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailListCustomers(storefront_oid, email_list_uuid, pageNumber, pageSize, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign folders
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListSegmentFolders: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailListSegmentFolders(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email lists
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailLists(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email performance
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPerformance: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailPerformance(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email plan
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlan: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailPlan(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcard: function (storefront_oid, commseq_postcard_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailPostcard(storefront_oid, commseq_postcard_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email postcards
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcards: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailPostcards(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email postcards multiple
         * @param {number} storefront_oid
         * @param {EmailCommseqPostcardsRequest} email_commseq_postcards_request Request of postcard uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcardsMultiple: function (storefront_oid, email_commseq_postcards_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailPostcardsMultiple(storefront_oid, email_commseq_postcards_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSegment(storefront_oid, email_segment_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segment customers editor URL
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} email_customer_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomerEditorUrl: function (storefront_oid, email_segment_uuid, email_customer_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSegmentCustomerEditorUrl(storefront_oid, email_segment_uuid, email_customer_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segment customers
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomers: function (storefront_oid, email_segment_uuid, pageNumber, pageSize, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSegmentCustomers(storefront_oid, email_segment_uuid, pageNumber, pageSize, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegments: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSegments(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sending domain
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomain: function (domain, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSendingDomain(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sending domain status
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomainStatus: function (domain, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSendingDomainStatus(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomains: function (options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSendingDomains(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email settings
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSettings: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSettings(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sms orders
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSmsOrders: function (storefront_oid, commseq_uuid, commseq_step_uuid, days, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailSmsOrders(storefront_oid, commseq_uuid, commseq_step_uuid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email template
         * @param {number} storefront_oid
         * @param {number} email_template_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: function (storefront_oid, email_template_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailTemplate(storefront_oid, email_template_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email templates
         * @param {number} storefront_oid
         * @param {string} [trigger_type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplates: function (storefront_oid, trigger_type, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailTemplates(storefront_oid, trigger_type, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a list of third party email providers
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailThirdPartyProviders: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getEmailThirdPartyProviders(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get experiments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getExperiments(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get file manager directory
         * @param {number} id
         * @param {string} [path]
         * @param {number} [storefront_fs_directory_oid]
         * @param {number} [storefront_theme_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFsDirectory: function (id, path, storefront_fs_directory_oid, storefront_theme_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getFsDirectory(id, path, storefront_fs_directory_oid, storefront_theme_oid, options)(fetch, basePath);
        },
        /**
         * Get screen recording heatmap
         * @summary Get screen recording heatmap
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapRequest} query Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeatmap: function (storefront_oid, query, options) {
            return (0, exports.StorefrontApiFp)(configuration).getHeatmap(storefront_oid, query, options)(fetch, basePath);
        },
        /**
         * Get screen recording heatmap index
         * @summary Get screen recording heatmap index
         * @param {number} storefront_oid
         * @param {ScreenRecordingHeatmapIndexRequest} query Query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeatmapIndex: function (storefront_oid, query, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).getHeatmapIndex(storefront_oid, query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Obtain a list of property names for a given property type
         * @summary Get histogram property names
         * @param {number} storefront_oid
         * @param {string} [property_type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyNames: function (storefront_oid, property_type, options) {
            return (0, exports.StorefrontApiFp)(configuration).getHistogramPropertyNames(storefront_oid, property_type, options)(fetch, basePath);
        },
        /**
         * Obtain a list of property values for a given property name and type
         * @summary Get histogram property values
         * @param {number} storefront_oid
         * @param {string} [property_name]
         * @param {string} [property_type]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyValues: function (storefront_oid, property_name, property_type, limit, options) {
            return (0, exports.StorefrontApiFp)(configuration).getHistogramPropertyValues(storefront_oid, property_name, property_type, limit, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get library values used to populate drop down boxes for filtering.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryFilterValues: function (options) {
            return (0, exports.StorefrontApiFp)(configuration).getLibraryFilterValues(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItem: function (library_item_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getLibraryItem(library_item_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all published versions for a library item.
         * @param {number} library_item_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItemPublishedVersions: function (library_item_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getLibraryItemPublishedVersions(library_item_oid, options)(fetch, basePath);
        },
        /**
         * Get screen recording
         * @summary Get screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecording(storefront_oid, screen_recording_uuid, options)(fetch, basePath);
        },
        /**
         * Get screen recording page view data
         * @summary Get screen recording page view data
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {string} screen_recording_page_view_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingPageViewData: function (storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingPageViewData(storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get screen recording segments
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSegments: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingSegments(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get screen recording settings
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingSettings: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingSettings(storefront_oid, options)(fetch, basePath);
        },
        /**
         * Get tags used by screen recording
         * @summary Get tags used by screen recording
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingTags: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingTags(storefront_oid, options)(fetch, basePath);
        },
        /**
         * Query screen recordings
         * @summary Query screen recordings
         * @param {number} storefront_oid
         * @param {ScreenRecordingQueryRequest} query Query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingsByQuery: function (storefront_oid, query, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingsByQuery(storefront_oid, query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Get screen recordings by segment
         * @summary Get screen recordings by segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreenRecordingsBySegment: function (storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).getScreenRecordingsBySegment(storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreFrontPricingTiers: function (_expand, options) {
            return (0, exports.StorefrontApiFp)(configuration).getStoreFrontPricingTiers(_expand, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get storefronts (internal use only for security reasons)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreFronts: function (options) {
            return (0, exports.StorefrontApiFp)(configuration).getStoreFronts(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get thumbnail parameters
         * @param {ThumbnailParametersRequest} thumbnail_parameters Thumbnail Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailParameters: function (thumbnail_parameters, options) {
            return (0, exports.StorefrontApiFp)(configuration).getThumbnailParameters(thumbnail_parameters, options)(fetch, basePath);
        },
        /**
         * Fetch a transactional email
         * @summary Gets a transaction email object
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmail: function (storefront_oid, email_id, options) {
            return (0, exports.StorefrontApiFp)(configuration).getTransactionEmail(storefront_oid, email_id, options)(fetch, basePath);
        },
        /**
         * Obtain a list of all transactional emails and return back just their names
         * @summary Gets a list of transaction email names
         * @param {number} storefront_oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailList: function (storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getTransactionEmailList(storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get transactional email screenshots
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailScreenshots: function (storefront_oid, email_id, options) {
            return (0, exports.StorefrontApiFp)(configuration).getTransactionEmailScreenshots(storefront_oid, email_id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get Twilio account
         * @param {string} esp_twilio_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwilioAccount: function (esp_twilio_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).getTwilioAccount(esp_twilio_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get all Twilio accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTwilioAccounts: function (options) {
            return (0, exports.StorefrontApiFp)(configuration).getTwilioAccounts(options)(fetch, basePath);
        },
        /**
         *
         * @summary Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
         * @param {number} id
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFsFileUrl: function (id, extension, options) {
            return (0, exports.StorefrontApiFp)(configuration).getUploadFsFileUrl(id, extension, options)(fetch, basePath);
        },
        /**
         *
         * @summary Globally unsubscribe a customer
         * @param {number} storefront_oid
         * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalUnsubscribe: function (storefront_oid, unsubscribe, options) {
            return (0, exports.StorefrontApiFp)(configuration).globalUnsubscribe(storefront_oid, unsubscribe, options)(fetch, basePath);
        },
        /**
         *
         * @summary Import a third party provider list
         * @param {number} storefront_oid
         * @param {EmailThirdPartyListImportRequest} import_request lists to import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importEmailThirdPartyProviderList: function (storefront_oid, import_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).importEmailThirdPartyProviderList(storefront_oid, import_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email campaign
         * @param {number} storefront_oid
         * @param {EmailCampaign} email_campaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaign: function (storefront_oid, email_campaign, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailCampaign(storefront_oid, email_campaign, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email campaign folder
         * @param {number} storefront_oid
         * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaignFolder: function (storefront_oid, email_campaign_folder, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailCampaignFolder(storefront_oid, email_campaign_folder, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email commseq
         * @param {number} storefront_oid
         * @param {EmailCommseq} email_commseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCommseq: function (storefront_oid, email_commseq, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailCommseq(storefront_oid, email_commseq, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email email
         * @param {number} storefront_oid
         * @param {EmailCommseqEmail} email_commseq_email Email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailEmail: function (storefront_oid, email_commseq_email, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailEmail(storefront_oid, email_commseq_email, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email flow
         * @param {number} storefront_oid
         * @param {EmailFlow} email_flow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlow: function (storefront_oid, email_flow, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailFlow(storefront_oid, email_flow, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email flow folder
         * @param {number} storefront_oid
         * @param {EmailFlowFolder} email_flow_folder Email flow folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlowFolder: function (storefront_oid, email_flow_folder, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailFlowFolder(storefront_oid, email_flow_folder, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email list
         * @param {number} storefront_oid
         * @param {EmailList} email_list Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailList: function (storefront_oid, email_list, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailList(storefront_oid, email_list, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email campaign folder
         * @param {number} storefront_oid
         * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailListSegmentFolder(storefront_oid, email_list_segment_folder, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email postcard
         * @param {number} storefront_oid
         * @param {EmailCommseqPostcard} email_commseq_postcard Email postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailPostcard: function (storefront_oid, email_commseq_postcard, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailPostcard(storefront_oid, email_commseq_postcard, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email segment
         * @param {number} storefront_oid
         * @param {EmailSegment} email_segment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailSegment: function (storefront_oid, email_segment, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertEmailSegment(storefront_oid, email_segment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert screen recording segment
         * @param {number} storefront_oid
         * @param {ScreenRecordingSegment} segment Segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertScreenRecordingSegment: function (storefront_oid, segment, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertScreenRecordingSegment(storefront_oid, segment, options)(fetch, basePath);
        },
        /**
         * Update a page content attribute, creating it new if it does not yet exist.
         * @summary Upsert a page content attribute
         * @param {StoreFrontPageContentAttribute} page_attribute Page content attribute to upsert
         * @param {number} storefront_oid
         * @param {number} page_oid The page oid to modify.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUpdatePageContentAttribute: function (page_attribute, storefront_oid, page_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).insertUpdatePageContentAttribute(page_attribute, storefront_oid, page_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Prepare download of email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareDownloadEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).prepareDownloadEmailSegment(storefront_oid, email_segment_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Publish library item.
         * @param {number} library_item_oid
         * @param {PublishLibraryItemRequest} publish_library_request Publish library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishLibraryItem: function (library_item_oid, publish_library_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).publishLibraryItem(library_item_oid, publish_library_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Purchase public library item, which creates a copy of the item in your personal code library
         * @param {number} library_item_oid
         * @param {number} [storefront_oid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLibraryItem: function (library_item_oid, storefront_oid, options) {
            return (0, exports.StorefrontApiFp)(configuration).purchaseLibraryItem(library_item_oid, storefront_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Release email communication sequence customers waiting at the specified step
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseEmailCommseqStepWaiting: function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).releaseEmailCommseqStepWaiting(storefront_oid, commseq_uuid, commseq_step_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Reset email commseq rate limiters (only callable by UltraCart Support)
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetEmailCommseqRateLimiters: function (storefront_oid, commseq_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).resetEmailCommseqRateLimiters(storefront_oid, commseq_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Request a review of an email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_review_request Email commseq email review request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        review: function (storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).review(storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Searches for all matching values
         * @param {string} [category]
         * @param {string} [matches]
         * @param {string} [storefront_oid]
         * @param {number} [max_hits]
         * @param {string} [subcategory]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (category, matches, storefront_oid, max_hits, subcategory, options) {
            return (0, exports.StorefrontApiFp)(configuration).search(category, matches, storefront_oid, max_hits, subcategory, options)(fetch, basePath);
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookup_request LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (lookup_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).search2(lookup_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Search email list customers
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailListCustomers: function (storefront_oid, email_list_uuid, startsWith, options) {
            return (0, exports.StorefrontApiFp)(configuration).searchEmailListCustomers(storefront_oid, email_list_uuid, startsWith, options)(fetch, basePath);
        },
        /**
         *
         * @summary Search email segment customers
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailSegmentCustomers: function (storefront_oid, email_segment_uuid, startsWith, options) {
            return (0, exports.StorefrontApiFp)(configuration).searchEmailSegmentCustomers(storefront_oid, email_segment_uuid, startsWith, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLibraryItems: function (item_query, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).searchLibraryItems(item_query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPublishedItems: function (item_query, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).searchPublishedItems(item_query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items needing review or rejected
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchReviewItems: function (item_query, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).searchReviewItems(item_query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} item_query Item query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSharedItems: function (item_query, _limit, _offset, _sort, options) {
            return (0, exports.StorefrontApiFp)(configuration).searchSharedItems(item_query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         *
         * @summary Send email test
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_test_request Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTest: function (storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).sendEmailTest(storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Send postcard test
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {EmailCommseqPostcardSendTestRequest} email_commseq_postcard_test_request Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcardTest: function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).sendPostcardTest(storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Send SMS test
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {string} commseq_step_uuid
         * @param {EmailCommseqSmsSendTestRequest} email_commseq_sms_test_request Email commseq sms test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSmsTest: function (storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).sendSmsTest(storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Send webhook test
         * @param {number} storefront_oid
         * @param {EmailCommseqWebhookSendTestRequest} email_commseq_webhook_test_request Email commseq webhook test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendWebhookTest: function (storefront_oid, email_commseq_webhook_test_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).sendWebhookTest(storefront_oid, email_commseq_webhook_test_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Sequence test
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailCommseqSequenceTestRequest} email_commseq_sequence_test_request Commseq test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sequenceTest: function (storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).sequenceTest(storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Start email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailCampaign: function (storefront_oid, email_campaign_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).startEmailCampaign(storefront_oid, email_campaign_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Subscribe customers to email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {Array<EmailCustomer>} customers Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEmailList: function (storefront_oid, email_list_uuid, customers, options) {
            return (0, exports.StorefrontApiFp)(configuration).subscribeToEmailList(storefront_oid, email_list_uuid, customers, options)(fetch, basePath);
        },
        /**
         *
         * @summary Sunset email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sunsetEmailSegment: function (storefront_oid, email_segment_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).sunsetEmailSegment(storefront_oid, email_segment_uuid, options)(fetch, basePath);
        },
        /**
         * Remove favorite flag on screen recording
         * @summary Remove favorite flag on screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteScreenRecording: function (storefront_oid, screen_recording_uuid, options) {
            return (0, exports.StorefrontApiFp)(configuration).unfavoriteScreenRecording(storefront_oid, screen_recording_uuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email campaign
         * @param {number} storefront_oid
         * @param {string} email_campaign_uuid
         * @param {EmailCampaign} email_campaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaign: function (storefront_oid, email_campaign_uuid, email_campaign, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailCampaign(storefront_oid, email_campaign_uuid, email_campaign, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_campaign_folder_uuid
         * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaignFolder: function (storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email commseq
         * @param {number} storefront_oid
         * @param {string} commseq_uuid
         * @param {EmailCommseq} email_commseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCommseq: function (storefront_oid, commseq_uuid, email_commseq, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailCommseq(storefront_oid, commseq_uuid, email_commseq, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email customer
         * @param {number} storefront_oid
         * @param {string} email_customer_uuid
         * @param {EmailCustomer} email_customer Email customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCustomer: function (storefront_oid, email_customer_uuid, email_customer, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailCustomer(storefront_oid, email_customer_uuid, email_customer, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email email
         * @param {number} storefront_oid
         * @param {string} commseq_email_uuid
         * @param {EmailCommseqEmail} email_commseq_email Email commseq email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailEmail: function (storefront_oid, commseq_email_uuid, email_commseq_email, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailEmail(storefront_oid, commseq_email_uuid, email_commseq_email, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email flow
         * @param {number} storefront_oid
         * @param {string} email_flow_uuid
         * @param {EmailFlow} email_flow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlow: function (storefront_oid, email_flow_uuid, email_flow, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailFlow(storefront_oid, email_flow_uuid, email_flow, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email flow folder
         * @param {number} storefront_oid
         * @param {string} email_flow_folder_uuid
         * @param {EmailFlowFolder} email_flow_folder Email flow folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlowFolder: function (storefront_oid, email_flow_folder_uuid, email_flow_folder, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailFlowFolder(storefront_oid, email_flow_folder_uuid, email_flow_folder, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email global settings
         * @param {EmailGlobalSettings} global_settings global settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailGlobalSettings: function (global_settings, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailGlobalSettings(global_settings, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email list
         * @param {number} storefront_oid
         * @param {string} email_list_uuid
         * @param {EmailList} email_list Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailList: function (storefront_oid, email_list_uuid, email_list, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailList(storefront_oid, email_list_uuid, email_list, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email campaign folder
         * @param {number} storefront_oid
         * @param {string} email_list_segment_folder_uuid
         * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailListSegmentFolder: function (storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email plan
         * @param {number} storefront_oid
         * @param {EmailPlan} settings plan request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPlan: function (storefront_oid, settings, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailPlan(storefront_oid, settings, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email postcard
         * @param {number} storefront_oid
         * @param {string} commseq_postcard_uuid
         * @param {EmailCommseqPostcard} email_commseq_postcard Email commseq postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPostcard: function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailPostcard(storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email segment
         * @param {number} storefront_oid
         * @param {string} email_segment_uuid
         * @param {EmailSegment} email_segment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSegment: function (storefront_oid, email_segment_uuid, email_segment, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailSegment(storefront_oid, email_segment_uuid, email_segment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email sending domain
         * @param {string} domain
         * @param {EmailDomain} email_domain EmailDomain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSendingDomain: function (domain, email_domain, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailSendingDomain(domain, email_domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email settings
         * @param {number} storefront_oid
         * @param {EmailSettings} settings settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSettings: function (storefront_oid, settings, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateEmailSettings(storefront_oid, settings, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update experiment
         * @param {number} storefront_oid
         * @param {number} storefront_experiment_oid
         * @param {Experiment} experiment Experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: function (storefront_oid, storefront_experiment_oid, experiment, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateExperiment(storefront_oid, storefront_experiment_oid, experiment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update library item. Note that only certain fields may be updated via this method.
         * @param {number} library_item_oid
         * @param {LibraryItem} library_item Library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryItem: function (library_item_oid, library_item, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateLibraryItem(library_item_oid, library_item, options)(fetch, basePath);
        },
        /**
         * Update merchant notes on a screen recording
         * @summary Update merchant notes on a screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {ScreenRecordingMerchantNotesRequest} merchant_notes_request Merchant Notes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingMerchantNotes: function (storefront_oid, screen_recording_uuid, merchant_notes_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateScreenRecordingMerchantNotes(storefront_oid, screen_recording_uuid, merchant_notes_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update screen recording segment
         * @param {number} storefront_oid
         * @param {number} screen_recording_segment_oid
         * @param {ScreenRecordingSegment} segment Segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingSegment: function (storefront_oid, screen_recording_segment_oid, segment, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, segment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update screen recording settings
         * @param {number} storefront_oid
         * @param {ScreenRecordingSettings} settings Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingSettings: function (storefront_oid, settings, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateScreenRecordingSettings(storefront_oid, settings, options)(fetch, basePath);
        },
        /**
         * Update tags on a screen recording
         * @summary Update tags on a screen recording
         * @param {number} storefront_oid
         * @param {string} screen_recording_uuid
         * @param {ScreenRecordingTagsRequest} tags Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreenRecordingTags: function (storefront_oid, screen_recording_uuid, tags, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateScreenRecordingTags(storefront_oid, screen_recording_uuid, tags, options)(fetch, basePath);
        },
        /**
         * Updates a transactional email
         * @summary Updates a transaction email object
         * @param {number} storefront_oid
         * @param {string} email_id
         * @param {TransactionEmail} transaction_email TransactionEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionEmail: function (storefront_oid, email_id, transaction_email, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateTransactionEmail(storefront_oid, email_id, transaction_email, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update Twilio account
         * @param {string} esp_twilio_uuid
         * @param {Twilio} twilio Twilio
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTwilioAccount: function (esp_twilio_uuid, twilio, options) {
            return (0, exports.StorefrontApiFp)(configuration).updateTwilioAccount(esp_twilio_uuid, twilio, options)(fetch, basePath);
        },
        /**
         *
         * @summary This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
         * @param {number} id
         * @param {FileManagerUploadRequest} upload_request UploadRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFsFile: function (id, upload_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).uploadFsFile(id, upload_request, options)(fetch, basePath);
        },
        /**
         *
         * @summary Validate AWS Event Ruler
         * @param {RulerValidationRequest} ruler_validate_request Ruler Validate Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateRuler: function (ruler_validate_request, options) {
            return (0, exports.StorefrontApiFp)(configuration).validateRuler(ruler_validate_request, options)(fetch, basePath);
        },
    };
};
exports.StorefrontApiFactory = StorefrontApiFactory;
/**
 * StorefrontApi - object-oriented interface
 * @export
 * @class StorefrontApi
 * @extends {BaseAPI}
 */
var StorefrontApi = /** @class */ (function (_super) {
    __extends(StorefrontApi, _super);
    function StorefrontApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add to library
     * @param {AddLibraryItemRequest} add_library_request New library item request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.addToLibrary = function (add_library_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).addToLibrary(add_library_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Apply library item to storefront.
     * @param {ApplyLibraryItemRequest} apply_library_request New library item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.applyToStoreFront = function (apply_library_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).applyToStoreFront(apply_library_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Archive email list
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.archiveEmailList = function (storefront_oid, email_list_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).archiveEmailList(storefront_oid, email_list_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Archive email segment
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.archiveEmailSegment = function (storefront_oid, email_segment_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).archiveEmailSegment(storefront_oid, email_segment_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Back populate email flow
     * @param {number} storefront_oid
     * @param {string} email_flow_uuid
     * @param {EmailFlowBackPopulateRequest} back_populate_request The request to back populate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.backPopulateEmailFlow = function (storefront_oid, email_flow_uuid, back_populate_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).backPopulateEmailFlow(storefront_oid, email_flow_uuid, back_populate_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Check download of email segment
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {string} email_segment_rebuild_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.checkDownloadEmailSegment = function (storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).checkDownloadEmailSegment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Clone email campaign
     * @param {number} storefront_oid
     * @param {string} email_campaign_uuid
     * @param {number} [target_storefront_oid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.cloneEmailCampaign = function (storefront_oid, email_campaign_uuid, target_storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).cloneEmailCampaign(storefront_oid, email_campaign_uuid, target_storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Clone email flow
     * @param {number} storefront_oid
     * @param {string} email_flow_uuid
     * @param {number} [target_storefront_oid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.cloneEmailFlow = function (storefront_oid, email_flow_uuid, target_storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).cloneEmailFlow(storefront_oid, email_flow_uuid, target_storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create email campaign
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.createEmailSendingDomain = function (domain, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).createEmailSendingDomain(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create email sending domain for various providers
     * @param {EmailDomain} email_domain EmailDomain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.createEmailSendingDomain2 = function (email_domain, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).createEmailSendingDomain2(email_domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create file manager directory
     * @param {number} id
     * @param {string} [name]
     * @param {number} [parent_storefront_fs_directory_oid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.createFsDirectory = function (id, name, parent_storefront_fs_directory_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).createFsDirectory(id, name, parent_storefront_fs_directory_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create Twilio account
     * @param {Twilio} twilio Twilio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.createTwilioAccount = function (twilio, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).createTwilioAccount(twilio, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email campaignFolder
     * @param {number} storefront_oid
     * @param {string} email_campaign_folder_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailCampaignFolder = function (storefront_oid, email_campaign_folder_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete communication sequence stats
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailCommseqStat = function (storefront_oid, commseq_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailCommseqStat(storefront_oid, commseq_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email email
     * @param {number} storefront_oid
     * @param {string} commseq_email_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailEmail = function (storefront_oid, commseq_email_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailEmail(storefront_oid, commseq_email_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email flowFolder
     * @param {number} storefront_oid
     * @param {string} email_flow_folder_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailFlowFolder = function (storefront_oid, email_flow_folder_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailFlowFolder(storefront_oid, email_flow_folder_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email list customer
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {string} email_customer_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailListCustomer = function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailListCustomer(storefront_oid, email_list_uuid, email_customer_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email ListSegmentFolder
     * @param {number} storefront_oid
     * @param {string} email_list_segment_folder_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailListSegmentFolder = function (storefront_oid, email_list_segment_folder_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email postcard
     * @param {number} storefront_oid
     * @param {string} commseq_postcard_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailPostcard = function (storefront_oid, commseq_postcard_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailPostcard(storefront_oid, commseq_postcard_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary delete email campaign
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailSendingDomain = function (domain, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteEmailSendingDomain(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete experiment
     * @param {number} storefront_oid
     * @param {number} storefront_experiment_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteExperiment = function (storefront_oid, storefront_experiment_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteExperiment(storefront_oid, storefront_experiment_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete file manager directory
     * @param {number} id
     * @param {number} [parent_storefront_fs_directory_oid]
     * @param {number} [storefront_fs_file_oid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteFsFile = function (id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteFsFile(id, parent_storefront_fs_directory_oid, storefront_fs_file_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete screen recording heatmap
     * @summary Delete screen recording heatmap
     * @param {number} storefront_oid
     * @param {ScreenRecordingHeatmapReset} query Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteHeatmap = function (storefront_oid, query, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteHeatmap(storefront_oid, query, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete library item
     * @param {number} library_item_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteLibraryItem = function (library_item_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteLibraryItem(library_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete all published versions for a library item, including anything in review.
     * @param {number} library_item_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteLibraryItemPublishedVersions = function (library_item_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteLibraryItemPublishedVersions(library_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete screen recording segment
     * @param {number} storefront_oid
     * @param {number} screen_recording_segment_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteScreenRecordingSegment = function (storefront_oid, screen_recording_segment_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary delete Twilio account
     * @param {string} esp_twilio_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteTwilioAccount = function (esp_twilio_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).deleteTwilioAccount(esp_twilio_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Duplicate library item.
     * @param {number} library_item_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.duplicateLibraryItem = function (library_item_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).duplicateLibraryItem(library_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Update favorite flag on screen recording
     * @summary Update favorite flag on screen recording
     * @param {number} storefront_oid
     * @param {string} screen_recording_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.favoriteScreenRecording = function (storefront_oid, screen_recording_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).favoriteScreenRecording(storefront_oid, screen_recording_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Obtain lat/long for an address
     * @param {number} storefront_oid
     * @param {GeocodeRequest} geocode_request geocode request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.geocodeAddress = function (storefront_oid, geocode_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).geocodeAddress(storefront_oid, geocode_request, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of all the countries
     * @summary Get countries
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getCountries = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getCountries(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Fetches a temporary authentication token for the editor
     * @summary Gets editor token
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEditorToken = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEditorToken(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication base templates
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailBaseTemplates = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailBaseTemplates(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign
     * @param {number} storefront_oid
     * @param {string} email_campaign_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaign = function (storefront_oid, email_campaign_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCampaign(storefront_oid, email_campaign_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign folder
     * @param {number} storefront_oid
     * @param {string} email_campaign_folder_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaignFolder = function (storefront_oid, email_campaign_folder_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign folders
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaignFolders = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCampaignFolders(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign screenshots
     * @param {number} storefront_oid
     * @param {string} email_campaign_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaignScreenshots = function (storefront_oid, email_campaign_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCampaignScreenshots(storefront_oid, email_campaign_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaigns
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaigns = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCampaigns(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaigns with stats
     * @param {number} storefront_oid
     * @param {string} stat_days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaignsWithStats = function (storefront_oid, stat_days, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCampaignsWithStats(storefront_oid, stat_days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email commseq
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseq = function (storefront_oid, commseq_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseq(storefront_oid, commseq_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence emails stats
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailStatSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqEmailStats = function (storefront_oid, commseq_uuid, statsRequest, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqEmailStats(storefront_oid, commseq_uuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence postcard stats
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqPostcardStats = function (storefront_oid, commseq_uuid, statsRequest, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqPostcardStats(storefront_oid, commseq_uuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication postcard tracking
     * @param {number} storefront_oid
     * @param {string} commseq_postcard_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqPostcardTracking = function (storefront_oid, commseq_postcard_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqPostcardTracking(storefront_oid, commseq_postcard_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email commseq rate limiters
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqRateLimiters = function (storefront_oid, commseq_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqRateLimiters(storefront_oid, commseq_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence sms stats
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailStatSmsSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqSmsStats = function (storefront_oid, commseq_uuid, statsRequest, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqSmsStats(storefront_oid, commseq_uuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get communication sequence stats overall
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqStatOverall = function (storefront_oid, commseq_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqStatOverall(storefront_oid, commseq_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence step stats
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailStepStatRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqStepStats = function (storefront_oid, commseq_uuid, statsRequest, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqStepStats(storefront_oid, commseq_uuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence customers waiting at each requested step
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqStepWaiting = function (storefront_oid, commseq_uuid, waitingRequest, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqStepWaiting(storefront_oid, commseq_uuid, waitingRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email webhook editor values
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqWebhookEditorValues = function (storefront_oid, commseq_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqWebhookEditorValues(storefront_oid, commseq_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email commseqs
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqs = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCommseqs(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get customers editor URL
     * @param {number} storefront_oid
     * @param {string} email_customer_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCustomerEditorUrl = function (storefront_oid, email_customer_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCustomerEditorUrl(storefront_oid, email_customer_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email customers
     * @param {number} storefront_oid
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {string} [searchEmailPrefix]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCustomers = function (storefront_oid, pageNumber, pageSize, searchEmailPrefix, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailCustomers(storefront_oid, pageNumber, pageSize, searchEmailPrefix, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email dashboard activity
     * @param {number} storefront_oid
     * @param {number} [last_records]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailDashboardActivity = function (storefront_oid, last_records, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailDashboardActivity(storefront_oid, last_records, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get dashboard stats
     * @param {number} storefront_oid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailDashboardStats = function (storefront_oid, days, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailDashboardStats(storefront_oid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email dispatch logs
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {string} commseq_step_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailDispatchLogs = function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailDispatchLogs(storefront_oid, commseq_uuid, commseq_step_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email email
     * @param {number} storefront_oid
     * @param {string} commseq_email_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmail = function (storefront_oid, commseq_email_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailEmail(storefront_oid, commseq_email_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email email clicks
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {string} commseq_step_uuid
     * @param {string} commseq_email_uuid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailClicks = function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailEmailClicks(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email order customer editor url
     * @param {number} storefront_oid
     * @param {string} commseq_email_uuid
     * @param {string} order_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailCustomerEditorUrl = function (storefront_oid, commseq_email_uuid, order_id, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailEmailCustomerEditorUrl(storefront_oid, commseq_email_uuid, order_id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email email orders
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {string} commseq_step_uuid
     * @param {string} commseq_email_uuid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailOrders = function (storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailEmailOrders(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email emails
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmails = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailEmails(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email emails multiple
     * @param {number} storefront_oid
     * @param {EmailCommseqEmailsRequest} email_commseq_emails_request Request of email uuids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailsMultiple = function (storefront_oid, email_commseq_emails_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailEmailsMultiple(storefront_oid, email_commseq_emails_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flow
     * @param {number} storefront_oid
     * @param {string} email_flow_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlow = function (storefront_oid, email_flow_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailFlow(storefront_oid, email_flow_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flow folder
     * @param {number} storefront_oid
     * @param {string} email_flow_folder_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlowFolder = function (storefront_oid, email_flow_folder_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailFlowFolder(storefront_oid, email_flow_folder_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flow folders
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlowFolders = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailFlowFolders(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flow screenshots
     * @param {number} storefront_oid
     * @param {string} email_flow_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlowScreenshots = function (storefront_oid, email_flow_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailFlowScreenshots(storefront_oid, email_flow_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flows
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlows = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailFlows(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email globalsettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailGlobalSettings = function (options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailGlobalSettings(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email list
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailList = function (storefront_oid, email_list_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailList(storefront_oid, email_list_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email list customer editor url
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {string} email_customer_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailListCustomerEditorUrl = function (storefront_oid, email_list_uuid, email_customer_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailListCustomerEditorUrl(storefront_oid, email_list_uuid, email_customer_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email list customers
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailListCustomers = function (storefront_oid, email_list_uuid, pageNumber, pageSize, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailListCustomers(storefront_oid, email_list_uuid, pageNumber, pageSize, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign folder
     * @param {number} storefront_oid
     * @param {string} email_list_segment_folder_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailListSegmentFolder = function (storefront_oid, email_list_segment_folder_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign folders
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailListSegmentFolders = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailListSegmentFolders(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email lists
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailLists = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailLists(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email performance
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPerformance = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailPerformance(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email plan
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPlan = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailPlan(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email postcard
     * @param {number} storefront_oid
     * @param {string} commseq_postcard_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPostcard = function (storefront_oid, commseq_postcard_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailPostcard(storefront_oid, commseq_postcard_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email postcards
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPostcards = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailPostcards(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email postcards multiple
     * @param {number} storefront_oid
     * @param {EmailCommseqPostcardsRequest} email_commseq_postcards_request Request of postcard uuids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPostcardsMultiple = function (storefront_oid, email_commseq_postcards_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailPostcardsMultiple(storefront_oid, email_commseq_postcards_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segment
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegment = function (storefront_oid, email_segment_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSegment(storefront_oid, email_segment_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segment customers editor URL
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {string} email_customer_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegmentCustomerEditorUrl = function (storefront_oid, email_segment_uuid, email_customer_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSegmentCustomerEditorUrl(storefront_oid, email_segment_uuid, email_customer_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segment customers
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegmentCustomers = function (storefront_oid, email_segment_uuid, pageNumber, pageSize, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSegmentCustomers(storefront_oid, email_segment_uuid, pageNumber, pageSize, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segments
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegments = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSegments(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sending domain
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSendingDomain = function (domain, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSendingDomain(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sending domain status
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSendingDomainStatus = function (domain, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSendingDomainStatus(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sending domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSendingDomains = function (options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSendingDomains(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email settings
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSettings = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSettings(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sms orders
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {string} commseq_step_uuid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSmsOrders = function (storefront_oid, commseq_uuid, commseq_step_uuid, days, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailSmsOrders(storefront_oid, commseq_uuid, commseq_step_uuid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email template
     * @param {number} storefront_oid
     * @param {number} email_template_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailTemplate = function (storefront_oid, email_template_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailTemplate(storefront_oid, email_template_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email templates
     * @param {number} storefront_oid
     * @param {string} [trigger_type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailTemplates = function (storefront_oid, trigger_type, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailTemplates(storefront_oid, trigger_type, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get a list of third party email providers
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailThirdPartyProviders = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getEmailThirdPartyProviders(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get experiments
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getExperiments = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getExperiments(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get file manager directory
     * @param {number} id
     * @param {string} [path]
     * @param {number} [storefront_fs_directory_oid]
     * @param {number} [storefront_theme_oid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getFsDirectory = function (id, path, storefront_fs_directory_oid, storefront_theme_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getFsDirectory(id, path, storefront_fs_directory_oid, storefront_theme_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Get screen recording heatmap
     * @summary Get screen recording heatmap
     * @param {number} storefront_oid
     * @param {ScreenRecordingHeatmapRequest} query Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getHeatmap = function (storefront_oid, query, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getHeatmap(storefront_oid, query, options)(this.fetch, this.basePath);
    };
    /**
     * Get screen recording heatmap index
     * @summary Get screen recording heatmap index
     * @param {number} storefront_oid
     * @param {ScreenRecordingHeatmapIndexRequest} query Query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getHeatmapIndex = function (storefront_oid, query, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getHeatmapIndex(storefront_oid, query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of property names for a given property type
     * @summary Get histogram property names
     * @param {number} storefront_oid
     * @param {string} [property_type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getHistogramPropertyNames = function (storefront_oid, property_type, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getHistogramPropertyNames(storefront_oid, property_type, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of property values for a given property name and type
     * @summary Get histogram property values
     * @param {number} storefront_oid
     * @param {string} [property_name]
     * @param {string} [property_type]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getHistogramPropertyValues = function (storefront_oid, property_name, property_type, limit, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getHistogramPropertyValues(storefront_oid, property_name, property_type, limit, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get library values used to populate drop down boxes for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getLibraryFilterValues = function (options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getLibraryFilterValues(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get library item.
     * @param {number} library_item_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getLibraryItem = function (library_item_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getLibraryItem(library_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all published versions for a library item.
     * @param {number} library_item_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getLibraryItemPublishedVersions = function (library_item_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getLibraryItemPublishedVersions(library_item_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Get screen recording
     * @summary Get screen recording
     * @param {number} storefront_oid
     * @param {string} screen_recording_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecording = function (storefront_oid, screen_recording_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecording(storefront_oid, screen_recording_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Get screen recording page view data
     * @summary Get screen recording page view data
     * @param {number} storefront_oid
     * @param {string} screen_recording_uuid
     * @param {string} screen_recording_page_view_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingPageViewData = function (storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingPageViewData(storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get screen recording segment
     * @param {number} storefront_oid
     * @param {number} screen_recording_segment_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingSegment = function (storefront_oid, screen_recording_segment_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get screen recording segments
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingSegments = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingSegments(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get screen recording settings
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingSettings = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingSettings(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Get tags used by screen recording
     * @summary Get tags used by screen recording
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingTags = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingTags(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Query screen recordings
     * @summary Query screen recordings
     * @param {number} storefront_oid
     * @param {ScreenRecordingQueryRequest} query Query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingsByQuery = function (storefront_oid, query, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingsByQuery(storefront_oid, query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Get screen recordings by segment
     * @summary Get screen recordings by segment
     * @param {number} storefront_oid
     * @param {number} screen_recording_segment_oid
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getScreenRecordingsBySegment = function (storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getScreenRecordingsBySegment(storefront_oid, screen_recording_segment_oid, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the pricing tiers
     * @summary Retrieve pricing tiers
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getStoreFrontPricingTiers = function (_expand, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getStoreFrontPricingTiers(_expand, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get storefronts (internal use only for security reasons)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getStoreFronts = function (options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getStoreFronts(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get thumbnail parameters
     * @param {ThumbnailParametersRequest} thumbnail_parameters Thumbnail Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getThumbnailParameters = function (thumbnail_parameters, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getThumbnailParameters(thumbnail_parameters, options)(this.fetch, this.basePath);
    };
    /**
     * Fetch a transactional email
     * @summary Gets a transaction email object
     * @param {number} storefront_oid
     * @param {string} email_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTransactionEmail = function (storefront_oid, email_id, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getTransactionEmail(storefront_oid, email_id, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of all transactional emails and return back just their names
     * @summary Gets a list of transaction email names
     * @param {number} storefront_oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTransactionEmailList = function (storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getTransactionEmailList(storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get transactional email screenshots
     * @param {number} storefront_oid
     * @param {string} email_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTransactionEmailScreenshots = function (storefront_oid, email_id, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getTransactionEmailScreenshots(storefront_oid, email_id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get Twilio account
     * @param {string} esp_twilio_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTwilioAccount = function (esp_twilio_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getTwilioAccount(esp_twilio_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get all Twilio accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTwilioAccounts = function (options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getTwilioAccounts(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
     * @param {number} id
     * @param {string} extension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getUploadFsFileUrl = function (id, extension, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).getUploadFsFileUrl(id, extension, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Globally unsubscribe a customer
     * @param {number} storefront_oid
     * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.globalUnsubscribe = function (storefront_oid, unsubscribe, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).globalUnsubscribe(storefront_oid, unsubscribe, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Import a third party provider list
     * @param {number} storefront_oid
     * @param {EmailThirdPartyListImportRequest} import_request lists to import
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.importEmailThirdPartyProviderList = function (storefront_oid, import_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).importEmailThirdPartyProviderList(storefront_oid, import_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email campaign
     * @param {number} storefront_oid
     * @param {EmailCampaign} email_campaign Email campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailCampaign = function (storefront_oid, email_campaign, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailCampaign(storefront_oid, email_campaign, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email campaign folder
     * @param {number} storefront_oid
     * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailCampaignFolder = function (storefront_oid, email_campaign_folder, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailCampaignFolder(storefront_oid, email_campaign_folder, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email commseq
     * @param {number} storefront_oid
     * @param {EmailCommseq} email_commseq Email commseq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailCommseq = function (storefront_oid, email_commseq, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailCommseq(storefront_oid, email_commseq, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email email
     * @param {number} storefront_oid
     * @param {EmailCommseqEmail} email_commseq_email Email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailEmail = function (storefront_oid, email_commseq_email, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailEmail(storefront_oid, email_commseq_email, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email flow
     * @param {number} storefront_oid
     * @param {EmailFlow} email_flow Email flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailFlow = function (storefront_oid, email_flow, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailFlow(storefront_oid, email_flow, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email flow folder
     * @param {number} storefront_oid
     * @param {EmailFlowFolder} email_flow_folder Email flow folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailFlowFolder = function (storefront_oid, email_flow_folder, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailFlowFolder(storefront_oid, email_flow_folder, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email list
     * @param {number} storefront_oid
     * @param {EmailList} email_list Email list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailList = function (storefront_oid, email_list, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailList(storefront_oid, email_list, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email campaign folder
     * @param {number} storefront_oid
     * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailListSegmentFolder = function (storefront_oid, email_list_segment_folder, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailListSegmentFolder(storefront_oid, email_list_segment_folder, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email postcard
     * @param {number} storefront_oid
     * @param {EmailCommseqPostcard} email_commseq_postcard Email postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailPostcard = function (storefront_oid, email_commseq_postcard, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailPostcard(storefront_oid, email_commseq_postcard, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email segment
     * @param {number} storefront_oid
     * @param {EmailSegment} email_segment Email segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailSegment = function (storefront_oid, email_segment, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertEmailSegment(storefront_oid, email_segment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert screen recording segment
     * @param {number} storefront_oid
     * @param {ScreenRecordingSegment} segment Segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertScreenRecordingSegment = function (storefront_oid, segment, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertScreenRecordingSegment(storefront_oid, segment, options)(this.fetch, this.basePath);
    };
    /**
     * Update a page content attribute, creating it new if it does not yet exist.
     * @summary Upsert a page content attribute
     * @param {StoreFrontPageContentAttribute} page_attribute Page content attribute to upsert
     * @param {number} storefront_oid
     * @param {number} page_oid The page oid to modify.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertUpdatePageContentAttribute = function (page_attribute, storefront_oid, page_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).insertUpdatePageContentAttribute(page_attribute, storefront_oid, page_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Prepare download of email segment
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.prepareDownloadEmailSegment = function (storefront_oid, email_segment_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).prepareDownloadEmailSegment(storefront_oid, email_segment_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Publish library item.
     * @param {number} library_item_oid
     * @param {PublishLibraryItemRequest} publish_library_request Publish library item request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.publishLibraryItem = function (library_item_oid, publish_library_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).publishLibraryItem(library_item_oid, publish_library_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Purchase public library item, which creates a copy of the item in your personal code library
     * @param {number} library_item_oid
     * @param {number} [storefront_oid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.purchaseLibraryItem = function (library_item_oid, storefront_oid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).purchaseLibraryItem(library_item_oid, storefront_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Release email communication sequence customers waiting at the specified step
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {string} commseq_step_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.releaseEmailCommseqStepWaiting = function (storefront_oid, commseq_uuid, commseq_step_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).releaseEmailCommseqStepWaiting(storefront_oid, commseq_uuid, commseq_step_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Reset email commseq rate limiters (only callable by UltraCart Support)
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.resetEmailCommseqRateLimiters = function (storefront_oid, commseq_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).resetEmailCommseqRateLimiters(storefront_oid, commseq_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Request a review of an email
     * @param {number} storefront_oid
     * @param {string} commseq_email_uuid
     * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_review_request Email commseq email review request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.review = function (storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).review(storefront_oid, commseq_email_uuid, email_commseq_email_review_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Searches for all matching values
     * @param {string} [category]
     * @param {string} [matches]
     * @param {string} [storefront_oid]
     * @param {number} [max_hits]
     * @param {string} [subcategory]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.search = function (category, matches, storefront_oid, max_hits, subcategory, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).search(category, matches, storefront_oid, max_hits, subcategory, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Searches for all matching values (using POST)
     * @param {LookupRequest} lookup_request LookupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.search2 = function (lookup_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).search2(lookup_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Search email list customers
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {string} [startsWith]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchEmailListCustomers = function (storefront_oid, email_list_uuid, startsWith, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).searchEmailListCustomers(storefront_oid, email_list_uuid, startsWith, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Search email segment customers
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {string} [startsWith]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchEmailSegmentCustomers = function (storefront_oid, email_segment_uuid, startsWith, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).searchEmailSegmentCustomers(storefront_oid, email_segment_uuid, startsWith, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items
     * @param {LibraryItemQuery} item_query Item query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchLibraryItems = function (item_query, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).searchLibraryItems(item_query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items
     * @param {LibraryItemQuery} item_query Item query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchPublishedItems = function (item_query, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).searchPublishedItems(item_query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items needing review or rejected
     * @param {LibraryItemQuery} item_query Item query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchReviewItems = function (item_query, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).searchReviewItems(item_query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items
     * @param {LibraryItemQuery} item_query Item query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchSharedItems = function (item_query, _limit, _offset, _sort, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).searchSharedItems(item_query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Send email test
     * @param {number} storefront_oid
     * @param {string} commseq_email_uuid
     * @param {EmailCommseqEmailSendTestRequest} email_commseq_email_test_request Email commseq email test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sendEmailTest = function (storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).sendEmailTest(storefront_oid, commseq_email_uuid, email_commseq_email_test_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Send postcard test
     * @param {number} storefront_oid
     * @param {string} commseq_postcard_uuid
     * @param {EmailCommseqPostcardSendTestRequest} email_commseq_postcard_test_request Email commseq email test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sendPostcardTest = function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).sendPostcardTest(storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Send SMS test
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {string} commseq_step_uuid
     * @param {EmailCommseqSmsSendTestRequest} email_commseq_sms_test_request Email commseq sms test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sendSmsTest = function (storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).sendSmsTest(storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Send webhook test
     * @param {number} storefront_oid
     * @param {EmailCommseqWebhookSendTestRequest} email_commseq_webhook_test_request Email commseq webhook test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sendWebhookTest = function (storefront_oid, email_commseq_webhook_test_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).sendWebhookTest(storefront_oid, email_commseq_webhook_test_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Sequence test
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailCommseqSequenceTestRequest} email_commseq_sequence_test_request Commseq test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sequenceTest = function (storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).sequenceTest(storefront_oid, commseq_uuid, email_commseq_sequence_test_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Start email campaign
     * @param {number} storefront_oid
     * @param {string} email_campaign_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.startEmailCampaign = function (storefront_oid, email_campaign_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).startEmailCampaign(storefront_oid, email_campaign_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Subscribe customers to email list
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {Array<EmailCustomer>} customers Customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.subscribeToEmailList = function (storefront_oid, email_list_uuid, customers, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).subscribeToEmailList(storefront_oid, email_list_uuid, customers, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Sunset email segment
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sunsetEmailSegment = function (storefront_oid, email_segment_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).sunsetEmailSegment(storefront_oid, email_segment_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Remove favorite flag on screen recording
     * @summary Remove favorite flag on screen recording
     * @param {number} storefront_oid
     * @param {string} screen_recording_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.unfavoriteScreenRecording = function (storefront_oid, screen_recording_uuid, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).unfavoriteScreenRecording(storefront_oid, screen_recording_uuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email campaign
     * @param {number} storefront_oid
     * @param {string} email_campaign_uuid
     * @param {EmailCampaign} email_campaign Email campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCampaign = function (storefront_oid, email_campaign_uuid, email_campaign, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailCampaign(storefront_oid, email_campaign_uuid, email_campaign, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email campaign folder
     * @param {number} storefront_oid
     * @param {string} email_campaign_folder_uuid
     * @param {EmailCampaignFolder} email_campaign_folder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCampaignFolder = function (storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, email_campaign_folder, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email commseq
     * @param {number} storefront_oid
     * @param {string} commseq_uuid
     * @param {EmailCommseq} email_commseq Email commseq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCommseq = function (storefront_oid, commseq_uuid, email_commseq, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailCommseq(storefront_oid, commseq_uuid, email_commseq, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email customer
     * @param {number} storefront_oid
     * @param {string} email_customer_uuid
     * @param {EmailCustomer} email_customer Email customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCustomer = function (storefront_oid, email_customer_uuid, email_customer, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailCustomer(storefront_oid, email_customer_uuid, email_customer, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email email
     * @param {number} storefront_oid
     * @param {string} commseq_email_uuid
     * @param {EmailCommseqEmail} email_commseq_email Email commseq email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailEmail = function (storefront_oid, commseq_email_uuid, email_commseq_email, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailEmail(storefront_oid, commseq_email_uuid, email_commseq_email, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email flow
     * @param {number} storefront_oid
     * @param {string} email_flow_uuid
     * @param {EmailFlow} email_flow Email flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailFlow = function (storefront_oid, email_flow_uuid, email_flow, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailFlow(storefront_oid, email_flow_uuid, email_flow, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email flow folder
     * @param {number} storefront_oid
     * @param {string} email_flow_folder_uuid
     * @param {EmailFlowFolder} email_flow_folder Email flow folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailFlowFolder = function (storefront_oid, email_flow_folder_uuid, email_flow_folder, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailFlowFolder(storefront_oid, email_flow_folder_uuid, email_flow_folder, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email global settings
     * @param {EmailGlobalSettings} global_settings global settings request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailGlobalSettings = function (global_settings, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailGlobalSettings(global_settings, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email list
     * @param {number} storefront_oid
     * @param {string} email_list_uuid
     * @param {EmailList} email_list Email list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailList = function (storefront_oid, email_list_uuid, email_list, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailList(storefront_oid, email_list_uuid, email_list, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email campaign folder
     * @param {number} storefront_oid
     * @param {string} email_list_segment_folder_uuid
     * @param {EmailListSegmentFolder} email_list_segment_folder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailListSegmentFolder = function (storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email plan
     * @param {number} storefront_oid
     * @param {EmailPlan} settings plan request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailPlan = function (storefront_oid, settings, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailPlan(storefront_oid, settings, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email postcard
     * @param {number} storefront_oid
     * @param {string} commseq_postcard_uuid
     * @param {EmailCommseqPostcard} email_commseq_postcard Email commseq postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailPostcard = function (storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailPostcard(storefront_oid, commseq_postcard_uuid, email_commseq_postcard, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email segment
     * @param {number} storefront_oid
     * @param {string} email_segment_uuid
     * @param {EmailSegment} email_segment Email segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailSegment = function (storefront_oid, email_segment_uuid, email_segment, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailSegment(storefront_oid, email_segment_uuid, email_segment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email sending domain
     * @param {string} domain
     * @param {EmailDomain} email_domain EmailDomain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailSendingDomain = function (domain, email_domain, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailSendingDomain(domain, email_domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email settings
     * @param {number} storefront_oid
     * @param {EmailSettings} settings settings request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailSettings = function (storefront_oid, settings, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateEmailSettings(storefront_oid, settings, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update experiment
     * @param {number} storefront_oid
     * @param {number} storefront_experiment_oid
     * @param {Experiment} experiment Experiment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateExperiment = function (storefront_oid, storefront_experiment_oid, experiment, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateExperiment(storefront_oid, storefront_experiment_oid, experiment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update library item. Note that only certain fields may be updated via this method.
     * @param {number} library_item_oid
     * @param {LibraryItem} library_item Library item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateLibraryItem = function (library_item_oid, library_item, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateLibraryItem(library_item_oid, library_item, options)(this.fetch, this.basePath);
    };
    /**
     * Update merchant notes on a screen recording
     * @summary Update merchant notes on a screen recording
     * @param {number} storefront_oid
     * @param {string} screen_recording_uuid
     * @param {ScreenRecordingMerchantNotesRequest} merchant_notes_request Merchant Notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateScreenRecordingMerchantNotes = function (storefront_oid, screen_recording_uuid, merchant_notes_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateScreenRecordingMerchantNotes(storefront_oid, screen_recording_uuid, merchant_notes_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update screen recording segment
     * @param {number} storefront_oid
     * @param {number} screen_recording_segment_oid
     * @param {ScreenRecordingSegment} segment Segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateScreenRecordingSegment = function (storefront_oid, screen_recording_segment_oid, segment, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, segment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update screen recording settings
     * @param {number} storefront_oid
     * @param {ScreenRecordingSettings} settings Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateScreenRecordingSettings = function (storefront_oid, settings, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateScreenRecordingSettings(storefront_oid, settings, options)(this.fetch, this.basePath);
    };
    /**
     * Update tags on a screen recording
     * @summary Update tags on a screen recording
     * @param {number} storefront_oid
     * @param {string} screen_recording_uuid
     * @param {ScreenRecordingTagsRequest} tags Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateScreenRecordingTags = function (storefront_oid, screen_recording_uuid, tags, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateScreenRecordingTags(storefront_oid, screen_recording_uuid, tags, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a transactional email
     * @summary Updates a transaction email object
     * @param {number} storefront_oid
     * @param {string} email_id
     * @param {TransactionEmail} transaction_email TransactionEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateTransactionEmail = function (storefront_oid, email_id, transaction_email, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateTransactionEmail(storefront_oid, email_id, transaction_email, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update Twilio account
     * @param {string} esp_twilio_uuid
     * @param {Twilio} twilio Twilio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateTwilioAccount = function (esp_twilio_uuid, twilio, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).updateTwilioAccount(esp_twilio_uuid, twilio, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
     * @param {number} id
     * @param {FileManagerUploadRequest} upload_request UploadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.uploadFsFile = function (id, upload_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).uploadFsFile(id, upload_request, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Validate AWS Event Ruler
     * @param {RulerValidationRequest} ruler_validate_request Ruler Validate Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.validateRuler = function (ruler_validate_request, options) {
        return (0, exports.StorefrontApiFp)(this.configuration).validateRuler(ruler_validate_request, options)(this.fetch, this.basePath);
    };
    return StorefrontApi;
}(BaseAPI));
exports.StorefrontApi = StorefrontApi;
/**
 * TaxApi - fetch parameter creator
 * @export
 */
var TaxApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes a Self tax provider city.
         * @summary Deletes a Self tax provider city
         * @param {string} city The city being deleted.
         * @param {TaxCity} tax_city tax city to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCity: function (city, tax_city, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'city' is not null or undefined
            if (city === null || city === undefined) {
                throw new RequiredError('city', 'Required parameter city was null or undefined when calling deleteTaxProviderSelfCity.');
            }
            // verify required parameter 'tax_city' is not null or undefined
            if (tax_city === null || tax_city === undefined) {
                throw new RequiredError('tax_city', 'Required parameter tax_city was null or undefined when calling deleteTaxProviderSelfCity.');
            }
            var localVarPath = "/tax/providers/self/city/{city}"
                .replace("{".concat("city", "}"), encodeURIComponent(String(city)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCity" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_city || {}) : (tax_city || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider country.
         * @summary Deletes a Self tax provider country
         * @param {string} countryCode The country code being deleted.
         * @param {TaxCountry} tax_country tax country to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCountry: function (countryCode, tax_country, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling deleteTaxProviderSelfCountry.');
            }
            // verify required parameter 'tax_country' is not null or undefined
            if (tax_country === null || tax_country === undefined) {
                throw new RequiredError('tax_country', 'Required parameter tax_country was null or undefined when calling deleteTaxProviderSelfCountry.');
            }
            var localVarPath = "/tax/providers/self/country/{countryCode}"
                .replace("{".concat("countryCode", "}"), encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCountry" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_country || {}) : (tax_country || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider county.
         * @summary Deletes a Self tax provider county
         * @param {string} county The county being deleted.
         * @param {TaxCounty} tax_county tax county to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCounty: function (county, tax_county, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'county' is not null or undefined
            if (county === null || county === undefined) {
                throw new RequiredError('county', 'Required parameter county was null or undefined when calling deleteTaxProviderSelfCounty.');
            }
            // verify required parameter 'tax_county' is not null or undefined
            if (tax_county === null || tax_county === undefined) {
                throw new RequiredError('tax_county', 'Required parameter tax_county was null or undefined when calling deleteTaxProviderSelfCounty.');
            }
            var localVarPath = "/tax/providers/self/county/{county}"
                .replace("{".concat("county", "}"), encodeURIComponent(String(county)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCounty" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_county || {}) : (tax_county || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider postalCode.
         * @summary Deletes a Self tax provider postalCode
         * @param {string} postal_code The postal code being deleted.
         * @param {TaxPostalCode} tax_postal_code tax postal code to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfPostalCode: function (postal_code, tax_postal_code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'postal_code' is not null or undefined
            if (postal_code === null || postal_code === undefined) {
                throw new RequiredError('postal_code', 'Required parameter postal_code was null or undefined when calling deleteTaxProviderSelfPostalCode.');
            }
            // verify required parameter 'tax_postal_code' is not null or undefined
            if (tax_postal_code === null || tax_postal_code === undefined) {
                throw new RequiredError('tax_postal_code', 'Required parameter tax_postal_code was null or undefined when calling deleteTaxProviderSelfPostalCode.');
            }
            var localVarPath = "/tax/providers/self/postalCode/{postal_code}"
                .replace("{".concat("postal_code", "}"), encodeURIComponent(String(postal_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxPostalCode" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_postal_code || {}) : (tax_postal_code || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider state.
         * @summary Deletes a Self tax provider state
         * @param {string} stateCode The state code being deleted.
         * @param {TaxState} tax_state tax state to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfState: function (stateCode, tax_state, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new RequiredError('stateCode', 'Required parameter stateCode was null or undefined when calling deleteTaxProviderSelfState.');
            }
            // verify required parameter 'tax_state' is not null or undefined
            if (tax_state === null || tax_state === undefined) {
                throw new RequiredError('tax_state', 'Required parameter tax_state was null or undefined when calling deleteTaxProviderSelfState.');
            }
            var localVarPath = "/tax/providers/self/state/{stateCode}"
                .replace("{".concat("stateCode", "}"), encodeURIComponent(String(stateCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxState" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_state || {}) : (tax_state || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Avalara tax provider.
         * @summary Retrieve the Avalara tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalara: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/avalara";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns Avalara Tax companies configured by the merchant
         * @summary Returns Avalara Tax companies configured by the merchant
         * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraCompanies: function (tax_provider_avalara, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tax_provider_avalara' is not null or undefined
            if (tax_provider_avalara === null || tax_provider_avalara === undefined) {
                throw new RequiredError('tax_provider_avalara', 'Required parameter tax_provider_avalara was null or undefined when calling getTaxProviderAvalaraCompanies.');
            }
            var localVarPath = "/tax/providers/avalara/companies";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderAvalara" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_provider_avalara || {}) : (tax_provider_avalara || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to connect to Avalara and returns back the response.
         * @summary Attempts to connect to Avalara and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraTest: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/avalara/test";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Self tax provider.
         * @summary Retrieve the Self tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelf: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Self tax provider countries.
         * @summary Retrieve the Self tax provider countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfCountries: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/self/countries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Self tax provider regions for a given country code.
         * @summary Retrieve the Self tax provider regions for a given country code
         * @param {string} countryCode The country code regions desired.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfRegionsByCountryCode: function (countryCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling getTaxProviderSelfRegionsByCountryCode.');
            }
            var localVarPath = "/tax/providers/self/regions/{countryCode}"
                .replace("{".concat("countryCode", "}"), encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Sovos tax provider.
         * @summary Retrieve the Sovos tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovos: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/sovos";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to connect to Sovos and returns back the response.
         * @summary Attempts to connect to Sovos and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovosTest: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/sovos/test";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the TaxJar tax provider.
         * @summary Retrieve the TaxJar tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJar: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/taxjar";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to connect to TaxJar and returns back the response.
         * @summary Attempts to connect to TaxJar and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJarTest: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/taxjar/test";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the UltraCart tax provider.
         * @summary Retrieve the UltraCart tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderUltraCart: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/ultracart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves tax methods for this account.
         * @summary Retrieve tax methods
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviders: function (_limit, _offset, _expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_expand !== undefined) {
                localVarQueryParameter['_expand'] = _expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle a tax provider to active.
         * @summary Toggle a tax provider to active
         * @param {string} providerName The tax provider to set active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveTaxProvider: function (providerName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName', 'Required parameter providerName was null or undefined when calling setActiveTaxProvider.');
            }
            var localVarPath = "/tax/providers/setActive/{providerName}"
                .replace("{".concat("providerName", "}"), encodeURIComponent(String(providerName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Avalara tax provider.
         * @summary Update the Avalara tax provider
         * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderAvalara: function (tax_provider_avalara, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tax_provider_avalara' is not null or undefined
            if (tax_provider_avalara === null || tax_provider_avalara === undefined) {
                throw new RequiredError('tax_provider_avalara', 'Required parameter tax_provider_avalara was null or undefined when calling updateTaxProviderAvalara.');
            }
            var localVarPath = "/tax/providers/avalara";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderAvalara" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_provider_avalara || {}) : (tax_provider_avalara || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Self tax provider.
         * @summary Update the Self tax provider
         * @param {TaxProviderSelf} tax_provider_self TaxProviderSelf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelf: function (tax_provider_self, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tax_provider_self' is not null or undefined
            if (tax_provider_self === null || tax_provider_self === undefined) {
                throw new RequiredError('tax_provider_self', 'Required parameter tax_provider_self was null or undefined when calling updateTaxProviderSelf.');
            }
            var localVarPath = "/tax/providers/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderSelf" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_provider_self || {}) : (tax_provider_self || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider city.
         * @summary Updates a Self tax provider city
         * @param {string} city The city being updated.
         * @param {TaxCity} tax_city tax city to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCity: function (city, tax_city, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'city' is not null or undefined
            if (city === null || city === undefined) {
                throw new RequiredError('city', 'Required parameter city was null or undefined when calling updateTaxProviderSelfCity.');
            }
            // verify required parameter 'tax_city' is not null or undefined
            if (tax_city === null || tax_city === undefined) {
                throw new RequiredError('tax_city', 'Required parameter tax_city was null or undefined when calling updateTaxProviderSelfCity.');
            }
            var localVarPath = "/tax/providers/self/city/{city}"
                .replace("{".concat("city", "}"), encodeURIComponent(String(city)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCity" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_city || {}) : (tax_city || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider country.
         * @summary Updates a Self tax provider country
         * @param {string} countryCode The country code being updated.
         * @param {TaxCountry} tax_country tax country to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCountry: function (countryCode, tax_country, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling updateTaxProviderSelfCountry.');
            }
            // verify required parameter 'tax_country' is not null or undefined
            if (tax_country === null || tax_country === undefined) {
                throw new RequiredError('tax_country', 'Required parameter tax_country was null or undefined when calling updateTaxProviderSelfCountry.');
            }
            var localVarPath = "/tax/providers/self/country/{countryCode}"
                .replace("{".concat("countryCode", "}"), encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCountry" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_country || {}) : (tax_country || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider county.
         * @summary Updates a Self tax provider county
         * @param {string} county The county being updated.
         * @param {TaxCounty} tax_county tax county to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCounty: function (county, tax_county, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'county' is not null or undefined
            if (county === null || county === undefined) {
                throw new RequiredError('county', 'Required parameter county was null or undefined when calling updateTaxProviderSelfCounty.');
            }
            // verify required parameter 'tax_county' is not null or undefined
            if (tax_county === null || tax_county === undefined) {
                throw new RequiredError('tax_county', 'Required parameter tax_county was null or undefined when calling updateTaxProviderSelfCounty.');
            }
            var localVarPath = "/tax/providers/self/county/{county}"
                .replace("{".concat("county", "}"), encodeURIComponent(String(county)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCounty" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_county || {}) : (tax_county || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider postalCode.
         * @summary Updates a Self tax provider postalCode
         * @param {string} postal_code The postal code being updated.
         * @param {TaxPostalCode} tax_postal_code tax postal code to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfPostalCode: function (postal_code, tax_postal_code, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'postal_code' is not null or undefined
            if (postal_code === null || postal_code === undefined) {
                throw new RequiredError('postal_code', 'Required parameter postal_code was null or undefined when calling updateTaxProviderSelfPostalCode.');
            }
            // verify required parameter 'tax_postal_code' is not null or undefined
            if (tax_postal_code === null || tax_postal_code === undefined) {
                throw new RequiredError('tax_postal_code', 'Required parameter tax_postal_code was null or undefined when calling updateTaxProviderSelfPostalCode.');
            }
            var localVarPath = "/tax/providers/self/postalCode/{postal_code}"
                .replace("{".concat("postal_code", "}"), encodeURIComponent(String(postal_code)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxPostalCode" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_postal_code || {}) : (tax_postal_code || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider state.
         * @summary Updates a Self tax provider state
         * @param {string} stateCode The state code being updated.
         * @param {TaxState} tax_state tax state to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfState: function (stateCode, tax_state, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new RequiredError('stateCode', 'Required parameter stateCode was null or undefined when calling updateTaxProviderSelfState.');
            }
            // verify required parameter 'tax_state' is not null or undefined
            if (tax_state === null || tax_state === undefined) {
                throw new RequiredError('tax_state', 'Required parameter tax_state was null or undefined when calling updateTaxProviderSelfState.');
            }
            var localVarPath = "/tax/providers/self/state/{stateCode}"
                .replace("{".concat("stateCode", "}"), encodeURIComponent(String(stateCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxState" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_state || {}) : (tax_state || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Sovos tax provider.
         * @summary Update the Sovos tax provider
         * @param {TaxProviderSovos} tax_provider_sovos TaxProviderSovos object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSovos: function (tax_provider_sovos, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tax_provider_sovos' is not null or undefined
            if (tax_provider_sovos === null || tax_provider_sovos === undefined) {
                throw new RequiredError('tax_provider_sovos', 'Required parameter tax_provider_sovos was null or undefined when calling updateTaxProviderSovos.');
            }
            var localVarPath = "/tax/providers/sovos";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderSovos" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_provider_sovos || {}) : (tax_provider_sovos || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the TaxJar tax provider.
         * @summary Update the TaxJar tax provider
         * @param {TaxProviderTaxJar} tax_provider_taxJar TaxProviderTaxJar object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderTaxJar: function (tax_provider_taxJar, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tax_provider_taxJar' is not null or undefined
            if (tax_provider_taxJar === null || tax_provider_taxJar === undefined) {
                throw new RequiredError('tax_provider_taxJar', 'Required parameter tax_provider_taxJar was null or undefined when calling updateTaxProviderTaxJar.');
            }
            var localVarPath = "/tax/providers/taxjar";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderTaxJar" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_provider_taxJar || {}) : (tax_provider_taxJar || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the UltraCart tax provider.
         * @summary Update the UltraCart tax provider
         * @param {TaxProviderUltraCart} tax_provider_ultracart TaxProviderUltraCart object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderUltraCart: function (tax_provider_ultracart, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tax_provider_ultracart' is not null or undefined
            if (tax_provider_ultracart === null || tax_provider_ultracart === undefined) {
                throw new RequiredError('tax_provider_ultracart', 'Required parameter tax_provider_ultracart was null or undefined when calling updateTaxProviderUltraCart.');
            }
            var localVarPath = "/tax/providers/ultracart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderUltraCart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(tax_provider_ultracart || {}) : (tax_provider_ultracart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.TaxApiFetchParamCreator = TaxApiFetchParamCreator;
/**
 * TaxApi - functional programming interface
 * @export
 */
var TaxApiFp = function (configuration) {
    return {
        /**
         * Deletes a Self tax provider city.
         * @summary Deletes a Self tax provider city
         * @param {string} city The city being deleted.
         * @param {TaxCity} tax_city tax city to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCity: function (city, tax_city, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).deleteTaxProviderSelfCity(city, tax_city, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider country.
         * @summary Deletes a Self tax provider country
         * @param {string} countryCode The country code being deleted.
         * @param {TaxCountry} tax_country tax country to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCountry: function (countryCode, tax_country, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).deleteTaxProviderSelfCountry(countryCode, tax_country, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider county.
         * @summary Deletes a Self tax provider county
         * @param {string} county The county being deleted.
         * @param {TaxCounty} tax_county tax county to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCounty: function (county, tax_county, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).deleteTaxProviderSelfCounty(county, tax_county, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider postalCode.
         * @summary Deletes a Self tax provider postalCode
         * @param {string} postal_code The postal code being deleted.
         * @param {TaxPostalCode} tax_postal_code tax postal code to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfPostalCode: function (postal_code, tax_postal_code, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).deleteTaxProviderSelfPostalCode(postal_code, tax_postal_code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider state.
         * @summary Deletes a Self tax provider state
         * @param {string} stateCode The state code being deleted.
         * @param {TaxState} tax_state tax state to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfState: function (stateCode, tax_state, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).deleteTaxProviderSelfState(stateCode, tax_state, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Avalara tax provider.
         * @summary Retrieve the Avalara tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalara: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderAvalara(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns Avalara Tax companies configured by the merchant
         * @summary Returns Avalara Tax companies configured by the merchant
         * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraCompanies: function (tax_provider_avalara, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderAvalaraCompanies(tax_provider_avalara, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attempts to connect to Avalara and returns back the response.
         * @summary Attempts to connect to Avalara and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraTest: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderAvalaraTest(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Self tax provider.
         * @summary Retrieve the Self tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelf: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderSelf(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Self tax provider countries.
         * @summary Retrieve the Self tax provider countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfCountries: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderSelfCountries(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Self tax provider regions for a given country code.
         * @summary Retrieve the Self tax provider regions for a given country code
         * @param {string} countryCode The country code regions desired.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfRegionsByCountryCode: function (countryCode, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderSelfRegionsByCountryCode(countryCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Sovos tax provider.
         * @summary Retrieve the Sovos tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovos: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderSovos(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attempts to connect to Sovos and returns back the response.
         * @summary Attempts to connect to Sovos and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovosTest: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderSovosTest(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the TaxJar tax provider.
         * @summary Retrieve the TaxJar tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJar: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderTaxJar(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attempts to connect to TaxJar and returns back the response.
         * @summary Attempts to connect to TaxJar and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJarTest: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderTaxJarTest(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the UltraCart tax provider.
         * @summary Retrieve the UltraCart tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderUltraCart: function (options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviderUltraCart(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves tax methods for this account.
         * @summary Retrieve tax methods
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviders: function (_limit, _offset, _expand, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).getTaxProviders(_limit, _offset, _expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Toggle a tax provider to active.
         * @summary Toggle a tax provider to active
         * @param {string} providerName The tax provider to set active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveTaxProvider: function (providerName, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).setActiveTaxProvider(providerName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the Avalara tax provider.
         * @summary Update the Avalara tax provider
         * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderAvalara: function (tax_provider_avalara, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderAvalara(tax_provider_avalara, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the Self tax provider.
         * @summary Update the Self tax provider
         * @param {TaxProviderSelf} tax_provider_self TaxProviderSelf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelf: function (tax_provider_self, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSelf(tax_provider_self, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider city.
         * @summary Updates a Self tax provider city
         * @param {string} city The city being updated.
         * @param {TaxCity} tax_city tax city to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCity: function (city, tax_city, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSelfCity(city, tax_city, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider country.
         * @summary Updates a Self tax provider country
         * @param {string} countryCode The country code being updated.
         * @param {TaxCountry} tax_country tax country to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCountry: function (countryCode, tax_country, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSelfCountry(countryCode, tax_country, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider county.
         * @summary Updates a Self tax provider county
         * @param {string} county The county being updated.
         * @param {TaxCounty} tax_county tax county to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCounty: function (county, tax_county, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSelfCounty(county, tax_county, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider postalCode.
         * @summary Updates a Self tax provider postalCode
         * @param {string} postal_code The postal code being updated.
         * @param {TaxPostalCode} tax_postal_code tax postal code to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfPostalCode: function (postal_code, tax_postal_code, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSelfPostalCode(postal_code, tax_postal_code, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider state.
         * @summary Updates a Self tax provider state
         * @param {string} stateCode The state code being updated.
         * @param {TaxState} tax_state tax state to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfState: function (stateCode, tax_state, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSelfState(stateCode, tax_state, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the Sovos tax provider.
         * @summary Update the Sovos tax provider
         * @param {TaxProviderSovos} tax_provider_sovos TaxProviderSovos object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSovos: function (tax_provider_sovos, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderSovos(tax_provider_sovos, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the TaxJar tax provider.
         * @summary Update the TaxJar tax provider
         * @param {TaxProviderTaxJar} tax_provider_taxJar TaxProviderTaxJar object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderTaxJar: function (tax_provider_taxJar, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderTaxJar(tax_provider_taxJar, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the UltraCart tax provider.
         * @summary Update the UltraCart tax provider
         * @param {TaxProviderUltraCart} tax_provider_ultracart TaxProviderUltraCart object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderUltraCart: function (tax_provider_ultracart, options) {
            var localVarFetchArgs = (0, exports.TaxApiFetchParamCreator)(configuration).updateTaxProviderUltraCart(tax_provider_ultracart, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.TaxApiFp = TaxApiFp;
/**
 * TaxApi - factory interface
 * @export
 */
var TaxApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes a Self tax provider city.
         * @summary Deletes a Self tax provider city
         * @param {string} city The city being deleted.
         * @param {TaxCity} tax_city tax city to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCity: function (city, tax_city, options) {
            return (0, exports.TaxApiFp)(configuration).deleteTaxProviderSelfCity(city, tax_city, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider country.
         * @summary Deletes a Self tax provider country
         * @param {string} countryCode The country code being deleted.
         * @param {TaxCountry} tax_country tax country to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCountry: function (countryCode, tax_country, options) {
            return (0, exports.TaxApiFp)(configuration).deleteTaxProviderSelfCountry(countryCode, tax_country, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider county.
         * @summary Deletes a Self tax provider county
         * @param {string} county The county being deleted.
         * @param {TaxCounty} tax_county tax county to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCounty: function (county, tax_county, options) {
            return (0, exports.TaxApiFp)(configuration).deleteTaxProviderSelfCounty(county, tax_county, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider postalCode.
         * @summary Deletes a Self tax provider postalCode
         * @param {string} postal_code The postal code being deleted.
         * @param {TaxPostalCode} tax_postal_code tax postal code to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfPostalCode: function (postal_code, tax_postal_code, options) {
            return (0, exports.TaxApiFp)(configuration).deleteTaxProviderSelfPostalCode(postal_code, tax_postal_code, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider state.
         * @summary Deletes a Self tax provider state
         * @param {string} stateCode The state code being deleted.
         * @param {TaxState} tax_state tax state to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfState: function (stateCode, tax_state, options) {
            return (0, exports.TaxApiFp)(configuration).deleteTaxProviderSelfState(stateCode, tax_state, options)(fetch, basePath);
        },
        /**
         * Retrieves the Avalara tax provider.
         * @summary Retrieve the Avalara tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalara: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderAvalara(options)(fetch, basePath);
        },
        /**
         * Returns Avalara Tax companies configured by the merchant
         * @summary Returns Avalara Tax companies configured by the merchant
         * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraCompanies: function (tax_provider_avalara, options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderAvalaraCompanies(tax_provider_avalara, options)(fetch, basePath);
        },
        /**
         * Attempts to connect to Avalara and returns back the response.
         * @summary Attempts to connect to Avalara and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraTest: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderAvalaraTest(options)(fetch, basePath);
        },
        /**
         * Retrieves the Self tax provider.
         * @summary Retrieve the Self tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelf: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderSelf(options)(fetch, basePath);
        },
        /**
         * Retrieves the Self tax provider countries.
         * @summary Retrieve the Self tax provider countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfCountries: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderSelfCountries(options)(fetch, basePath);
        },
        /**
         * Retrieves the Self tax provider regions for a given country code.
         * @summary Retrieve the Self tax provider regions for a given country code
         * @param {string} countryCode The country code regions desired.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfRegionsByCountryCode: function (countryCode, options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderSelfRegionsByCountryCode(countryCode, options)(fetch, basePath);
        },
        /**
         * Retrieves the Sovos tax provider.
         * @summary Retrieve the Sovos tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovos: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderSovos(options)(fetch, basePath);
        },
        /**
         * Attempts to connect to Sovos and returns back the response.
         * @summary Attempts to connect to Sovos and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovosTest: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderSovosTest(options)(fetch, basePath);
        },
        /**
         * Retrieves the TaxJar tax provider.
         * @summary Retrieve the TaxJar tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJar: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderTaxJar(options)(fetch, basePath);
        },
        /**
         * Attempts to connect to TaxJar and returns back the response.
         * @summary Attempts to connect to TaxJar and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJarTest: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderTaxJarTest(options)(fetch, basePath);
        },
        /**
         * Retrieves the UltraCart tax provider.
         * @summary Retrieve the UltraCart tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderUltraCart: function (options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviderUltraCart(options)(fetch, basePath);
        },
        /**
         * Retrieves tax methods for this account.
         * @summary Retrieve tax methods
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviders: function (_limit, _offset, _expand, options) {
            return (0, exports.TaxApiFp)(configuration).getTaxProviders(_limit, _offset, _expand, options)(fetch, basePath);
        },
        /**
         * Toggle a tax provider to active.
         * @summary Toggle a tax provider to active
         * @param {string} providerName The tax provider to set active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveTaxProvider: function (providerName, options) {
            return (0, exports.TaxApiFp)(configuration).setActiveTaxProvider(providerName, options)(fetch, basePath);
        },
        /**
         * Update the Avalara tax provider.
         * @summary Update the Avalara tax provider
         * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderAvalara: function (tax_provider_avalara, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderAvalara(tax_provider_avalara, options)(fetch, basePath);
        },
        /**
         * Update the Self tax provider.
         * @summary Update the Self tax provider
         * @param {TaxProviderSelf} tax_provider_self TaxProviderSelf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelf: function (tax_provider_self, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSelf(tax_provider_self, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider city.
         * @summary Updates a Self tax provider city
         * @param {string} city The city being updated.
         * @param {TaxCity} tax_city tax city to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCity: function (city, tax_city, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSelfCity(city, tax_city, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider country.
         * @summary Updates a Self tax provider country
         * @param {string} countryCode The country code being updated.
         * @param {TaxCountry} tax_country tax country to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCountry: function (countryCode, tax_country, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSelfCountry(countryCode, tax_country, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider county.
         * @summary Updates a Self tax provider county
         * @param {string} county The county being updated.
         * @param {TaxCounty} tax_county tax county to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCounty: function (county, tax_county, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSelfCounty(county, tax_county, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider postalCode.
         * @summary Updates a Self tax provider postalCode
         * @param {string} postal_code The postal code being updated.
         * @param {TaxPostalCode} tax_postal_code tax postal code to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfPostalCode: function (postal_code, tax_postal_code, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSelfPostalCode(postal_code, tax_postal_code, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider state.
         * @summary Updates a Self tax provider state
         * @param {string} stateCode The state code being updated.
         * @param {TaxState} tax_state tax state to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfState: function (stateCode, tax_state, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSelfState(stateCode, tax_state, options)(fetch, basePath);
        },
        /**
         * Update the Sovos tax provider.
         * @summary Update the Sovos tax provider
         * @param {TaxProviderSovos} tax_provider_sovos TaxProviderSovos object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSovos: function (tax_provider_sovos, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderSovos(tax_provider_sovos, options)(fetch, basePath);
        },
        /**
         * Update the TaxJar tax provider.
         * @summary Update the TaxJar tax provider
         * @param {TaxProviderTaxJar} tax_provider_taxJar TaxProviderTaxJar object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderTaxJar: function (tax_provider_taxJar, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderTaxJar(tax_provider_taxJar, options)(fetch, basePath);
        },
        /**
         * Update the UltraCart tax provider.
         * @summary Update the UltraCart tax provider
         * @param {TaxProviderUltraCart} tax_provider_ultracart TaxProviderUltraCart object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderUltraCart: function (tax_provider_ultracart, options) {
            return (0, exports.TaxApiFp)(configuration).updateTaxProviderUltraCart(tax_provider_ultracart, options)(fetch, basePath);
        },
    };
};
exports.TaxApiFactory = TaxApiFactory;
/**
 * TaxApi - object-oriented interface
 * @export
 * @class TaxApi
 * @extends {BaseAPI}
 */
var TaxApi = /** @class */ (function (_super) {
    __extends(TaxApi, _super);
    function TaxApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a Self tax provider city.
     * @summary Deletes a Self tax provider city
     * @param {string} city The city being deleted.
     * @param {TaxCity} tax_city tax city to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfCity = function (city, tax_city, options) {
        return (0, exports.TaxApiFp)(this.configuration).deleteTaxProviderSelfCity(city, tax_city, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider country.
     * @summary Deletes a Self tax provider country
     * @param {string} countryCode The country code being deleted.
     * @param {TaxCountry} tax_country tax country to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfCountry = function (countryCode, tax_country, options) {
        return (0, exports.TaxApiFp)(this.configuration).deleteTaxProviderSelfCountry(countryCode, tax_country, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider county.
     * @summary Deletes a Self tax provider county
     * @param {string} county The county being deleted.
     * @param {TaxCounty} tax_county tax county to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfCounty = function (county, tax_county, options) {
        return (0, exports.TaxApiFp)(this.configuration).deleteTaxProviderSelfCounty(county, tax_county, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider postalCode.
     * @summary Deletes a Self tax provider postalCode
     * @param {string} postal_code The postal code being deleted.
     * @param {TaxPostalCode} tax_postal_code tax postal code to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfPostalCode = function (postal_code, tax_postal_code, options) {
        return (0, exports.TaxApiFp)(this.configuration).deleteTaxProviderSelfPostalCode(postal_code, tax_postal_code, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider state.
     * @summary Deletes a Self tax provider state
     * @param {string} stateCode The state code being deleted.
     * @param {TaxState} tax_state tax state to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfState = function (stateCode, tax_state, options) {
        return (0, exports.TaxApiFp)(this.configuration).deleteTaxProviderSelfState(stateCode, tax_state, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Avalara tax provider.
     * @summary Retrieve the Avalara tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderAvalara = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderAvalara(options)(this.fetch, this.basePath);
    };
    /**
     * Returns Avalara Tax companies configured by the merchant
     * @summary Returns Avalara Tax companies configured by the merchant
     * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderAvalaraCompanies = function (tax_provider_avalara, options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderAvalaraCompanies(tax_provider_avalara, options)(this.fetch, this.basePath);
    };
    /**
     * Attempts to connect to Avalara and returns back the response.
     * @summary Attempts to connect to Avalara and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderAvalaraTest = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderAvalaraTest(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Self tax provider.
     * @summary Retrieve the Self tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSelf = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderSelf(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Self tax provider countries.
     * @summary Retrieve the Self tax provider countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSelfCountries = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderSelfCountries(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Self tax provider regions for a given country code.
     * @summary Retrieve the Self tax provider regions for a given country code
     * @param {string} countryCode The country code regions desired.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSelfRegionsByCountryCode = function (countryCode, options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderSelfRegionsByCountryCode(countryCode, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Sovos tax provider.
     * @summary Retrieve the Sovos tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSovos = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderSovos(options)(this.fetch, this.basePath);
    };
    /**
     * Attempts to connect to Sovos and returns back the response.
     * @summary Attempts to connect to Sovos and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSovosTest = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderSovosTest(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the TaxJar tax provider.
     * @summary Retrieve the TaxJar tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderTaxJar = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderTaxJar(options)(this.fetch, this.basePath);
    };
    /**
     * Attempts to connect to TaxJar and returns back the response.
     * @summary Attempts to connect to TaxJar and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderTaxJarTest = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderTaxJarTest(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the UltraCart tax provider.
     * @summary Retrieve the UltraCart tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderUltraCart = function (options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviderUltraCart(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves tax methods for this account.
     * @summary Retrieve tax methods
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviders = function (_limit, _offset, _expand, options) {
        return (0, exports.TaxApiFp)(this.configuration).getTaxProviders(_limit, _offset, _expand, options)(this.fetch, this.basePath);
    };
    /**
     * Toggle a tax provider to active.
     * @summary Toggle a tax provider to active
     * @param {string} providerName The tax provider to set active.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.setActiveTaxProvider = function (providerName, options) {
        return (0, exports.TaxApiFp)(this.configuration).setActiveTaxProvider(providerName, options)(this.fetch, this.basePath);
    };
    /**
     * Update the Avalara tax provider.
     * @summary Update the Avalara tax provider
     * @param {TaxProviderAvalara} tax_provider_avalara TaxProviderAvalara object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderAvalara = function (tax_provider_avalara, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderAvalara(tax_provider_avalara, options)(this.fetch, this.basePath);
    };
    /**
     * Update the Self tax provider.
     * @summary Update the Self tax provider
     * @param {TaxProviderSelf} tax_provider_self TaxProviderSelf object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelf = function (tax_provider_self, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSelf(tax_provider_self, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider city.
     * @summary Updates a Self tax provider city
     * @param {string} city The city being updated.
     * @param {TaxCity} tax_city tax city to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfCity = function (city, tax_city, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSelfCity(city, tax_city, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider country.
     * @summary Updates a Self tax provider country
     * @param {string} countryCode The country code being updated.
     * @param {TaxCountry} tax_country tax country to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfCountry = function (countryCode, tax_country, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSelfCountry(countryCode, tax_country, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider county.
     * @summary Updates a Self tax provider county
     * @param {string} county The county being updated.
     * @param {TaxCounty} tax_county tax county to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfCounty = function (county, tax_county, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSelfCounty(county, tax_county, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider postalCode.
     * @summary Updates a Self tax provider postalCode
     * @param {string} postal_code The postal code being updated.
     * @param {TaxPostalCode} tax_postal_code tax postal code to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfPostalCode = function (postal_code, tax_postal_code, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSelfPostalCode(postal_code, tax_postal_code, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider state.
     * @summary Updates a Self tax provider state
     * @param {string} stateCode The state code being updated.
     * @param {TaxState} tax_state tax state to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfState = function (stateCode, tax_state, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSelfState(stateCode, tax_state, options)(this.fetch, this.basePath);
    };
    /**
     * Update the Sovos tax provider.
     * @summary Update the Sovos tax provider
     * @param {TaxProviderSovos} tax_provider_sovos TaxProviderSovos object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSovos = function (tax_provider_sovos, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderSovos(tax_provider_sovos, options)(this.fetch, this.basePath);
    };
    /**
     * Update the TaxJar tax provider.
     * @summary Update the TaxJar tax provider
     * @param {TaxProviderTaxJar} tax_provider_taxJar TaxProviderTaxJar object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderTaxJar = function (tax_provider_taxJar, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderTaxJar(tax_provider_taxJar, options)(this.fetch, this.basePath);
    };
    /**
     * Update the UltraCart tax provider.
     * @summary Update the UltraCart tax provider
     * @param {TaxProviderUltraCart} tax_provider_ultracart TaxProviderUltraCart object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderUltraCart = function (tax_provider_ultracart, options) {
        return (0, exports.TaxApiFp)(this.configuration).updateTaxProviderUltraCart(tax_provider_ultracart, options)(this.fetch, this.basePath);
    };
    return TaxApi;
}(BaseAPI));
exports.TaxApi = TaxApi;
/**
 * UserApi - fetch parameter creator
 * @export
 */
var UserApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a group on the UltraCart account.
         * @summary Delete a group
         * @param {number} group_oid The group_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (group_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_oid' is not null or undefined
            if (group_oid === null || group_oid === undefined) {
                throw new RequiredError('group_oid', 'Required parameter group_oid was null or undefined when calling deleteGroup.');
            }
            var localVarPath = "/user/groups/{group_oid}"
                .replace("{".concat("group_oid", "}"), encodeURIComponent(String(group_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user on the UltraCart account.
         * @summary Delete a user
         * @param {number} user_id The user_id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling deleteUser.');
            }
            var localVarPath = "/user/users/{user_id}"
                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single group using the specified group id.
         * @summary Retrieve a group
         * @param {number} group_oid The group id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (group_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group_oid' is not null or undefined
            if (group_oid === null || group_oid === undefined) {
                throw new RequiredError('group_oid', 'Required parameter group_oid was null or undefined when calling getGroup.');
            }
            var localVarPath = "/user/groups/{group_oid}"
                .replace("{".concat("group_oid", "}"), encodeURIComponent(String(group_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/user/groups";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single user using the specified user id.
         * @summary Retrieve a user
         * @param {number} user_id The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling getUser.');
            }
            var localVarPath = "/user/users/{user_id}"
                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves logins for a single user using the specified user id.
         * @summary Retrieve a user's login history
         * @param {number} user_id The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLogins: function (user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling getUserLogins.');
            }
            var localVarPath = "/user/users/{user_id}/logins"
                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/user/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a group on the UltraCart account.
         * @summary Insert a group
         * @param {Group} group Group to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertGroup: function (group, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group', 'Required parameter group was null or undefined when calling insertGroup.');
            }
            var localVarPath = "/user/groups";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Group" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(group || {}) : (group || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a user on the UltraCart account.
         * @summary Insert a user
         * @param {User} user User to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling insertUser.');
            }
            var localVarPath = "/user/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(user || {}) : (user || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a group on the UltraCart account.
         * @summary Update a group
         * @param {Group} group Group to update
         * @param {number} group_oid The group_oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: function (group, group_oid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group', 'Required parameter group was null or undefined when calling updateGroup.');
            }
            // verify required parameter 'group_oid' is not null or undefined
            if (group_oid === null || group_oid === undefined) {
                throw new RequiredError('group_oid', 'Required parameter group_oid was null or undefined when calling updateGroup.');
            }
            var localVarPath = "/user/groups/{group_oid}"
                .replace("{".concat("group_oid", "}"), encodeURIComponent(String(group_oid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Group" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(group || {}) : (group || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user on the UltraCart account.
         * @summary Update a user
         * @param {User} user User to update
         * @param {number} user_id The user_id to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, user_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling updateUser.');
            }
            // verify required parameter 'user_id' is not null or undefined
            if (user_id === null || user_id === undefined) {
                throw new RequiredError('user_id', 'Required parameter user_id was null or undefined when calling updateUser.');
            }
            var localVarPath = "/user/users/{user_id}"
                .replace("{".concat("user_id", "}"), encodeURIComponent(String(user_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(user || {}) : (user || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserApiFetchParamCreator = UserApiFetchParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
var UserApiFp = function (configuration) {
    return {
        /**
         * Delete a group on the UltraCart account.
         * @summary Delete a group
         * @param {number} group_oid The group_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (group_oid, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).deleteGroup(group_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a user on the UltraCart account.
         * @summary Delete a user
         * @param {number} user_id The user_id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user_id, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).deleteUser(user_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single group using the specified group id.
         * @summary Retrieve a group
         * @param {number} group_oid The group id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (group_oid, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).getGroup(group_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).getGroups(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single user using the specified user id.
         * @summary Retrieve a user
         * @param {number} user_id The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user_id, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).getUser(user_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves logins for a single user using the specified user id.
         * @summary Retrieve a user's login history
         * @param {number} user_id The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLogins: function (user_id, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).getUserLogins(user_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).getUsers(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a group on the UltraCart account.
         * @summary Insert a group
         * @param {Group} group Group to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertGroup: function (group, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).insertGroup(group, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a user on the UltraCart account.
         * @summary Insert a user
         * @param {User} user User to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUser: function (user, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).insertUser(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a group on the UltraCart account.
         * @summary Update a group
         * @param {Group} group Group to update
         * @param {number} group_oid The group_oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: function (group, group_oid, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).updateGroup(group, group_oid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a user on the UltraCart account.
         * @summary Update a user
         * @param {User} user User to update
         * @param {number} user_id The user_id to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, user_id, options) {
            var localVarFetchArgs = (0, exports.UserApiFetchParamCreator)(configuration).updateUser(user, user_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
var UserApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a group on the UltraCart account.
         * @summary Delete a group
         * @param {number} group_oid The group_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (group_oid, options) {
            return (0, exports.UserApiFp)(configuration).deleteGroup(group_oid, options)(fetch, basePath);
        },
        /**
         * Delete a user on the UltraCart account.
         * @summary Delete a user
         * @param {number} user_id The user_id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (user_id, options) {
            return (0, exports.UserApiFp)(configuration).deleteUser(user_id, options)(fetch, basePath);
        },
        /**
         * Retrieves a single group using the specified group id.
         * @summary Retrieve a group
         * @param {number} group_oid The group id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (group_oid, options) {
            return (0, exports.UserApiFp)(configuration).getGroup(group_oid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (options) {
            return (0, exports.UserApiFp)(configuration).getGroups(options)(fetch, basePath);
        },
        /**
         * Retrieves a single user using the specified user id.
         * @summary Retrieve a user
         * @param {number} user_id The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (user_id, options) {
            return (0, exports.UserApiFp)(configuration).getUser(user_id, options)(fetch, basePath);
        },
        /**
         * Retrieves logins for a single user using the specified user id.
         * @summary Retrieve a user's login history
         * @param {number} user_id The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLogins: function (user_id, options) {
            return (0, exports.UserApiFp)(configuration).getUserLogins(user_id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (options) {
            return (0, exports.UserApiFp)(configuration).getUsers(options)(fetch, basePath);
        },
        /**
         * Insert a group on the UltraCart account.
         * @summary Insert a group
         * @param {Group} group Group to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertGroup: function (group, options) {
            return (0, exports.UserApiFp)(configuration).insertGroup(group, options)(fetch, basePath);
        },
        /**
         * Insert a user on the UltraCart account.
         * @summary Insert a user
         * @param {User} user User to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUser: function (user, options) {
            return (0, exports.UserApiFp)(configuration).insertUser(user, options)(fetch, basePath);
        },
        /**
         * Update a group on the UltraCart account.
         * @summary Update a group
         * @param {Group} group Group to update
         * @param {number} group_oid The group_oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: function (group, group_oid, options) {
            return (0, exports.UserApiFp)(configuration).updateGroup(group, group_oid, options)(fetch, basePath);
        },
        /**
         * Update a user on the UltraCart account.
         * @summary Update a user
         * @param {User} user User to update
         * @param {number} user_id The user_id to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, user_id, options) {
            return (0, exports.UserApiFp)(configuration).updateUser(user, user_id, options)(fetch, basePath);
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a group on the UltraCart account.
     * @summary Delete a group
     * @param {number} group_oid The group_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteGroup = function (group_oid, options) {
        return (0, exports.UserApiFp)(this.configuration).deleteGroup(group_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a user on the UltraCart account.
     * @summary Delete a user
     * @param {number} user_id The user_id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUser = function (user_id, options) {
        return (0, exports.UserApiFp)(this.configuration).deleteUser(user_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single group using the specified group id.
     * @summary Retrieve a group
     * @param {number} group_oid The group id to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getGroup = function (group_oid, options) {
        return (0, exports.UserApiFp)(this.configuration).getGroup(group_oid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getGroups = function (options) {
        return (0, exports.UserApiFp)(this.configuration).getGroups(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single user using the specified user id.
     * @summary Retrieve a user
     * @param {number} user_id The user id to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUser = function (user_id, options) {
        return (0, exports.UserApiFp)(this.configuration).getUser(user_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves logins for a single user using the specified user id.
     * @summary Retrieve a user's login history
     * @param {number} user_id The user id to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserLogins = function (user_id, options) {
        return (0, exports.UserApiFp)(this.configuration).getUserLogins(user_id, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUsers = function (options) {
        return (0, exports.UserApiFp)(this.configuration).getUsers(options)(this.fetch, this.basePath);
    };
    /**
     * Insert a group on the UltraCart account.
     * @summary Insert a group
     * @param {Group} group Group to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.insertGroup = function (group, options) {
        return (0, exports.UserApiFp)(this.configuration).insertGroup(group, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a user on the UltraCart account.
     * @summary Insert a user
     * @param {User} user User to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.insertUser = function (user, options) {
        return (0, exports.UserApiFp)(this.configuration).insertUser(user, options)(this.fetch, this.basePath);
    };
    /**
     * Update a group on the UltraCart account.
     * @summary Update a group
     * @param {Group} group Group to update
     * @param {number} group_oid The group_oid to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateGroup = function (group, group_oid, options) {
        return (0, exports.UserApiFp)(this.configuration).updateGroup(group, group_oid, options)(this.fetch, this.basePath);
    };
    /**
     * Update a user on the UltraCart account.
     * @summary Update a user
     * @param {User} user User to update
     * @param {number} user_id The user_id to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUser = function (user, user_id, options) {
        return (0, exports.UserApiFp)(this.configuration).updateUser(user, user_id, options)(this.fetch, this.basePath);
    };
    return UserApi;
}(BaseAPI));
exports.UserApi = UserApi;
/**
 * WebhookApi - fetch parameter creator
 * @export
 */
var WebhookApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a webhook on the UltraCart account.
         * @summary Delete a webhook
         * @param {number} webhookOid The webhook oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: function (webhookOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling deleteWebhook.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}"
                .replace("{".concat("webhookOid", "}"), encodeURIComponent(String(webhookOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
         * @summary Delete a webhook by URL
         * @param {Webhook} webhook Webhook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookByUrl: function (webhook, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhook' is not null or undefined
            if (webhook === null || webhook === undefined) {
                throw new RequiredError('webhook', 'Required parameter webhook was null or undefined when calling deleteWebhookByUrl.');
            }
            var localVarPath = "/webhook/webhooks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Webhook" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(webhook || {}) : (webhook || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an individual log for a webhook given the webhook oid the request id.
         * @summary Retrieve an individual log
         * @param {number} webhookOid The webhook oid that owns the log.
         * @param {string} requestId The request id associated with the log to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLog: function (webhookOid, requestId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling getWebhookLog.');
            }
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId', 'Required parameter requestId was null or undefined when calling getWebhookLog.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}/logs/{requestId}"
                .replace("{".concat("webhookOid", "}"), encodeURIComponent(String(webhookOid)))
                .replace("{".concat("requestId", "}"), encodeURIComponent(String(requestId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
         * @summary Retrieve the log summaries
         * @param {number} webhookOid The webhook oid to retrieve log summaries for.
         * @param {string} [requestId]
         * @param {string} [beginDate]
         * @param {string} [endDate]
         * @param {string} [status]
         * @param {string} [event]
         * @param {string} [orderId]
         * @param {string} [request]
         * @param {number} [duration]
         * @param {number} [_limit] The maximum number of records to return on this one API call.
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch log summaries that have been delivered since this date/time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogSummaries: function (webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling getWebhookLogSummaries.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}/logs"
                .replace("{".concat("webhookOid", "}"), encodeURIComponent(String(webhookOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }
            if (beginDate !== undefined) {
                localVarQueryParameter['beginDate'] = beginDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }
            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }
            if (request !== undefined) {
                localVarQueryParameter['request'] = request;
            }
            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_since !== undefined) {
                localVarQueryParameter['_since'] = _since;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the webhooks associated with this application.
         * @summary Retrieve webhooks
         * @param {number} [_limit] The maximum number of records to return on this one API call.
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the webhooks.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: function (_limit, _offset, _sort, _placeholders, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/webhook/webhooks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
         * @summary Add a webhook
         * @param {Webhook} webhook Webhook to create
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWebhook: function (webhook, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhook' is not null or undefined
            if (webhook === null || webhook === undefined) {
                throw new RequiredError('webhook', 'Required parameter webhook was null or undefined when calling insertWebhook.');
            }
            var localVarPath = "/webhook/webhooks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Webhook" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(webhook || {}) : (webhook || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
         * @summary Resend events to the webhook endpoint.
         * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
         * @param {string} eventName The event to reflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEvent: function (webhookOid, eventName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling resendEvent.');
            }
            // verify required parameter 'eventName' is not null or undefined
            if (eventName === null || eventName === undefined) {
                throw new RequiredError('eventName', 'Required parameter eventName was null or undefined when calling resendEvent.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}/reflow/{eventName}"
                .replace("{".concat("webhookOid", "}"), encodeURIComponent(String(webhookOid)))
                .replace("{".concat("eventName", "}"), encodeURIComponent(String(eventName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a webhook on the account
         * @summary Update a webhook
         * @param {Webhook} webhook Webhook to update
         * @param {number} webhookOid The webhook oid to update.
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: function (webhook, webhookOid, _placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhook' is not null or undefined
            if (webhook === null || webhook === undefined) {
                throw new RequiredError('webhook', 'Required parameter webhook was null or undefined when calling updateWebhook.');
            }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling updateWebhook.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}"
                .replace("{".concat("webhookOid", "}"), encodeURIComponent(String(webhookOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = _placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Webhook" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(webhook || {}) : (webhook || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.WebhookApiFetchParamCreator = WebhookApiFetchParamCreator;
/**
 * WebhookApi - functional programming interface
 * @export
 */
var WebhookApiFp = function (configuration) {
    return {
        /**
         * Delete a webhook on the UltraCart account.
         * @summary Delete a webhook
         * @param {number} webhookOid The webhook oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: function (webhookOid, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).deleteWebhook(webhookOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
         * @summary Delete a webhook by URL
         * @param {Webhook} webhook Webhook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookByUrl: function (webhook, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).deleteWebhookByUrl(webhook, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves an individual log for a webhook given the webhook oid the request id.
         * @summary Retrieve an individual log
         * @param {number} webhookOid The webhook oid that owns the log.
         * @param {string} requestId The request id associated with the log to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLog: function (webhookOid, requestId, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).getWebhookLog(webhookOid, requestId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
         * @summary Retrieve the log summaries
         * @param {number} webhookOid The webhook oid to retrieve log summaries for.
         * @param {string} [requestId]
         * @param {string} [beginDate]
         * @param {string} [endDate]
         * @param {string} [status]
         * @param {string} [event]
         * @param {string} [orderId]
         * @param {string} [request]
         * @param {number} [duration]
         * @param {number} [_limit] The maximum number of records to return on this one API call.
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch log summaries that have been delivered since this date/time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogSummaries: function (webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).getWebhookLogSummaries(webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the webhooks associated with this application.
         * @summary Retrieve webhooks
         * @param {number} [_limit] The maximum number of records to return on this one API call.
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the webhooks.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: function (_limit, _offset, _sort, _placeholders, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).getWebhooks(_limit, _offset, _sort, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
         * @summary Add a webhook
         * @param {Webhook} webhook Webhook to create
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWebhook: function (webhook, _placeholders, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).insertWebhook(webhook, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
         * @summary Resend events to the webhook endpoint.
         * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
         * @param {string} eventName The event to reflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEvent: function (webhookOid, eventName, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).resendEvent(webhookOid, eventName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a webhook on the account
         * @summary Update a webhook
         * @param {Webhook} webhook Webhook to update
         * @param {number} webhookOid The webhook oid to update.
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: function (webhook, webhookOid, _placeholders, options) {
            var localVarFetchArgs = (0, exports.WebhookApiFetchParamCreator)(configuration).updateWebhook(webhook, webhookOid, _placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.WebhookApiFp = WebhookApiFp;
/**
 * WebhookApi - factory interface
 * @export
 */
var WebhookApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a webhook on the UltraCart account.
         * @summary Delete a webhook
         * @param {number} webhookOid The webhook oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: function (webhookOid, options) {
            return (0, exports.WebhookApiFp)(configuration).deleteWebhook(webhookOid, options)(fetch, basePath);
        },
        /**
         * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
         * @summary Delete a webhook by URL
         * @param {Webhook} webhook Webhook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookByUrl: function (webhook, options) {
            return (0, exports.WebhookApiFp)(configuration).deleteWebhookByUrl(webhook, options)(fetch, basePath);
        },
        /**
         * Retrieves an individual log for a webhook given the webhook oid the request id.
         * @summary Retrieve an individual log
         * @param {number} webhookOid The webhook oid that owns the log.
         * @param {string} requestId The request id associated with the log to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLog: function (webhookOid, requestId, options) {
            return (0, exports.WebhookApiFp)(configuration).getWebhookLog(webhookOid, requestId, options)(fetch, basePath);
        },
        /**
         * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
         * @summary Retrieve the log summaries
         * @param {number} webhookOid The webhook oid to retrieve log summaries for.
         * @param {string} [requestId]
         * @param {string} [beginDate]
         * @param {string} [endDate]
         * @param {string} [status]
         * @param {string} [event]
         * @param {string} [orderId]
         * @param {string} [request]
         * @param {number} [duration]
         * @param {number} [_limit] The maximum number of records to return on this one API call.
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_since] Fetch log summaries that have been delivered since this date/time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogSummaries: function (webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options) {
            return (0, exports.WebhookApiFp)(configuration).getWebhookLogSummaries(webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options)(fetch, basePath);
        },
        /**
         * Retrieves the webhooks associated with this application.
         * @summary Retrieve webhooks
         * @param {number} [_limit] The maximum number of records to return on this one API call.
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the webhooks.  See documentation for examples
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: function (_limit, _offset, _sort, _placeholders, options) {
            return (0, exports.WebhookApiFp)(configuration).getWebhooks(_limit, _offset, _sort, _placeholders, options)(fetch, basePath);
        },
        /**
         * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
         * @summary Add a webhook
         * @param {Webhook} webhook Webhook to create
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWebhook: function (webhook, _placeholders, options) {
            return (0, exports.WebhookApiFp)(configuration).insertWebhook(webhook, _placeholders, options)(fetch, basePath);
        },
        /**
         * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
         * @summary Resend events to the webhook endpoint.
         * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
         * @param {string} eventName The event to reflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEvent: function (webhookOid, eventName, options) {
            return (0, exports.WebhookApiFp)(configuration).resendEvent(webhookOid, eventName, options)(fetch, basePath);
        },
        /**
         * Update a webhook on the account
         * @summary Update a webhook
         * @param {Webhook} webhook Webhook to update
         * @param {number} webhookOid The webhook oid to update.
         * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: function (webhook, webhookOid, _placeholders, options) {
            return (0, exports.WebhookApiFp)(configuration).updateWebhook(webhook, webhookOid, _placeholders, options)(fetch, basePath);
        },
    };
};
exports.WebhookApiFactory = WebhookApiFactory;
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
var WebhookApi = /** @class */ (function (_super) {
    __extends(WebhookApi, _super);
    function WebhookApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a webhook on the UltraCart account.
     * @summary Delete a webhook
     * @param {number} webhookOid The webhook oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.deleteWebhook = function (webhookOid, options) {
        return (0, exports.WebhookApiFp)(this.configuration).deleteWebhook(webhookOid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
     * @summary Delete a webhook by URL
     * @param {Webhook} webhook Webhook to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.deleteWebhookByUrl = function (webhook, options) {
        return (0, exports.WebhookApiFp)(this.configuration).deleteWebhookByUrl(webhook, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves an individual log for a webhook given the webhook oid the request id.
     * @summary Retrieve an individual log
     * @param {number} webhookOid The webhook oid that owns the log.
     * @param {string} requestId The request id associated with the log to view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.getWebhookLog = function (webhookOid, requestId, options) {
        return (0, exports.WebhookApiFp)(this.configuration).getWebhookLog(webhookOid, requestId, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
     * @summary Retrieve the log summaries
     * @param {number} webhookOid The webhook oid to retrieve log summaries for.
     * @param {string} [requestId]
     * @param {string} [beginDate]
     * @param {string} [endDate]
     * @param {string} [status]
     * @param {string} [event]
     * @param {string} [orderId]
     * @param {string} [request]
     * @param {number} [duration]
     * @param {number} [_limit] The maximum number of records to return on this one API call.
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_since] Fetch log summaries that have been delivered since this date/time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.getWebhookLogSummaries = function (webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options) {
        return (0, exports.WebhookApiFp)(this.configuration).getWebhookLogSummaries(webhookOid, requestId, beginDate, endDate, status, event, orderId, request, duration, _limit, _offset, _since, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the webhooks associated with this application.
     * @summary Retrieve webhooks
     * @param {number} [_limit] The maximum number of records to return on this one API call.
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the webhooks.  See documentation for examples
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.getWebhooks = function (_limit, _offset, _sort, _placeholders, options) {
        return (0, exports.WebhookApiFp)(this.configuration).getWebhooks(_limit, _offset, _sort, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
     * @summary Add a webhook
     * @param {Webhook} webhook Webhook to create
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.insertWebhook = function (webhook, _placeholders, options) {
        return (0, exports.WebhookApiFp)(this.configuration).insertWebhook(webhook, _placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
     * @summary Resend events to the webhook endpoint.
     * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
     * @param {string} eventName The event to reflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.resendEvent = function (webhookOid, eventName, options) {
        return (0, exports.WebhookApiFp)(this.configuration).resendEvent(webhookOid, eventName, options)(this.fetch, this.basePath);
    };
    /**
     * Update a webhook on the account
     * @summary Update a webhook
     * @param {Webhook} webhook Webhook to update
     * @param {number} webhookOid The webhook oid to update.
     * @param {boolean} [_placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.updateWebhook = function (webhook, webhookOid, _placeholders, options) {
        return (0, exports.WebhookApiFp)(this.configuration).updateWebhook(webhook, webhookOid, _placeholders, options)(this.fetch, this.basePath);
    };
    return WebhookApi;
}(BaseAPI));
exports.WebhookApi = WebhookApi;
/**
 * WorkflowApi - fetch parameter creator
 * @export
 */
var WorkflowApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieve a JWT to authorize an agent to make a websocket connection.
         * @summary Get agent websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAgentWebsocketAuthorization: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/workflow/agent/auth";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of groups that workflow tasks can be assigned to
         * @summary Retrieve a list of groups that workflow tasks can be assigned to
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAssignmentGroups: function (_limit, _offset, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/workflow/assignment_groups";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of users that workflow tasks can be assigned to
         * @summary Retrieve a list of users that workflow tasks can be assigned to
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAssignmentUsers: function (_limit, _offset, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/workflow/assignment_users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a user object for myself
         * @summary Retrieve a user object for myself
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowMe: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/workflow/me";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a workflow task
         * @summary Retrieve a workflow task
         * @param {string} task_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTask: function (task_uuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'task_uuid' is not null or undefined
            if (task_uuid === null || task_uuid === undefined) {
                throw new RequiredError('task_uuid', 'Required parameter task_uuid was null or undefined when calling getWorkflowTask.');
            }
            var localVarPath = "/workflow/tasks/{task_uuid}"
                .replace("{".concat("task_uuid", "}"), encodeURIComponent(String(task_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a presigned workflow task attachment upload URL
         * @summary Get a presigned workflow task attachment upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskAttachmentUploadUrl: function (extension, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'extension' is not null or undefined
            if (extension === null || extension === undefined) {
                throw new RequiredError('extension', 'Required parameter extension was null or undefined when calling getWorkflowTaskAttachmentUploadUrl.');
            }
            var localVarPath = "/workflow/tasks/attachments/{extension}"
                .replace("{".concat("extension", "}"), encodeURIComponent(String(extension)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a workflow task by object type and id
         * @summary Retrieve a workflow task by object type and id
         * @param {string} object_type
         * @param {string} object_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskByObjectType: function (object_type, object_id, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'object_type' is not null or undefined
            if (object_type === null || object_type === undefined) {
                throw new RequiredError('object_type', 'Required parameter object_type was null or undefined when calling getWorkflowTaskByObjectType.');
            }
            // verify required parameter 'object_id' is not null or undefined
            if (object_id === null || object_id === undefined) {
                throw new RequiredError('object_id', 'Required parameter object_id was null or undefined when calling getWorkflowTaskByObjectType.');
            }
            var localVarPath = "/workflow/tasks/by/{object_type}/{object_id}"
                .replace("{".concat("object_type", "}"), encodeURIComponent(String(object_type)))
                .replace("{".concat("object_id", "}"), encodeURIComponent(String(object_id)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve workflow task open count
         * @summary Retrieve workflow task open count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskOpenCount: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/workflow/tasks/open_count";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a unique list of all the existing workflow task tags.
         * @summary Get a list of existing workflow task tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskTags: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/workflow/tasks/tags";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a set of workflow tasks from the account based on a query object.
         * @summary Search workflow tasks
         * @param {WorkflowTasksRequest} workflow_tasks_query Workflow tasks query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTasks: function (workflow_tasks_query, _limit, _offset, _sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workflow_tasks_query' is not null or undefined
            if (workflow_tasks_query === null || workflow_tasks_query === undefined) {
                throw new RequiredError('workflow_tasks_query', 'Required parameter workflow_tasks_query was null or undefined when calling getWorkflowTasks.');
            }
            var localVarPath = "/workflow/tasks/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (_limit !== undefined) {
                localVarQueryParameter['_limit'] = _limit;
            }
            if (_offset !== undefined) {
                localVarQueryParameter['_offset'] = _offset;
            }
            if (_sort !== undefined) {
                localVarQueryParameter['_sort'] = _sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("WorkflowTasksRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(workflow_tasks_query || {}) : (workflow_tasks_query || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a workflow task
         * @summary Insert a workflow task
         * @param {WorkflowTask} workflow_task workflow task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWorkflowTask: function (workflow_task, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'workflow_task' is not null or undefined
            if (workflow_task === null || workflow_task === undefined) {
                throw new RequiredError('workflow_task', 'Required parameter workflow_task was null or undefined when calling insertWorkflowTask.');
            }
            var localVarPath = "/workflow/tasks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("WorkflowTask" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(workflow_task || {}) : (workflow_task || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a workflow task
         * @summary Update a workflow task
         * @param {string} task_uuid
         * @param {WorkflowTask} workflow_task Workflow task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowTask: function (task_uuid, workflow_task, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'task_uuid' is not null or undefined
            if (task_uuid === null || task_uuid === undefined) {
                throw new RequiredError('task_uuid', 'Required parameter task_uuid was null or undefined when calling updateWorkflowTask.');
            }
            // verify required parameter 'workflow_task' is not null or undefined
            if (workflow_task === null || workflow_task === undefined) {
                throw new RequiredError('workflow_task', 'Required parameter workflow_task was null or undefined when calling updateWorkflowTask.');
            }
            var localVarPath = "/workflow/tasks/{task_uuid}"
                .replace("{".concat("task_uuid", "}"), encodeURIComponent(String(task_uuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["workflow_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("WorkflowTask" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(workflow_task || {}) : (workflow_task || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.WorkflowApiFetchParamCreator = WorkflowApiFetchParamCreator;
/**
 * WorkflowApi - functional programming interface
 * @export
 */
var WorkflowApiFp = function (configuration) {
    return {
        /**
         * Retrieve a JWT to authorize an agent to make a websocket connection.
         * @summary Get agent websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAgentWebsocketAuthorization: function (options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowAgentWebsocketAuthorization(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of groups that workflow tasks can be assigned to
         * @summary Retrieve a list of groups that workflow tasks can be assigned to
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAssignmentGroups: function (_limit, _offset, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowAssignmentGroups(_limit, _offset, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a list of users that workflow tasks can be assigned to
         * @summary Retrieve a list of users that workflow tasks can be assigned to
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAssignmentUsers: function (_limit, _offset, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowAssignmentUsers(_limit, _offset, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a user object for myself
         * @summary Retrieve a user object for myself
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowMe: function (options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowMe(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a workflow task
         * @summary Retrieve a workflow task
         * @param {string} task_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTask: function (task_uuid, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowTask(task_uuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a presigned workflow task attachment upload URL
         * @summary Get a presigned workflow task attachment upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskAttachmentUploadUrl: function (extension, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowTaskAttachmentUploadUrl(extension, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve a workflow task by object type and id
         * @summary Retrieve a workflow task by object type and id
         * @param {string} object_type
         * @param {string} object_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskByObjectType: function (object_type, object_id, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowTaskByObjectType(object_type, object_id, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve workflow task open count
         * @summary Retrieve workflow task open count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskOpenCount: function (options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowTaskOpenCount(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a unique list of all the existing workflow task tags.
         * @summary Get a list of existing workflow task tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskTags: function (options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowTaskTags(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a set of workflow tasks from the account based on a query object.
         * @summary Search workflow tasks
         * @param {WorkflowTasksRequest} workflow_tasks_query Workflow tasks query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTasks: function (workflow_tasks_query, _limit, _offset, _sort, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).getWorkflowTasks(workflow_tasks_query, _limit, _offset, _sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a workflow task
         * @summary Insert a workflow task
         * @param {WorkflowTask} workflow_task workflow task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWorkflowTask: function (workflow_task, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).insertWorkflowTask(workflow_task, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a workflow task
         * @summary Update a workflow task
         * @param {string} task_uuid
         * @param {WorkflowTask} workflow_task Workflow task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowTask: function (task_uuid, workflow_task, options) {
            var localVarFetchArgs = (0, exports.WorkflowApiFetchParamCreator)(configuration).updateWorkflowTask(task_uuid, workflow_task, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.WorkflowApiFp = WorkflowApiFp;
/**
 * WorkflowApi - factory interface
 * @export
 */
var WorkflowApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieve a JWT to authorize an agent to make a websocket connection.
         * @summary Get agent websocket authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAgentWebsocketAuthorization: function (options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowAgentWebsocketAuthorization(options)(fetch, basePath);
        },
        /**
         * Retrieve a list of groups that workflow tasks can be assigned to
         * @summary Retrieve a list of groups that workflow tasks can be assigned to
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAssignmentGroups: function (_limit, _offset, options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowAssignmentGroups(_limit, _offset, options)(fetch, basePath);
        },
        /**
         * Retrieve a list of users that workflow tasks can be assigned to
         * @summary Retrieve a list of users that workflow tasks can be assigned to
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowAssignmentUsers: function (_limit, _offset, options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowAssignmentUsers(_limit, _offset, options)(fetch, basePath);
        },
        /**
         * Retrieve a user object for myself
         * @summary Retrieve a user object for myself
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowMe: function (options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowMe(options)(fetch, basePath);
        },
        /**
         * Retrieve a workflow task
         * @summary Retrieve a workflow task
         * @param {string} task_uuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTask: function (task_uuid, options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowTask(task_uuid, options)(fetch, basePath);
        },
        /**
         * Get a presigned workflow task attachment upload URL
         * @summary Get a presigned workflow task attachment upload URL
         * @param {string} extension
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskAttachmentUploadUrl: function (extension, options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowTaskAttachmentUploadUrl(extension, options)(fetch, basePath);
        },
        /**
         * Retrieve a workflow task by object type and id
         * @summary Retrieve a workflow task by object type and id
         * @param {string} object_type
         * @param {string} object_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskByObjectType: function (object_type, object_id, options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowTaskByObjectType(object_type, object_id, options)(fetch, basePath);
        },
        /**
         * Retrieve workflow task open count
         * @summary Retrieve workflow task open count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskOpenCount: function (options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowTaskOpenCount(options)(fetch, basePath);
        },
        /**
         * Retrieves a unique list of all the existing workflow task tags.
         * @summary Get a list of existing workflow task tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTaskTags: function (options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowTaskTags(options)(fetch, basePath);
        },
        /**
         * Retrieves a set of workflow tasks from the account based on a query object.
         * @summary Search workflow tasks
         * @param {WorkflowTasksRequest} workflow_tasks_query Workflow tasks query
         * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
         * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowTasks: function (workflow_tasks_query, _limit, _offset, _sort, options) {
            return (0, exports.WorkflowApiFp)(configuration).getWorkflowTasks(workflow_tasks_query, _limit, _offset, _sort, options)(fetch, basePath);
        },
        /**
         * Insert a workflow task
         * @summary Insert a workflow task
         * @param {WorkflowTask} workflow_task workflow task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWorkflowTask: function (workflow_task, options) {
            return (0, exports.WorkflowApiFp)(configuration).insertWorkflowTask(workflow_task, options)(fetch, basePath);
        },
        /**
         * Update a workflow task
         * @summary Update a workflow task
         * @param {string} task_uuid
         * @param {WorkflowTask} workflow_task Workflow task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflowTask: function (task_uuid, workflow_task, options) {
            return (0, exports.WorkflowApiFp)(configuration).updateWorkflowTask(task_uuid, workflow_task, options)(fetch, basePath);
        },
    };
};
exports.WorkflowApiFactory = WorkflowApiFactory;
/**
 * WorkflowApi - object-oriented interface
 * @export
 * @class WorkflowApi
 * @extends {BaseAPI}
 */
var WorkflowApi = /** @class */ (function (_super) {
    __extends(WorkflowApi, _super);
    function WorkflowApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve a JWT to authorize an agent to make a websocket connection.
     * @summary Get agent websocket authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowAgentWebsocketAuthorization = function (options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowAgentWebsocketAuthorization(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of groups that workflow tasks can be assigned to
     * @summary Retrieve a list of groups that workflow tasks can be assigned to
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowAssignmentGroups = function (_limit, _offset, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowAssignmentGroups(_limit, _offset, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a list of users that workflow tasks can be assigned to
     * @summary Retrieve a list of users that workflow tasks can be assigned to
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowAssignmentUsers = function (_limit, _offset, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowAssignmentUsers(_limit, _offset, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a user object for myself
     * @summary Retrieve a user object for myself
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowMe = function (options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowMe(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a workflow task
     * @summary Retrieve a workflow task
     * @param {string} task_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowTask = function (task_uuid, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowTask(task_uuid, options)(this.fetch, this.basePath);
    };
    /**
     * Get a presigned workflow task attachment upload URL
     * @summary Get a presigned workflow task attachment upload URL
     * @param {string} extension
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowTaskAttachmentUploadUrl = function (extension, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowTaskAttachmentUploadUrl(extension, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve a workflow task by object type and id
     * @summary Retrieve a workflow task by object type and id
     * @param {string} object_type
     * @param {string} object_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowTaskByObjectType = function (object_type, object_id, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowTaskByObjectType(object_type, object_id, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve workflow task open count
     * @summary Retrieve workflow task open count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowTaskOpenCount = function (options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowTaskOpenCount(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a unique list of all the existing workflow task tags.
     * @summary Get a list of existing workflow task tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowTaskTags = function (options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowTaskTags(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a set of workflow tasks from the account based on a query object.
     * @summary Search workflow tasks
     * @param {WorkflowTasksRequest} workflow_tasks_query Workflow tasks query
     * @param {number} [_limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [_offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [_sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.getWorkflowTasks = function (workflow_tasks_query, _limit, _offset, _sort, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).getWorkflowTasks(workflow_tasks_query, _limit, _offset, _sort, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a workflow task
     * @summary Insert a workflow task
     * @param {WorkflowTask} workflow_task workflow task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.insertWorkflowTask = function (workflow_task, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).insertWorkflowTask(workflow_task, options)(this.fetch, this.basePath);
    };
    /**
     * Update a workflow task
     * @summary Update a workflow task
     * @param {string} task_uuid
     * @param {WorkflowTask} workflow_task Workflow task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApi
     */
    WorkflowApi.prototype.updateWorkflowTask = function (task_uuid, workflow_task, options) {
        return (0, exports.WorkflowApiFp)(this.configuration).updateWorkflowTask(task_uuid, workflow_task, options)(this.fetch, this.basePath);
    };
    return WorkflowApi;
}(BaseAPI));
exports.WorkflowApi = WorkflowApi;

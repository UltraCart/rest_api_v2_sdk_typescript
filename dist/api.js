"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookApi = exports.WebhookApiFactory = exports.WebhookApiFp = exports.WebhookApiFetchParamCreator = exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiFetchParamCreator = exports.TaxApi = exports.TaxApiFactory = exports.TaxApiFp = exports.TaxApiFetchParamCreator = exports.StorefrontApi = exports.StorefrontApiFactory = exports.StorefrontApiFp = exports.StorefrontApiFetchParamCreator = exports.OrderApi = exports.OrderApiFactory = exports.OrderApiFp = exports.OrderApiFetchParamCreator = exports.OauthApi = exports.OauthApiFactory = exports.OauthApiFp = exports.OauthApiFetchParamCreator = exports.ItemApi = exports.ItemApiFactory = exports.ItemApiFp = exports.ItemApiFetchParamCreator = exports.FulfillmentApi = exports.FulfillmentApiFactory = exports.FulfillmentApiFp = exports.FulfillmentApiFetchParamCreator = exports.CustomerApi = exports.CustomerApiFactory = exports.CustomerApiFp = exports.CustomerApiFetchParamCreator = exports.CouponApi = exports.CouponApiFactory = exports.CouponApiFp = exports.CouponApiFetchParamCreator = exports.CheckoutApi = exports.CheckoutApiFactory = exports.CheckoutApiFp = exports.CheckoutApiFetchParamCreator = exports.ChargebackApi = exports.ChargebackApiFactory = exports.ChargebackApiFp = exports.ChargebackApiFetchParamCreator = exports.AutoOrderApi = exports.AutoOrderApiFactory = exports.AutoOrderApiFp = exports.AutoOrderApiFetchParamCreator = exports.AffiliateApi = exports.AffiliateApiFactory = exports.AffiliateApiFp = exports.AffiliateApiFetchParamCreator = exports.Weight = exports.Webhook = exports.TempMultimedia = exports.OrderQuery = exports.OrderPaymentECheck = exports.OrderPaymentCreditCard = exports.OrderPayment = exports.OrderItemOption = exports.OrderFraudScore = exports.OrderFormat = exports.OrderAutoOrder = exports.OrderAffiliateLedger = exports.Order = exports.OauthTokenResponse = exports.ItemThirdPartyEmailMarketing = exports.ItemTag = exports.ItemShippingMethod = exports.ItemShippingDestinationRestriction = exports.ItemRestrictionItem = exports.ItemRelatedItem = exports.ItemOptionValue = exports.ItemOption = exports.ItemContentMultimedia = exports.ItemAutoOrderStep = exports.Experiment = exports.EmailCommseqStep = exports.Distance = exports.CheckoutHandoffRequest = exports.CartKitComponentOption = exports.CartItemOption = exports.CartItemMultimedia = exports.CartCustomerProfileCreditCard = exports.AutoOrderItemSimpleSchedule = exports.AutoOrderItem = exports.AutoOrder = exports.AffiliateLink = exports.AffiliateLedger = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "https://secure.ultracart.com/rest/v2".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 * @export
 * @namespace AffiliateLedger
 */
var AffiliateLedger;
(function (AffiliateLedger) {
    /**
     * @export
     * @enum {string}
     */
    var TransactionStateEnum;
    (function (TransactionStateEnum) {
        TransactionStateEnum[TransactionStateEnum["Pending"] = 'Pending'] = "Pending";
        TransactionStateEnum[TransactionStateEnum["Posted"] = 'Posted'] = "Posted";
        TransactionStateEnum[TransactionStateEnum["Approved"] = 'Approved'] = "Approved";
        TransactionStateEnum[TransactionStateEnum["Paid"] = 'Paid'] = "Paid";
        TransactionStateEnum[TransactionStateEnum["Rejected"] = 'Rejected'] = "Rejected";
        TransactionStateEnum[TransactionStateEnum["PartiallyPaid"] = 'Partially Paid'] = "PartiallyPaid";
    })(TransactionStateEnum = AffiliateLedger.TransactionStateEnum || (AffiliateLedger.TransactionStateEnum = {}));
})(AffiliateLedger = exports.AffiliateLedger || (exports.AffiliateLedger = {}));
/**
 * @export
 * @namespace AffiliateLink
 */
var AffiliateLink;
(function (AffiliateLink) {
    /**
     * @export
     * @enum {string}
     */
    var CustomHtmlApprovalStatusEnum;
    (function (CustomHtmlApprovalStatusEnum) {
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Pending"] = 'Pending'] = "Pending";
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Approved"] = 'Approved'] = "Approved";
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(CustomHtmlApprovalStatusEnum = AffiliateLink.CustomHtmlApprovalStatusEnum || (AffiliateLink.CustomHtmlApprovalStatusEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var InvisibleLinkApprovalStatusEnum;
    (function (InvisibleLinkApprovalStatusEnum) {
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Pending"] = 'Pending'] = "Pending";
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Approved"] = 'Approved'] = "Approved";
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(InvisibleLinkApprovalStatusEnum = AffiliateLink.InvisibleLinkApprovalStatusEnum || (AffiliateLink.InvisibleLinkApprovalStatusEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'image'] = "Image";
        TypeEnum[TypeEnum["Text"] = 'text'] = "Text";
        TypeEnum[TypeEnum["Invisible"] = 'invisible'] = "Invisible";
        TypeEnum[TypeEnum["Direct"] = 'direct'] = "Direct";
    })(TypeEnum = AffiliateLink.TypeEnum || (AffiliateLink.TypeEnum = {}));
})(AffiliateLink = exports.AffiliateLink || (exports.AffiliateLink = {}));
/**
 * @export
 * @namespace AutoOrder
 */
var AutoOrder;
(function (AutoOrder) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Canceled"] = 'canceled'] = "Canceled";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
    })(StatusEnum = AutoOrder.StatusEnum || (AutoOrder.StatusEnum = {}));
})(AutoOrder = exports.AutoOrder || (exports.AutoOrder = {}));
/**
 * @export
 * @namespace AutoOrderItem
 */
var AutoOrderItem;
(function (AutoOrderItem) {
    /**
     * @export
     * @enum {string}
     */
    var FrequencyEnum;
    (function (FrequencyEnum) {
        FrequencyEnum[FrequencyEnum["Weekly"] = 'Weekly'] = "Weekly";
        FrequencyEnum[FrequencyEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        FrequencyEnum[FrequencyEnum["Every_"] = 'Every...'] = "Every_";
        FrequencyEnum[FrequencyEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        FrequencyEnum[FrequencyEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        FrequencyEnum[FrequencyEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        FrequencyEnum[FrequencyEnum["Monthly"] = 'Monthly'] = "Monthly";
        FrequencyEnum[FrequencyEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        FrequencyEnum[FrequencyEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        FrequencyEnum[FrequencyEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        FrequencyEnum[FrequencyEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        FrequencyEnum[FrequencyEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        FrequencyEnum[FrequencyEnum["Yearly"] = 'Yearly'] = "Yearly";
    })(FrequencyEnum = AutoOrderItem.FrequencyEnum || (AutoOrderItem.FrequencyEnum = {}));
})(AutoOrderItem = exports.AutoOrderItem || (exports.AutoOrderItem = {}));
/**
 * @export
 * @namespace AutoOrderItemSimpleSchedule
 */
var AutoOrderItemSimpleSchedule;
(function (AutoOrderItemSimpleSchedule) {
    /**
     * @export
     * @enum {string}
     */
    var FrequencyEnum;
    (function (FrequencyEnum) {
        FrequencyEnum[FrequencyEnum["Weekly"] = 'Weekly'] = "Weekly";
        FrequencyEnum[FrequencyEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        FrequencyEnum[FrequencyEnum["Every_"] = 'Every...'] = "Every_";
        FrequencyEnum[FrequencyEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        FrequencyEnum[FrequencyEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        FrequencyEnum[FrequencyEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        FrequencyEnum[FrequencyEnum["Monthly"] = 'Monthly'] = "Monthly";
        FrequencyEnum[FrequencyEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        FrequencyEnum[FrequencyEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        FrequencyEnum[FrequencyEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        FrequencyEnum[FrequencyEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        FrequencyEnum[FrequencyEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        FrequencyEnum[FrequencyEnum["Yearly"] = 'Yearly'] = "Yearly";
    })(FrequencyEnum = AutoOrderItemSimpleSchedule.FrequencyEnum || (AutoOrderItemSimpleSchedule.FrequencyEnum = {}));
})(AutoOrderItemSimpleSchedule = exports.AutoOrderItemSimpleSchedule || (exports.AutoOrderItemSimpleSchedule = {}));
/**
 * @export
 * @namespace CartCustomerProfileCreditCard
 */
var CartCustomerProfileCreditCard;
(function (CartCustomerProfileCreditCard) {
    /**
     * @export
     * @enum {string}
     */
    var CardTypeEnum;
    (function (CardTypeEnum) {
        CardTypeEnum[CardTypeEnum["AMEX"] = 'AMEX'] = "AMEX";
        CardTypeEnum[CardTypeEnum["DinersClub"] = 'Diners Club'] = "DinersClub";
        CardTypeEnum[CardTypeEnum["Discover"] = 'Discover'] = "Discover";
        CardTypeEnum[CardTypeEnum["MasterCard"] = 'MasterCard'] = "MasterCard";
        CardTypeEnum[CardTypeEnum["JCB"] = 'JCB'] = "JCB";
        CardTypeEnum[CardTypeEnum["VISA"] = 'VISA'] = "VISA";
    })(CardTypeEnum = CartCustomerProfileCreditCard.CardTypeEnum || (CartCustomerProfileCreditCard.CardTypeEnum = {}));
})(CartCustomerProfileCreditCard = exports.CartCustomerProfileCreditCard || (exports.CartCustomerProfileCreditCard = {}));
/**
 * @export
 * @namespace CartItemMultimedia
 */
var CartItemMultimedia;
(function (CartItemMultimedia) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'Image'] = "Image";
        TypeEnum[TypeEnum["PDF"] = 'PDF'] = "PDF";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Unknown"] = 'Unknown'] = "Unknown";
        TypeEnum[TypeEnum["Video"] = 'Video'] = "Video";
    })(TypeEnum = CartItemMultimedia.TypeEnum || (CartItemMultimedia.TypeEnum = {}));
})(CartItemMultimedia = exports.CartItemMultimedia || (exports.CartItemMultimedia = {}));
/**
 * @export
 * @namespace CartItemOption
 */
var CartItemOption;
(function (CartItemOption) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
    })(TypeEnum = CartItemOption.TypeEnum || (CartItemOption.TypeEnum = {}));
})(CartItemOption = exports.CartItemOption || (exports.CartItemOption = {}));
/**
 * @export
 * @namespace CartKitComponentOption
 */
var CartKitComponentOption;
(function (CartKitComponentOption) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
    })(TypeEnum = CartKitComponentOption.TypeEnum || (CartKitComponentOption.TypeEnum = {}));
})(CartKitComponentOption = exports.CartKitComponentOption || (exports.CartKitComponentOption = {}));
/**
 * @export
 * @namespace CheckoutHandoffRequest
 */
var CheckoutHandoffRequest;
(function (CheckoutHandoffRequest) {
    /**
     * @export
     * @enum {string}
     */
    var OperationEnum;
    (function (OperationEnum) {
        OperationEnum[OperationEnum["Checkout"] = 'checkout'] = "Checkout";
        OperationEnum[OperationEnum["PayPal"] = 'payPal'] = "PayPal";
        OperationEnum[OperationEnum["PayPalCredit"] = 'payPalCredit'] = "PayPalCredit";
        OperationEnum[OperationEnum["View"] = 'view'] = "View";
        OperationEnum[OperationEnum["Affirm"] = 'affirm'] = "Affirm";
    })(OperationEnum = CheckoutHandoffRequest.OperationEnum || (CheckoutHandoffRequest.OperationEnum = {}));
})(CheckoutHandoffRequest = exports.CheckoutHandoffRequest || (exports.CheckoutHandoffRequest = {}));
/**
 * @export
 * @namespace Distance
 */
var Distance;
(function (Distance) {
    /**
     * @export
     * @enum {string}
     */
    var UomEnum;
    (function (UomEnum) {
        UomEnum[UomEnum["IN"] = 'IN'] = "IN";
        UomEnum[UomEnum["CM"] = 'CM'] = "CM";
    })(UomEnum = Distance.UomEnum || (Distance.UomEnum = {}));
})(Distance = exports.Distance || (exports.Distance = {}));
/**
 * @export
 * @namespace EmailCommseqStep
 */
var EmailCommseqStep;
(function (EmailCommseqStep) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Begin"] = 'begin'] = "Begin";
        TypeEnum[TypeEnum["Wait"] = 'wait'] = "Wait";
        TypeEnum[TypeEnum["Email"] = 'email'] = "Email";
        TypeEnum[TypeEnum["Merge"] = 'merge'] = "Merge";
        TypeEnum[TypeEnum["Condition"] = 'condition'] = "Condition";
        TypeEnum[TypeEnum["End"] = 'end'] = "End";
    })(TypeEnum = EmailCommseqStep.TypeEnum || (EmailCommseqStep.TypeEnum = {}));
})(EmailCommseqStep = exports.EmailCommseqStep || (exports.EmailCommseqStep = {}));
/**
 * @export
 * @namespace Experiment
 */
var Experiment;
(function (Experiment) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Running"] = 'Running'] = "Running";
        StatusEnum[StatusEnum["Ended"] = 'Ended'] = "Ended";
        StatusEnum[StatusEnum["Deleted"] = 'Deleted'] = "Deleted";
    })(StatusEnum = Experiment.StatusEnum || (Experiment.StatusEnum = {}));
})(Experiment = exports.Experiment || (exports.Experiment = {}));
/**
 * @export
 * @namespace ItemAutoOrderStep
 */
var ItemAutoOrderStep;
(function (ItemAutoOrderStep) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Item"] = 'item'] = "Item";
        TypeEnum[TypeEnum["Pause"] = 'pause'] = "Pause";
    })(TypeEnum = ItemAutoOrderStep.TypeEnum || (ItemAutoOrderStep.TypeEnum = {}));
})(ItemAutoOrderStep = exports.ItemAutoOrderStep || (exports.ItemAutoOrderStep = {}));
/**
 * @export
 * @namespace ItemContentMultimedia
 */
var ItemContentMultimedia;
(function (ItemContentMultimedia) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'Image'] = "Image";
        TypeEnum[TypeEnum["PDF"] = 'PDF'] = "PDF";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Unknown"] = 'Unknown'] = "Unknown";
        TypeEnum[TypeEnum["Video"] = 'Video'] = "Video";
    })(TypeEnum = ItemContentMultimedia.TypeEnum || (ItemContentMultimedia.TypeEnum = {}));
})(ItemContentMultimedia = exports.ItemContentMultimedia || (exports.ItemContentMultimedia = {}));
/**
 * @export
 * @namespace ItemOption
 */
var ItemOption;
(function (ItemOption) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["FileAttachment"] = 'file attachment'] = "FileAttachment";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
    })(TypeEnum = ItemOption.TypeEnum || (ItemOption.TypeEnum = {}));
})(ItemOption = exports.ItemOption || (exports.ItemOption = {}));
/**
 * @export
 * @namespace ItemOptionValue
 */
var ItemOptionValue;
(function (ItemOptionValue) {
    /**
     * @export
     * @enum {string}
     */
    var AdditionalDimensionApplicationEnum;
    (function (AdditionalDimensionApplicationEnum) {
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["None"] = 'none'] = "None";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["SetItemTo"] = 'set item to'] = "SetItemTo";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["AddItem"] = 'add item'] = "AddItem";
    })(AdditionalDimensionApplicationEnum = ItemOptionValue.AdditionalDimensionApplicationEnum || (ItemOptionValue.AdditionalDimensionApplicationEnum = {}));
})(ItemOptionValue = exports.ItemOptionValue || (exports.ItemOptionValue = {}));
/**
 * @export
 * @namespace ItemRelatedItem
 */
var ItemRelatedItem;
(function (ItemRelatedItem) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["System"] = 'System'] = "System";
        TypeEnum[TypeEnum["UserDefined"] = 'UserDefined'] = "UserDefined";
    })(TypeEnum = ItemRelatedItem.TypeEnum || (ItemRelatedItem.TypeEnum = {}));
})(ItemRelatedItem = exports.ItemRelatedItem || (exports.ItemRelatedItem = {}));
/**
 * @export
 * @namespace ItemRestrictionItem
 */
var ItemRestrictionItem;
(function (ItemRestrictionItem) {
    /**
     * @export
     * @enum {string}
     */
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["CanNotBePurchasedWith"] = 'can not be purchased with'] = "CanNotBePurchasedWith";
        TypeEnum[TypeEnum["CanOnlyBePurchasedWith"] = 'can only be purchased with'] = "CanOnlyBePurchasedWith";
        TypeEnum[TypeEnum["MustBePurchasedWith"] = 'must be purchased with'] = "MustBePurchasedWith";
    })(TypeEnum = ItemRestrictionItem.TypeEnum || (ItemRestrictionItem.TypeEnum = {}));
})(ItemRestrictionItem = exports.ItemRestrictionItem || (exports.ItemRestrictionItem = {}));
/**
 * @export
 * @namespace ItemShippingDestinationRestriction
 */
var ItemShippingDestinationRestriction;
(function (ItemShippingDestinationRestriction) {
    /**
     * @export
     * @enum {string}
     */
    var ValidityEnum;
    (function (ValidityEnum) {
        ValidityEnum[ValidityEnum["ValidOnlyFor"] = 'valid only for'] = "ValidOnlyFor";
        ValidityEnum[ValidityEnum["InvalidFor"] = 'invalid for'] = "InvalidFor";
    })(ValidityEnum = ItemShippingDestinationRestriction.ValidityEnum || (ItemShippingDestinationRestriction.ValidityEnum = {}));
})(ItemShippingDestinationRestriction = exports.ItemShippingDestinationRestriction || (exports.ItemShippingDestinationRestriction = {}));
/**
 * @export
 * @namespace ItemShippingMethod
 */
var ItemShippingMethod;
(function (ItemShippingMethod) {
    /**
     * @export
     * @enum {string}
     */
    var ShippingMethodValidityEnum;
    (function (ShippingMethodValidityEnum) {
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["InvalidFor"] = 'invalid for'] = "InvalidFor";
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["ValidFor"] = 'valid for'] = "ValidFor";
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["ValidOnlyFor"] = 'valid only for'] = "ValidOnlyFor";
    })(ShippingMethodValidityEnum = ItemShippingMethod.ShippingMethodValidityEnum || (ItemShippingMethod.ShippingMethodValidityEnum = {}));
})(ItemShippingMethod = exports.ItemShippingMethod || (exports.ItemShippingMethod = {}));
/**
 * @export
 * @namespace ItemTag
 */
var ItemTag;
(function (ItemTag) {
    /**
     * @export
     * @enum {string}
     */
    var TagTypeEnum;
    (function (TagTypeEnum) {
        TagTypeEnum[TagTypeEnum["Item"] = 'item'] = "Item";
        TagTypeEnum[TagTypeEnum["Order"] = 'order'] = "Order";
        TagTypeEnum[TagTypeEnum["Customer"] = 'customer'] = "Customer";
    })(TagTypeEnum = ItemTag.TagTypeEnum || (ItemTag.TagTypeEnum = {}));
})(ItemTag = exports.ItemTag || (exports.ItemTag = {}));
/**
 * @export
 * @namespace ItemThirdPartyEmailMarketing
 */
var ItemThirdPartyEmailMarketing;
(function (ItemThirdPartyEmailMarketing) {
    /**
     * @export
     * @enum {string}
     */
    var ProviderNameEnum;
    (function (ProviderNameEnum) {
        ProviderNameEnum[ProviderNameEnum["ActiveCampaign"] = 'ActiveCampaign'] = "ActiveCampaign";
        ProviderNameEnum[ProviderNameEnum["AWeber"] = 'AWeber'] = "AWeber";
        ProviderNameEnum[ProviderNameEnum["CampaignMonitor"] = 'Campaign Monitor'] = "CampaignMonitor";
        ProviderNameEnum[ProviderNameEnum["ConstantContact"] = 'ConstantContact'] = "ConstantContact";
        ProviderNameEnum[ProviderNameEnum["Emma"] = 'Emma'] = "Emma";
        ProviderNameEnum[ProviderNameEnum["GetResponse"] = 'GetResponse'] = "GetResponse";
        ProviderNameEnum[ProviderNameEnum["IContact"] = 'iContact'] = "IContact";
        ProviderNameEnum[ProviderNameEnum["Klaviyo"] = 'Klaviyo'] = "Klaviyo";
        ProviderNameEnum[ProviderNameEnum["Lyris"] = 'Lyris'] = "Lyris";
        ProviderNameEnum[ProviderNameEnum["LyrisHQ"] = 'LyrisHQ'] = "LyrisHQ";
        ProviderNameEnum[ProviderNameEnum["MailChimp"] = 'MailChimp'] = "MailChimp";
        ProviderNameEnum[ProviderNameEnum["SilverPop"] = 'SilverPop'] = "SilverPop";
    })(ProviderNameEnum = ItemThirdPartyEmailMarketing.ProviderNameEnum || (ItemThirdPartyEmailMarketing.ProviderNameEnum = {}));
})(ItemThirdPartyEmailMarketing = exports.ItemThirdPartyEmailMarketing || (exports.ItemThirdPartyEmailMarketing = {}));
/**
 * @export
 * @namespace OauthTokenResponse
 */
var OauthTokenResponse;
(function (OauthTokenResponse) {
    /**
     * @export
     * @enum {string}
     */
    var TokenTypeEnum;
    (function (TokenTypeEnum) {
        TokenTypeEnum[TokenTypeEnum["Bearer"] = 'bearer'] = "Bearer";
    })(TokenTypeEnum = OauthTokenResponse.TokenTypeEnum || (OauthTokenResponse.TokenTypeEnum = {}));
})(OauthTokenResponse = exports.OauthTokenResponse || (exports.OauthTokenResponse = {}));
/**
 * @export
 * @namespace Order
 */
var Order;
(function (Order) {
    /**
     * @export
     * @enum {string}
     */
    var CurrentStageEnum;
    (function (CurrentStageEnum) {
        CurrentStageEnum[CurrentStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        CurrentStageEnum[CurrentStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        CurrentStageEnum[CurrentStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        CurrentStageEnum[CurrentStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        CurrentStageEnum[CurrentStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        CurrentStageEnum[CurrentStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        CurrentStageEnum[CurrentStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        CurrentStageEnum[CurrentStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        CurrentStageEnum[CurrentStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        CurrentStageEnum[CurrentStageEnum["Unknown"] = 'Unknown'] = "Unknown";
        CurrentStageEnum[CurrentStageEnum["PreOrdered"] = 'Pre-ordered'] = "PreOrdered";
    })(CurrentStageEnum = Order.CurrentStageEnum || (Order.CurrentStageEnum = {}));
})(Order = exports.Order || (exports.Order = {}));
/**
 * @export
 * @namespace OrderAffiliateLedger
 */
var OrderAffiliateLedger;
(function (OrderAffiliateLedger) {
    /**
     * @export
     * @enum {string}
     */
    var TransactionStateEnum;
    (function (TransactionStateEnum) {
        TransactionStateEnum[TransactionStateEnum["Pending"] = 'Pending'] = "Pending";
        TransactionStateEnum[TransactionStateEnum["Posted"] = 'Posted'] = "Posted";
        TransactionStateEnum[TransactionStateEnum["Approved"] = 'Approved'] = "Approved";
        TransactionStateEnum[TransactionStateEnum["Paid"] = 'Paid'] = "Paid";
        TransactionStateEnum[TransactionStateEnum["Rejected"] = 'Rejected'] = "Rejected";
        TransactionStateEnum[TransactionStateEnum["PartiallyPaid"] = 'Partially Paid'] = "PartiallyPaid";
    })(TransactionStateEnum = OrderAffiliateLedger.TransactionStateEnum || (OrderAffiliateLedger.TransactionStateEnum = {}));
})(OrderAffiliateLedger = exports.OrderAffiliateLedger || (exports.OrderAffiliateLedger = {}));
/**
 * @export
 * @namespace OrderAutoOrder
 */
var OrderAutoOrder;
(function (OrderAutoOrder) {
    /**
     * @export
     * @enum {string}
     */
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Canceled"] = 'canceled'] = "Canceled";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
    })(StatusEnum = OrderAutoOrder.StatusEnum || (OrderAutoOrder.StatusEnum = {}));
})(OrderAutoOrder = exports.OrderAutoOrder || (exports.OrderAutoOrder = {}));
/**
 * @export
 * @namespace OrderFormat
 */
var OrderFormat;
(function (OrderFormat) {
    /**
     * @export
     * @enum {string}
     */
    var FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Text"] = 'text'] = "Text";
        FormatEnum[FormatEnum["Div"] = 'div'] = "Div";
        FormatEnum[FormatEnum["Table"] = 'table'] = "Table";
        FormatEnum[FormatEnum["Email"] = 'email'] = "Email";
    })(FormatEnum = OrderFormat.FormatEnum || (OrderFormat.FormatEnum = {}));
})(OrderFormat = exports.OrderFormat || (exports.OrderFormat = {}));
/**
 * @export
 * @namespace OrderFraudScore
 */
var OrderFraudScore;
(function (OrderFraudScore) {
    /**
     * @export
     * @enum {string}
     */
    var BinMatchEnum;
    (function (BinMatchEnum) {
        BinMatchEnum[BinMatchEnum["NA"] = 'NA'] = "NA";
        BinMatchEnum[BinMatchEnum["No"] = 'No'] = "No";
        BinMatchEnum[BinMatchEnum["NotFound"] = 'NotFound'] = "NotFound";
        BinMatchEnum[BinMatchEnum["Yes"] = 'Yes'] = "Yes";
    })(BinMatchEnum = OrderFraudScore.BinMatchEnum || (OrderFraudScore.BinMatchEnum = {}));
})(OrderFraudScore = exports.OrderFraudScore || (exports.OrderFraudScore = {}));
/**
 * @export
 * @namespace OrderItemOption
 */
var OrderItemOption;
(function (OrderItemOption) {
    /**
     * @export
     * @enum {string}
     */
    var AdditionalDimensionApplicationEnum;
    (function (AdditionalDimensionApplicationEnum) {
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["None"] = 'none'] = "None";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["SetItemTo"] = 'set item to'] = "SetItemTo";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["AddItem"] = 'add item'] = "AddItem";
    })(AdditionalDimensionApplicationEnum = OrderItemOption.AdditionalDimensionApplicationEnum || (OrderItemOption.AdditionalDimensionApplicationEnum = {}));
})(OrderItemOption = exports.OrderItemOption || (exports.OrderItemOption = {}));
/**
 * @export
 * @namespace OrderPayment
 */
var OrderPayment;
(function (OrderPayment) {
    /**
     * @export
     * @enum {string}
     */
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["AmazonSC"] = 'Amazon SC'] = "AmazonSC";
        PaymentMethodEnum[PaymentMethodEnum["Cash"] = 'Cash'] = "Cash";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["EBay"] = 'eBay'] = "EBay";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["Unknown"] = 'Unknown'] = "Unknown";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
        PaymentMethodEnum[PaymentMethodEnum["Walmart"] = 'Walmart'] = "Walmart";
    })(PaymentMethodEnum = OrderPayment.PaymentMethodEnum || (OrderPayment.PaymentMethodEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PaymentStatusEnum;
    (function (PaymentStatusEnum) {
        PaymentStatusEnum[PaymentStatusEnum["Unprocessed"] = 'Unprocessed'] = "Unprocessed";
        PaymentStatusEnum[PaymentStatusEnum["Authorized"] = 'Authorized'] = "Authorized";
        PaymentStatusEnum[PaymentStatusEnum["CaptureFailed"] = 'Capture Failed'] = "CaptureFailed";
        PaymentStatusEnum[PaymentStatusEnum["Processed"] = 'Processed'] = "Processed";
        PaymentStatusEnum[PaymentStatusEnum["Declined"] = 'Declined'] = "Declined";
        PaymentStatusEnum[PaymentStatusEnum["Voided"] = 'Voided'] = "Voided";
        PaymentStatusEnum[PaymentStatusEnum["Refunded"] = 'Refunded'] = "Refunded";
        PaymentStatusEnum[PaymentStatusEnum["Skipped"] = 'Skipped'] = "Skipped";
    })(PaymentStatusEnum = OrderPayment.PaymentStatusEnum || (OrderPayment.PaymentStatusEnum = {}));
})(OrderPayment = exports.OrderPayment || (exports.OrderPayment = {}));
/**
 * @export
 * @namespace OrderPaymentCreditCard
 */
var OrderPaymentCreditCard;
(function (OrderPaymentCreditCard) {
    /**
     * @export
     * @enum {string}
     */
    var CardTypeEnum;
    (function (CardTypeEnum) {
        CardTypeEnum[CardTypeEnum["AMEX"] = 'AMEX'] = "AMEX";
        CardTypeEnum[CardTypeEnum["DinersClub"] = 'Diners Club'] = "DinersClub";
        CardTypeEnum[CardTypeEnum["Discover"] = 'Discover'] = "Discover";
        CardTypeEnum[CardTypeEnum["JCB"] = 'JCB'] = "JCB";
        CardTypeEnum[CardTypeEnum["MasterCard"] = 'MasterCard'] = "MasterCard";
        CardTypeEnum[CardTypeEnum["VISA"] = 'VISA'] = "VISA";
    })(CardTypeEnum = OrderPaymentCreditCard.CardTypeEnum || (OrderPaymentCreditCard.CardTypeEnum = {}));
})(OrderPaymentCreditCard = exports.OrderPaymentCreditCard || (exports.OrderPaymentCreditCard = {}));
/**
 * @export
 * @namespace OrderPaymentECheck
 */
var OrderPaymentECheck;
(function (OrderPaymentECheck) {
    /**
     * @export
     * @enum {string}
     */
    var BankAccountTypeEnum;
    (function (BankAccountTypeEnum) {
        BankAccountTypeEnum[BankAccountTypeEnum["Checking"] = 'Checking'] = "Checking";
        BankAccountTypeEnum[BankAccountTypeEnum["Savings"] = 'Savings'] = "Savings";
    })(BankAccountTypeEnum = OrderPaymentECheck.BankAccountTypeEnum || (OrderPaymentECheck.BankAccountTypeEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var BankOwnerTypeEnum;
    (function (BankOwnerTypeEnum) {
        BankOwnerTypeEnum[BankOwnerTypeEnum["Personal"] = 'Personal'] = "Personal";
        BankOwnerTypeEnum[BankOwnerTypeEnum["Business"] = 'Business'] = "Business";
    })(BankOwnerTypeEnum = OrderPaymentECheck.BankOwnerTypeEnum || (OrderPaymentECheck.BankOwnerTypeEnum = {}));
})(OrderPaymentECheck = exports.OrderPaymentECheck || (exports.OrderPaymentECheck = {}));
/**
 * @export
 * @namespace OrderQuery
 */
var OrderQuery;
(function (OrderQuery) {
    /**
     * @export
     * @enum {string}
     */
    var CurrentStageEnum;
    (function (CurrentStageEnum) {
        CurrentStageEnum[CurrentStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        CurrentStageEnum[CurrentStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        CurrentStageEnum[CurrentStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        CurrentStageEnum[CurrentStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        CurrentStageEnum[CurrentStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        CurrentStageEnum[CurrentStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        CurrentStageEnum[CurrentStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        CurrentStageEnum[CurrentStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        CurrentStageEnum[CurrentStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        CurrentStageEnum[CurrentStageEnum["Unknown"] = 'Unknown'] = "Unknown";
    })(CurrentStageEnum = OrderQuery.CurrentStageEnum || (OrderQuery.CurrentStageEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["AmazonSC"] = 'Amazon SC'] = "AmazonSC";
        PaymentMethodEnum[PaymentMethodEnum["Cash"] = 'Cash'] = "Cash";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["Unknown"] = 'Unknown'] = "Unknown";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
    })(PaymentMethodEnum = OrderQuery.PaymentMethodEnum || (OrderQuery.PaymentMethodEnum = {}));
})(OrderQuery = exports.OrderQuery || (exports.OrderQuery = {}));
/**
 * @export
 * @namespace TempMultimedia
 */
var TempMultimedia;
(function (TempMultimedia) {
    /**
     * @export
     * @enum {string}
     */
    var MultimediaTypeEnum;
    (function (MultimediaTypeEnum) {
        MultimediaTypeEnum[MultimediaTypeEnum["Image"] = 'Image'] = "Image";
        MultimediaTypeEnum[MultimediaTypeEnum["PDF"] = 'PDF'] = "PDF";
        MultimediaTypeEnum[MultimediaTypeEnum["Text"] = 'Text'] = "Text";
        MultimediaTypeEnum[MultimediaTypeEnum["Video"] = 'Video'] = "Video";
    })(MultimediaTypeEnum = TempMultimedia.MultimediaTypeEnum || (TempMultimedia.MultimediaTypeEnum = {}));
})(TempMultimedia = exports.TempMultimedia || (exports.TempMultimedia = {}));
/**
 * @export
 * @namespace Webhook
 */
var Webhook;
(function (Webhook) {
    /**
     * @export
     * @enum {string}
     */
    var ApiVersionEnum;
    (function (ApiVersionEnum) {
        ApiVersionEnum[ApiVersionEnum["_20170301"] = '2017-03-01'] = "_20170301";
    })(ApiVersionEnum = Webhook.ApiVersionEnum || (Webhook.ApiVersionEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var AuthenticationTypeEnum;
    (function (AuthenticationTypeEnum) {
        AuthenticationTypeEnum[AuthenticationTypeEnum["None"] = 'none'] = "None";
        AuthenticationTypeEnum[AuthenticationTypeEnum["Basic"] = 'basic'] = "Basic";
    })(AuthenticationTypeEnum = Webhook.AuthenticationTypeEnum || (Webhook.AuthenticationTypeEnum = {}));
})(Webhook = exports.Webhook || (exports.Webhook = {}));
/**
 * @export
 * @namespace Weight
 */
var Weight;
(function (Weight) {
    /**
     * @export
     * @enum {string}
     */
    var UomEnum;
    (function (UomEnum) {
        UomEnum[UomEnum["KG"] = 'KG'] = "KG";
        UomEnum[UomEnum["LB"] = 'LB'] = "LB";
        UomEnum[UomEnum["OZ"] = 'OZ'] = "OZ";
    })(UomEnum = Weight.UomEnum || (Weight.UomEnum = {}));
})(Weight = exports.Weight || (exports.Weight = {}));
/**
 * AffiliateApi - fetch parameter creator
 * @export
 */
exports.AffiliateApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve clicks
         * @param {AffiliateClickQuery} clickQuery Click query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClicksByQuery: function (clickQuery, limit, offset, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clickQuery' is not null or undefined
            if (clickQuery === null || clickQuery === undefined) {
                throw new RequiredError('clickQuery', 'Required parameter clickQuery was null or undefined when calling getClicksByQuery.');
            }
            var localVarPath = "/affiliate/clicks/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AffiliateClickQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(clickQuery || {}) : (clickQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve ledger entries
         * @param {AffiliateLedgerQuery} ledgerQuery Ledger query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersByQuery: function (ledgerQuery, limit, offset, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'ledgerQuery' is not null or undefined
            if (ledgerQuery === null || ledgerQuery === undefined) {
                throw new RequiredError('ledgerQuery', 'Required parameter ledgerQuery was null or undefined when calling getLedgersByQuery.');
            }
            var localVarPath = "/affiliate/ledgers/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AffiliateLedgerQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(ledgerQuery || {}) : (ledgerQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AffiliateApi - functional programming interface
 * @export
 */
exports.AffiliateApiFp = function (configuration) {
    return {
        /**
         * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve clicks
         * @param {AffiliateClickQuery} clickQuery Click query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClicksByQuery: function (clickQuery, limit, offset, expand, options) {
            var localVarFetchArgs = exports.AffiliateApiFetchParamCreator(configuration).getClicksByQuery(clickQuery, limit, offset, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve ledger entries
         * @param {AffiliateLedgerQuery} ledgerQuery Ledger query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersByQuery: function (ledgerQuery, limit, offset, expand, options) {
            var localVarFetchArgs = exports.AffiliateApiFetchParamCreator(configuration).getLedgersByQuery(ledgerQuery, limit, offset, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AffiliateApi - factory interface
 * @export
 */
exports.AffiliateApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve clicks
         * @param {AffiliateClickQuery} clickQuery Click query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClicksByQuery: function (clickQuery, limit, offset, expand, options) {
            return exports.AffiliateApiFp(configuration).getClicksByQuery(clickQuery, limit, offset, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve ledger entries
         * @param {AffiliateLedgerQuery} ledgerQuery Ledger query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgersByQuery: function (ledgerQuery, limit, offset, expand, options) {
            return exports.AffiliateApiFp(configuration).getLedgersByQuery(ledgerQuery, limit, offset, expand, options)(fetch, basePath);
        },
    };
};
/**
 * AffiliateApi - object-oriented interface
 * @export
 * @class AffiliateApi
 * @extends {BaseAPI}
 */
var AffiliateApi = /** @class */ (function (_super) {
    __extends(AffiliateApi, _super);
    function AffiliateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a group of clicks from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the clicks returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve clicks
     * @param {AffiliateClickQuery} clickQuery Click query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    AffiliateApi.prototype.getClicksByQuery = function (clickQuery, limit, offset, expand, options) {
        return exports.AffiliateApiFp(this.configuration).getClicksByQuery(clickQuery, limit, offset, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of ledger entries from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the ledgers returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve ledger entries
     * @param {AffiliateLedgerQuery} ledgerQuery Ledger query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [expand] The object expansion to perform on the result.  Only option is link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AffiliateApi
     */
    AffiliateApi.prototype.getLedgersByQuery = function (ledgerQuery, limit, offset, expand, options) {
        return exports.AffiliateApiFp(this.configuration).getLedgersByQuery(ledgerQuery, limit, offset, expand, options)(this.fetch, this.basePath);
    };
    return AffiliateApi;
}(BaseAPI));
exports.AffiliateApi = AffiliateApi;
/**
 * AutoOrderApi - fetch parameter creator
 * @export
 */
exports.AutoOrderApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a single auto order using the specified auto order oid.
         * @summary Retrieve an auto order
         * @param {number} autoOrderOid The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrder: function (autoOrderOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autoOrderOid' is not null or undefined
            if (autoOrderOid === null || autoOrderOid === undefined) {
                throw new RequiredError('autoOrderOid', 'Required parameter autoOrderOid was null or undefined when calling getAutoOrder.');
            }
            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}"
                .replace("{" + "auto_order_oid" + "}", encodeURIComponent(String(autoOrderOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order
         * @param {string} autoOrderCode The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByCode: function (autoOrderCode, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autoOrderCode' is not null or undefined
            if (autoOrderCode === null || autoOrderCode === undefined) {
                throw new RequiredError('autoOrderCode', 'Required parameter autoOrderCode was null or undefined when calling getAutoOrderByCode.');
            }
            var localVarPath = "/auto_order/auto_orders/code/{auto_order_code}"
                .replace("{" + "auto_order_code" + "}", encodeURIComponent(String(autoOrderCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order
         * @param {string} referenceOrderId The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByReferenceOrderId: function (referenceOrderId, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'referenceOrderId' is not null or undefined
            if (referenceOrderId === null || referenceOrderId === undefined) {
                throw new RequiredError('referenceOrderId', 'Required parameter referenceOrderId was null or undefined when calling getAutoOrderByReferenceOrderId.');
            }
            var localVarPath = "/auto_order/auto_orders/reference_order_id/{reference_order_id}"
                .replace("{" + "reference_order_id" + "}", encodeURIComponent(String(referenceOrderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {string} [autoOrderCode] Auto order code
         * @param {string} [originalOrderId] Original order id
         * @param {string} [firstName] First name
         * @param {string} [lastName] Last name
         * @param {string} [company] Company
         * @param {string} [city] City
         * @param {string} [state] State
         * @param {string} [postalCode] Postal code
         * @param {string} [countryCode] Country code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [originalOrderDateBegin] Original order date begin
         * @param {string} [originalOrderDateEnd] Original order date end
         * @param {string} [nextShipmentDateBegin] Next shipment date begin
         * @param {string} [nextShipmentDateEnd] Next shipment date end
         * @param {string} [cardType] Card type
         * @param {string} [itemId] Item ID
         * @param {string} [status] Status
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch auto orders that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrders: function (autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/auto_order/auto_orders";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (autoOrderCode !== undefined) {
                localVarQueryParameter['auto_order_code'] = autoOrderCode;
            }
            if (originalOrderId !== undefined) {
                localVarQueryParameter['original_order_id'] = originalOrderId;
            }
            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }
            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }
            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }
            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (postalCode !== undefined) {
                localVarQueryParameter['postal_code'] = postalCode;
            }
            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (originalOrderDateBegin !== undefined) {
                localVarQueryParameter['original_order_date_begin'] = originalOrderDateBegin;
            }
            if (originalOrderDateEnd !== undefined) {
                localVarQueryParameter['original_order_date_end'] = originalOrderDateEnd;
            }
            if (nextShipmentDateBegin !== undefined) {
                localVarQueryParameter['next_shipment_date_begin'] = nextShipmentDateBegin;
            }
            if (nextShipmentDateEnd !== undefined) {
                localVarQueryParameter['next_shipment_date_end'] = nextShipmentDateEnd;
            }
            if (cardType !== undefined) {
                localVarQueryParameter['card_type'] = cardType;
            }
            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['_since'] = since;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve auto order batch
         * @param {AutoOrderQueryBatch} autoOrderBatch Auto order batch
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersBatch: function (autoOrderBatch, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autoOrderBatch' is not null or undefined
            if (autoOrderBatch === null || autoOrderBatch === undefined) {
                throw new RequiredError('autoOrderBatch', 'Required parameter autoOrderBatch was null or undefined when calling getAutoOrdersBatch.');
            }
            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrderQueryBatch" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(autoOrderBatch || {}) : (autoOrderBatch || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {AutoOrderQuery} autoOrderQuery Auto order query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersByQuery: function (autoOrderQuery, limit, offset, sort, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autoOrderQuery' is not null or undefined
            if (autoOrderQuery === null || autoOrderQuery === undefined) {
                throw new RequiredError('autoOrderQuery', 'Required parameter autoOrderQuery was null or undefined when calling getAutoOrdersByQuery.');
            }
            var localVarPath = "/auto_order/auto_orders/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrderQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(autoOrderQuery || {}) : (autoOrderQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an auto order on the UltraCart account.
         * @summary Update an auto order
         * @param {AutoOrder} autoOrder Auto order to update
         * @param {number} autoOrderOid The auto order oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrder: function (autoOrder, autoOrderOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autoOrder' is not null or undefined
            if (autoOrder === null || autoOrder === undefined) {
                throw new RequiredError('autoOrder', 'Required parameter autoOrder was null or undefined when calling updateAutoOrder.');
            }
            // verify required parameter 'autoOrderOid' is not null or undefined
            if (autoOrderOid === null || autoOrderOid === undefined) {
                throw new RequiredError('autoOrderOid', 'Required parameter autoOrderOid was null or undefined when calling updateAutoOrder.');
            }
            var localVarPath = "/auto_order/auto_orders/{auto_order_oid}"
                .replace("{" + "auto_order_oid" + "}", encodeURIComponent(String(autoOrderOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(autoOrder || {}) : (autoOrder || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple auto orders on the UltraCart account.
         * @summary Update multiple auto orders
         * @param {AutoOrdersRequest} autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrdersBatch: function (autoOrdersRequest, expand, placeholders, async, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'autoOrdersRequest' is not null or undefined
            if (autoOrdersRequest === null || autoOrdersRequest === undefined) {
                throw new RequiredError('autoOrdersRequest', 'Required parameter autoOrdersRequest was null or undefined when calling updateAutoOrdersBatch.');
            }
            var localVarPath = "/auto_order/auto_orders/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["auto_order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            if (async !== undefined) {
                localVarQueryParameter['_async'] = async;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AutoOrdersRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(autoOrdersRequest || {}) : (autoOrdersRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AutoOrderApi - functional programming interface
 * @export
 */
exports.AutoOrderApiFp = function (configuration) {
    return {
        /**
         * Retrieves a single auto order using the specified auto order oid.
         * @summary Retrieve an auto order
         * @param {number} autoOrderOid The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrder: function (autoOrderOid, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).getAutoOrder(autoOrderOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order
         * @param {string} autoOrderCode The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByCode: function (autoOrderCode, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).getAutoOrderByCode(autoOrderCode, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order
         * @param {string} referenceOrderId The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByReferenceOrderId: function (referenceOrderId, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).getAutoOrderByReferenceOrderId(referenceOrderId, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {string} [autoOrderCode] Auto order code
         * @param {string} [originalOrderId] Original order id
         * @param {string} [firstName] First name
         * @param {string} [lastName] Last name
         * @param {string} [company] Company
         * @param {string} [city] City
         * @param {string} [state] State
         * @param {string} [postalCode] Postal code
         * @param {string} [countryCode] Country code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [originalOrderDateBegin] Original order date begin
         * @param {string} [originalOrderDateEnd] Original order date end
         * @param {string} [nextShipmentDateBegin] Next shipment date begin
         * @param {string} [nextShipmentDateEnd] Next shipment date end
         * @param {string} [cardType] Card type
         * @param {string} [itemId] Item ID
         * @param {string} [status] Status
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch auto orders that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrders: function (autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).getAutoOrders(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve auto order batch
         * @param {AutoOrderQueryBatch} autoOrderBatch Auto order batch
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersBatch: function (autoOrderBatch, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).getAutoOrdersBatch(autoOrderBatch, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {AutoOrderQuery} autoOrderQuery Auto order query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersByQuery: function (autoOrderQuery, limit, offset, sort, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).getAutoOrdersByQuery(autoOrderQuery, limit, offset, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update an auto order on the UltraCart account.
         * @summary Update an auto order
         * @param {AutoOrder} autoOrder Auto order to update
         * @param {number} autoOrderOid The auto order oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrder: function (autoOrder, autoOrderOid, expand, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).updateAutoOrder(autoOrder, autoOrderOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update multiple auto orders on the UltraCart account.
         * @summary Update multiple auto orders
         * @param {AutoOrdersRequest} autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrdersBatch: function (autoOrdersRequest, expand, placeholders, async, options) {
            var localVarFetchArgs = exports.AutoOrderApiFetchParamCreator(configuration).updateAutoOrdersBatch(autoOrdersRequest, expand, placeholders, async, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AutoOrderApi - factory interface
 * @export
 */
exports.AutoOrderApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieves a single auto order using the specified auto order oid.
         * @summary Retrieve an auto order
         * @param {number} autoOrderOid The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrder: function (autoOrderOid, expand, options) {
            return exports.AutoOrderApiFp(configuration).getAutoOrder(autoOrderOid, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order
         * @param {string} autoOrderCode The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByCode: function (autoOrderCode, expand, options) {
            return exports.AutoOrderApiFp(configuration).getAutoOrderByCode(autoOrderCode, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single auto order using the specified reference (original) order id.
         * @summary Retrieve an auto order
         * @param {string} referenceOrderId The auto order oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrderByReferenceOrderId: function (referenceOrderId, expand, options) {
            return exports.AutoOrderApiFp(configuration).getAutoOrderByReferenceOrderId(referenceOrderId, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {string} [autoOrderCode] Auto order code
         * @param {string} [originalOrderId] Original order id
         * @param {string} [firstName] First name
         * @param {string} [lastName] Last name
         * @param {string} [company] Company
         * @param {string} [city] City
         * @param {string} [state] State
         * @param {string} [postalCode] Postal code
         * @param {string} [countryCode] Country code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [originalOrderDateBegin] Original order date begin
         * @param {string} [originalOrderDateEnd] Original order date end
         * @param {string} [nextShipmentDateBegin] Next shipment date begin
         * @param {string} [nextShipmentDateEnd] Next shipment date end
         * @param {string} [cardType] Card type
         * @param {string} [itemId] Item ID
         * @param {string} [status] Status
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch auto orders that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrders: function (autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options) {
            return exports.AutoOrderApiFp(configuration).getAutoOrders(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve auto order batch
         * @param {AutoOrderQueryBatch} autoOrderBatch Auto order batch
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersBatch: function (autoOrderBatch, expand, options) {
            return exports.AutoOrderApiFp(configuration).getAutoOrdersBatch(autoOrderBatch, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve auto orders
         * @param {AutoOrderQuery} autoOrderQuery Auto order query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoOrdersByQuery: function (autoOrderQuery, limit, offset, sort, expand, options) {
            return exports.AutoOrderApiFp(configuration).getAutoOrdersByQuery(autoOrderQuery, limit, offset, sort, expand, options)(fetch, basePath);
        },
        /**
         * Update an auto order on the UltraCart account.
         * @summary Update an auto order
         * @param {AutoOrder} autoOrder Auto order to update
         * @param {number} autoOrderOid The auto order oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrder: function (autoOrder, autoOrderOid, expand, options) {
            return exports.AutoOrderApiFp(configuration).updateAutoOrder(autoOrder, autoOrderOid, expand, options)(fetch, basePath);
        },
        /**
         * Update multiple auto orders on the UltraCart account.
         * @summary Update multiple auto orders
         * @param {AutoOrdersRequest} autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoOrdersBatch: function (autoOrdersRequest, expand, placeholders, async, options) {
            return exports.AutoOrderApiFp(configuration).updateAutoOrdersBatch(autoOrdersRequest, expand, placeholders, async, options)(fetch, basePath);
        },
    };
};
/**
 * AutoOrderApi - object-oriented interface
 * @export
 * @class AutoOrderApi
 * @extends {BaseAPI}
 */
var AutoOrderApi = /** @class */ (function (_super) {
    __extends(AutoOrderApi, _super);
    function AutoOrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieves a single auto order using the specified auto order oid.
     * @summary Retrieve an auto order
     * @param {number} autoOrderOid The auto order oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrder = function (autoOrderOid, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).getAutoOrder(autoOrderOid, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single auto order using the specified reference (original) order id.
     * @summary Retrieve an auto order
     * @param {string} autoOrderCode The auto order oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrderByCode = function (autoOrderCode, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).getAutoOrderByCode(autoOrderCode, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single auto order using the specified reference (original) order id.
     * @summary Retrieve an auto order
     * @param {string} referenceOrderId The auto order oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrderByReferenceOrderId = function (referenceOrderId, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).getAutoOrderByReferenceOrderId(referenceOrderId, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves auto orders from the account.  If no parameters are specified, all auto orders will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve auto orders
     * @param {string} [autoOrderCode] Auto order code
     * @param {string} [originalOrderId] Original order id
     * @param {string} [firstName] First name
     * @param {string} [lastName] Last name
     * @param {string} [company] Company
     * @param {string} [city] City
     * @param {string} [state] State
     * @param {string} [postalCode] Postal code
     * @param {string} [countryCode] Country code (ISO-3166 two letter)
     * @param {string} [phone] Phone
     * @param {string} [email] Email
     * @param {string} [originalOrderDateBegin] Original order date begin
     * @param {string} [originalOrderDateEnd] Original order date end
     * @param {string} [nextShipmentDateBegin] Next shipment date begin
     * @param {string} [nextShipmentDateEnd] Next shipment date end
     * @param {string} [cardType] Card type
     * @param {string} [itemId] Item ID
     * @param {string} [status] Status
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch auto orders that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrders = function (autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).getAutoOrders(autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of auto orders from the account based on an array of auto order oids.  If more than 200 auto order ids are specified, the API call will fail with a bad request error.
     * @summary Retrieve auto order batch
     * @param {AutoOrderQueryBatch} autoOrderBatch Auto order batch
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrdersBatch = function (autoOrderBatch, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).getAutoOrdersBatch(autoOrderBatch, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of auto orders from the account based on a query object.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve auto orders
     * @param {AutoOrderQuery} autoOrderQuery Auto order query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the auto orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.getAutoOrdersByQuery = function (autoOrderQuery, limit, offset, sort, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).getAutoOrdersByQuery(autoOrderQuery, limit, offset, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update an auto order on the UltraCart account.
     * @summary Update an auto order
     * @param {AutoOrder} autoOrder Auto order to update
     * @param {number} autoOrderOid The auto order oid to update.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.updateAutoOrder = function (autoOrder, autoOrderOid, expand, options) {
        return exports.AutoOrderApiFp(this.configuration).updateAutoOrder(autoOrder, autoOrderOid, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update multiple auto orders on the UltraCart account.
     * @summary Update multiple auto orders
     * @param {AutoOrdersRequest} autoOrdersRequest Auto orders to update (synchronous maximum 20 / asynchronous maximum 100)
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoOrderApi
     */
    AutoOrderApi.prototype.updateAutoOrdersBatch = function (autoOrdersRequest, expand, placeholders, async, options) {
        return exports.AutoOrderApiFp(this.configuration).updateAutoOrdersBatch(autoOrdersRequest, expand, placeholders, async, options)(this.fetch, this.basePath);
    };
    return AutoOrderApi;
}(BaseAPI));
exports.AutoOrderApi = AutoOrderApi;
/**
 * ChargebackApi - fetch parameter creator
 * @export
 */
exports.ChargebackApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a chargeback on the UltraCart account.
         * @summary Delete a chargeback
         * @param {number} chargebackDisputeOid The chargeback_dispute_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeback: function (chargebackDisputeOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargebackDisputeOid' is not null or undefined
            if (chargebackDisputeOid === null || chargebackDisputeOid === undefined) {
                throw new RequiredError('chargebackDisputeOid', 'Required parameter chargebackDisputeOid was null or undefined when calling deleteChargeback.');
            }
            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
                .replace("{" + "chargeback_dispute_oid" + "}", encodeURIComponent(String(chargebackDisputeOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single chargeback using the specified chargeback dispute oid.
         * @summary Retrieve a chargeback
         * @param {number} chargebackDisputeOid The chargeback dispute oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDispute: function (chargebackDisputeOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargebackDisputeOid' is not null or undefined
            if (chargebackDisputeOid === null || chargebackDisputeOid === undefined) {
                throw new RequiredError('chargebackDisputeOid', 'Required parameter chargebackDisputeOid was null or undefined when calling getChargebackDispute.');
            }
            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
                .replace("{" + "chargeback_dispute_oid" + "}", encodeURIComponent(String(chargebackDisputeOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve chargebacks
         * @param {string} [orderId] Order Id
         * @param {string} [caseNumber] Case number
         * @param {string} [status] Status
         * @param {string} [expirationDtsStart] Expiration dts start
         * @param {string} [expirationDtsEnd] Expiration dts end
         * @param {string} [chargebackDtsStart] Chargeback dts start
         * @param {string} [chargebackDtsEnd] Chargeback dts end
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch chargebacks that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDisputes: function (orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/chargeback/chargebacks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }
            if (caseNumber !== undefined) {
                localVarQueryParameter['case_number'] = caseNumber;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (expirationDtsStart !== undefined) {
                localVarQueryParameter['expiration_dts_start'] = expirationDtsStart;
            }
            if (expirationDtsEnd !== undefined) {
                localVarQueryParameter['expiration_dts_end'] = expirationDtsEnd;
            }
            if (chargebackDtsStart !== undefined) {
                localVarQueryParameter['chargeback_dts_start'] = chargebackDtsStart;
            }
            if (chargebackDtsEnd !== undefined) {
                localVarQueryParameter['chargeback_dts_end'] = chargebackDtsEnd;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['_since'] = since;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a chargeback on the UltraCart account.
         * @summary Insert a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChargeback: function (chargeback, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargeback' is not null or undefined
            if (chargeback === null || chargeback === undefined) {
                throw new RequiredError('chargeback', 'Required parameter chargeback was null or undefined when calling insertChargeback.');
            }
            var localVarPath = "/chargeback/chargebacks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChargebackDispute" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(chargeback || {}) : (chargeback || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a chargeback on the UltraCart account.
         * @summary Update a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to update
         * @param {number} chargebackDisputeOid The chargeback_dispute_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeback: function (chargeback, chargebackDisputeOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'chargeback' is not null or undefined
            if (chargeback === null || chargeback === undefined) {
                throw new RequiredError('chargeback', 'Required parameter chargeback was null or undefined when calling updateChargeback.');
            }
            // verify required parameter 'chargebackDisputeOid' is not null or undefined
            if (chargebackDisputeOid === null || chargebackDisputeOid === undefined) {
                throw new RequiredError('chargebackDisputeOid', 'Required parameter chargebackDisputeOid was null or undefined when calling updateChargeback.');
            }
            var localVarPath = "/chargeback/chargebacks/{chargeback_dispute_oid}"
                .replace("{" + "chargeback_dispute_oid" + "}", encodeURIComponent(String(chargebackDisputeOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["chargeback_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ChargebackDispute" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(chargeback || {}) : (chargeback || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ChargebackApi - functional programming interface
 * @export
 */
exports.ChargebackApiFp = function (configuration) {
    return {
        /**
         * Delete a chargeback on the UltraCart account.
         * @summary Delete a chargeback
         * @param {number} chargebackDisputeOid The chargeback_dispute_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeback: function (chargebackDisputeOid, options) {
            var localVarFetchArgs = exports.ChargebackApiFetchParamCreator(configuration).deleteChargeback(chargebackDisputeOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single chargeback using the specified chargeback dispute oid.
         * @summary Retrieve a chargeback
         * @param {number} chargebackDisputeOid The chargeback dispute oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDispute: function (chargebackDisputeOid, expand, options) {
            var localVarFetchArgs = exports.ChargebackApiFetchParamCreator(configuration).getChargebackDispute(chargebackDisputeOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve chargebacks
         * @param {string} [orderId] Order Id
         * @param {string} [caseNumber] Case number
         * @param {string} [status] Status
         * @param {string} [expirationDtsStart] Expiration dts start
         * @param {string} [expirationDtsEnd] Expiration dts end
         * @param {string} [chargebackDtsStart] Chargeback dts start
         * @param {string} [chargebackDtsEnd] Chargeback dts end
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch chargebacks that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDisputes: function (orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options) {
            var localVarFetchArgs = exports.ChargebackApiFetchParamCreator(configuration).getChargebackDisputes(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a chargeback on the UltraCart account.
         * @summary Insert a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChargeback: function (chargeback, expand, options) {
            var localVarFetchArgs = exports.ChargebackApiFetchParamCreator(configuration).insertChargeback(chargeback, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a chargeback on the UltraCart account.
         * @summary Update a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to update
         * @param {number} chargebackDisputeOid The chargeback_dispute_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeback: function (chargeback, chargebackDisputeOid, expand, options) {
            var localVarFetchArgs = exports.ChargebackApiFetchParamCreator(configuration).updateChargeback(chargeback, chargebackDisputeOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ChargebackApi - factory interface
 * @export
 */
exports.ChargebackApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a chargeback on the UltraCart account.
         * @summary Delete a chargeback
         * @param {number} chargebackDisputeOid The chargeback_dispute_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChargeback: function (chargebackDisputeOid, options) {
            return exports.ChargebackApiFp(configuration).deleteChargeback(chargebackDisputeOid, options)(fetch, basePath);
        },
        /**
         * Retrieves a single chargeback using the specified chargeback dispute oid.
         * @summary Retrieve a chargeback
         * @param {number} chargebackDisputeOid The chargeback dispute oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDispute: function (chargebackDisputeOid, expand, options) {
            return exports.ChargebackApiFp(configuration).getChargebackDispute(chargebackDisputeOid, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve chargebacks
         * @param {string} [orderId] Order Id
         * @param {string} [caseNumber] Case number
         * @param {string} [status] Status
         * @param {string} [expirationDtsStart] Expiration dts start
         * @param {string} [expirationDtsEnd] Expiration dts end
         * @param {string} [chargebackDtsStart] Chargeback dts start
         * @param {string} [chargebackDtsEnd] Chargeback dts end
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch chargebacks that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChargebackDisputes: function (orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options) {
            return exports.ChargebackApiFp(configuration).getChargebackDisputes(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options)(fetch, basePath);
        },
        /**
         * Insert a chargeback on the UltraCart account.
         * @summary Insert a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertChargeback: function (chargeback, expand, options) {
            return exports.ChargebackApiFp(configuration).insertChargeback(chargeback, expand, options)(fetch, basePath);
        },
        /**
         * Update a chargeback on the UltraCart account.
         * @summary Update a chargeback
         * @param {ChargebackDispute} chargeback Chargeback to update
         * @param {number} chargebackDisputeOid The chargeback_dispute_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChargeback: function (chargeback, chargebackDisputeOid, expand, options) {
            return exports.ChargebackApiFp(configuration).updateChargeback(chargeback, chargebackDisputeOid, expand, options)(fetch, basePath);
        },
    };
};
/**
 * ChargebackApi - object-oriented interface
 * @export
 * @class ChargebackApi
 * @extends {BaseAPI}
 */
var ChargebackApi = /** @class */ (function (_super) {
    __extends(ChargebackApi, _super);
    function ChargebackApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a chargeback on the UltraCart account.
     * @summary Delete a chargeback
     * @param {number} chargebackDisputeOid The chargeback_dispute_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.deleteChargeback = function (chargebackDisputeOid, options) {
        return exports.ChargebackApiFp(this.configuration).deleteChargeback(chargebackDisputeOid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single chargeback using the specified chargeback dispute oid.
     * @summary Retrieve a chargeback
     * @param {number} chargebackDisputeOid The chargeback dispute oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.getChargebackDispute = function (chargebackDisputeOid, expand, options) {
        return exports.ChargebackApiFp(this.configuration).getChargebackDispute(chargebackDisputeOid, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves chargebacks from the account.  If no parameters are specified, all chargebacks will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve chargebacks
     * @param {string} [orderId] Order Id
     * @param {string} [caseNumber] Case number
     * @param {string} [status] Status
     * @param {string} [expirationDtsStart] Expiration dts start
     * @param {string} [expirationDtsEnd] Expiration dts end
     * @param {string} [chargebackDtsStart] Chargeback dts start
     * @param {string} [chargebackDtsEnd] Chargeback dts end
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch chargebacks that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the chargebacks.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.getChargebackDisputes = function (orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options) {
        return exports.ChargebackApiFp(this.configuration).getChargebackDisputes(orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a chargeback on the UltraCart account.
     * @summary Insert a chargeback
     * @param {ChargebackDispute} chargeback Chargeback to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.insertChargeback = function (chargeback, expand, options) {
        return exports.ChargebackApiFp(this.configuration).insertChargeback(chargeback, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update a chargeback on the UltraCart account.
     * @summary Update a chargeback
     * @param {ChargebackDispute} chargeback Chargeback to update
     * @param {number} chargebackDisputeOid The chargeback_dispute_oid to update.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChargebackApi
     */
    ChargebackApi.prototype.updateChargeback = function (chargeback, chargebackDisputeOid, expand, options) {
        return exports.ChargebackApiFp(this.configuration).updateChargeback(chargeback, chargebackDisputeOid, expand, options)(this.fetch, this.basePath);
    };
    return ChargebackApi;
}(BaseAPI));
exports.ChargebackApi = ChargebackApi;
/**
 * CheckoutApi - fetch parameter creator
 * @export
 */
exports.CheckoutApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
         * @summary City/State for Zip
         * @param {Cart} cart Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityState: function (cart, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling cityState.');
            }
            var localVarPath = "/checkout/city_state";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
         * @summary Finalize Order
         * @param {CartFinalizeOrderRequest} finalizeRequest Finalize request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeOrder: function (finalizeRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'finalizeRequest' is not null or undefined
            if (finalizeRequest === null || finalizeRequest === undefined) {
                throw new RequiredError('finalizeRequest', 'Required parameter finalizeRequest was null or undefined when calling finalizeOrder.');
            }
            var localVarPath = "/checkout/cart/finalizeOrder";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartFinalizeOrderRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(finalizeRequest || {}) : (finalizeRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Affirm checkout object for the specified cart_id parameter.
         * @summary Get affirm checkout (by cart id)
         * @param {string} cartId Cart ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffirmCheckout: function (cartId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getAffirmCheckout.');
            }
            var localVarPath = "/checkout/cart/{cart_id}/affirmCheckout"
                .replace("{" + "cart_id" + "}", encodeURIComponent(String(cartId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lookup the allowed countries for this merchant id
         * @summary Allowed countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountries: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/checkout/allowedCountries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
         * @summary Get cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: function (expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/checkout/cart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cart specified by the cart_id parameter.
         * @summary Get cart (by cart id)
         * @param {string} cartId Cart ID to retrieve
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByCartId: function (cartId, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cartId' is not null or undefined
            if (cartId === null || cartId === undefined) {
                throw new RequiredError('cartId', 'Required parameter cartId was null or undefined when calling getCartByCartId.');
            }
            var localVarPath = "/checkout/cart/{cart_id}"
                .replace("{" + "cart_id" + "}", encodeURIComponent(String(cartId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a cart specified by the return code parameter.
         * @summary Get cart (by return code)
         * @param {string} returnCode Return code to lookup cart ID by
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnCode: function (returnCode, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'returnCode' is not null or undefined
            if (returnCode === null || returnCode === undefined) {
                throw new RequiredError('returnCode', 'Required parameter returnCode was null or undefined when calling getCartByReturnCode.');
            }
            var localVarPath = "/checkout/return/{return_code}"
                .replace("{" + "return_code" + "}", encodeURIComponent(String(returnCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lookup a state/province list for a given country code
         * @summary Get state/province list for a country code
         * @param {string} countryCode Two letter ISO country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateProvincesForCountry: function (countryCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling getStateProvincesForCountry.');
            }
            var localVarPath = "/checkout/stateProvincesForCountry/{country_code}"
                .replace("{" + "country_code" + "}", encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm or finalization of the order (including upsell processing).
         * @summary Handoff cart
         * @param {CheckoutHandoffRequest} handoffRequest Handoff request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoffCart: function (handoffRequest, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'handoffRequest' is not null or undefined
            if (handoffRequest === null || handoffRequest === undefined) {
                throw new RequiredError('handoffRequest', 'Required parameter handoffRequest was null or undefined when calling handoffCart.');
            }
            var localVarPath = "/checkout/cart/handoff";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CheckoutHandoffRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(handoffRequest || {}) : (handoffRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login in to the customer profile specified by cart.billing.email and password
         * @summary Profile login
         * @param {CartProfileLoginRequest} loginRequest Login request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (loginRequest, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'loginRequest' is not null or undefined
            if (loginRequest === null || loginRequest === undefined) {
                throw new RequiredError('loginRequest', 'Required parameter loginRequest was null or undefined when calling login.');
            }
            var localVarPath = "/checkout/cart/profile/login";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartProfileLoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(loginRequest || {}) : (loginRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log the cart out of the current profile.  No error will occur if they are not logged in.
         * @summary Profile logout
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: function (cart, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling logout.');
            }
            var localVarPath = "/checkout/cart/profile/logout";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
         * @summary Profile registration
         * @param {CartProfileRegisterRequest} registerRequest Register request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (registerRequest, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'registerRequest' is not null or undefined
            if (registerRequest === null || registerRequest === undefined) {
                throw new RequiredError('registerRequest', 'Required parameter registerRequest was null or undefined when calling register.');
            }
            var localVarPath = "/checkout/cart/profile/register";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartProfileRegisterRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(registerRequest || {}) : (registerRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
         * @summary Register affiliate click
         * @param {RegisterAffiliateClickRequest} registerAffiliateClickRequest Register affiliate click request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAffiliateClick: function (registerAffiliateClickRequest, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'registerAffiliateClickRequest' is not null or undefined
            if (registerAffiliateClickRequest === null || registerAffiliateClickRequest === undefined) {
                throw new RequiredError('registerAffiliateClickRequest', 'Required parameter registerAffiliateClickRequest was null or undefined when calling registerAffiliateClick.');
            }
            var localVarPath = "/checkout/affiliateClick/register";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RegisterAffiliateClickRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(registerAffiliateClickRequest || {}) : (registerAffiliateClickRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForCart: function (cart, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling relatedItemsForCart.');
            }
            var localVarPath = "/checkout/related_items";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items (specific item)
         * @param {string} itemId Item ID to retrieve related items for
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForItem: function (itemId, cart, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId', 'Required parameter itemId was null or undefined when calling relatedItemsForItem.');
            }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling relatedItemsForItem.');
            }
            var localVarPath = "/checkout/relatedItems/{item_id}"
                .replace("{" + "item_id" + "}", encodeURIComponent(String(itemId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
         * @summary Setup Browser Application
         * @param {CheckoutSetupBrowserKeyRequest} browserKeyRequest Setup browser key request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupBrowserKey: function (browserKeyRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'browserKeyRequest' is not null or undefined
            if (browserKeyRequest === null || browserKeyRequest === undefined) {
                throw new RequiredError('browserKeyRequest', 'Required parameter browserKeyRequest was null or undefined when calling setupBrowserKey.');
            }
            var localVarPath = "/checkout/browser_key";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CheckoutSetupBrowserKeyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(browserKeyRequest || {}) : (browserKeyRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the cart.
         * @summary Update cart
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCart: function (cart, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'cart' is not null or undefined
            if (cart === null || cart === undefined) {
                throw new RequiredError('cart', 'Required parameter cart was null or undefined when calling updateCart.');
            }
            var localVarPath = "/checkout/cart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Cart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(cart || {}) : (cart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
         * @summary Validate
         * @param {CartValidationRequest} validationRequest Validation request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCart: function (validationRequest, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validationRequest' is not null or undefined
            if (validationRequest === null || validationRequest === undefined) {
                throw new RequiredError('validationRequest', 'Required parameter validationRequest was null or undefined when calling validateCart.');
            }
            var localVarPath = "/checkout/cart/validate";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["checkout_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CartValidationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(validationRequest || {}) : (validationRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CheckoutApi - functional programming interface
 * @export
 */
exports.CheckoutApiFp = function (configuration) {
    return {
        /**
         * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
         * @summary City/State for Zip
         * @param {Cart} cart Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityState: function (cart, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).cityState(cart, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
         * @summary Finalize Order
         * @param {CartFinalizeOrderRequest} finalizeRequest Finalize request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeOrder: function (finalizeRequest, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).finalizeOrder(finalizeRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a Affirm checkout object for the specified cart_id parameter.
         * @summary Get affirm checkout (by cart id)
         * @param {string} cartId Cart ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffirmCheckout: function (cartId, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).getAffirmCheckout(cartId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lookup the allowed countries for this merchant id
         * @summary Allowed countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountries: function (options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).getAllowedCountries(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
         * @summary Get cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: function (expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).getCart(expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a cart specified by the cart_id parameter.
         * @summary Get cart (by cart id)
         * @param {string} cartId Cart ID to retrieve
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByCartId: function (cartId, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).getCartByCartId(cartId, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a cart specified by the return code parameter.
         * @summary Get cart (by return code)
         * @param {string} returnCode Return code to lookup cart ID by
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnCode: function (returnCode, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).getCartByReturnCode(returnCode, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lookup a state/province list for a given country code
         * @summary Get state/province list for a country code
         * @param {string} countryCode Two letter ISO country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateProvincesForCountry: function (countryCode, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).getStateProvincesForCountry(countryCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm or finalization of the order (including upsell processing).
         * @summary Handoff cart
         * @param {CheckoutHandoffRequest} handoffRequest Handoff request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoffCart: function (handoffRequest, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).handoffCart(handoffRequest, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Login in to the customer profile specified by cart.billing.email and password
         * @summary Profile login
         * @param {CartProfileLoginRequest} loginRequest Login request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (loginRequest, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).login(loginRequest, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Log the cart out of the current profile.  No error will occur if they are not logged in.
         * @summary Profile logout
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: function (cart, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).logout(cart, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
         * @summary Profile registration
         * @param {CartProfileRegisterRequest} registerRequest Register request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (registerRequest, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).register(registerRequest, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
         * @summary Register affiliate click
         * @param {RegisterAffiliateClickRequest} registerAffiliateClickRequest Register affiliate click request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAffiliateClick: function (registerAffiliateClickRequest, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).registerAffiliateClick(registerAffiliateClickRequest, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForCart: function (cart, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).relatedItemsForCart(cart, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items (specific item)
         * @param {string} itemId Item ID to retrieve related items for
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForItem: function (itemId, cart, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).relatedItemsForItem(itemId, cart, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
         * @summary Setup Browser Application
         * @param {CheckoutSetupBrowserKeyRequest} browserKeyRequest Setup browser key request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupBrowserKey: function (browserKeyRequest, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).setupBrowserKey(browserKeyRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the cart.
         * @summary Update cart
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCart: function (cart, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).updateCart(cart, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
         * @summary Validate
         * @param {CartValidationRequest} validationRequest Validation request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCart: function (validationRequest, expand, options) {
            var localVarFetchArgs = exports.CheckoutApiFetchParamCreator(configuration).validateCart(validationRequest, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CheckoutApi - factory interface
 * @export
 */
exports.CheckoutApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
         * @summary City/State for Zip
         * @param {Cart} cart Cart
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cityState: function (cart, options) {
            return exports.CheckoutApiFp(configuration).cityState(cart, options)(fetch, basePath);
        },
        /**
         * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
         * @summary Finalize Order
         * @param {CartFinalizeOrderRequest} finalizeRequest Finalize request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finalizeOrder: function (finalizeRequest, options) {
            return exports.CheckoutApiFp(configuration).finalizeOrder(finalizeRequest, options)(fetch, basePath);
        },
        /**
         * Get a Affirm checkout object for the specified cart_id parameter.
         * @summary Get affirm checkout (by cart id)
         * @param {string} cartId Cart ID to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffirmCheckout: function (cartId, options) {
            return exports.CheckoutApiFp(configuration).getAffirmCheckout(cartId, options)(fetch, basePath);
        },
        /**
         * Lookup the allowed countries for this merchant id
         * @summary Allowed countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedCountries: function (options) {
            return exports.CheckoutApiFp(configuration).getAllowedCountries(options)(fetch, basePath);
        },
        /**
         * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
         * @summary Get cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCart: function (expand, options) {
            return exports.CheckoutApiFp(configuration).getCart(expand, options)(fetch, basePath);
        },
        /**
         * Get a cart specified by the cart_id parameter.
         * @summary Get cart (by cart id)
         * @param {string} cartId Cart ID to retrieve
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByCartId: function (cartId, expand, options) {
            return exports.CheckoutApiFp(configuration).getCartByCartId(cartId, expand, options)(fetch, basePath);
        },
        /**
         * Get a cart specified by the return code parameter.
         * @summary Get cart (by return code)
         * @param {string} returnCode Return code to lookup cart ID by
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCartByReturnCode: function (returnCode, expand, options) {
            return exports.CheckoutApiFp(configuration).getCartByReturnCode(returnCode, expand, options)(fetch, basePath);
        },
        /**
         * Lookup a state/province list for a given country code
         * @summary Get state/province list for a country code
         * @param {string} countryCode Two letter ISO country code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateProvincesForCountry: function (countryCode, options) {
            return exports.CheckoutApiFp(configuration).getStateProvincesForCountry(countryCode, options)(fetch, basePath);
        },
        /**
         * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm or finalization of the order (including upsell processing).
         * @summary Handoff cart
         * @param {CheckoutHandoffRequest} handoffRequest Handoff request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handoffCart: function (handoffRequest, expand, options) {
            return exports.CheckoutApiFp(configuration).handoffCart(handoffRequest, expand, options)(fetch, basePath);
        },
        /**
         * Login in to the customer profile specified by cart.billing.email and password
         * @summary Profile login
         * @param {CartProfileLoginRequest} loginRequest Login request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: function (loginRequest, expand, options) {
            return exports.CheckoutApiFp(configuration).login(loginRequest, expand, options)(fetch, basePath);
        },
        /**
         * Log the cart out of the current profile.  No error will occur if they are not logged in.
         * @summary Profile logout
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: function (cart, expand, options) {
            return exports.CheckoutApiFp(configuration).logout(cart, expand, options)(fetch, basePath);
        },
        /**
         * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
         * @summary Profile registration
         * @param {CartProfileRegisterRequest} registerRequest Register request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: function (registerRequest, expand, options) {
            return exports.CheckoutApiFp(configuration).register(registerRequest, expand, options)(fetch, basePath);
        },
        /**
         * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
         * @summary Register affiliate click
         * @param {RegisterAffiliateClickRequest} registerAffiliateClickRequest Register affiliate click request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAffiliateClick: function (registerAffiliateClickRequest, expand, options) {
            return exports.CheckoutApiFp(configuration).registerAffiliateClick(registerAffiliateClickRequest, expand, options)(fetch, basePath);
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForCart: function (cart, expand, options) {
            return exports.CheckoutApiFp(configuration).relatedItemsForCart(cart, expand, options)(fetch, basePath);
        },
        /**
         * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
         * @summary Related items (specific item)
         * @param {string} itemId Item ID to retrieve related items for
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        relatedItemsForItem: function (itemId, cart, expand, options) {
            return exports.CheckoutApiFp(configuration).relatedItemsForItem(itemId, cart, expand, options)(fetch, basePath);
        },
        /**
         * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
         * @summary Setup Browser Application
         * @param {CheckoutSetupBrowserKeyRequest} browserKeyRequest Setup browser key request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupBrowserKey: function (browserKeyRequest, options) {
            return exports.CheckoutApiFp(configuration).setupBrowserKey(browserKeyRequest, options)(fetch, basePath);
        },
        /**
         * Update the cart.
         * @summary Update cart
         * @param {Cart} cart Cart
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCart: function (cart, expand, options) {
            return exports.CheckoutApiFp(configuration).updateCart(cart, expand, options)(fetch, basePath);
        },
        /**
         * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
         * @summary Validate
         * @param {CartValidationRequest} validationRequest Validation request
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCart: function (validationRequest, expand, options) {
            return exports.CheckoutApiFp(configuration).validateCart(validationRequest, expand, options)(fetch, basePath);
        },
    };
};
/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
var CheckoutApi = /** @class */ (function (_super) {
    __extends(CheckoutApi, _super);
    function CheckoutApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Look up the city and state for the shipping zip code.  Useful for building an auto complete for parts of the shipping address
     * @summary City/State for Zip
     * @param {Cart} cart Cart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.cityState = function (cart, options) {
        return exports.CheckoutApiFp(this.configuration).cityState(cart, options)(this.fetch, this.basePath);
    };
    /**
     * Finalize the cart into an order.  This method can not be called with browser key authentication.  It is ONLY meant for server side code to call.
     * @summary Finalize Order
     * @param {CartFinalizeOrderRequest} finalizeRequest Finalize request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.finalizeOrder = function (finalizeRequest, options) {
        return exports.CheckoutApiFp(this.configuration).finalizeOrder(finalizeRequest, options)(this.fetch, this.basePath);
    };
    /**
     * Get a Affirm checkout object for the specified cart_id parameter.
     * @summary Get affirm checkout (by cart id)
     * @param {string} cartId Cart ID to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getAffirmCheckout = function (cartId, options) {
        return exports.CheckoutApiFp(this.configuration).getAffirmCheckout(cartId, options)(this.fetch, this.basePath);
    };
    /**
     * Lookup the allowed countries for this merchant id
     * @summary Allowed countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getAllowedCountries = function (options) {
        return exports.CheckoutApiFp(this.configuration).getAllowedCountries(options)(this.fetch, this.basePath);
    };
    /**
     * If the cookie is set on the browser making the request then it will return their active cart.  Otherwise it will create a new cart.
     * @summary Get cart
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCart = function (expand, options) {
        return exports.CheckoutApiFp(this.configuration).getCart(expand, options)(this.fetch, this.basePath);
    };
    /**
     * Get a cart specified by the cart_id parameter.
     * @summary Get cart (by cart id)
     * @param {string} cartId Cart ID to retrieve
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCartByCartId = function (cartId, expand, options) {
        return exports.CheckoutApiFp(this.configuration).getCartByCartId(cartId, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Get a cart specified by the return code parameter.
     * @summary Get cart (by return code)
     * @param {string} returnCode Return code to lookup cart ID by
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getCartByReturnCode = function (returnCode, expand, options) {
        return exports.CheckoutApiFp(this.configuration).getCartByReturnCode(returnCode, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Lookup a state/province list for a given country code
     * @summary Get state/province list for a country code
     * @param {string} countryCode Two letter ISO country code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.getStateProvincesForCountry = function (countryCode, options) {
        return exports.CheckoutApiFp(this.configuration).getStateProvincesForCountry(countryCode, options)(this.fetch, this.basePath);
    };
    /**
     * Handoff the browser to UltraCart for view cart on StoreFront, transfer to PayPal, transfer to Affirm or finalization of the order (including upsell processing).
     * @summary Handoff cart
     * @param {CheckoutHandoffRequest} handoffRequest Handoff request
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.handoffCart = function (handoffRequest, expand, options) {
        return exports.CheckoutApiFp(this.configuration).handoffCart(handoffRequest, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Login in to the customer profile specified by cart.billing.email and password
     * @summary Profile login
     * @param {CartProfileLoginRequest} loginRequest Login request
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.login = function (loginRequest, expand, options) {
        return exports.CheckoutApiFp(this.configuration).login(loginRequest, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Log the cart out of the current profile.  No error will occur if they are not logged in.
     * @summary Profile logout
     * @param {Cart} cart Cart
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.logout = function (cart, expand, options) {
        return exports.CheckoutApiFp(this.configuration).logout(cart, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Register a new customer profile.  Requires the cart.billing object to be populated along with the password.
     * @summary Profile registration
     * @param {CartProfileRegisterRequest} registerRequest Register request
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.register = function (registerRequest, expand, options) {
        return exports.CheckoutApiFp(this.configuration).register(registerRequest, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Register an affiliate click.  Used by custom checkouts that are completely API based and do not perform checkout handoff.
     * @summary Register affiliate click
     * @param {RegisterAffiliateClickRequest} registerAffiliateClickRequest Register affiliate click request
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.registerAffiliateClick = function (registerAffiliateClickRequest, expand, options) {
        return exports.CheckoutApiFp(this.configuration).registerAffiliateClick(registerAffiliateClickRequest, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
     * @summary Related items
     * @param {Cart} cart Cart
     * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.relatedItemsForCart = function (cart, expand, options) {
        return exports.CheckoutApiFp(this.configuration).relatedItemsForCart(cart, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all the related items for the cart contents.  Expansion is limited to content, content.assignments, content.attributes, content.multimedia, content.multimedia.thumbnails, options, pricing, and pricing.tiers.
     * @summary Related items (specific item)
     * @param {string} itemId Item ID to retrieve related items for
     * @param {Cart} cart Cart
     * @param {string} [expand] The object expansion to perform on the result.  See item resource documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.relatedItemsForItem = function (itemId, cart, expand, options) {
        return exports.CheckoutApiFp(this.configuration).relatedItemsForItem(itemId, cart, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Setup a browser key authenticated application with checkout permissions.  This REST call must be made with an authentication scheme that is not browser key.  The new application will be linked to the application that makes this call.  If this application is disabled / deleted, then so will the application setup by this call.  The purpose of this call is to allow an OAuth applicaiton, such as the Wordpress plugin, to setup the proper browser based authentication for the REST checkout API to use.
     * @summary Setup Browser Application
     * @param {CheckoutSetupBrowserKeyRequest} browserKeyRequest Setup browser key request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.setupBrowserKey = function (browserKeyRequest, options) {
        return exports.CheckoutApiFp(this.configuration).setupBrowserKey(browserKeyRequest, options)(this.fetch, this.basePath);
    };
    /**
     * Update the cart.
     * @summary Update cart
     * @param {Cart} cart Cart
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.updateCart = function (cart, expand, options) {
        return exports.CheckoutApiFp(this.configuration).updateCart(cart, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Validate the cart for errors.  Specific checks can be passed and multiple validations can occur throughout your checkout flow.
     * @summary Validate
     * @param {CartValidationRequest} validationRequest Validation request
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    CheckoutApi.prototype.validateCart = function (validationRequest, expand, options) {
        return exports.CheckoutApiFp(this.configuration).validateCart(validationRequest, expand, options)(this.fetch, this.basePath);
    };
    return CheckoutApi;
}(BaseAPI));
exports.CheckoutApi = CheckoutApi;
/**
 * CouponApi - fetch parameter creator
 * @export
 */
exports.CouponApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a coupon on the UltraCart account.
         * @summary Delete a coupon
         * @param {number} couponOid The coupon_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: function (couponOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'couponOid' is not null or undefined
            if (couponOid === null || couponOid === undefined) {
                throw new RequiredError('couponOid', 'Required parameter couponOid was null or undefined when calling deleteCoupon.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}"
                .replace("{" + "coupon_oid" + "}", encodeURIComponent(String(couponOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate one time codes for a coupon
         * @summary Generates one time codes for a coupon
         * @param {number} couponOid The coupon oid to generate codes.
         * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCouponCodes: function (couponOid, couponCodesRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'couponOid' is not null or undefined
            if (couponOid === null || couponOid === undefined) {
                throw new RequiredError('couponOid', 'Required parameter couponOid was null or undefined when calling generateCouponCodes.');
            }
            // verify required parameter 'couponCodesRequest' is not null or undefined
            if (couponCodesRequest === null || couponCodesRequest === undefined) {
                throw new RequiredError('couponCodesRequest', 'Required parameter couponCodesRequest was null or undefined when calling generateCouponCodes.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}/generate_codes"
                .replace("{" + "coupon_oid" + "}", encodeURIComponent(String(couponOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponCodesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(couponCodesRequest || {}) : (couponCodesRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate one time codes by merchant code
         * @summary Generates one time codes by merchant code
         * @param {string} merchantCode The merchant code to generate one time codes.
         * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOneTimeCodesByMerchantCode: function (merchantCode, couponCodesRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchantCode' is not null or undefined
            if (merchantCode === null || merchantCode === undefined) {
                throw new RequiredError('merchantCode', 'Required parameter merchantCode was null or undefined when calling generateOneTimeCodesByMerchantCode.');
            }
            // verify required parameter 'couponCodesRequest' is not null or undefined
            if (couponCodesRequest === null || couponCodesRequest === undefined) {
                throw new RequiredError('couponCodesRequest', 'Required parameter couponCodesRequest was null or undefined when calling generateOneTimeCodesByMerchantCode.');
            }
            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}/generate_codes"
                .replace("{" + "merchant_code" + "}", encodeURIComponent(String(merchantCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponCodesRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(couponCodesRequest || {}) : (couponCodesRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single coupon using the specified coupon profile oid.
         * @summary Retrieve a coupon
         * @param {number} couponOid The coupon oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: function (couponOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'couponOid' is not null or undefined
            if (couponOid === null || couponOid === undefined) {
                throw new RequiredError('couponOid', 'Required parameter couponOid was null or undefined when calling getCoupon.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}"
                .replace("{" + "coupon_oid" + "}", encodeURIComponent(String(couponOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single coupon using the specified merchant code.
         * @summary Retrieve a coupon by merchant code
         * @param {string} merchantCode The coupon merchant code to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchantCode: function (merchantCode, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchantCode' is not null or undefined
            if (merchantCode === null || merchantCode === undefined) {
                throw new RequiredError('merchantCode', 'Required parameter merchantCode was null or undefined when calling getCouponByMerchantCode.');
            }
            var localVarPath = "/coupon/coupons/merchant_code/{merchant_code}"
                .replace("{" + "merchant_code" + "}", encodeURIComponent(String(merchantCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons
         * @param {string} [merchantCode] Merchant code
         * @param {string} [description] Description
         * @param {string} [couponType] Coupon type
         * @param {string} [startDateBegin] Start date begin
         * @param {string} [startDateEnd] Start date end
         * @param {string} [expirationDateBegin] Expiration date begin
         * @param {string} [expirationDateEnd] Expiration date end
         * @param {number} [affiliateOid] Affiliate oid
         * @param {boolean} [excludeExpired] Exclude expired
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: function (merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/coupon/coupons";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (merchantCode !== undefined) {
                localVarQueryParameter['merchant_code'] = merchantCode;
            }
            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (couponType !== undefined) {
                localVarQueryParameter['coupon_type'] = couponType;
            }
            if (startDateBegin !== undefined) {
                localVarQueryParameter['start_date_begin'] = startDateBegin;
            }
            if (startDateEnd !== undefined) {
                localVarQueryParameter['start_date_end'] = startDateEnd;
            }
            if (expirationDateBegin !== undefined) {
                localVarQueryParameter['expiration_date_begin'] = expirationDateBegin;
            }
            if (expirationDateEnd !== undefined) {
                localVarQueryParameter['expiration_date_end'] = expirationDateEnd;
            }
            if (affiliateOid !== undefined) {
                localVarQueryParameter['affiliate_oid'] = affiliateOid;
            }
            if (excludeExpired !== undefined) {
                localVarQueryParameter['exclude_expired'] = excludeExpired;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons by query
         * @param {CouponQuery} couponQuery Coupon query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsByQuery: function (couponQuery, limit, offset, sort, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'couponQuery' is not null or undefined
            if (couponQuery === null || couponQuery === undefined) {
                throw new RequiredError('couponQuery', 'Required parameter couponQuery was null or undefined when calling getCouponsByQuery.');
            }
            var localVarPath = "/coupon/coupons/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CouponQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(couponQuery || {}) : (couponQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve values needed for a coupon editor
         * @summary Retrieve values needed for a coupon editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/coupon/editor_values";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a coupon on the UltraCart account.
         * @summary Insert a coupon
         * @param {Coupon} coupon Coupon to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupon: function (coupon, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon' is not null or undefined
            if (coupon === null || coupon === undefined) {
                throw new RequiredError('coupon', 'Required parameter coupon was null or undefined when calling insertCoupon.');
            }
            var localVarPath = "/coupon/coupons";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Coupon" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon || {}) : (coupon || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a coupon on the UltraCart account.
         * @summary Update a coupon
         * @param {Coupon} coupon Coupon to update
         * @param {number} couponOid The coupon_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: function (coupon, couponOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'coupon' is not null or undefined
            if (coupon === null || coupon === undefined) {
                throw new RequiredError('coupon', 'Required parameter coupon was null or undefined when calling updateCoupon.');
            }
            // verify required parameter 'couponOid' is not null or undefined
            if (couponOid === null || couponOid === undefined) {
                throw new RequiredError('couponOid', 'Required parameter couponOid was null or undefined when calling updateCoupon.');
            }
            var localVarPath = "/coupon/coupons/{coupon_oid}"
                .replace("{" + "coupon_oid" + "}", encodeURIComponent(String(couponOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["coupon_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Coupon" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(coupon || {}) : (coupon || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CouponApi - functional programming interface
 * @export
 */
exports.CouponApiFp = function (configuration) {
    return {
        /**
         * Delete a coupon on the UltraCart account.
         * @summary Delete a coupon
         * @param {number} couponOid The coupon_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: function (couponOid, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).deleteCoupon(couponOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generate one time codes for a coupon
         * @summary Generates one time codes for a coupon
         * @param {number} couponOid The coupon oid to generate codes.
         * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCouponCodes: function (couponOid, couponCodesRequest, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).generateCouponCodes(couponOid, couponCodesRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Generate one time codes by merchant code
         * @summary Generates one time codes by merchant code
         * @param {string} merchantCode The merchant code to generate one time codes.
         * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOneTimeCodesByMerchantCode: function (merchantCode, couponCodesRequest, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).generateOneTimeCodesByMerchantCode(merchantCode, couponCodesRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single coupon using the specified coupon profile oid.
         * @summary Retrieve a coupon
         * @param {number} couponOid The coupon oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: function (couponOid, expand, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).getCoupon(couponOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single coupon using the specified merchant code.
         * @summary Retrieve a coupon by merchant code
         * @param {string} merchantCode The coupon merchant code to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchantCode: function (merchantCode, expand, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).getCouponByMerchantCode(merchantCode, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons
         * @param {string} [merchantCode] Merchant code
         * @param {string} [description] Description
         * @param {string} [couponType] Coupon type
         * @param {string} [startDateBegin] Start date begin
         * @param {string} [startDateEnd] Start date end
         * @param {string} [expirationDateBegin] Expiration date begin
         * @param {string} [expirationDateEnd] Expiration date end
         * @param {number} [affiliateOid] Affiliate oid
         * @param {boolean} [excludeExpired] Exclude expired
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: function (merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).getCoupons(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons by query
         * @param {CouponQuery} couponQuery Coupon query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsByQuery: function (couponQuery, limit, offset, sort, expand, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).getCouponsByQuery(couponQuery, limit, offset, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve values needed for a coupon editor
         * @summary Retrieve values needed for a coupon editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).getEditorValues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a coupon on the UltraCart account.
         * @summary Insert a coupon
         * @param {Coupon} coupon Coupon to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupon: function (coupon, expand, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).insertCoupon(coupon, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a coupon on the UltraCart account.
         * @summary Update a coupon
         * @param {Coupon} coupon Coupon to update
         * @param {number} couponOid The coupon_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: function (coupon, couponOid, expand, options) {
            var localVarFetchArgs = exports.CouponApiFetchParamCreator(configuration).updateCoupon(coupon, couponOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CouponApi - factory interface
 * @export
 */
exports.CouponApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a coupon on the UltraCart account.
         * @summary Delete a coupon
         * @param {number} couponOid The coupon_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: function (couponOid, options) {
            return exports.CouponApiFp(configuration).deleteCoupon(couponOid, options)(fetch, basePath);
        },
        /**
         * Generate one time codes for a coupon
         * @summary Generates one time codes for a coupon
         * @param {number} couponOid The coupon oid to generate codes.
         * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateCouponCodes: function (couponOid, couponCodesRequest, options) {
            return exports.CouponApiFp(configuration).generateCouponCodes(couponOid, couponCodesRequest, options)(fetch, basePath);
        },
        /**
         * Generate one time codes by merchant code
         * @summary Generates one time codes by merchant code
         * @param {string} merchantCode The merchant code to generate one time codes.
         * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOneTimeCodesByMerchantCode: function (merchantCode, couponCodesRequest, options) {
            return exports.CouponApiFp(configuration).generateOneTimeCodesByMerchantCode(merchantCode, couponCodesRequest, options)(fetch, basePath);
        },
        /**
         * Retrieves a single coupon using the specified coupon profile oid.
         * @summary Retrieve a coupon
         * @param {number} couponOid The coupon oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupon: function (couponOid, expand, options) {
            return exports.CouponApiFp(configuration).getCoupon(couponOid, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single coupon using the specified merchant code.
         * @summary Retrieve a coupon by merchant code
         * @param {string} merchantCode The coupon merchant code to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponByMerchantCode: function (merchantCode, expand, options) {
            return exports.CouponApiFp(configuration).getCouponByMerchantCode(merchantCode, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons
         * @param {string} [merchantCode] Merchant code
         * @param {string} [description] Description
         * @param {string} [couponType] Coupon type
         * @param {string} [startDateBegin] Start date begin
         * @param {string} [startDateEnd] Start date end
         * @param {string} [expirationDateBegin] Expiration date begin
         * @param {string} [expirationDateEnd] Expiration date end
         * @param {number} [affiliateOid] Affiliate oid
         * @param {boolean} [excludeExpired] Exclude expired
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoupons: function (merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options) {
            return exports.CouponApiFp(configuration).getCoupons(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve coupons by query
         * @param {CouponQuery} couponQuery Coupon query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponsByQuery: function (couponQuery, limit, offset, sort, expand, options) {
            return exports.CouponApiFp(configuration).getCouponsByQuery(couponQuery, limit, offset, sort, expand, options)(fetch, basePath);
        },
        /**
         * Retrieve values needed for a coupon editor
         * @summary Retrieve values needed for a coupon editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            return exports.CouponApiFp(configuration).getEditorValues(options)(fetch, basePath);
        },
        /**
         * Insert a coupon on the UltraCart account.
         * @summary Insert a coupon
         * @param {Coupon} coupon Coupon to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCoupon: function (coupon, expand, options) {
            return exports.CouponApiFp(configuration).insertCoupon(coupon, expand, options)(fetch, basePath);
        },
        /**
         * Update a coupon on the UltraCart account.
         * @summary Update a coupon
         * @param {Coupon} coupon Coupon to update
         * @param {number} couponOid The coupon_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: function (coupon, couponOid, expand, options) {
            return exports.CouponApiFp(configuration).updateCoupon(coupon, couponOid, expand, options)(fetch, basePath);
        },
    };
};
/**
 * CouponApi - object-oriented interface
 * @export
 * @class CouponApi
 * @extends {BaseAPI}
 */
var CouponApi = /** @class */ (function (_super) {
    __extends(CouponApi, _super);
    function CouponApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a coupon on the UltraCart account.
     * @summary Delete a coupon
     * @param {number} couponOid The coupon_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.deleteCoupon = function (couponOid, options) {
        return exports.CouponApiFp(this.configuration).deleteCoupon(couponOid, options)(this.fetch, this.basePath);
    };
    /**
     * Generate one time codes for a coupon
     * @summary Generates one time codes for a coupon
     * @param {number} couponOid The coupon oid to generate codes.
     * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.generateCouponCodes = function (couponOid, couponCodesRequest, options) {
        return exports.CouponApiFp(this.configuration).generateCouponCodes(couponOid, couponCodesRequest, options)(this.fetch, this.basePath);
    };
    /**
     * Generate one time codes by merchant code
     * @summary Generates one time codes by merchant code
     * @param {string} merchantCode The merchant code to generate one time codes.
     * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.generateOneTimeCodesByMerchantCode = function (merchantCode, couponCodesRequest, options) {
        return exports.CouponApiFp(this.configuration).generateOneTimeCodesByMerchantCode(merchantCode, couponCodesRequest, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single coupon using the specified coupon profile oid.
     * @summary Retrieve a coupon
     * @param {number} couponOid The coupon oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCoupon = function (couponOid, expand, options) {
        return exports.CouponApiFp(this.configuration).getCoupon(couponOid, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single coupon using the specified merchant code.
     * @summary Retrieve a coupon by merchant code
     * @param {string} merchantCode The coupon merchant code to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCouponByMerchantCode = function (merchantCode, expand, options) {
        return exports.CouponApiFp(this.configuration).getCouponByMerchantCode(merchantCode, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve coupons
     * @param {string} [merchantCode] Merchant code
     * @param {string} [description] Description
     * @param {string} [couponType] Coupon type
     * @param {string} [startDateBegin] Start date begin
     * @param {string} [startDateEnd] Start date end
     * @param {string} [expirationDateBegin] Expiration date begin
     * @param {string} [expirationDateEnd] Expiration date end
     * @param {number} [affiliateOid] Affiliate oid
     * @param {boolean} [excludeExpired] Exclude expired
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCoupons = function (merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options) {
        return exports.CouponApiFp(this.configuration).getCoupons(merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve coupons by query
     * @param {CouponQuery} couponQuery Coupon query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getCouponsByQuery = function (couponQuery, limit, offset, sort, expand, options) {
        return exports.CouponApiFp(this.configuration).getCouponsByQuery(couponQuery, limit, offset, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve values needed for a coupon editor
     * @summary Retrieve values needed for a coupon editor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.getEditorValues = function (options) {
        return exports.CouponApiFp(this.configuration).getEditorValues(options)(this.fetch, this.basePath);
    };
    /**
     * Insert a coupon on the UltraCart account.
     * @summary Insert a coupon
     * @param {Coupon} coupon Coupon to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.insertCoupon = function (coupon, expand, options) {
        return exports.CouponApiFp(this.configuration).insertCoupon(coupon, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update a coupon on the UltraCart account.
     * @summary Update a coupon
     * @param {Coupon} coupon Coupon to update
     * @param {number} couponOid The coupon_oid to update.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    CouponApi.prototype.updateCoupon = function (coupon, couponOid, expand, options) {
        return exports.CouponApiFp(this.configuration).updateCoupon(coupon, couponOid, expand, options)(this.fetch, this.basePath);
    };
    return CouponApi;
}(BaseAPI));
exports.CouponApi = CouponApi;
/**
 * CustomerApi - fetch parameter creator
 * @export
 */
exports.CustomerApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a customer on the UltraCart account.
         * @summary Delete a customer
         * @param {number} customerProfileOid The customer_profile_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerProfileOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customerProfileOid' is not null or undefined
            if (customerProfileOid === null || customerProfileOid === undefined) {
                throw new RequiredError('customerProfileOid', 'Required parameter customerProfileOid was null or undefined when calling deleteCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}"
                .replace("{" + "customer_profile_oid" + "}", encodeURIComponent(String(customerProfileOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single customer using the specified customer profile oid.
         * @summary Retrieve a customer
         * @param {number} customerProfileOid The customer oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customerProfileOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customerProfileOid' is not null or undefined
            if (customerProfileOid === null || customerProfileOid === undefined) {
                throw new RequiredError('customerProfileOid', 'Required parameter customerProfileOid was null or undefined when calling getCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}"
                .replace("{" + "customer_profile_oid" + "}", encodeURIComponent(String(customerProfileOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers
         * @param {string} [email] Email
         * @param {string} [qbClass] Quickbooks class
         * @param {string} [quickbooksCode] Quickbooks code
         * @param {string} [lastModifiedDtsStart] Last modified date start
         * @param {string} [lastModifiedDtsEnd] Last modified date end
         * @param {string} [signupDtsStart] Signup date start
         * @param {string} [signupDtsEnd] Signup date end
         * @param {string} [billingFirstName] Billing first name
         * @param {string} [billingLastName] Billing last name
         * @param {string} [billingCompany] Billing company
         * @param {string} [billingCity] Billing city
         * @param {string} [billingState] Billing state
         * @param {string} [billingPostalCode] Billing postal code
         * @param {string} [billingCountryCode] Billing country code
         * @param {string} [billingDayPhone] Billing day phone
         * @param {string} [billingEveningPhone] Billing evening phone
         * @param {string} [shippingFirstName] Shipping first name
         * @param {string} [shippingLastName] Shipping last name
         * @param {string} [shippingCompany] Shipping company
         * @param {string} [shippingCity] Shipping city
         * @param {string} [shippingState] Shipping state
         * @param {string} [shippingPostalCode] Shipping postal code
         * @param {string} [shippingCountryCode] Shipping country code
         * @param {string} [shippingDayPhone] Shipping day phone
         * @param {string} [shippingEveningPhone] Shipping evening phone
         * @param {number} [pricingTierOid] Pricing tier oid
         * @param {string} [pricingTierName] Pricing tier name
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: function (email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/customers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (qbClass !== undefined) {
                localVarQueryParameter['qb_class'] = qbClass;
            }
            if (quickbooksCode !== undefined) {
                localVarQueryParameter['quickbooks_code'] = quickbooksCode;
            }
            if (lastModifiedDtsStart !== undefined) {
                localVarQueryParameter['last_modified_dts_start'] = lastModifiedDtsStart;
            }
            if (lastModifiedDtsEnd !== undefined) {
                localVarQueryParameter['last_modified_dts_end'] = lastModifiedDtsEnd;
            }
            if (signupDtsStart !== undefined) {
                localVarQueryParameter['signup_dts_start'] = signupDtsStart;
            }
            if (signupDtsEnd !== undefined) {
                localVarQueryParameter['signup_dts_end'] = signupDtsEnd;
            }
            if (billingFirstName !== undefined) {
                localVarQueryParameter['billing_first_name'] = billingFirstName;
            }
            if (billingLastName !== undefined) {
                localVarQueryParameter['billing_last_name'] = billingLastName;
            }
            if (billingCompany !== undefined) {
                localVarQueryParameter['billing_company'] = billingCompany;
            }
            if (billingCity !== undefined) {
                localVarQueryParameter['billing_city'] = billingCity;
            }
            if (billingState !== undefined) {
                localVarQueryParameter['billing_state'] = billingState;
            }
            if (billingPostalCode !== undefined) {
                localVarQueryParameter['billing_postal_code'] = billingPostalCode;
            }
            if (billingCountryCode !== undefined) {
                localVarQueryParameter['billing_country_code'] = billingCountryCode;
            }
            if (billingDayPhone !== undefined) {
                localVarQueryParameter['billing_day_phone'] = billingDayPhone;
            }
            if (billingEveningPhone !== undefined) {
                localVarQueryParameter['billing_evening_phone'] = billingEveningPhone;
            }
            if (shippingFirstName !== undefined) {
                localVarQueryParameter['shipping_first_name'] = shippingFirstName;
            }
            if (shippingLastName !== undefined) {
                localVarQueryParameter['shipping_last_name'] = shippingLastName;
            }
            if (shippingCompany !== undefined) {
                localVarQueryParameter['shipping_company'] = shippingCompany;
            }
            if (shippingCity !== undefined) {
                localVarQueryParameter['shipping_city'] = shippingCity;
            }
            if (shippingState !== undefined) {
                localVarQueryParameter['shipping_state'] = shippingState;
            }
            if (shippingPostalCode !== undefined) {
                localVarQueryParameter['shipping_postal_code'] = shippingPostalCode;
            }
            if (shippingCountryCode !== undefined) {
                localVarQueryParameter['shipping_country_code'] = shippingCountryCode;
            }
            if (shippingDayPhone !== undefined) {
                localVarQueryParameter['shipping_day_phone'] = shippingDayPhone;
            }
            if (shippingEveningPhone !== undefined) {
                localVarQueryParameter['shipping_evening_phone'] = shippingEveningPhone;
            }
            if (pricingTierOid !== undefined) {
                localVarQueryParameter['pricing_tier_oid'] = pricingTierOid;
            }
            if (pricingTierName !== undefined) {
                localVarQueryParameter['pricing_tier_name'] = pricingTierName;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['_since'] = since;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers by query
         * @param {CustomerQuery} customerQuery Customer query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersByQuery: function (customerQuery, limit, offset, since, sort, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customerQuery' is not null or undefined
            if (customerQuery === null || customerQuery === undefined) {
                throw new RequiredError('customerQuery', 'Required parameter customerQuery was null or undefined when calling getCustomersByQuery.');
            }
            var localVarPath = "/customer/customers/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['_since'] = since;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customerQuery || {}) : (customerQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
         * @summary Retrieve customers for DataTables plugin
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersForDataTables: function (expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/customers/dataTables";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve values needed for a customer profile editor.
         * @summary Retrieve values needed for a customer profile editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/editor_values";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all email lists across all storefronts
         * @summary Retrieve all email lists across all storefronts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/customer/email_lists";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a customer on the UltraCart account.
         * @summary Insert a customer
         * @param {Customer} customer Customer to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCustomer: function (customer, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError('customer', 'Required parameter customer was null or undefined when calling insertCustomer.');
            }
            var localVarPath = "/customer/customers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Customer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customer || {}) : (customer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a customer on the UltraCart account.
         * @summary Update a customer
         * @param {Customer} customer Customer to update
         * @param {number} customerProfileOid The customer_profile_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customer, customerProfileOid, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customer' is not null or undefined
            if (customer === null || customer === undefined) {
                throw new RequiredError('customer', 'Required parameter customer was null or undefined when calling updateCustomer.');
            }
            // verify required parameter 'customerProfileOid' is not null or undefined
            if (customerProfileOid === null || customerProfileOid === undefined) {
                throw new RequiredError('customerProfileOid', 'Required parameter customerProfileOid was null or undefined when calling updateCustomer.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}"
                .replace("{" + "customer_profile_oid" + "}", encodeURIComponent(String(customerProfileOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Customer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customer || {}) : (customer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update email list subscriptions for a customer
         * @summary Update email list subscriptions for a customer
         * @param {number} customerProfileOid The customer profile oid
         * @param {CustomerEmailListChanges} listChanges List changes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerEmailLists: function (customerProfileOid, listChanges, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'customerProfileOid' is not null or undefined
            if (customerProfileOid === null || customerProfileOid === undefined) {
                throw new RequiredError('customerProfileOid', 'Required parameter customerProfileOid was null or undefined when calling updateCustomerEmailLists.');
            }
            // verify required parameter 'listChanges' is not null or undefined
            if (listChanges === null || listChanges === undefined) {
                throw new RequiredError('listChanges', 'Required parameter listChanges was null or undefined when calling updateCustomerEmailLists.');
            }
            var localVarPath = "/customer/customers/{customer_profile_oid}/email_lists"
                .replace("{" + "customer_profile_oid" + "}", encodeURIComponent(String(customerProfileOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["customer_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("CustomerEmailListChanges" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(listChanges || {}) : (listChanges || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CustomerApi - functional programming interface
 * @export
 */
exports.CustomerApiFp = function (configuration) {
    return {
        /**
         * Delete a customer on the UltraCart account.
         * @summary Delete a customer
         * @param {number} customerProfileOid The customer_profile_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerProfileOid, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).deleteCustomer(customerProfileOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single customer using the specified customer profile oid.
         * @summary Retrieve a customer
         * @param {number} customerProfileOid The customer oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customerProfileOid, expand, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).getCustomer(customerProfileOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers
         * @param {string} [email] Email
         * @param {string} [qbClass] Quickbooks class
         * @param {string} [quickbooksCode] Quickbooks code
         * @param {string} [lastModifiedDtsStart] Last modified date start
         * @param {string} [lastModifiedDtsEnd] Last modified date end
         * @param {string} [signupDtsStart] Signup date start
         * @param {string} [signupDtsEnd] Signup date end
         * @param {string} [billingFirstName] Billing first name
         * @param {string} [billingLastName] Billing last name
         * @param {string} [billingCompany] Billing company
         * @param {string} [billingCity] Billing city
         * @param {string} [billingState] Billing state
         * @param {string} [billingPostalCode] Billing postal code
         * @param {string} [billingCountryCode] Billing country code
         * @param {string} [billingDayPhone] Billing day phone
         * @param {string} [billingEveningPhone] Billing evening phone
         * @param {string} [shippingFirstName] Shipping first name
         * @param {string} [shippingLastName] Shipping last name
         * @param {string} [shippingCompany] Shipping company
         * @param {string} [shippingCity] Shipping city
         * @param {string} [shippingState] Shipping state
         * @param {string} [shippingPostalCode] Shipping postal code
         * @param {string} [shippingCountryCode] Shipping country code
         * @param {string} [shippingDayPhone] Shipping day phone
         * @param {string} [shippingEveningPhone] Shipping evening phone
         * @param {number} [pricingTierOid] Pricing tier oid
         * @param {string} [pricingTierName] Pricing tier name
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: function (email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).getCustomers(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers by query
         * @param {CustomerQuery} customerQuery Customer query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersByQuery: function (customerQuery, limit, offset, since, sort, expand, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).getCustomersByQuery(customerQuery, limit, offset, since, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
         * @summary Retrieve customers for DataTables plugin
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersForDataTables: function (expand, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).getCustomersForDataTables(expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve values needed for a customer profile editor.
         * @summary Retrieve values needed for a customer profile editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).getEditorValues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve all email lists across all storefronts
         * @summary Retrieve all email lists across all storefronts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).getEmailLists(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a customer on the UltraCart account.
         * @summary Insert a customer
         * @param {Customer} customer Customer to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCustomer: function (customer, expand, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).insertCustomer(customer, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a customer on the UltraCart account.
         * @summary Update a customer
         * @param {Customer} customer Customer to update
         * @param {number} customerProfileOid The customer_profile_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customer, customerProfileOid, expand, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).updateCustomer(customer, customerProfileOid, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update email list subscriptions for a customer
         * @summary Update email list subscriptions for a customer
         * @param {number} customerProfileOid The customer profile oid
         * @param {CustomerEmailListChanges} listChanges List changes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerEmailLists: function (customerProfileOid, listChanges, options) {
            var localVarFetchArgs = exports.CustomerApiFetchParamCreator(configuration).updateCustomerEmailLists(customerProfileOid, listChanges, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CustomerApi - factory interface
 * @export
 */
exports.CustomerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a customer on the UltraCart account.
         * @summary Delete a customer
         * @param {number} customerProfileOid The customer_profile_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: function (customerProfileOid, options) {
            return exports.CustomerApiFp(configuration).deleteCustomer(customerProfileOid, options)(fetch, basePath);
        },
        /**
         * Retrieves a single customer using the specified customer profile oid.
         * @summary Retrieve a customer
         * @param {number} customerProfileOid The customer oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: function (customerProfileOid, expand, options) {
            return exports.CustomerApiFp(configuration).getCustomer(customerProfileOid, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers
         * @param {string} [email] Email
         * @param {string} [qbClass] Quickbooks class
         * @param {string} [quickbooksCode] Quickbooks code
         * @param {string} [lastModifiedDtsStart] Last modified date start
         * @param {string} [lastModifiedDtsEnd] Last modified date end
         * @param {string} [signupDtsStart] Signup date start
         * @param {string} [signupDtsEnd] Signup date end
         * @param {string} [billingFirstName] Billing first name
         * @param {string} [billingLastName] Billing last name
         * @param {string} [billingCompany] Billing company
         * @param {string} [billingCity] Billing city
         * @param {string} [billingState] Billing state
         * @param {string} [billingPostalCode] Billing postal code
         * @param {string} [billingCountryCode] Billing country code
         * @param {string} [billingDayPhone] Billing day phone
         * @param {string} [billingEveningPhone] Billing evening phone
         * @param {string} [shippingFirstName] Shipping first name
         * @param {string} [shippingLastName] Shipping last name
         * @param {string} [shippingCompany] Shipping company
         * @param {string} [shippingCity] Shipping city
         * @param {string} [shippingState] Shipping state
         * @param {string} [shippingPostalCode] Shipping postal code
         * @param {string} [shippingCountryCode] Shipping country code
         * @param {string} [shippingDayPhone] Shipping day phone
         * @param {string} [shippingEveningPhone] Shipping evening phone
         * @param {number} [pricingTierOid] Pricing tier oid
         * @param {string} [pricingTierName] Pricing tier name
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: function (email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options) {
            return exports.CustomerApiFp(configuration).getCustomers(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve customers by query
         * @param {CustomerQuery} customerQuery Customer query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch customers that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersByQuery: function (customerQuery, limit, offset, since, sort, expand, options) {
            return exports.CustomerApiFp(configuration).getCustomersByQuery(customerQuery, limit, offset, since, sort, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
         * @summary Retrieve customers for DataTables plugin
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomersForDataTables: function (expand, options) {
            return exports.CustomerApiFp(configuration).getCustomersForDataTables(expand, options)(fetch, basePath);
        },
        /**
         * Retrieve values needed for a customer profile editor.
         * @summary Retrieve values needed for a customer profile editor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorValues: function (options) {
            return exports.CustomerApiFp(configuration).getEditorValues(options)(fetch, basePath);
        },
        /**
         * Retrieve all email lists across all storefronts
         * @summary Retrieve all email lists across all storefronts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (options) {
            return exports.CustomerApiFp(configuration).getEmailLists(options)(fetch, basePath);
        },
        /**
         * Insert a customer on the UltraCart account.
         * @summary Insert a customer
         * @param {Customer} customer Customer to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertCustomer: function (customer, expand, options) {
            return exports.CustomerApiFp(configuration).insertCustomer(customer, expand, options)(fetch, basePath);
        },
        /**
         * Update a customer on the UltraCart account.
         * @summary Update a customer
         * @param {Customer} customer Customer to update
         * @param {number} customerProfileOid The customer_profile_oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: function (customer, customerProfileOid, expand, options) {
            return exports.CustomerApiFp(configuration).updateCustomer(customer, customerProfileOid, expand, options)(fetch, basePath);
        },
        /**
         * Update email list subscriptions for a customer
         * @summary Update email list subscriptions for a customer
         * @param {number} customerProfileOid The customer profile oid
         * @param {CustomerEmailListChanges} listChanges List changes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomerEmailLists: function (customerProfileOid, listChanges, options) {
            return exports.CustomerApiFp(configuration).updateCustomerEmailLists(customerProfileOid, listChanges, options)(fetch, basePath);
        },
    };
};
/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
var CustomerApi = /** @class */ (function (_super) {
    __extends(CustomerApi, _super);
    function CustomerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a customer on the UltraCart account.
     * @summary Delete a customer
     * @param {number} customerProfileOid The customer_profile_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.deleteCustomer = function (customerProfileOid, options) {
        return exports.CustomerApiFp(this.configuration).deleteCustomer(customerProfileOid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single customer using the specified customer profile oid.
     * @summary Retrieve a customer
     * @param {number} customerProfileOid The customer oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomer = function (customerProfileOid, expand, options) {
        return exports.CustomerApiFp(this.configuration).getCustomer(customerProfileOid, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve customers
     * @param {string} [email] Email
     * @param {string} [qbClass] Quickbooks class
     * @param {string} [quickbooksCode] Quickbooks code
     * @param {string} [lastModifiedDtsStart] Last modified date start
     * @param {string} [lastModifiedDtsEnd] Last modified date end
     * @param {string} [signupDtsStart] Signup date start
     * @param {string} [signupDtsEnd] Signup date end
     * @param {string} [billingFirstName] Billing first name
     * @param {string} [billingLastName] Billing last name
     * @param {string} [billingCompany] Billing company
     * @param {string} [billingCity] Billing city
     * @param {string} [billingState] Billing state
     * @param {string} [billingPostalCode] Billing postal code
     * @param {string} [billingCountryCode] Billing country code
     * @param {string} [billingDayPhone] Billing day phone
     * @param {string} [billingEveningPhone] Billing evening phone
     * @param {string} [shippingFirstName] Shipping first name
     * @param {string} [shippingLastName] Shipping last name
     * @param {string} [shippingCompany] Shipping company
     * @param {string} [shippingCity] Shipping city
     * @param {string} [shippingState] Shipping state
     * @param {string} [shippingPostalCode] Shipping postal code
     * @param {string} [shippingCountryCode] Shipping country code
     * @param {string} [shippingDayPhone] Shipping day phone
     * @param {string} [shippingEveningPhone] Shipping evening phone
     * @param {number} [pricingTierOid] Pricing tier oid
     * @param {string} [pricingTierName] Pricing tier name
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomers = function (email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options) {
        return exports.CustomerApiFp(this.configuration).getCustomers(email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve customers by query
     * @param {CustomerQuery} customerQuery Customer query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomersByQuery = function (customerQuery, limit, offset, since, sort, expand, options) {
        return exports.CustomerApiFp(this.configuration).getCustomersByQuery(customerQuery, limit, offset, since, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned.
     * @summary Retrieve customers for DataTables plugin
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getCustomersForDataTables = function (expand, options) {
        return exports.CustomerApiFp(this.configuration).getCustomersForDataTables(expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve values needed for a customer profile editor.
     * @summary Retrieve values needed for a customer profile editor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getEditorValues = function (options) {
        return exports.CustomerApiFp(this.configuration).getEditorValues(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve all email lists across all storefronts
     * @summary Retrieve all email lists across all storefronts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.getEmailLists = function (options) {
        return exports.CustomerApiFp(this.configuration).getEmailLists(options)(this.fetch, this.basePath);
    };
    /**
     * Insert a customer on the UltraCart account.
     * @summary Insert a customer
     * @param {Customer} customer Customer to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.insertCustomer = function (customer, expand, options) {
        return exports.CustomerApiFp(this.configuration).insertCustomer(customer, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update a customer on the UltraCart account.
     * @summary Update a customer
     * @param {Customer} customer Customer to update
     * @param {number} customerProfileOid The customer_profile_oid to update.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.updateCustomer = function (customer, customerProfileOid, expand, options) {
        return exports.CustomerApiFp(this.configuration).updateCustomer(customer, customerProfileOid, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Update email list subscriptions for a customer
     * @summary Update email list subscriptions for a customer
     * @param {number} customerProfileOid The customer profile oid
     * @param {CustomerEmailListChanges} listChanges List changes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    CustomerApi.prototype.updateCustomerEmailLists = function (customerProfileOid, listChanges, options) {
        return exports.CustomerApiFp(this.configuration).updateCustomerEmailLists(customerProfileOid, listChanges, options)(this.fetch, this.basePath);
    };
    return CustomerApi;
}(BaseAPI));
exports.CustomerApi = CustomerApi;
/**
 * FulfillmentApi - fetch parameter creator
 * @export
 */
exports.FulfillmentApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
         * @summary Acknowledge receipt of orders.
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: function (distributionCenterCode, orderIds, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distributionCenterCode' is not null or undefined
            if (distributionCenterCode === null || distributionCenterCode === undefined) {
                throw new RequiredError('distributionCenterCode', 'Required parameter distributionCenterCode was null or undefined when calling acknowledgeOrders.');
            }
            // verify required parameter 'orderIds' is not null or undefined
            if (orderIds === null || orderIds === undefined) {
                throw new RequiredError('orderIds', 'Required parameter orderIds was null or undefined when calling acknowledgeOrders.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements"
                .replace("{" + "distribution_center_code" + "}", encodeURIComponent(String(distributionCenterCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;string&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(orderIds || {}) : (orderIds || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
         * @summary Retrieve orders queued up for this distribution center.
         * @param {string} distributionCenterCode Distribution center code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenterOrders: function (distributionCenterCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distributionCenterCode' is not null or undefined
            if (distributionCenterCode === null || distributionCenterCode === undefined) {
                throw new RequiredError('distributionCenterCode', 'Required parameter distributionCenterCode was null or undefined when calling getDistributionCenterOrders.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/orders"
                .replace("{" + "distribution_center_code" + "}", encodeURIComponent(String(distributionCenterCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the distribution centers that this user has access to.
         * @summary Retrieve distribution centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenters: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/fulfillment/distribution_centers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store the tracking information and mark the order shipped for this distribution center.
         * @summary Mark orders as shipped
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipOrders: function (distributionCenterCode, shipments, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distributionCenterCode' is not null or undefined
            if (distributionCenterCode === null || distributionCenterCode === undefined) {
                throw new RequiredError('distributionCenterCode', 'Required parameter distributionCenterCode was null or undefined when calling shipOrders.');
            }
            // verify required parameter 'shipments' is not null or undefined
            if (shipments === null || shipments === undefined) {
                throw new RequiredError('shipments', 'Required parameter shipments was null or undefined when calling shipOrders.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/shipments"
                .replace("{" + "distribution_center_code" + "}", encodeURIComponent(String(distributionCenterCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;FulfillmentShipment&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(shipments || {}) : (shipments || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the inventory for items associated with this distribution center
         * @summary Update inventory
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: function (distributionCenterCode, inventories, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'distributionCenterCode' is not null or undefined
            if (distributionCenterCode === null || distributionCenterCode === undefined) {
                throw new RequiredError('distributionCenterCode', 'Required parameter distributionCenterCode was null or undefined when calling updateInventory.');
            }
            // verify required parameter 'inventories' is not null or undefined
            if (inventories === null || inventories === undefined) {
                throw new RequiredError('inventories', 'Required parameter inventories was null or undefined when calling updateInventory.');
            }
            var localVarPath = "/fulfillment/distribution_centers/{distribution_center_code}/inventory"
                .replace("{" + "distribution_center_code" + "}", encodeURIComponent(String(distributionCenterCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["fulfillment_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;FulfillmentInventory&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(inventories || {}) : (inventories || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FulfillmentApi - functional programming interface
 * @export
 */
exports.FulfillmentApiFp = function (configuration) {
    return {
        /**
         * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
         * @summary Acknowledge receipt of orders.
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: function (distributionCenterCode, orderIds, options) {
            var localVarFetchArgs = exports.FulfillmentApiFetchParamCreator(configuration).acknowledgeOrders(distributionCenterCode, orderIds, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
         * @summary Retrieve orders queued up for this distribution center.
         * @param {string} distributionCenterCode Distribution center code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenterOrders: function (distributionCenterCode, options) {
            var localVarFetchArgs = exports.FulfillmentApiFetchParamCreator(configuration).getDistributionCenterOrders(distributionCenterCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the distribution centers that this user has access to.
         * @summary Retrieve distribution centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenters: function (options) {
            var localVarFetchArgs = exports.FulfillmentApiFetchParamCreator(configuration).getDistributionCenters(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Store the tracking information and mark the order shipped for this distribution center.
         * @summary Mark orders as shipped
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipOrders: function (distributionCenterCode, shipments, options) {
            var localVarFetchArgs = exports.FulfillmentApiFetchParamCreator(configuration).shipOrders(distributionCenterCode, shipments, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the inventory for items associated with this distribution center
         * @summary Update inventory
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: function (distributionCenterCode, inventories, options) {
            var localVarFetchArgs = exports.FulfillmentApiFetchParamCreator(configuration).updateInventory(distributionCenterCode, inventories, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * FulfillmentApi - factory interface
 * @export
 */
exports.FulfillmentApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
         * @summary Acknowledge receipt of orders.
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: function (distributionCenterCode, orderIds, options) {
            return exports.FulfillmentApiFp(configuration).acknowledgeOrders(distributionCenterCode, orderIds, options)(fetch, basePath);
        },
        /**
         * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
         * @summary Retrieve orders queued up for this distribution center.
         * @param {string} distributionCenterCode Distribution center code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenterOrders: function (distributionCenterCode, options) {
            return exports.FulfillmentApiFp(configuration).getDistributionCenterOrders(distributionCenterCode, options)(fetch, basePath);
        },
        /**
         * Retrieves the distribution centers that this user has access to.
         * @summary Retrieve distribution centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDistributionCenters: function (options) {
            return exports.FulfillmentApiFp(configuration).getDistributionCenters(options)(fetch, basePath);
        },
        /**
         * Store the tracking information and mark the order shipped for this distribution center.
         * @summary Mark orders as shipped
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipOrders: function (distributionCenterCode, shipments, options) {
            return exports.FulfillmentApiFp(configuration).shipOrders(distributionCenterCode, shipments, options)(fetch, basePath);
        },
        /**
         * Update the inventory for items associated with this distribution center
         * @summary Update inventory
         * @param {string} distributionCenterCode Distribution center code
         * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: function (distributionCenterCode, inventories, options) {
            return exports.FulfillmentApiFp(configuration).updateInventory(distributionCenterCode, inventories, options)(fetch, basePath);
        },
    };
};
/**
 * FulfillmentApi - object-oriented interface
 * @export
 * @class FulfillmentApi
 * @extends {BaseAPI}
 */
var FulfillmentApi = /** @class */ (function (_super) {
    __extends(FulfillmentApi, _super);
    function FulfillmentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method).
     * @summary Acknowledge receipt of orders.
     * @param {string} distributionCenterCode Distribution center code
     * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.acknowledgeOrders = function (distributionCenterCode, orderIds, options) {
        return exports.FulfillmentApiFp(this.configuration).acknowledgeOrders(distributionCenterCode, orderIds, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You'll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes.
     * @summary Retrieve orders queued up for this distribution center.
     * @param {string} distributionCenterCode Distribution center code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.getDistributionCenterOrders = function (distributionCenterCode, options) {
        return exports.FulfillmentApiFp(this.configuration).getDistributionCenterOrders(distributionCenterCode, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the distribution centers that this user has access to.
     * @summary Retrieve distribution centers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.getDistributionCenters = function (options) {
        return exports.FulfillmentApiFp(this.configuration).getDistributionCenters(options)(this.fetch, this.basePath);
    };
    /**
     * Store the tracking information and mark the order shipped for this distribution center.
     * @summary Mark orders as shipped
     * @param {string} distributionCenterCode Distribution center code
     * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.shipOrders = function (distributionCenterCode, shipments, options) {
        return exports.FulfillmentApiFp(this.configuration).shipOrders(distributionCenterCode, shipments, options)(this.fetch, this.basePath);
    };
    /**
     * Update the inventory for items associated with this distribution center
     * @summary Update inventory
     * @param {string} distributionCenterCode Distribution center code
     * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApi
     */
    FulfillmentApi.prototype.updateInventory = function (distributionCenterCode, inventories, options) {
        return exports.FulfillmentApiFp(this.configuration).updateInventory(distributionCenterCode, inventories, options)(this.fetch, this.basePath);
    };
    return FulfillmentApi;
}(BaseAPI));
exports.FulfillmentApi = FulfillmentApi;
/**
 * ItemApi - fetch parameter creator
 * @export
 */
exports.ItemApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete an item on the UltraCart account.
         * @summary Delete an item
         * @param {number} merchantItemOid The item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (merchantItemOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchantItemOid' is not null or undefined
            if (merchantItemOid === null || merchantItemOid === undefined) {
                throw new RequiredError('merchantItemOid', 'Required parameter merchantItemOid was null or undefined when calling deleteItem.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}"
                .replace("{" + "merchant_item_oid" + "}", encodeURIComponent(String(merchantItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single item using the specified item oid.
         * @summary Retrieve an item
         * @param {number} merchantItemOid The item oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (merchantItemOid, expand, placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchantItemOid' is not null or undefined
            if (merchantItemOid === null || merchantItemOid === undefined) {
                throw new RequiredError('merchantItemOid', 'Required parameter merchantItemOid was null or undefined when calling getItem.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}"
                .replace("{" + "merchant_item_oid" + "}", encodeURIComponent(String(merchantItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single item using the specified item id.
         * @summary Retrieve an item by item id
         * @param {string} merchantItemId The item id to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByMerchantItemId: function (merchantItemId, expand, placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'merchantItemId' is not null or undefined
            if (merchantItemId === null || merchantItemId === undefined) {
                throw new RequiredError('merchantItemId', 'Required parameter merchantItemId was null or undefined when calling getItemByMerchantItemId.');
            }
            var localVarPath = "/item/items/merchant_item_id/{merchant_item_id}"
                .replace("{" + "merchant_item_id" + "}", encodeURIComponent(String(merchantItemId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve items
         * @param {number} [parentCategoryId] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
         * @param {string} [parentCategoryPath] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
         * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch items that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/items";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (parentCategoryId !== undefined) {
                localVarQueryParameter['parent_category_id'] = parentCategoryId;
            }
            if (parentCategoryPath !== undefined) {
                localVarQueryParameter['parent_category_path'] = parentCategoryPath;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['_since'] = since;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTiers: function (expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/item/pricing_tiers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new item on the UltraCart account.
         * @summary Create an item
         * @param {Item} item Item to create
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: function (item, expand, placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item', 'Required parameter item was null or undefined when calling insertItem.');
            }
            var localVarPath = "/item/items";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Item" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item || {}) : (item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a new item on the UltraCart account.
         * @summary Update an item
         * @param {Item} item Item to update
         * @param {number} merchantItemOid The item oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (item, merchantItemOid, expand, placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item', 'Required parameter item was null or undefined when calling updateItem.');
            }
            // verify required parameter 'merchantItemOid' is not null or undefined
            if (merchantItemOid === null || merchantItemOid === undefined) {
                throw new RequiredError('merchantItemOid', 'Required parameter merchantItemOid was null or undefined when calling updateItem.');
            }
            var localVarPath = "/item/items/{merchant_item_oid}"
                .replace("{" + "merchant_item_oid" + "}", encodeURIComponent(String(merchantItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Item" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(item || {}) : (item || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple item on the UltraCart account.
         * @summary Update multiple items
         * @param {ItemsRequest} itemsRequest Items to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: function (itemsRequest, expand, placeholders, async, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'itemsRequest' is not null or undefined
            if (itemsRequest === null || itemsRequest === undefined) {
                throw new RequiredError('itemsRequest', 'Required parameter itemsRequest was null or undefined when calling updateItems.');
            }
            var localVarPath = "/item/items/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            if (async !== undefined) {
                localVarQueryParameter['_async'] = async;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ItemsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(itemsRequest || {}) : (itemsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
         * @summary Upload an image to the temporary multimedia.
         * @param {any} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTemporaryMultimedia: function (file, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file', 'Required parameter file was null or undefined when calling uploadTemporaryMultimedia.');
            }
            var localVarPath = "/item/temp_multimedia";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            var localVarFormParams = new url.URLSearchParams();
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["item_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (file !== undefined) {
                localVarFormParams.set('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ItemApi - functional programming interface
 * @export
 */
exports.ItemApiFp = function (configuration) {
    return {
        /**
         * Delete an item on the UltraCart account.
         * @summary Delete an item
         * @param {number} merchantItemOid The item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (merchantItemOid, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).deleteItem(merchantItemOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single item using the specified item oid.
         * @summary Retrieve an item
         * @param {number} merchantItemOid The item oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (merchantItemOid, expand, placeholders, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).getItem(merchantItemOid, expand, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single item using the specified item id.
         * @summary Retrieve an item by item id
         * @param {string} merchantItemId The item id to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByMerchantItemId: function (merchantItemId, expand, placeholders, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).getItemByMerchantItemId(merchantItemId, expand, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve items
         * @param {number} [parentCategoryId] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
         * @param {string} [parentCategoryPath] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
         * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch items that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).getItems(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTiers: function (expand, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).getPricingTiers(expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a new item on the UltraCart account.
         * @summary Create an item
         * @param {Item} item Item to create
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: function (item, expand, placeholders, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).insertItem(item, expand, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a new item on the UltraCart account.
         * @summary Update an item
         * @param {Item} item Item to update
         * @param {number} merchantItemOid The item oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (item, merchantItemOid, expand, placeholders, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).updateItem(item, merchantItemOid, expand, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update multiple item on the UltraCart account.
         * @summary Update multiple items
         * @param {ItemsRequest} itemsRequest Items to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: function (itemsRequest, expand, placeholders, async, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).updateItems(itemsRequest, expand, placeholders, async, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
         * @summary Upload an image to the temporary multimedia.
         * @param {any} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTemporaryMultimedia: function (file, options) {
            var localVarFetchArgs = exports.ItemApiFetchParamCreator(configuration).uploadTemporaryMultimedia(file, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ItemApi - factory interface
 * @export
 */
exports.ItemApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete an item on the UltraCart account.
         * @summary Delete an item
         * @param {number} merchantItemOid The item oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteItem: function (merchantItemOid, options) {
            return exports.ItemApiFp(configuration).deleteItem(merchantItemOid, options)(fetch, basePath);
        },
        /**
         * Retrieves a single item using the specified item oid.
         * @summary Retrieve an item
         * @param {number} merchantItemOid The item oid to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItem: function (merchantItemOid, expand, placeholders, options) {
            return exports.ItemApiFp(configuration).getItem(merchantItemOid, expand, placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves a single item using the specified item id.
         * @summary Retrieve an item by item id
         * @param {string} merchantItemId The item id to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemByMerchantItemId: function (merchantItemId, expand, placeholders, options) {
            return exports.ItemApiFp(configuration).getItemByMerchantItemId(merchantItemId, expand, placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve items
         * @param {number} [parentCategoryId] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
         * @param {string} [parentCategoryPath] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
         * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch items that have been created/modified since this date/time.
         * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: function (parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options) {
            return exports.ItemApiFp(configuration).getItems(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options)(fetch, basePath);
        },
        /**
         * Retrieves the pricing tiers
         * @summary Retrieve pricing tiers
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTiers: function (expand, options) {
            return exports.ItemApiFp(configuration).getPricingTiers(expand, options)(fetch, basePath);
        },
        /**
         * Create a new item on the UltraCart account.
         * @summary Create an item
         * @param {Item} item Item to create
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertItem: function (item, expand, placeholders, options) {
            return exports.ItemApiFp(configuration).insertItem(item, expand, placeholders, options)(fetch, basePath);
        },
        /**
         * Update a new item on the UltraCart account.
         * @summary Update an item
         * @param {Item} item Item to update
         * @param {number} merchantItemOid The item oid to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: function (item, merchantItemOid, expand, placeholders, options) {
            return exports.ItemApiFp(configuration).updateItem(item, merchantItemOid, expand, placeholders, options)(fetch, basePath);
        },
        /**
         * Update multiple item on the UltraCart account.
         * @summary Update multiple items
         * @param {ItemsRequest} itemsRequest Items to update (synchronous maximum 20 / asynchronous maximum 100)
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {boolean} [async] True if the operation should be run async.  No result returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItems: function (itemsRequest, expand, placeholders, async, options) {
            return exports.ItemApiFp(configuration).updateItems(itemsRequest, expand, placeholders, async, options)(fetch, basePath);
        },
        /**
         * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
         * @summary Upload an image to the temporary multimedia.
         * @param {any} file File to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadTemporaryMultimedia: function (file, options) {
            return exports.ItemApiFp(configuration).uploadTemporaryMultimedia(file, options)(fetch, basePath);
        },
    };
};
/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
var ItemApi = /** @class */ (function (_super) {
    __extends(ItemApi, _super);
    function ItemApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete an item on the UltraCart account.
     * @summary Delete an item
     * @param {number} merchantItemOid The item oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.deleteItem = function (merchantItemOid, options) {
        return exports.ItemApiFp(this.configuration).deleteItem(merchantItemOid, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single item using the specified item oid.
     * @summary Retrieve an item
     * @param {number} merchantItemOid The item oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getItem = function (merchantItemOid, expand, placeholders, options) {
        return exports.ItemApiFp(this.configuration).getItem(merchantItemOid, expand, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single item using the specified item id.
     * @summary Retrieve an item by item id
     * @param {string} merchantItemId The item id to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getItemByMerchantItemId = function (merchantItemId, expand, placeholders, options) {
        return exports.ItemApiFp(this.configuration).getItemByMerchantItemId(merchantItemId, expand, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve items
     * @param {number} [parentCategoryId] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
     * @param {string} [parentCategoryPath] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch items that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getItems = function (parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options) {
        return exports.ItemApiFp(this.configuration).getItems(parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the pricing tiers
     * @summary Retrieve pricing tiers
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.getPricingTiers = function (expand, options) {
        return exports.ItemApiFp(this.configuration).getPricingTiers(expand, options)(this.fetch, this.basePath);
    };
    /**
     * Create a new item on the UltraCart account.
     * @summary Create an item
     * @param {Item} item Item to create
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.insertItem = function (item, expand, placeholders, options) {
        return exports.ItemApiFp(this.configuration).insertItem(item, expand, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Update a new item on the UltraCart account.
     * @summary Update an item
     * @param {Item} item Item to update
     * @param {number} merchantItemOid The item oid to update.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.updateItem = function (item, merchantItemOid, expand, placeholders, options) {
        return exports.ItemApiFp(this.configuration).updateItem(item, merchantItemOid, expand, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Update multiple item on the UltraCart account.
     * @summary Update multiple items
     * @param {ItemsRequest} itemsRequest Items to update (synchronous maximum 20 / asynchronous maximum 100)
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.updateItems = function (itemsRequest, expand, placeholders, async, options) {
        return exports.ItemApiFp(this.configuration).updateItems(itemsRequest, expand, placeholders, async, options)(this.fetch, this.basePath);
    };
    /**
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update.
     * @summary Upload an image to the temporary multimedia.
     * @param {any} file File to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    ItemApi.prototype.uploadTemporaryMultimedia = function (file, options) {
        return exports.ItemApiFp(this.configuration).uploadTemporaryMultimedia(file, options)(this.fetch, this.basePath);
    };
    return ItemApi;
}(BaseAPI));
exports.ItemApi = ItemApi;
/**
 * OauthApi - fetch parameter creator
 * @export
 */
exports.OauthApiFetchParamCreator = function (configuration) {
    return {
        /**
         * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
         * @summary Exchange authorization code for access token.
         * @param {string} clientId The OAuth application client_id.
         * @param {string} grantType Type of grant
         * @param {string} [code] Authorization code received back from the browser redirect
         * @param {string} [redirectUri] The URI that you redirect the browser to to start the authorization process
         * @param {string} [refreshToken] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAccessToken: function (clientId, grantType, code, redirectUri, refreshToken, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId', 'Required parameter clientId was null or undefined when calling oauthAccessToken.');
            }
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new RequiredError('grantType', 'Required parameter grantType was null or undefined when calling oauthAccessToken.');
            }
            var localVarPath = "/oauth/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            var localVarFormParams = new url.URLSearchParams();
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["ultrabooks_write", "auto_order_write", "coupon_read", "affiliate_read", "coupon_write", "tax_read", "fulfillment_write", "tax_write", "item_read", "fulfillment_read", "webhook_write", "chargeback_write", "user_write", "checkout_write", "storefront_read", "webhook_read", "item_write", "auto_order_read", "customer_read", "user_read", "customer_write", "order_read", "affiliate_write", "storefront_write", "ultrabooks_read", "order_write", "chargeback_read", "checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType);
            }
            if (code !== undefined) {
                localVarFormParams.set('code', code);
            }
            if (redirectUri !== undefined) {
                localVarFormParams.set('redirect_uri', redirectUri);
            }
            if (refreshToken !== undefined) {
                localVarFormParams.set('refresh_token', refreshToken);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revokes the OAuth application associated with the specified client_id and token.
         * @summary Revoke this OAuth application.
         * @param {string} clientId The OAuth application client_id.
         * @param {string} token The OAuth access token that is to be revoked..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthRevoke: function (clientId, token, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId', 'Required parameter clientId was null or undefined when calling oauthRevoke.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token', 'Required parameter token was null or undefined when calling oauthRevoke.');
            }
            var localVarPath = "/oauth/revoke";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            var localVarFormParams = new url.URLSearchParams();
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["ultrabooks_write", "auto_order_write", "coupon_read", "affiliate_read", "coupon_write", "tax_read", "fulfillment_write", "tax_write", "item_read", "fulfillment_read", "webhook_write", "chargeback_write", "user_write", "checkout_write", "storefront_read", "webhook_read", "item_write", "auto_order_read", "customer_read", "user_read", "customer_write", "order_read", "affiliate_write", "storefront_write", "ultrabooks_read", "order_write", "chargeback_read", "checkout_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (token !== undefined) {
                localVarFormParams.set('token', token);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OauthApi - functional programming interface
 * @export
 */
exports.OauthApiFp = function (configuration) {
    return {
        /**
         * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
         * @summary Exchange authorization code for access token.
         * @param {string} clientId The OAuth application client_id.
         * @param {string} grantType Type of grant
         * @param {string} [code] Authorization code received back from the browser redirect
         * @param {string} [redirectUri] The URI that you redirect the browser to to start the authorization process
         * @param {string} [refreshToken] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAccessToken: function (clientId, grantType, code, redirectUri, refreshToken, options) {
            var localVarFetchArgs = exports.OauthApiFetchParamCreator(configuration).oauthAccessToken(clientId, grantType, code, redirectUri, refreshToken, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Revokes the OAuth application associated with the specified client_id and token.
         * @summary Revoke this OAuth application.
         * @param {string} clientId The OAuth application client_id.
         * @param {string} token The OAuth access token that is to be revoked..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthRevoke: function (clientId, token, options) {
            var localVarFetchArgs = exports.OauthApiFetchParamCreator(configuration).oauthRevoke(clientId, token, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OauthApi - factory interface
 * @export
 */
exports.OauthApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
         * @summary Exchange authorization code for access token.
         * @param {string} clientId The OAuth application client_id.
         * @param {string} grantType Type of grant
         * @param {string} [code] Authorization code received back from the browser redirect
         * @param {string} [redirectUri] The URI that you redirect the browser to to start the authorization process
         * @param {string} [refreshToken] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthAccessToken: function (clientId, grantType, code, redirectUri, refreshToken, options) {
            return exports.OauthApiFp(configuration).oauthAccessToken(clientId, grantType, code, redirectUri, refreshToken, options)(fetch, basePath);
        },
        /**
         * Revokes the OAuth application associated with the specified client_id and token.
         * @summary Revoke this OAuth application.
         * @param {string} clientId The OAuth application client_id.
         * @param {string} token The OAuth access token that is to be revoked..
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthRevoke: function (clientId, token, options) {
            return exports.OauthApiFp(configuration).oauthRevoke(clientId, token, options)(fetch, basePath);
        },
    };
};
/**
 * OauthApi - object-oriented interface
 * @export
 * @class OauthApi
 * @extends {BaseAPI}
 */
var OauthApi = /** @class */ (function (_super) {
    __extends(OauthApi, _super);
    function OauthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls.
     * @summary Exchange authorization code for access token.
     * @param {string} clientId The OAuth application client_id.
     * @param {string} grantType Type of grant
     * @param {string} [code] Authorization code received back from the browser redirect
     * @param {string} [redirectUri] The URI that you redirect the browser to to start the authorization process
     * @param {string} [refreshToken] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    OauthApi.prototype.oauthAccessToken = function (clientId, grantType, code, redirectUri, refreshToken, options) {
        return exports.OauthApiFp(this.configuration).oauthAccessToken(clientId, grantType, code, redirectUri, refreshToken, options)(this.fetch, this.basePath);
    };
    /**
     * Revokes the OAuth application associated with the specified client_id and token.
     * @summary Revoke this OAuth application.
     * @param {string} clientId The OAuth application client_id.
     * @param {string} token The OAuth access token that is to be revoked..
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    OauthApi.prototype.oauthRevoke = function (clientId, token, options) {
        return exports.OauthApiFp(this.configuration).oauthRevoke(clientId, token, options)(this.fetch, this.basePath);
    };
    return OauthApi;
}(BaseAPI));
exports.OauthApi = OauthApi;
/**
 * OrderApi - fetch parameter creator
 * @export
 */
exports.OrderApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order.  Returns true if successful.
         * @summary Adjusts an order total
         * @param {string} orderId The order id to cancel.
         * @param {string} desiredTotal The desired total with no formatting. example 123.45
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustOrderTotal: function (orderId, desiredTotal, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling adjustOrderTotal.');
            }
            // verify required parameter 'desiredTotal' is not null or undefined
            if (desiredTotal === null || desiredTotal === undefined) {
                throw new RequiredError('desiredTotal', 'Required parameter desiredTotal was null or undefined when calling adjustOrderTotal.');
            }
            var localVarPath = "/order/orders/{order_id}/adjust_order_total/{desired_total}"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)))
                .replace("{" + "desired_total" + "}", encodeURIComponent(String(desiredTotal)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
         * @summary Cancel an order
         * @param {string} orderId The order id to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling cancelOrder.');
            }
            var localVarPath = "/order/orders/{order_id}/cancel"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an order on the UltraCart account.
         * @summary Delete an order
         * @param {string} orderId The order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling deleteOrder.');
            }
            var localVarPath = "/order/orders/{order_id}"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Format the order for display at text or html
         * @summary Format order
         * @param {string} orderId The order id to format
         * @param {OrderFormat} formatOptions Format options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        format: function (orderId, formatOptions, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling format.');
            }
            // verify required parameter 'formatOptions' is not null or undefined
            if (formatOptions === null || formatOptions === undefined) {
                throw new RequiredError('formatOptions', 'Required parameter formatOptions was null or undefined when calling format.');
            }
            var localVarPath = "/order/orders/{order_id}/format"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderFormat" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(formatOptions || {}) : (formatOptions || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
         * @summary Generate an order token for a given order id
         * @param {string} orderId The order id to generate a token for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderToken: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling generateOrderToken.');
            }
            var localVarPath = "/order/orders/token/{order_id}"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryConfig: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Statistics
         * @param {string} [from]
         * @param {string} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryStats: function (from, to, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/order/accountsReceivableRetryConfig/stats";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order using the specified order id.
         * @summary Retrieve an order
         * @param {string} orderId The order id to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling getOrder.');
            }
            var localVarPath = "/order/orders/{order_id}"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single order using the specified order token.
         * @summary Retrieve an order using a token
         * @param {OrderByTokenQuery} orderByTokenQuery Order by token query
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByToken: function (orderByTokenQuery, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderByTokenQuery' is not null or undefined
            if (orderByTokenQuery === null || orderByTokenQuery === undefined) {
                throw new RequiredError('orderByTokenQuery', 'Required parameter orderByTokenQuery was null or undefined when calling getOrderByToken.');
            }
            var localVarPath = "/order/orders/token";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderByTokenQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(orderByTokenQuery || {}) : (orderByTokenQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {string} [orderId] Order Id
         * @param {string} [paymentMethod] Payment Method
         * @param {string} [company] Company
         * @param {string} [firstName] First Name
         * @param {string} [lastName] Last Name
         * @param {string} [city] City
         * @param {string} [stateRegion] State/Region
         * @param {string} [postalCode] Postal Code
         * @param {string} [countryCode] Country Code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [ccEmail] CC Email
         * @param {number} [total] Total
         * @param {string} [screenBrandingThemeCode] Screen Branding Theme Code
         * @param {string} [storefrontHostName] StoreFront Host Name
         * @param {string} [creationDateBegin] Creation Date Begin
         * @param {string} [creationDateEnd] Creation Date End
         * @param {string} [paymentDateBegin] Payment Date Begin
         * @param {string} [paymentDateEnd] Payment Date End
         * @param {string} [shipmentDateBegin] Shipment Date Begin
         * @param {string} [shipmentDateEnd] Shipment Date End
         * @param {string} [rma] RMA
         * @param {string} [purchaseOrderNumber] Purchase Order Number
         * @param {string} [itemId] Item Id
         * @param {string} [currentStage] Current Stage
         * @param {string} [channelPartnerCode] Channel Partner Code
         * @param {string} [channelPartnerOrderId] Channel Partner Order ID
         * @param {number} [customerProfileOid]
         * @param {string} [refundDateBegin]
         * @param {string} [refundDateEnd]
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: function (orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/order/orders";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (orderId !== undefined) {
                localVarQueryParameter['order_id'] = orderId;
            }
            if (paymentMethod !== undefined) {
                localVarQueryParameter['payment_method'] = paymentMethod;
            }
            if (company !== undefined) {
                localVarQueryParameter['company'] = company;
            }
            if (firstName !== undefined) {
                localVarQueryParameter['first_name'] = firstName;
            }
            if (lastName !== undefined) {
                localVarQueryParameter['last_name'] = lastName;
            }
            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }
            if (stateRegion !== undefined) {
                localVarQueryParameter['state_region'] = stateRegion;
            }
            if (postalCode !== undefined) {
                localVarQueryParameter['postal_code'] = postalCode;
            }
            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }
            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }
            if (ccEmail !== undefined) {
                localVarQueryParameter['cc_email'] = ccEmail;
            }
            if (total !== undefined) {
                localVarQueryParameter['total'] = total;
            }
            if (screenBrandingThemeCode !== undefined) {
                localVarQueryParameter['screen_branding_theme_code'] = screenBrandingThemeCode;
            }
            if (storefrontHostName !== undefined) {
                localVarQueryParameter['storefront_host_name'] = storefrontHostName;
            }
            if (creationDateBegin !== undefined) {
                localVarQueryParameter['creation_date_begin'] = creationDateBegin;
            }
            if (creationDateEnd !== undefined) {
                localVarQueryParameter['creation_date_end'] = creationDateEnd;
            }
            if (paymentDateBegin !== undefined) {
                localVarQueryParameter['payment_date_begin'] = paymentDateBegin;
            }
            if (paymentDateEnd !== undefined) {
                localVarQueryParameter['payment_date_end'] = paymentDateEnd;
            }
            if (shipmentDateBegin !== undefined) {
                localVarQueryParameter['shipment_date_begin'] = shipmentDateBegin;
            }
            if (shipmentDateEnd !== undefined) {
                localVarQueryParameter['shipment_date_end'] = shipmentDateEnd;
            }
            if (rma !== undefined) {
                localVarQueryParameter['rma'] = rma;
            }
            if (purchaseOrderNumber !== undefined) {
                localVarQueryParameter['purchase_order_number'] = purchaseOrderNumber;
            }
            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }
            if (currentStage !== undefined) {
                localVarQueryParameter['current_stage'] = currentStage;
            }
            if (channelPartnerCode !== undefined) {
                localVarQueryParameter['channel_partner_code'] = channelPartnerCode;
            }
            if (channelPartnerOrderId !== undefined) {
                localVarQueryParameter['channel_partner_order_id'] = channelPartnerOrderId;
            }
            if (customerProfileOid !== undefined) {
                localVarQueryParameter['customer_profile_oid'] = customerProfileOid;
            }
            if (refundDateBegin !== undefined) {
                localVarQueryParameter['Refund Date Begin'] = refundDateBegin;
            }
            if (refundDateEnd !== undefined) {
                localVarQueryParameter['Refund Date End'] = refundDateEnd;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve order batch
         * @param {OrderQueryBatch} orderBatch Order batch
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBatch: function (orderBatch, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderBatch' is not null or undefined
            if (orderBatch === null || orderBatch === undefined) {
                throw new RequiredError('orderBatch', 'Required parameter orderBatch was null or undefined when calling getOrdersBatch.');
            }
            var localVarPath = "/order/orders/batch";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderQueryBatch" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(orderBatch || {}) : (orderBatch || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {OrderQuery} orderQuery Order query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByQuery: function (orderQuery, limit, offset, sort, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderQuery' is not null or undefined
            if (orderQuery === null || orderQuery === undefined) {
                throw new RequiredError('orderQuery', 'Required parameter orderQuery was null or undefined when calling getOrdersByQuery.');
            }
            var localVarPath = "/order/orders/query";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(orderQuery || {}) : (orderQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
         * @summary Insert an order
         * @param {Order} order Order to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOrder: function (order, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling insertOrder.');
            }
            var localVarPath = "/order/orders";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process payment on order
         * @summary Process payment
         * @param {string} orderId The order id to process payment on
         * @param {OrderProcessPaymentRequest} processPaymentRequest Process payment parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPayment: function (orderId, processPaymentRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling processPayment.');
            }
            // verify required parameter 'processPaymentRequest' is not null or undefined
            if (processPaymentRequest === null || processPaymentRequest === undefined) {
                throw new RequiredError('processPaymentRequest', 'Required parameter processPaymentRequest was null or undefined when calling processPayment.');
            }
            var localVarPath = "/order/orders/{order_id}/process_payment"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderProcessPaymentRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(processPaymentRequest || {}) : (processPaymentRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform a refund operation on an order and then update the order if successful
         * @summary Refund an order
         * @param {Order} order Order to refund
         * @param {string} orderId The order id to refund.
         * @param {boolean} [rejectAfterRefund] Reject order after refund
         * @param {boolean} [skipCustomerNotification] Skip customer email notification
         * @param {boolean} [autoOrderCancel] Cancel associated auto orders
         * @param {boolean} [manualRefund] Consider a manual refund done externally
         * @param {boolean} [reverseAffiliateTransactions] Reverse affiliate transactions
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrder: function (order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling refundOrder.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling refundOrder.');
            }
            var localVarPath = "/order/orders/{order_id}/refund"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (rejectAfterRefund !== undefined) {
                localVarQueryParameter['reject_after_refund'] = rejectAfterRefund;
            }
            if (skipCustomerNotification !== undefined) {
                localVarQueryParameter['skip_customer_notification'] = skipCustomerNotification;
            }
            if (autoOrderCancel !== undefined) {
                localVarQueryParameter['auto_order_cancel'] = autoOrderCancel;
            }
            if (manualRefund !== undefined) {
                localVarQueryParameter['manual_refund'] = manualRefund;
            }
            if (reverseAffiliateTransactions !== undefined) {
                localVarQueryParameter['reverse_affiliate_transactions'] = reverseAffiliateTransactions;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a replacement order based upon a previous order
         * @summary Replacement order
         * @param {string} orderId The order id to generate a replacement for.
         * @param {OrderReplacement} replacement Replacement order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacement: function (orderId, replacement, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling replacement.');
            }
            // verify required parameter 'replacement' is not null or undefined
            if (replacement === null || replacement === undefined) {
                throw new RequiredError('replacement', 'Required parameter replacement was null or undefined when calling replacement.');
            }
            var localVarPath = "/order/orders/{order_id}/replacement"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderReplacement" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(replacement || {}) : (replacement || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend the receipt for an order on the UltraCart account.
         * @summary Resend receipt
         * @param {string} orderId The order id to resend the receipt for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReceipt: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling resendReceipt.');
            }
            var localVarPath = "/order/orders/{order_id}/resend_receipt"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resend shipment confirmation for an order on the UltraCart account.
         * @summary Resend shipment confirmation
         * @param {string} orderId The order id to resend the shipment notification for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendShipmentConfirmation: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling resendShipmentConfirmation.');
            }
            var localVarPath = "/order/orders/{order_id}/resend_shipment_confirmation"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Update A/R Retry Configuration
         * @param {AccountsReceivableRetryConfig} retryConfig AccountsReceivableRetryConfig object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountsReceivableRetryConfig: function (retryConfig, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'retryConfig' is not null or undefined
            if (retryConfig === null || retryConfig === undefined) {
                throw new RequiredError('retryConfig', 'Required parameter retryConfig was null or undefined when calling updateAccountsReceivableRetryConfig.');
            }
            var localVarPath = "/order/accountsReceivableRetryConfig";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AccountsReceivableRetryConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(retryConfig || {}) : (retryConfig || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
         * @summary Update an order
         * @param {Order} order Order to update
         * @param {string} orderId The order id to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (order, orderId, expand, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order', 'Required parameter order was null or undefined when calling updateOrder.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling updateOrder.');
            }
            var localVarPath = "/order/orders/{order_id}"
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["order_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Order" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(order || {}) : (order || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrderApi - functional programming interface
 * @export
 */
exports.OrderApiFp = function (configuration) {
    return {
        /**
         * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order.  Returns true if successful.
         * @summary Adjusts an order total
         * @param {string} orderId The order id to cancel.
         * @param {string} desiredTotal The desired total with no formatting. example 123.45
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustOrderTotal: function (orderId, desiredTotal, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).adjustOrderTotal(orderId, desiredTotal, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
         * @summary Cancel an order
         * @param {string} orderId The order id to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (orderId, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).cancelOrder(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete an order on the UltraCart account.
         * @summary Delete an order
         * @param {string} orderId The order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: function (orderId, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).deleteOrder(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Format the order for display at text or html
         * @summary Format order
         * @param {string} orderId The order id to format
         * @param {OrderFormat} formatOptions Format options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        format: function (orderId, formatOptions, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).format(orderId, formatOptions, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
         * @summary Generate an order token for a given order id
         * @param {string} orderId The order id to generate a token for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderToken: function (orderId, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).generateOrderToken(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryConfig: function (options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getAccountsReceivableRetryConfig(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Statistics
         * @param {string} [from]
         * @param {string} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryStats: function (from, to, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getAccountsReceivableRetryStats(from, to, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order using the specified order id.
         * @summary Retrieve an order
         * @param {string} orderId The order id to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getOrder(orderId, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single order using the specified order token.
         * @summary Retrieve an order using a token
         * @param {OrderByTokenQuery} orderByTokenQuery Order by token query
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByToken: function (orderByTokenQuery, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getOrderByToken(orderByTokenQuery, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {string} [orderId] Order Id
         * @param {string} [paymentMethod] Payment Method
         * @param {string} [company] Company
         * @param {string} [firstName] First Name
         * @param {string} [lastName] Last Name
         * @param {string} [city] City
         * @param {string} [stateRegion] State/Region
         * @param {string} [postalCode] Postal Code
         * @param {string} [countryCode] Country Code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [ccEmail] CC Email
         * @param {number} [total] Total
         * @param {string} [screenBrandingThemeCode] Screen Branding Theme Code
         * @param {string} [storefrontHostName] StoreFront Host Name
         * @param {string} [creationDateBegin] Creation Date Begin
         * @param {string} [creationDateEnd] Creation Date End
         * @param {string} [paymentDateBegin] Payment Date Begin
         * @param {string} [paymentDateEnd] Payment Date End
         * @param {string} [shipmentDateBegin] Shipment Date Begin
         * @param {string} [shipmentDateEnd] Shipment Date End
         * @param {string} [rma] RMA
         * @param {string} [purchaseOrderNumber] Purchase Order Number
         * @param {string} [itemId] Item Id
         * @param {string} [currentStage] Current Stage
         * @param {string} [channelPartnerCode] Channel Partner Code
         * @param {string} [channelPartnerOrderId] Channel Partner Order ID
         * @param {number} [customerProfileOid]
         * @param {string} [refundDateBegin]
         * @param {string} [refundDateEnd]
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: function (orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getOrders(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve order batch
         * @param {OrderQueryBatch} orderBatch Order batch
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBatch: function (orderBatch, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getOrdersBatch(orderBatch, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {OrderQuery} orderQuery Order query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByQuery: function (orderQuery, limit, offset, sort, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).getOrdersByQuery(orderQuery, limit, offset, sort, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
         * @summary Insert an order
         * @param {Order} order Order to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOrder: function (order, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).insertOrder(order, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Process payment on order
         * @summary Process payment
         * @param {string} orderId The order id to process payment on
         * @param {OrderProcessPaymentRequest} processPaymentRequest Process payment parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPayment: function (orderId, processPaymentRequest, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).processPayment(orderId, processPaymentRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Perform a refund operation on an order and then update the order if successful
         * @summary Refund an order
         * @param {Order} order Order to refund
         * @param {string} orderId The order id to refund.
         * @param {boolean} [rejectAfterRefund] Reject order after refund
         * @param {boolean} [skipCustomerNotification] Skip customer email notification
         * @param {boolean} [autoOrderCancel] Cancel associated auto orders
         * @param {boolean} [manualRefund] Consider a manual refund done externally
         * @param {boolean} [reverseAffiliateTransactions] Reverse affiliate transactions
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrder: function (order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).refundOrder(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Create a replacement order based upon a previous order
         * @summary Replacement order
         * @param {string} orderId The order id to generate a replacement for.
         * @param {OrderReplacement} replacement Replacement order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacement: function (orderId, replacement, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).replacement(orderId, replacement, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resend the receipt for an order on the UltraCart account.
         * @summary Resend receipt
         * @param {string} orderId The order id to resend the receipt for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReceipt: function (orderId, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).resendReceipt(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resend shipment confirmation for an order on the UltraCart account.
         * @summary Resend shipment confirmation
         * @param {string} orderId The order id to resend the shipment notification for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendShipmentConfirmation: function (orderId, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).resendShipmentConfirmation(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Update A/R Retry Configuration
         * @param {AccountsReceivableRetryConfig} retryConfig AccountsReceivableRetryConfig object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountsReceivableRetryConfig: function (retryConfig, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).updateAccountsReceivableRetryConfig(retryConfig, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
         * @summary Update an order
         * @param {Order} order Order to update
         * @param {string} orderId The order id to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (order, orderId, expand, options) {
            var localVarFetchArgs = exports.OrderApiFetchParamCreator(configuration).updateOrder(order, orderId, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrderApi - factory interface
 * @export
 */
exports.OrderApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order.  Returns true if successful.
         * @summary Adjusts an order total
         * @param {string} orderId The order id to cancel.
         * @param {string} desiredTotal The desired total with no formatting. example 123.45
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adjustOrderTotal: function (orderId, desiredTotal, options) {
            return exports.OrderApiFp(configuration).adjustOrderTotal(orderId, desiredTotal, options)(fetch, basePath);
        },
        /**
         * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
         * @summary Cancel an order
         * @param {string} orderId The order id to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: function (orderId, options) {
            return exports.OrderApiFp(configuration).cancelOrder(orderId, options)(fetch, basePath);
        },
        /**
         * Delete an order on the UltraCart account.
         * @summary Delete an order
         * @param {string} orderId The order id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: function (orderId, options) {
            return exports.OrderApiFp(configuration).deleteOrder(orderId, options)(fetch, basePath);
        },
        /**
         * Format the order for display at text or html
         * @summary Format order
         * @param {string} orderId The order id to format
         * @param {OrderFormat} formatOptions Format options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        format: function (orderId, formatOptions, options) {
            return exports.OrderApiFp(configuration).format(orderId, formatOptions, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
         * @summary Generate an order token for a given order id
         * @param {string} orderId The order id to generate a token for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateOrderToken: function (orderId, options) {
            return exports.OrderApiFp(configuration).generateOrderToken(orderId, options)(fetch, basePath);
        },
        /**
         * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryConfig: function (options) {
            return exports.OrderApiFp(configuration).getAccountsReceivableRetryConfig(options)(fetch, basePath);
        },
        /**
         * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Retrieve A/R Retry Statistics
         * @param {string} [from]
         * @param {string} [to]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsReceivableRetryStats: function (from, to, options) {
            return exports.OrderApiFp(configuration).getAccountsReceivableRetryStats(from, to, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order using the specified order id.
         * @summary Retrieve an order
         * @param {string} orderId The order id to retrieve.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: function (orderId, expand, options) {
            return exports.OrderApiFp(configuration).getOrder(orderId, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a single order using the specified order token.
         * @summary Retrieve an order using a token
         * @param {OrderByTokenQuery} orderByTokenQuery Order by token query
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderByToken: function (orderByTokenQuery, expand, options) {
            return exports.OrderApiFp(configuration).getOrderByToken(orderByTokenQuery, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {string} [orderId] Order Id
         * @param {string} [paymentMethod] Payment Method
         * @param {string} [company] Company
         * @param {string} [firstName] First Name
         * @param {string} [lastName] Last Name
         * @param {string} [city] City
         * @param {string} [stateRegion] State/Region
         * @param {string} [postalCode] Postal Code
         * @param {string} [countryCode] Country Code (ISO-3166 two letter)
         * @param {string} [phone] Phone
         * @param {string} [email] Email
         * @param {string} [ccEmail] CC Email
         * @param {number} [total] Total
         * @param {string} [screenBrandingThemeCode] Screen Branding Theme Code
         * @param {string} [storefrontHostName] StoreFront Host Name
         * @param {string} [creationDateBegin] Creation Date Begin
         * @param {string} [creationDateEnd] Creation Date End
         * @param {string} [paymentDateBegin] Payment Date Begin
         * @param {string} [paymentDateEnd] Payment Date End
         * @param {string} [shipmentDateBegin] Shipment Date Begin
         * @param {string} [shipmentDateEnd] Shipment Date End
         * @param {string} [rma] RMA
         * @param {string} [purchaseOrderNumber] Purchase Order Number
         * @param {string} [itemId] Item Id
         * @param {string} [currentStage] Current Stage
         * @param {string} [channelPartnerCode] Channel Partner Code
         * @param {string} [channelPartnerOrderId] Channel Partner Order ID
         * @param {number} [customerProfileOid]
         * @param {string} [refundDateBegin]
         * @param {string} [refundDateEnd]
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: function (orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options) {
            return exports.OrderApiFp(configuration).getOrders(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
         * @summary Retrieve order batch
         * @param {OrderQueryBatch} orderBatch Order batch
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersBatch: function (orderBatch, expand, options) {
            return exports.OrderApiFp(configuration).getOrdersBatch(orderBatch, expand, options)(fetch, basePath);
        },
        /**
         * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve orders
         * @param {OrderQuery} orderQuery Order query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {string} [expand] The object expansion to perform on the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersByQuery: function (orderQuery, limit, offset, sort, expand, options) {
            return exports.OrderApiFp(configuration).getOrdersByQuery(orderQuery, limit, offset, sort, expand, options)(fetch, basePath);
        },
        /**
         * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
         * @summary Insert an order
         * @param {Order} order Order to insert
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertOrder: function (order, expand, options) {
            return exports.OrderApiFp(configuration).insertOrder(order, expand, options)(fetch, basePath);
        },
        /**
         * Process payment on order
         * @summary Process payment
         * @param {string} orderId The order id to process payment on
         * @param {OrderProcessPaymentRequest} processPaymentRequest Process payment parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPayment: function (orderId, processPaymentRequest, options) {
            return exports.OrderApiFp(configuration).processPayment(orderId, processPaymentRequest, options)(fetch, basePath);
        },
        /**
         * Perform a refund operation on an order and then update the order if successful
         * @summary Refund an order
         * @param {Order} order Order to refund
         * @param {string} orderId The order id to refund.
         * @param {boolean} [rejectAfterRefund] Reject order after refund
         * @param {boolean} [skipCustomerNotification] Skip customer email notification
         * @param {boolean} [autoOrderCancel] Cancel associated auto orders
         * @param {boolean} [manualRefund] Consider a manual refund done externally
         * @param {boolean} [reverseAffiliateTransactions] Reverse affiliate transactions
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrder: function (order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options) {
            return exports.OrderApiFp(configuration).refundOrder(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options)(fetch, basePath);
        },
        /**
         * Create a replacement order based upon a previous order
         * @summary Replacement order
         * @param {string} orderId The order id to generate a replacement for.
         * @param {OrderReplacement} replacement Replacement order details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replacement: function (orderId, replacement, options) {
            return exports.OrderApiFp(configuration).replacement(orderId, replacement, options)(fetch, basePath);
        },
        /**
         * Resend the receipt for an order on the UltraCart account.
         * @summary Resend receipt
         * @param {string} orderId The order id to resend the receipt for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReceipt: function (orderId, options) {
            return exports.OrderApiFp(configuration).resendReceipt(orderId, options)(fetch, basePath);
        },
        /**
         * Resend shipment confirmation for an order on the UltraCart account.
         * @summary Resend shipment confirmation
         * @param {string} orderId The order id to resend the shipment notification for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendShipmentConfirmation: function (orderId, options) {
            return exports.OrderApiFp(configuration).resendShipmentConfirmation(orderId, options)(fetch, basePath);
        },
        /**
         * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
         * @summary Update A/R Retry Configuration
         * @param {AccountsReceivableRetryConfig} retryConfig AccountsReceivableRetryConfig object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountsReceivableRetryConfig: function (retryConfig, options) {
            return exports.OrderApiFp(configuration).updateAccountsReceivableRetryConfig(retryConfig, options)(fetch, basePath);
        },
        /**
         * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
         * @summary Update an order
         * @param {Order} order Order to update
         * @param {string} orderId The order id to update.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: function (order, orderId, expand, options) {
            return exports.OrderApiFp(configuration).updateOrder(order, orderId, expand, options)(fetch, basePath);
        },
    };
};
/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
var OrderApi = /** @class */ (function (_super) {
    __extends(OrderApi, _super);
    function OrderApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order.  Returns true if successful.
     * @summary Adjusts an order total
     * @param {string} orderId The order id to cancel.
     * @param {string} desiredTotal The desired total with no formatting. example 123.45
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.adjustOrderTotal = function (orderId, desiredTotal, options) {
        return exports.OrderApiFp(this.configuration).adjustOrderTotal(orderId, desiredTotal, options)(this.fetch, this.basePath);
    };
    /**
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed.
     * @summary Cancel an order
     * @param {string} orderId The order id to cancel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.cancelOrder = function (orderId, options) {
        return exports.OrderApiFp(this.configuration).cancelOrder(orderId, options)(this.fetch, this.basePath);
    };
    /**
     * Delete an order on the UltraCart account.
     * @summary Delete an order
     * @param {string} orderId The order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.deleteOrder = function (orderId, options) {
        return exports.OrderApiFp(this.configuration).deleteOrder(orderId, options)(this.fetch, this.basePath);
    };
    /**
     * Format the order for display at text or html
     * @summary Format order
     * @param {string} orderId The order id to format
     * @param {OrderFormat} formatOptions Format options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.format = function (orderId, formatOptions, options) {
        return exports.OrderApiFp(this.configuration).format(orderId, formatOptions, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API.
     * @summary Generate an order token for a given order id
     * @param {string} orderId The order id to generate a token for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.generateOrderToken = function (orderId, options) {
        return exports.OrderApiFp(this.configuration).generateOrderToken(orderId, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it.
     * @summary Retrieve A/R Retry Configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getAccountsReceivableRetryConfig = function (options) {
        return exports.OrderApiFp(this.configuration).getAccountsReceivableRetryConfig(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it.
     * @summary Retrieve A/R Retry Statistics
     * @param {string} [from]
     * @param {string} [to]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getAccountsReceivableRetryStats = function (from, to, options) {
        return exports.OrderApiFp(this.configuration).getAccountsReceivableRetryStats(from, to, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order using the specified order id.
     * @summary Retrieve an order
     * @param {string} orderId The order id to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrder = function (orderId, expand, options) {
        return exports.OrderApiFp(this.configuration).getOrder(orderId, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single order using the specified order token.
     * @summary Retrieve an order using a token
     * @param {OrderByTokenQuery} orderByTokenQuery Order by token query
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrderByToken = function (orderByTokenQuery, expand, options) {
        return exports.OrderApiFp(this.configuration).getOrderByToken(orderByTokenQuery, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve orders
     * @param {string} [orderId] Order Id
     * @param {string} [paymentMethod] Payment Method
     * @param {string} [company] Company
     * @param {string} [firstName] First Name
     * @param {string} [lastName] Last Name
     * @param {string} [city] City
     * @param {string} [stateRegion] State/Region
     * @param {string} [postalCode] Postal Code
     * @param {string} [countryCode] Country Code (ISO-3166 two letter)
     * @param {string} [phone] Phone
     * @param {string} [email] Email
     * @param {string} [ccEmail] CC Email
     * @param {number} [total] Total
     * @param {string} [screenBrandingThemeCode] Screen Branding Theme Code
     * @param {string} [storefrontHostName] StoreFront Host Name
     * @param {string} [creationDateBegin] Creation Date Begin
     * @param {string} [creationDateEnd] Creation Date End
     * @param {string} [paymentDateBegin] Payment Date Begin
     * @param {string} [paymentDateEnd] Payment Date End
     * @param {string} [shipmentDateBegin] Shipment Date Begin
     * @param {string} [shipmentDateEnd] Shipment Date End
     * @param {string} [rma] RMA
     * @param {string} [purchaseOrderNumber] Purchase Order Number
     * @param {string} [itemId] Item Id
     * @param {string} [currentStage] Current Stage
     * @param {string} [channelPartnerCode] Channel Partner Code
     * @param {string} [channelPartnerOrderId] Channel Partner Order ID
     * @param {number} [customerProfileOid]
     * @param {string} [refundDateBegin]
     * @param {string} [refundDateEnd]
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrders = function (orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options) {
        return exports.OrderApiFp(this.configuration).getOrders(orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error.
     * @summary Retrieve order batch
     * @param {OrderQueryBatch} orderBatch Order batch
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrdersBatch = function (orderBatch, expand, options) {
        return exports.OrderApiFp(this.configuration).getOrdersBatch(orderBatch, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve orders
     * @param {OrderQuery} orderQuery Order query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.getOrdersByQuery = function (orderQuery, limit, offset, sort, expand, options) {
        return exports.OrderApiFp(this.configuration).getOrdersByQuery(orderQuery, limit, offset, sort, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations.
     * @summary Insert an order
     * @param {Order} order Order to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.insertOrder = function (order, expand, options) {
        return exports.OrderApiFp(this.configuration).insertOrder(order, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Process payment on order
     * @summary Process payment
     * @param {string} orderId The order id to process payment on
     * @param {OrderProcessPaymentRequest} processPaymentRequest Process payment parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.processPayment = function (orderId, processPaymentRequest, options) {
        return exports.OrderApiFp(this.configuration).processPayment(orderId, processPaymentRequest, options)(this.fetch, this.basePath);
    };
    /**
     * Perform a refund operation on an order and then update the order if successful
     * @summary Refund an order
     * @param {Order} order Order to refund
     * @param {string} orderId The order id to refund.
     * @param {boolean} [rejectAfterRefund] Reject order after refund
     * @param {boolean} [skipCustomerNotification] Skip customer email notification
     * @param {boolean} [autoOrderCancel] Cancel associated auto orders
     * @param {boolean} [manualRefund] Consider a manual refund done externally
     * @param {boolean} [reverseAffiliateTransactions] Reverse affiliate transactions
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.refundOrder = function (order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options) {
        return exports.OrderApiFp(this.configuration).refundOrder(order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Create a replacement order based upon a previous order
     * @summary Replacement order
     * @param {string} orderId The order id to generate a replacement for.
     * @param {OrderReplacement} replacement Replacement order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.replacement = function (orderId, replacement, options) {
        return exports.OrderApiFp(this.configuration).replacement(orderId, replacement, options)(this.fetch, this.basePath);
    };
    /**
     * Resend the receipt for an order on the UltraCart account.
     * @summary Resend receipt
     * @param {string} orderId The order id to resend the receipt for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.resendReceipt = function (orderId, options) {
        return exports.OrderApiFp(this.configuration).resendReceipt(orderId, options)(this.fetch, this.basePath);
    };
    /**
     * Resend shipment confirmation for an order on the UltraCart account.
     * @summary Resend shipment confirmation
     * @param {string} orderId The order id to resend the shipment notification for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.resendShipmentConfirmation = function (orderId, options) {
        return exports.OrderApiFp(this.configuration).resendShipmentConfirmation(orderId, options)(this.fetch, this.basePath);
    };
    /**
     * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it.
     * @summary Update A/R Retry Configuration
     * @param {AccountsReceivableRetryConfig} retryConfig AccountsReceivableRetryConfig object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.updateAccountsReceivableRetryConfig = function (retryConfig, options) {
        return exports.OrderApiFp(this.configuration).updateAccountsReceivableRetryConfig(retryConfig, options)(this.fetch, this.basePath);
    };
    /**
     * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation.
     * @summary Update an order
     * @param {Order} order Order to update
     * @param {string} orderId The order id to update.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    OrderApi.prototype.updateOrder = function (order, orderId, expand, options) {
        return exports.OrderApiFp(this.configuration).updateOrder(order, orderId, expand, options)(this.fetch, this.basePath);
    };
    return OrderApi;
}(BaseAPI));
exports.OrderApi = OrderApi;
/**
 * StorefrontApi - fetch parameter creator
 * @export
 */
exports.StorefrontApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Add to library
         * @param {AddLibraryItemRequest} addLibraryRequest New library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToLibrary: function (addLibraryRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'addLibraryRequest' is not null or undefined
            if (addLibraryRequest === null || addLibraryRequest === undefined) {
                throw new RequiredError('addLibraryRequest', 'Required parameter addLibraryRequest was null or undefined when calling addToLibrary.');
            }
            var localVarPath = "/storefront/code_library";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("AddLibraryItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(addLibraryRequest || {}) : (addLibraryRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Apply library item to storefront.
         * @param {ApplyLibraryItemRequest} applyLibraryRequest New library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToStoreFront: function (applyLibraryRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'applyLibraryRequest' is not null or undefined
            if (applyLibraryRequest === null || applyLibraryRequest === undefined) {
                throw new RequiredError('applyLibraryRequest', 'Required parameter applyLibraryRequest was null or undefined when calling applyToStoreFront.');
            }
            var localVarPath = "/storefront/code_library/apply";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ApplyLibraryItemRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(applyLibraryRequest || {}) : (applyLibraryRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Archive email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailList: function (storefrontOid, emailListUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling archiveEmailList.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling archiveEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Archive email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling archiveEmailSegment.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling archiveEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Back populate email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {EmailFlowBackPopulateRequest} backPopulateRequest The request to back populate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backPopulateEmailFlow: function (storefrontOid, emailFlowUuid, backPopulateRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling backPopulateEmailFlow.');
            }
            // verify required parameter 'emailFlowUuid' is not null or undefined
            if (emailFlowUuid === null || emailFlowUuid === undefined) {
                throw new RequiredError('emailFlowUuid', 'Required parameter emailFlowUuid was null or undefined when calling backPopulateEmailFlow.');
            }
            // verify required parameter 'backPopulateRequest' is not null or undefined
            if (backPopulateRequest === null || backPopulateRequest === undefined) {
                throw new RequiredError('backPopulateRequest', 'Required parameter backPopulateRequest was null or undefined when calling backPopulateEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_flow_uuid" + "}", encodeURIComponent(String(emailFlowUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlowBackPopulateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(backPopulateRequest || {}) : (backPopulateRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check download of email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} emailSegmentRebuildUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDownloadEmailSegment: function (storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling checkDownloadEmailSegment.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling checkDownloadEmailSegment.');
            }
            // verify required parameter 'emailSegmentRebuildUuid' is not null or undefined
            if (emailSegmentRebuildUuid === null || emailSegmentRebuildUuid === undefined) {
                throw new RequiredError('emailSegmentRebuildUuid', 'Required parameter emailSegmentRebuildUuid was null or undefined when calling checkDownloadEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)))
                .replace("{" + "email_segment_rebuild_uuid" + "}", encodeURIComponent(String(emailSegmentRebuildUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Clone email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {number} [targetStorefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailCampaign: function (storefrontOid, emailCampaignUuid, targetStorefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling cloneEmailCampaign.');
            }
            // verify required parameter 'emailCampaignUuid' is not null or undefined
            if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
                throw new RequiredError('emailCampaignUuid', 'Required parameter emailCampaignUuid was null or undefined when calling cloneEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_campaign_uuid" + "}", encodeURIComponent(String(emailCampaignUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (targetStorefrontOid !== undefined) {
                localVarQueryParameter['target_storefront_oid'] = targetStorefrontOid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Clone email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {number} [targetStorefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailFlow: function (storefrontOid, emailFlowUuid, targetStorefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling cloneEmailFlow.');
            }
            // verify required parameter 'emailFlowUuid' is not null or undefined
            if (emailFlowUuid === null || emailFlowUuid === undefined) {
                throw new RequiredError('emailFlowUuid', 'Required parameter emailFlowUuid was null or undefined when calling cloneEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_flow_uuid" + "}", encodeURIComponent(String(emailFlowUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (targetStorefrontOid !== undefined) {
                localVarQueryParameter['target_storefront_oid'] = targetStorefrontOid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling createEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}/create"
                .replace("{" + "domain" + "}", encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete communication sequence stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCommseqStat: function (storefrontOid, commseqUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling deleteEmailCommseqStat.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling deleteEmailCommseqStat.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailEmail: function (storefrontOid, commseqEmailUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling deleteEmailEmail.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling deleteEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email list customer
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListCustomer: function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling deleteEmailListCustomer.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling deleteEmailListCustomer.');
            }
            // verify required parameter 'emailCustomerUuid' is not null or undefined
            if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
                throw new RequiredError('emailCustomerUuid', 'Required parameter emailCustomerUuid was null or undefined when calling deleteEmailListCustomer.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)))
                .replace("{" + "email_customer_uuid" + "}", encodeURIComponent(String(emailCustomerUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailPostcard: function (storefrontOid, commseqPostcardUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling deleteEmailPostcard.');
            }
            // verify required parameter 'commseqPostcardUuid' is not null or undefined
            if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
                throw new RequiredError('commseqPostcardUuid', 'Required parameter commseqPostcardUuid was null or undefined when calling deleteEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_postcard_uuid" + "}", encodeURIComponent(String(commseqPostcardUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary delete email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailSendingDomain: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling deleteEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}"
                .replace("{" + "domain" + "}", encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete experiment
         * @param {number} storefrontOid
         * @param {number} storefrontExperimentOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: function (storefrontOid, storefrontExperimentOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling deleteExperiment.');
            }
            // verify required parameter 'storefrontExperimentOid' is not null or undefined
            if (storefrontExperimentOid === null || storefrontExperimentOid === undefined) {
                throw new RequiredError('storefrontExperimentOid', 'Required parameter storefrontExperimentOid was null or undefined when calling deleteExperiment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "storefront_experiment_oid" + "}", encodeURIComponent(String(storefrontExperimentOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete library item
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItem: function (libraryItemOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'libraryItemOid' is not null or undefined
            if (libraryItemOid === null || libraryItemOid === undefined) {
                throw new RequiredError('libraryItemOid', 'Required parameter libraryItemOid was null or undefined when calling deleteLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}"
                .replace("{" + "library_item_oid" + "}", encodeURIComponent(String(libraryItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Duplicate library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateLibraryItem: function (libraryItemOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'libraryItemOid' is not null or undefined
            if (libraryItemOid === null || libraryItemOid === undefined) {
                throw new RequiredError('libraryItemOid', 'Required parameter libraryItemOid was null or undefined when calling duplicateLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/duplicate"
                .replace("{" + "library_item_oid" + "}", encodeURIComponent(String(libraryItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Obtain lat/long for an address
         * @param {number} storefrontOid
         * @param {GeocodeRequest} geocodeRequest geocode request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodeAddress: function (storefrontOid, geocodeRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling geocodeAddress.');
            }
            // verify required parameter 'geocodeRequest' is not null or undefined
            if (geocodeRequest === null || geocodeRequest === undefined) {
                throw new RequiredError('geocodeRequest', 'Required parameter geocodeRequest was null or undefined when calling geocodeAddress.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/geocode"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("GeocodeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(geocodeRequest || {}) : (geocodeRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of all the countries
         * @summary Get countries
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getCountries.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/countries"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches a temporary authentication token for the editor
         * @summary Gets editor token
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorToken: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEditorToken.');
            }
            var localVarPath = "/storefront/{storefront_oid}/editor_token"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication base templates
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailBaseTemplates: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailBaseTemplates.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/baseTemplates"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaign: function (storefrontOid, emailCampaignUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCampaign.');
            }
            // verify required parameter 'emailCampaignUuid' is not null or undefined
            if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
                throw new RequiredError('emailCampaignUuid', 'Required parameter emailCampaignUuid was null or undefined when calling getEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_campaign_uuid" + "}", encodeURIComponent(String(emailCampaignUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaign screenshots
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignScreenshots: function (storefrontOid, emailCampaignUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCampaignScreenshots.');
            }
            // verify required parameter 'emailCampaignUuid' is not null or undefined
            if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
                throw new RequiredError('emailCampaignUuid', 'Required parameter emailCampaignUuid was null or undefined when calling getEmailCampaignScreenshots.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_campaign_uuid" + "}", encodeURIComponent(String(emailCampaignUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaigns
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaigns: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCampaigns.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email campaigns with stats
         * @param {number} storefrontOid
         * @param {string} statDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignsWithStats: function (storefrontOid, statDays, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCampaignsWithStats.');
            }
            // verify required parameter 'statDays' is not null or undefined
            if (statDays === null || statDays === undefined) {
                throw new RequiredError('statDays', 'Required parameter statDays was null or undefined when calling getEmailCampaignsWithStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "stat_days" + "}", encodeURIComponent(String(statDays)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email commseq
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseq: function (storefrontOid, commseqUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseq.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailCommseq.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence emails stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStatSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqEmailStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseqEmailStats.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailCommseqEmailStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqEmailStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStatSummaryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence postcard stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseqPostcardStats.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailCommseqPostcardStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqPostcardStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStatPostcardSummaryRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get communication sequence stats overall
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStatOverall: function (storefrontOid, commseqUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseqStatOverall.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailCommseqStatOverall.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence step stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStepStatRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseqStepStats.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailCommseqStepStats.');
            }
            // verify required parameter 'statsRequest' is not null or undefined
            if (statsRequest === null || statsRequest === undefined) {
                throw new RequiredError('statsRequest', 'Required parameter statsRequest was null or undefined when calling getEmailCommseqStepStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStepStatRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(statsRequest || {}) : (statsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email communication sequence customers waiting at each requested step
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepWaiting: function (storefrontOid, commseqUuid, waitingRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseqStepWaiting.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailCommseqStepWaiting.');
            }
            // verify required parameter 'waitingRequest' is not null or undefined
            if (waitingRequest === null || waitingRequest === undefined) {
                throw new RequiredError('waitingRequest', 'Required parameter waitingRequest was null or undefined when calling getEmailCommseqStepWaiting.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailStepWaitingRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(waitingRequest || {}) : (waitingRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email commseqs
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqs: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCommseqs.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get customers editor URL
         * @param {number} storefrontOid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomerEditorUrl: function (storefrontOid, emailCustomerUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCustomerEditorUrl.');
            }
            // verify required parameter 'emailCustomerUuid' is not null or undefined
            if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
                throw new RequiredError('emailCustomerUuid', 'Required parameter emailCustomerUuid was null or undefined when calling getEmailCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_customer_uuid" + "}", encodeURIComponent(String(emailCustomerUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email customers
         * @param {number} storefrontOid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {string} [searchEmailPrefix]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomers: function (storefrontOid, pageNumber, pageSize, searchEmailPrefix, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/customers"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (searchEmailPrefix !== undefined) {
                localVarQueryParameter['searchEmailPrefix'] = searchEmailPrefix;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email dashboard activity
         * @param {number} storefrontOid
         * @param {number} [lastRecords]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardActivity: function (storefrontOid, lastRecords, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailDashboardActivity.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_activity"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (lastRecords !== undefined) {
                localVarQueryParameter['last_records'] = lastRecords;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get dashboard stats
         * @param {number} storefrontOid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardStats: function (storefrontOid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailDashboardStats.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/dashboard_stats"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmail: function (storefrontOid, commseqEmailUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailEmail.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling getEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email email clicks
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {string} commseqEmailUuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailClicks: function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailEmailClicks.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailEmailClicks.');
            }
            // verify required parameter 'commseqStepUuid' is not null or undefined
            if (commseqStepUuid === null || commseqStepUuid === undefined) {
                throw new RequiredError('commseqStepUuid', 'Required parameter commseqStepUuid was null or undefined when calling getEmailEmailClicks.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling getEmailEmailClicks.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)))
                .replace("{" + "commseq_step_uuid" + "}", encodeURIComponent(String(commseqStepUuid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email order customer editor url
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailCustomerEditorUrl: function (storefrontOid, commseqEmailUuid, orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling getEmailEmailCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)))
                .replace("{" + "order_id" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email email orders
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {string} commseqEmailUuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailOrders: function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailEmailOrders.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling getEmailEmailOrders.');
            }
            // verify required parameter 'commseqStepUuid' is not null or undefined
            if (commseqStepUuid === null || commseqStepUuid === undefined) {
                throw new RequiredError('commseqStepUuid', 'Required parameter commseqStepUuid was null or undefined when calling getEmailEmailOrders.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling getEmailEmailOrders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)))
                .replace("{" + "commseq_step_uuid" + "}", encodeURIComponent(String(commseqStepUuid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email emails
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmails: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailEmails.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email emails multiple
         * @param {number} storefrontOid
         * @param {EmailCommseqEmailsRequest} emailCommseqEmailsRequest Request of email uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailsMultiple: function (storefrontOid, emailCommseqEmailsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailEmailsMultiple.');
            }
            // verify required parameter 'emailCommseqEmailsRequest' is not null or undefined
            if (emailCommseqEmailsRequest === null || emailCommseqEmailsRequest === undefined) {
                throw new RequiredError('emailCommseqEmailsRequest', 'Required parameter emailCommseqEmailsRequest was null or undefined when calling getEmailEmailsMultiple.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/multiple"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmailsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqEmailsRequest || {}) : (emailCommseqEmailsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlow: function (storefrontOid, emailFlowUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailFlow.');
            }
            // verify required parameter 'emailFlowUuid' is not null or undefined
            if (emailFlowUuid === null || emailFlowUuid === undefined) {
                throw new RequiredError('emailFlowUuid', 'Required parameter emailFlowUuid was null or undefined when calling getEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_flow_uuid" + "}", encodeURIComponent(String(emailFlowUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flow screenshots
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowScreenshots: function (storefrontOid, emailFlowUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailFlowScreenshots.');
            }
            // verify required parameter 'emailFlowUuid' is not null or undefined
            if (emailFlowUuid === null || emailFlowUuid === undefined) {
                throw new RequiredError('emailFlowUuid', 'Required parameter emailFlowUuid was null or undefined when calling getEmailFlowScreenshots.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_flow_uuid" + "}", encodeURIComponent(String(emailFlowUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email flows
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlows: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailFlows.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email globalsettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailGlobalSettings: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/email/global_settings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailList: function (storefrontOid, emailListUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailList.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling getEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email list customer editor url
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomerEditorUrl: function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailListCustomerEditorUrl.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling getEmailListCustomerEditorUrl.');
            }
            // verify required parameter 'emailCustomerUuid' is not null or undefined
            if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
                throw new RequiredError('emailCustomerUuid', 'Required parameter emailCustomerUuid was null or undefined when calling getEmailListCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)))
                .replace("{" + "email_customer_uuid" + "}", encodeURIComponent(String(emailCustomerUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email list customers
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomers: function (storefrontOid, emailListUuid, pageNumber, pageSize, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailListCustomers.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling getEmailListCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email lists
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailLists.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email performance
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPerformance: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailPerformance.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/performance"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email plan
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlan: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailPlan.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/plan"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcard: function (storefrontOid, commseqPostcardUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailPostcard.');
            }
            // verify required parameter 'commseqPostcardUuid' is not null or undefined
            if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
                throw new RequiredError('commseqPostcardUuid', 'Required parameter commseqPostcardUuid was null or undefined when calling getEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_postcard_uuid" + "}", encodeURIComponent(String(commseqPostcardUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email postcards
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcards: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailPostcards.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email postcards multiple
         * @param {number} storefrontOid
         * @param {EmailCommseqPostcardsRequest} emailCommseqPostcardsRequest Request of postcard uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcardsMultiple: function (storefrontOid, emailCommseqPostcardsRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailPostcardsMultiple.');
            }
            // verify required parameter 'emailCommseqPostcardsRequest' is not null or undefined
            if (emailCommseqPostcardsRequest === null || emailCommseqPostcardsRequest === undefined) {
                throw new RequiredError('emailCommseqPostcardsRequest', 'Required parameter emailCommseqPostcardsRequest was null or undefined when calling getEmailPostcardsMultiple.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/multiple"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcardsRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqPostcardsRequest || {}) : (emailCommseqPostcardsRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailSegment.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling getEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segment customers editor URL
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomerEditorUrl: function (storefrontOid, emailSegmentUuid, emailCustomerUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
            }
            // verify required parameter 'emailCustomerUuid' is not null or undefined
            if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
                throw new RequiredError('emailCustomerUuid', 'Required parameter emailCustomerUuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)))
                .replace("{" + "email_customer_uuid" + "}", encodeURIComponent(String(emailCustomerUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segment customers
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomers: function (storefrontOid, emailSegmentUuid, pageNumber, pageSize, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailSegmentCustomers.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling getEmailSegmentCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email segments
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegments: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailSegments.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sending domain
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomain: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling getEmailSendingDomain.');
            }
            var localVarPath = "/storefront/email/sending_domain/{domain}"
                .replace("{" + "domain" + "}", encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sending domain status
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomainStatus: function (domain, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain', 'Required parameter domain was null or undefined when calling getEmailSendingDomainStatus.');
            }
            var localVarPath = "/storefront/email/sending_domains/{domain}/status"
                .replace("{" + "domain" + "}", encodeURIComponent(String(domain)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomains: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/email/sending_domains";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email settings
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSettings: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailSettings.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/settings"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email template
         * @param {number} storefrontOid
         * @param {number} emailTemplateOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: function (storefrontOid, emailTemplateOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailTemplate.');
            }
            // verify required parameter 'emailTemplateOid' is not null or undefined
            if (emailTemplateOid === null || emailTemplateOid === undefined) {
                throw new RequiredError('emailTemplateOid', 'Required parameter emailTemplateOid was null or undefined when calling getEmailTemplate.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/templates/{email_template_oid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_template_oid" + "}", encodeURIComponent(String(emailTemplateOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get email templates
         * @param {number} storefrontOid
         * @param {string} [triggerType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplates: function (storefrontOid, triggerType, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailTemplates.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/templates"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (triggerType !== undefined) {
                localVarQueryParameter['trigger_type'] = triggerType;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a list of third party email providers
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailThirdPartyProviders: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getEmailThirdPartyProviders.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get experiments
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getExperiments.');
            }
            var localVarPath = "/storefront/{storefront_oid}/experiments"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of property names for a given property type
         * @summary Get histogram property names
         * @param {number} storefrontOid
         * @param {string} [propertyType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyNames: function (storefrontOid, propertyType, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getHistogramPropertyNames.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_names"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (propertyType !== undefined) {
                localVarQueryParameter['property_type'] = propertyType;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of property values for a given property name and type
         * @summary Get histogram property values
         * @param {number} storefrontOid
         * @param {string} [propertyName]
         * @param {string} [propertyType]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyValues: function (storefrontOid, propertyName, propertyType, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getHistogramPropertyValues.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/histogram/property_values"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (propertyName !== undefined) {
                localVarQueryParameter['property_name'] = propertyName;
            }
            if (propertyType !== undefined) {
                localVarQueryParameter['property_type'] = propertyType;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get library values used to populate drop down boxes for filtering.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryFilterValues: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/code_library/filter_values";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItem: function (libraryItemOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'libraryItemOid' is not null or undefined
            if (libraryItemOid === null || libraryItemOid === undefined) {
                throw new RequiredError('libraryItemOid', 'Required parameter libraryItemOid was null or undefined when calling getLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}"
                .replace("{" + "library_item_oid" + "}", encodeURIComponent(String(libraryItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get thumbnail parameters
         * @param {ThumbnailParametersRequest} thumbnailParameters Thumbnail Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailParameters: function (thumbnailParameters, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'thumbnailParameters' is not null or undefined
            if (thumbnailParameters === null || thumbnailParameters === undefined) {
                throw new RequiredError('thumbnailParameters', 'Required parameter thumbnailParameters was null or undefined when calling getThumbnailParameters.');
            }
            var localVarPath = "/storefront/thumbnailParameters";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ThumbnailParametersRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(thumbnailParameters || {}) : (thumbnailParameters || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a transactional email
         * @summary Gets a transaction email object
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmail: function (storefrontOid, emailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getTransactionEmail.');
            }
            // verify required parameter 'emailId' is not null or undefined
            if (emailId === null || emailId === undefined) {
                throw new RequiredError('emailId', 'Required parameter emailId was null or undefined when calling getTransactionEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_id" + "}", encodeURIComponent(String(emailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a list of all transactional emails and return back just their names
         * @summary Gets a list of transaction email names
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailList: function (storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getTransactionEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get transactional email screenshots
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailScreenshots: function (storefrontOid, emailId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling getTransactionEmailScreenshots.');
            }
            // verify required parameter 'emailId' is not null or undefined
            if (emailId === null || emailId === undefined) {
                throw new RequiredError('emailId', 'Required parameter emailId was null or undefined when calling getTransactionEmailScreenshots.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_id" + "}", encodeURIComponent(String(emailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Globally unsubscribe a customer
         * @param {number} storefrontOid
         * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalUnsubscribe: function (storefrontOid, unsubscribe, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling globalUnsubscribe.');
            }
            // verify required parameter 'unsubscribe' is not null or undefined
            if (unsubscribe === null || unsubscribe === undefined) {
                throw new RequiredError('unsubscribe', 'Required parameter unsubscribe was null or undefined when calling globalUnsubscribe.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/globalUnsubscribe"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailGlobalUnsubscribeRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(unsubscribe || {}) : (unsubscribe || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Import a third party provider list
         * @param {number} storefrontOid
         * @param {EmailThirdPartyListImportRequest} importRequest lists to import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importEmailThirdPartyProviderList: function (storefrontOid, importRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling importEmailThirdPartyProviderList.');
            }
            // verify required parameter 'importRequest' is not null or undefined
            if (importRequest === null || importRequest === undefined) {
                throw new RequiredError('importRequest', 'Required parameter importRequest was null or undefined when calling importEmailThirdPartyProviderList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/third_party_providers/import"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailThirdPartyListImportRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(importRequest || {}) : (importRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email campaign
         * @param {number} storefrontOid
         * @param {EmailCampaign} emailCampaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaign: function (storefrontOid, emailCampaign, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailCampaign.');
            }
            // verify required parameter 'emailCampaign' is not null or undefined
            if (emailCampaign === null || emailCampaign === undefined) {
                throw new RequiredError('emailCampaign', 'Required parameter emailCampaign was null or undefined when calling insertEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCampaign" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCampaign || {}) : (emailCampaign || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email commseq
         * @param {number} storefrontOid
         * @param {EmailCommseq} emailCommseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCommseq: function (storefrontOid, emailCommseq, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailCommseq.');
            }
            // verify required parameter 'emailCommseq' is not null or undefined
            if (emailCommseq === null || emailCommseq === undefined) {
                throw new RequiredError('emailCommseq', 'Required parameter emailCommseq was null or undefined when calling insertEmailCommseq.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseq || {}) : (emailCommseq || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email email
         * @param {number} storefrontOid
         * @param {EmailCommseqEmail} emailCommseqEmail Email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailEmail: function (storefrontOid, emailCommseqEmail, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailEmail.');
            }
            // verify required parameter 'emailCommseqEmail' is not null or undefined
            if (emailCommseqEmail === null || emailCommseqEmail === undefined) {
                throw new RequiredError('emailCommseqEmail', 'Required parameter emailCommseqEmail was null or undefined when calling insertEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqEmail || {}) : (emailCommseqEmail || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email flow
         * @param {number} storefrontOid
         * @param {EmailFlow} emailFlow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlow: function (storefrontOid, emailFlow, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailFlow.');
            }
            // verify required parameter 'emailFlow' is not null or undefined
            if (emailFlow === null || emailFlow === undefined) {
                throw new RequiredError('emailFlow', 'Required parameter emailFlow was null or undefined when calling insertEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailFlow || {}) : (emailFlow || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email list
         * @param {number} storefrontOid
         * @param {EmailList} emailList Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailList: function (storefrontOid, emailList, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailList.');
            }
            // verify required parameter 'emailList' is not null or undefined
            if (emailList === null || emailList === undefined) {
                throw new RequiredError('emailList', 'Required parameter emailList was null or undefined when calling insertEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailList" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailList || {}) : (emailList || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email postcard
         * @param {number} storefrontOid
         * @param {EmailCommseqPostcard} emailCommseqPostcard Email postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailPostcard: function (storefrontOid, emailCommseqPostcard, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailPostcard.');
            }
            // verify required parameter 'emailCommseqPostcard' is not null or undefined
            if (emailCommseqPostcard === null || emailCommseqPostcard === undefined) {
                throw new RequiredError('emailCommseqPostcard', 'Required parameter emailCommseqPostcard was null or undefined when calling insertEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcard" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqPostcard || {}) : (emailCommseqPostcard || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Insert email segment
         * @param {number} storefrontOid
         * @param {EmailSegment} emailSegment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailSegment: function (storefrontOid, emailSegment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling insertEmailSegment.');
            }
            // verify required parameter 'emailSegment' is not null or undefined
            if (emailSegment === null || emailSegment === undefined) {
                throw new RequiredError('emailSegment', 'Required parameter emailSegment was null or undefined when calling insertEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailSegment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailSegment || {}) : (emailSegment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Prepare download of email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareDownloadEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling prepareDownloadEmailSegment.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling prepareDownloadEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Publish library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishLibraryItem: function (libraryItemOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'libraryItemOid' is not null or undefined
            if (libraryItemOid === null || libraryItemOid === undefined) {
                throw new RequiredError('libraryItemOid', 'Required parameter libraryItemOid was null or undefined when calling publishLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/publish"
                .replace("{" + "library_item_oid" + "}", encodeURIComponent(String(libraryItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Purchase public library item, which creates a copy of the item in your personal code library
         * @param {number} libraryItemOid
         * @param {number} [storefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLibraryItem: function (libraryItemOid, storefrontOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'libraryItemOid' is not null or undefined
            if (libraryItemOid === null || libraryItemOid === undefined) {
                throw new RequiredError('libraryItemOid', 'Required parameter libraryItemOid was null or undefined when calling purchaseLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}/purchase"
                .replace("{" + "library_item_oid" + "}", encodeURIComponent(String(libraryItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (storefrontOid !== undefined) {
                localVarQueryParameter['storefront_oid'] = storefrontOid;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Release email communication sequence customers waiting at the specified step
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseEmailCommseqStepWaiting: function (storefrontOid, commseqUuid, commseqStepUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling releaseEmailCommseqStepWaiting.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
            }
            // verify required parameter 'commseqStepUuid' is not null or undefined
            if (commseqStepUuid === null || commseqStepUuid === undefined) {
                throw new RequiredError('commseqStepUuid', 'Required parameter commseqStepUuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)))
                .replace("{" + "commseq_step_uuid" + "}", encodeURIComponent(String(commseqStepUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Request a review of an email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailReviewRequest Email commseq email review request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        review: function (storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling review.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling review.');
            }
            // verify required parameter 'emailCommseqEmailReviewRequest' is not null or undefined
            if (emailCommseqEmailReviewRequest === null || emailCommseqEmailReviewRequest === undefined) {
                throw new RequiredError('emailCommseqEmailReviewRequest', 'Required parameter emailCommseqEmailReviewRequest was null or undefined when calling review.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmailSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqEmailReviewRequest || {}) : (emailCommseqEmailReviewRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for all matching values
         * @param {string} [category]
         * @param {string} [matches]
         * @param {string} [storefrontOid]
         * @param {number} [maxHits]
         * @param {string} [subcategory]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (category, matches, storefrontOid, maxHits, subcategory, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/storefront/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (matches !== undefined) {
                localVarQueryParameter['matches'] = matches;
            }
            if (storefrontOid !== undefined) {
                localVarQueryParameter['storefront_oid'] = storefrontOid;
            }
            if (maxHits !== undefined) {
                localVarQueryParameter['max_hits'] = maxHits;
            }
            if (subcategory !== undefined) {
                localVarQueryParameter['subcategory'] = subcategory;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookupRequest LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (lookupRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'lookupRequest' is not null or undefined
            if (lookupRequest === null || lookupRequest === undefined) {
                throw new RequiredError('lookupRequest', 'Required parameter lookupRequest was null or undefined when calling search2.');
            }
            var localVarPath = "/storefront/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LookupRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(lookupRequest || {}) : (lookupRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search email list customers
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailListCustomers: function (storefrontOid, emailListUuid, startsWith, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling searchEmailListCustomers.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling searchEmailListCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (startsWith !== undefined) {
                localVarQueryParameter['startsWith'] = startsWith;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search email segment customers
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailSegmentCustomers: function (storefrontOid, emailSegmentUuid, startsWith, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling searchEmailSegmentCustomers.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling searchEmailSegmentCustomers.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (startsWith !== undefined) {
                localVarQueryParameter['startsWith'] = startsWith;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLibraryItems: function (itemQuery, limit, offset, sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'itemQuery' is not null or undefined
            if (itemQuery === null || itemQuery === undefined) {
                throw new RequiredError('itemQuery', 'Required parameter itemQuery was null or undefined when calling searchLibraryItems.');
            }
            var localVarPath = "/storefront/code_library/search";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(itemQuery || {}) : (itemQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPublishedItems: function (itemQuery, limit, offset, sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'itemQuery' is not null or undefined
            if (itemQuery === null || itemQuery === undefined) {
                throw new RequiredError('itemQuery', 'Required parameter itemQuery was null or undefined when calling searchPublishedItems.');
            }
            var localVarPath = "/storefront/code_library/search_published";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(itemQuery || {}) : (itemQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items needing review or rejected
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchReviewItems: function (itemQuery, limit, offset, sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'itemQuery' is not null or undefined
            if (itemQuery === null || itemQuery === undefined) {
                throw new RequiredError('itemQuery', 'Required parameter itemQuery was null or undefined when calling searchReviewItems.');
            }
            var localVarPath = "/storefront/code_library/search_review";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(itemQuery || {}) : (itemQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSharedItems: function (itemQuery, limit, offset, sort, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'itemQuery' is not null or undefined
            if (itemQuery === null || itemQuery === undefined) {
                throw new RequiredError('itemQuery', 'Required parameter itemQuery was null or undefined when calling searchSharedItems.');
            }
            var localVarPath = "/storefront/code_library/search_shared";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["affiliate_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItemQuery" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(itemQuery || {}) : (itemQuery || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send email test
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailTestRequest Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTest: function (storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling sendEmailTest.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling sendEmailTest.');
            }
            // verify required parameter 'emailCommseqEmailTestRequest' is not null or undefined
            if (emailCommseqEmailTestRequest === null || emailCommseqEmailTestRequest === undefined) {
                throw new RequiredError('emailCommseqEmailTestRequest', 'Required parameter emailCommseqEmailTestRequest was null or undefined when calling sendEmailTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmailSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqEmailTestRequest || {}) : (emailCommseqEmailTestRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send postcard test
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {EmailCommseqPostcardSendTestRequest} emailCommseqPostcardTestRequest Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcardTest: function (storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling sendPostcardTest.');
            }
            // verify required parameter 'commseqPostcardUuid' is not null or undefined
            if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
                throw new RequiredError('commseqPostcardUuid', 'Required parameter commseqPostcardUuid was null or undefined when calling sendPostcardTest.');
            }
            // verify required parameter 'emailCommseqPostcardTestRequest' is not null or undefined
            if (emailCommseqPostcardTestRequest === null || emailCommseqPostcardTestRequest === undefined) {
                throw new RequiredError('emailCommseqPostcardTestRequest', 'Required parameter emailCommseqPostcardTestRequest was null or undefined when calling sendPostcardTest.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_postcard_uuid" + "}", encodeURIComponent(String(commseqPostcardUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcardSendTestRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqPostcardTestRequest || {}) : (emailCommseqPostcardTestRequest || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Start email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailCampaign: function (storefrontOid, emailCampaignUuid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling startEmailCampaign.');
            }
            // verify required parameter 'emailCampaignUuid' is not null or undefined
            if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
                throw new RequiredError('emailCampaignUuid', 'Required parameter emailCampaignUuid was null or undefined when calling startEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_campaign_uuid" + "}", encodeURIComponent(String(emailCampaignUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Subscribe customers to email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {Array<EmailCustomer>} customers Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEmailList: function (storefrontOid, emailListUuid, customers, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling subscribeToEmailList.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling subscribeToEmailList.');
            }
            // verify required parameter 'customers' is not null or undefined
            if (customers === null || customers === undefined) {
                throw new RequiredError('customers', 'Required parameter customers was null or undefined when calling subscribeToEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Array&lt;EmailCustomer&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(customers || {}) : (customers || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {EmailCampaign} emailCampaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaign: function (storefrontOid, emailCampaignUuid, emailCampaign, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailCampaign.');
            }
            // verify required parameter 'emailCampaignUuid' is not null or undefined
            if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
                throw new RequiredError('emailCampaignUuid', 'Required parameter emailCampaignUuid was null or undefined when calling updateEmailCampaign.');
            }
            // verify required parameter 'emailCampaign' is not null or undefined
            if (emailCampaign === null || emailCampaign === undefined) {
                throw new RequiredError('emailCampaign', 'Required parameter emailCampaign was null or undefined when calling updateEmailCampaign.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_campaign_uuid" + "}", encodeURIComponent(String(emailCampaignUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCampaign" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCampaign || {}) : (emailCampaign || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email commseq
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailCommseq} emailCommseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCommseq: function (storefrontOid, commseqUuid, emailCommseq, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailCommseq.');
            }
            // verify required parameter 'commseqUuid' is not null or undefined
            if (commseqUuid === null || commseqUuid === undefined) {
                throw new RequiredError('commseqUuid', 'Required parameter commseqUuid was null or undefined when calling updateEmailCommseq.');
            }
            // verify required parameter 'emailCommseq' is not null or undefined
            if (emailCommseq === null || emailCommseq === undefined) {
                throw new RequiredError('emailCommseq', 'Required parameter emailCommseq was null or undefined when calling updateEmailCommseq.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_uuid" + "}", encodeURIComponent(String(commseqUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseq" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseq || {}) : (emailCommseq || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email customer
         * @param {number} storefrontOid
         * @param {string} emailCustomerUuid
         * @param {EmailCustomer} emailCustomer Email customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCustomer: function (storefrontOid, emailCustomerUuid, emailCustomer, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailCustomer.');
            }
            // verify required parameter 'emailCustomerUuid' is not null or undefined
            if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
                throw new RequiredError('emailCustomerUuid', 'Required parameter emailCustomerUuid was null or undefined when calling updateEmailCustomer.');
            }
            // verify required parameter 'emailCustomer' is not null or undefined
            if (emailCustomer === null || emailCustomer === undefined) {
                throw new RequiredError('emailCustomer', 'Required parameter emailCustomer was null or undefined when calling updateEmailCustomer.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/customers/{email_customer_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_customer_uuid" + "}", encodeURIComponent(String(emailCustomerUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCustomer" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCustomer || {}) : (emailCustomer || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmail} emailCommseqEmail Email commseq email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailEmail: function (storefrontOid, commseqEmailUuid, emailCommseqEmail, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailEmail.');
            }
            // verify required parameter 'commseqEmailUuid' is not null or undefined
            if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
                throw new RequiredError('commseqEmailUuid', 'Required parameter commseqEmailUuid was null or undefined when calling updateEmailEmail.');
            }
            // verify required parameter 'emailCommseqEmail' is not null or undefined
            if (emailCommseqEmail === null || emailCommseqEmail === undefined) {
                throw new RequiredError('emailCommseqEmail', 'Required parameter emailCommseqEmail was null or undefined when calling updateEmailEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_email_uuid" + "}", encodeURIComponent(String(commseqEmailUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqEmail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqEmail || {}) : (emailCommseqEmail || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {EmailFlow} emailFlow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlow: function (storefrontOid, emailFlowUuid, emailFlow, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailFlow.');
            }
            // verify required parameter 'emailFlowUuid' is not null or undefined
            if (emailFlowUuid === null || emailFlowUuid === undefined) {
                throw new RequiredError('emailFlowUuid', 'Required parameter emailFlowUuid was null or undefined when calling updateEmailFlow.');
            }
            // verify required parameter 'emailFlow' is not null or undefined
            if (emailFlow === null || emailFlow === undefined) {
                throw new RequiredError('emailFlow', 'Required parameter emailFlow was null or undefined when calling updateEmailFlow.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/flows/{email_flow_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_flow_uuid" + "}", encodeURIComponent(String(emailFlowUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailFlow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailFlow || {}) : (emailFlow || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email global settings
         * @param {EmailGlobalSettings} globalSettings global settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailGlobalSettings: function (globalSettings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'globalSettings' is not null or undefined
            if (globalSettings === null || globalSettings === undefined) {
                throw new RequiredError('globalSettings', 'Required parameter globalSettings was null or undefined when calling updateEmailGlobalSettings.');
            }
            var localVarPath = "/storefront/email/global_settings";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailGlobalSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(globalSettings || {}) : (globalSettings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {EmailList} emailList Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailList: function (storefrontOid, emailListUuid, emailList, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailList.');
            }
            // verify required parameter 'emailListUuid' is not null or undefined
            if (emailListUuid === null || emailListUuid === undefined) {
                throw new RequiredError('emailListUuid', 'Required parameter emailListUuid was null or undefined when calling updateEmailList.');
            }
            // verify required parameter 'emailList' is not null or undefined
            if (emailList === null || emailList === undefined) {
                throw new RequiredError('emailList', 'Required parameter emailList was null or undefined when calling updateEmailList.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/lists/{email_list_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_list_uuid" + "}", encodeURIComponent(String(emailListUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailList" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailList || {}) : (emailList || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email plan
         * @param {number} storefrontOid
         * @param {EmailPlan} settings plan request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPlan: function (storefrontOid, settings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailPlan.');
            }
            // verify required parameter 'settings' is not null or undefined
            if (settings === null || settings === undefined) {
                throw new RequiredError('settings', 'Required parameter settings was null or undefined when calling updateEmailPlan.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/plan"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailPlan" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {EmailCommseqPostcard} emailCommseqPostcard Email commseq postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPostcard: function (storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailPostcard.');
            }
            // verify required parameter 'commseqPostcardUuid' is not null or undefined
            if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
                throw new RequiredError('commseqPostcardUuid', 'Required parameter commseqPostcardUuid was null or undefined when calling updateEmailPostcard.');
            }
            // verify required parameter 'emailCommseqPostcard' is not null or undefined
            if (emailCommseqPostcard === null || emailCommseqPostcard === undefined) {
                throw new RequiredError('emailCommseqPostcard', 'Required parameter emailCommseqPostcard was null or undefined when calling updateEmailPostcard.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "commseq_postcard_uuid" + "}", encodeURIComponent(String(commseqPostcardUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailCommseqPostcard" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailCommseqPostcard || {}) : (emailCommseqPostcard || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {EmailSegment} emailSegment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSegment: function (storefrontOid, emailSegmentUuid, emailSegment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailSegment.');
            }
            // verify required parameter 'emailSegmentUuid' is not null or undefined
            if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
                throw new RequiredError('emailSegmentUuid', 'Required parameter emailSegmentUuid was null or undefined when calling updateEmailSegment.');
            }
            // verify required parameter 'emailSegment' is not null or undefined
            if (emailSegment === null || emailSegment === undefined) {
                throw new RequiredError('emailSegment', 'Required parameter emailSegment was null or undefined when calling updateEmailSegment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/segments/{email_segment_uuid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_segment_uuid" + "}", encodeURIComponent(String(emailSegmentUuid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailSegment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(emailSegment || {}) : (emailSegment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update email settings
         * @param {number} storefrontOid
         * @param {EmailSettings} settings settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSettings: function (storefrontOid, settings, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateEmailSettings.');
            }
            // verify required parameter 'settings' is not null or undefined
            if (settings === null || settings === undefined) {
                throw new RequiredError('settings', 'Required parameter settings was null or undefined when calling updateEmailSettings.');
            }
            var localVarPath = "/storefront/{storefront_oid}/email/settings"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EmailSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(settings || {}) : (settings || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update experiment
         * @param {number} storefrontOid
         * @param {number} storefrontExperimentOid
         * @param {Experiment} experiment Experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: function (storefrontOid, storefrontExperimentOid, experiment, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateExperiment.');
            }
            // verify required parameter 'storefrontExperimentOid' is not null or undefined
            if (storefrontExperimentOid === null || storefrontExperimentOid === undefined) {
                throw new RequiredError('storefrontExperimentOid', 'Required parameter storefrontExperimentOid was null or undefined when calling updateExperiment.');
            }
            // verify required parameter 'experiment' is not null or undefined
            if (experiment === null || experiment === undefined) {
                throw new RequiredError('experiment', 'Required parameter experiment was null or undefined when calling updateExperiment.');
            }
            var localVarPath = "/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "storefront_experiment_oid" + "}", encodeURIComponent(String(storefrontExperimentOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Experiment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(experiment || {}) : (experiment || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update library item. Note that only certain fields may be updated via this method.
         * @param {number} libraryItemOid
         * @param {LibraryItem} libraryItem Library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryItem: function (libraryItemOid, libraryItem, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'libraryItemOid' is not null or undefined
            if (libraryItemOid === null || libraryItemOid === undefined) {
                throw new RequiredError('libraryItemOid', 'Required parameter libraryItemOid was null or undefined when calling updateLibraryItem.');
            }
            // verify required parameter 'libraryItem' is not null or undefined
            if (libraryItem === null || libraryItem === undefined) {
                throw new RequiredError('libraryItem', 'Required parameter libraryItem was null or undefined when calling updateLibraryItem.');
            }
            var localVarPath = "/storefront/code_library/{library_item_oid}"
                .replace("{" + "library_item_oid" + "}", encodeURIComponent(String(libraryItemOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("LibraryItem" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(libraryItem || {}) : (libraryItem || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a transactional email
         * @summary Updates a transaction email object
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {TransactionEmail} transactionEmail TransactionEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionEmail: function (storefrontOid, emailId, transactionEmail, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'storefrontOid' is not null or undefined
            if (storefrontOid === null || storefrontOid === undefined) {
                throw new RequiredError('storefrontOid', 'Required parameter storefrontOid was null or undefined when calling updateTransactionEmail.');
            }
            // verify required parameter 'emailId' is not null or undefined
            if (emailId === null || emailId === undefined) {
                throw new RequiredError('emailId', 'Required parameter emailId was null or undefined when calling updateTransactionEmail.');
            }
            // verify required parameter 'transactionEmail' is not null or undefined
            if (transactionEmail === null || transactionEmail === undefined) {
                throw new RequiredError('transactionEmail', 'Required parameter transactionEmail was null or undefined when calling updateTransactionEmail.');
            }
            var localVarPath = "/storefront/{storefront_oid}/transaction_email/list/{email_id}"
                .replace("{" + "storefront_oid" + "}", encodeURIComponent(String(storefrontOid)))
                .replace("{" + "email_id" + "}", encodeURIComponent(String(emailId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartBrowserApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-browser-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-browser-key"] = localVarApiKeyValue;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["storefront_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TransactionEmail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(transactionEmail || {}) : (transactionEmail || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StorefrontApi - functional programming interface
 * @export
 */
exports.StorefrontApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Add to library
         * @param {AddLibraryItemRequest} addLibraryRequest New library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToLibrary: function (addLibraryRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).addToLibrary(addLibraryRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Apply library item to storefront.
         * @param {ApplyLibraryItemRequest} applyLibraryRequest New library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToStoreFront: function (applyLibraryRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).applyToStoreFront(applyLibraryRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Archive email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailList: function (storefrontOid, emailListUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).archiveEmailList(storefrontOid, emailListUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Archive email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).archiveEmailSegment(storefrontOid, emailSegmentUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Back populate email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {EmailFlowBackPopulateRequest} backPopulateRequest The request to back populate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backPopulateEmailFlow: function (storefrontOid, emailFlowUuid, backPopulateRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).backPopulateEmailFlow(storefrontOid, emailFlowUuid, backPopulateRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Check download of email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} emailSegmentRebuildUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDownloadEmailSegment: function (storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).checkDownloadEmailSegment(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Clone email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {number} [targetStorefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailCampaign: function (storefrontOid, emailCampaignUuid, targetStorefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).cloneEmailCampaign(storefrontOid, emailCampaignUuid, targetStorefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Clone email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {number} [targetStorefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailFlow: function (storefrontOid, emailFlowUuid, targetStorefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).cloneEmailFlow(storefrontOid, emailFlowUuid, targetStorefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain: function (domain, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).createEmailSendingDomain(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete communication sequence stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCommseqStat: function (storefrontOid, commseqUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteEmailCommseqStat(storefrontOid, commseqUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailEmail: function (storefrontOid, commseqEmailUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteEmailEmail(storefrontOid, commseqEmailUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email list customer
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListCustomer: function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteEmailListCustomer(storefrontOid, emailListUuid, emailCustomerUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailPostcard: function (storefrontOid, commseqPostcardUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteEmailPostcard(storefrontOid, commseqPostcardUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary delete email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailSendingDomain: function (domain, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteEmailSendingDomain(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete experiment
         * @param {number} storefrontOid
         * @param {number} storefrontExperimentOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: function (storefrontOid, storefrontExperimentOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteExperiment(storefrontOid, storefrontExperimentOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete library item
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItem: function (libraryItemOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).deleteLibraryItem(libraryItemOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Duplicate library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateLibraryItem: function (libraryItemOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).duplicateLibraryItem(libraryItemOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Obtain lat/long for an address
         * @param {number} storefrontOid
         * @param {GeocodeRequest} geocodeRequest geocode request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodeAddress: function (storefrontOid, geocodeRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).geocodeAddress(storefrontOid, geocodeRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of all the countries
         * @summary Get countries
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getCountries(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetches a temporary authentication token for the editor
         * @summary Gets editor token
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorToken: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEditorToken(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication base templates
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailBaseTemplates: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailBaseTemplates(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaign: function (storefrontOid, emailCampaignUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCampaign(storefrontOid, emailCampaignUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaign screenshots
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignScreenshots: function (storefrontOid, emailCampaignUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCampaignScreenshots(storefrontOid, emailCampaignUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaigns
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaigns: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCampaigns(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email campaigns with stats
         * @param {number} storefrontOid
         * @param {string} statDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignsWithStats: function (storefrontOid, statDays, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCampaignsWithStats(storefrontOid, statDays, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email commseq
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseq: function (storefrontOid, commseqUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseq(storefrontOid, commseqUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence emails stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStatSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqEmailStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseqEmailStats(storefrontOid, commseqUuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence postcard stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseqPostcardStats(storefrontOid, commseqUuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get communication sequence stats overall
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStatOverall: function (storefrontOid, commseqUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseqStatOverall(storefrontOid, commseqUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence step stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStepStatRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseqStepStats(storefrontOid, commseqUuid, statsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email communication sequence customers waiting at each requested step
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepWaiting: function (storefrontOid, commseqUuid, waitingRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseqStepWaiting(storefrontOid, commseqUuid, waitingRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email commseqs
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqs: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCommseqs(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get customers editor URL
         * @param {number} storefrontOid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomerEditorUrl: function (storefrontOid, emailCustomerUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCustomerEditorUrl(storefrontOid, emailCustomerUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email customers
         * @param {number} storefrontOid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {string} [searchEmailPrefix]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomers: function (storefrontOid, pageNumber, pageSize, searchEmailPrefix, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailCustomers(storefrontOid, pageNumber, pageSize, searchEmailPrefix, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email dashboard activity
         * @param {number} storefrontOid
         * @param {number} [lastRecords]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardActivity: function (storefrontOid, lastRecords, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailDashboardActivity(storefrontOid, lastRecords, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get dashboard stats
         * @param {number} storefrontOid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardStats: function (storefrontOid, days, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailDashboardStats(storefrontOid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmail: function (storefrontOid, commseqEmailUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailEmail(storefrontOid, commseqEmailUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email email clicks
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {string} commseqEmailUuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailClicks: function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailEmailClicks(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email order customer editor url
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailCustomerEditorUrl: function (storefrontOid, commseqEmailUuid, orderId, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailEmailCustomerEditorUrl(storefrontOid, commseqEmailUuid, orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email email orders
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {string} commseqEmailUuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailOrders: function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailEmailOrders(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email emails
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmails: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailEmails(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email emails multiple
         * @param {number} storefrontOid
         * @param {EmailCommseqEmailsRequest} emailCommseqEmailsRequest Request of email uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailsMultiple: function (storefrontOid, emailCommseqEmailsRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailEmailsMultiple(storefrontOid, emailCommseqEmailsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlow: function (storefrontOid, emailFlowUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailFlow(storefrontOid, emailFlowUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flow screenshots
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowScreenshots: function (storefrontOid, emailFlowUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailFlowScreenshots(storefrontOid, emailFlowUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email flows
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlows: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailFlows(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email globalsettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailGlobalSettings: function (options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailGlobalSettings(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailList: function (storefrontOid, emailListUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailList(storefrontOid, emailListUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email list customer editor url
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomerEditorUrl: function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailListCustomerEditorUrl(storefrontOid, emailListUuid, emailCustomerUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email list customers
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomers: function (storefrontOid, emailListUuid, pageNumber, pageSize, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailListCustomers(storefrontOid, emailListUuid, pageNumber, pageSize, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email lists
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailLists(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email performance
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPerformance: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailPerformance(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email plan
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlan: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailPlan(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcard: function (storefrontOid, commseqPostcardUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailPostcard(storefrontOid, commseqPostcardUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email postcards
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcards: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailPostcards(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email postcards multiple
         * @param {number} storefrontOid
         * @param {EmailCommseqPostcardsRequest} emailCommseqPostcardsRequest Request of postcard uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcardsMultiple: function (storefrontOid, emailCommseqPostcardsRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailPostcardsMultiple(storefrontOid, emailCommseqPostcardsRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSegment(storefrontOid, emailSegmentUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segment customers editor URL
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomerEditorUrl: function (storefrontOid, emailSegmentUuid, emailCustomerUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSegmentCustomerEditorUrl(storefrontOid, emailSegmentUuid, emailCustomerUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segment customers
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomers: function (storefrontOid, emailSegmentUuid, pageNumber, pageSize, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSegmentCustomers(storefrontOid, emailSegmentUuid, pageNumber, pageSize, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email segments
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegments: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSegments(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sending domain
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomain: function (domain, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSendingDomain(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sending domain status
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomainStatus: function (domain, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSendingDomainStatus(domain, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomains: function (options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSendingDomains(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email settings
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSettings: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailSettings(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email template
         * @param {number} storefrontOid
         * @param {number} emailTemplateOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: function (storefrontOid, emailTemplateOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailTemplate(storefrontOid, emailTemplateOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get email templates
         * @param {number} storefrontOid
         * @param {string} [triggerType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplates: function (storefrontOid, triggerType, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailTemplates(storefrontOid, triggerType, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get a list of third party email providers
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailThirdPartyProviders: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getEmailThirdPartyProviders(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get experiments
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getExperiments(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of property names for a given property type
         * @summary Get histogram property names
         * @param {number} storefrontOid
         * @param {string} [propertyType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyNames: function (storefrontOid, propertyType, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getHistogramPropertyNames(storefrontOid, propertyType, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of property values for a given property name and type
         * @summary Get histogram property values
         * @param {number} storefrontOid
         * @param {string} [propertyName]
         * @param {string} [propertyType]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyValues: function (storefrontOid, propertyName, propertyType, limit, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getHistogramPropertyValues(storefrontOid, propertyName, propertyType, limit, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get library values used to populate drop down boxes for filtering.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryFilterValues: function (options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getLibraryFilterValues(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItem: function (libraryItemOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getLibraryItem(libraryItemOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get thumbnail parameters
         * @param {ThumbnailParametersRequest} thumbnailParameters Thumbnail Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailParameters: function (thumbnailParameters, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getThumbnailParameters(thumbnailParameters, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Fetch a transactional email
         * @summary Gets a transaction email object
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmail: function (storefrontOid, emailId, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getTransactionEmail(storefrontOid, emailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain a list of all transactional emails and return back just their names
         * @summary Gets a list of transaction email names
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailList: function (storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getTransactionEmailList(storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get transactional email screenshots
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailScreenshots: function (storefrontOid, emailId, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).getTransactionEmailScreenshots(storefrontOid, emailId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Globally unsubscribe a customer
         * @param {number} storefrontOid
         * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalUnsubscribe: function (storefrontOid, unsubscribe, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).globalUnsubscribe(storefrontOid, unsubscribe, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Import a third party provider list
         * @param {number} storefrontOid
         * @param {EmailThirdPartyListImportRequest} importRequest lists to import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importEmailThirdPartyProviderList: function (storefrontOid, importRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).importEmailThirdPartyProviderList(storefrontOid, importRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email campaign
         * @param {number} storefrontOid
         * @param {EmailCampaign} emailCampaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaign: function (storefrontOid, emailCampaign, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailCampaign(storefrontOid, emailCampaign, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email commseq
         * @param {number} storefrontOid
         * @param {EmailCommseq} emailCommseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCommseq: function (storefrontOid, emailCommseq, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailCommseq(storefrontOid, emailCommseq, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email email
         * @param {number} storefrontOid
         * @param {EmailCommseqEmail} emailCommseqEmail Email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailEmail: function (storefrontOid, emailCommseqEmail, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailEmail(storefrontOid, emailCommseqEmail, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email flow
         * @param {number} storefrontOid
         * @param {EmailFlow} emailFlow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlow: function (storefrontOid, emailFlow, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailFlow(storefrontOid, emailFlow, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email list
         * @param {number} storefrontOid
         * @param {EmailList} emailList Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailList: function (storefrontOid, emailList, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailList(storefrontOid, emailList, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email postcard
         * @param {number} storefrontOid
         * @param {EmailCommseqPostcard} emailCommseqPostcard Email postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailPostcard: function (storefrontOid, emailCommseqPostcard, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailPostcard(storefrontOid, emailCommseqPostcard, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Insert email segment
         * @param {number} storefrontOid
         * @param {EmailSegment} emailSegment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailSegment: function (storefrontOid, emailSegment, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).insertEmailSegment(storefrontOid, emailSegment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Prepare download of email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareDownloadEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).prepareDownloadEmailSegment(storefrontOid, emailSegmentUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Publish library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishLibraryItem: function (libraryItemOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).publishLibraryItem(libraryItemOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Purchase public library item, which creates a copy of the item in your personal code library
         * @param {number} libraryItemOid
         * @param {number} [storefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLibraryItem: function (libraryItemOid, storefrontOid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).purchaseLibraryItem(libraryItemOid, storefrontOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Release email communication sequence customers waiting at the specified step
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseEmailCommseqStepWaiting: function (storefrontOid, commseqUuid, commseqStepUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).releaseEmailCommseqStepWaiting(storefrontOid, commseqUuid, commseqStepUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Request a review of an email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailReviewRequest Email commseq email review request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        review: function (storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).review(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Searches for all matching values
         * @param {string} [category]
         * @param {string} [matches]
         * @param {string} [storefrontOid]
         * @param {number} [maxHits]
         * @param {string} [subcategory]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (category, matches, storefrontOid, maxHits, subcategory, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).search(category, matches, storefrontOid, maxHits, subcategory, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookupRequest LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (lookupRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).search2(lookupRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Search email list customers
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailListCustomers: function (storefrontOid, emailListUuid, startsWith, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).searchEmailListCustomers(storefrontOid, emailListUuid, startsWith, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Search email segment customers
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailSegmentCustomers: function (storefrontOid, emailSegmentUuid, startsWith, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).searchEmailSegmentCustomers(storefrontOid, emailSegmentUuid, startsWith, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLibraryItems: function (itemQuery, limit, offset, sort, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).searchLibraryItems(itemQuery, limit, offset, sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPublishedItems: function (itemQuery, limit, offset, sort, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).searchPublishedItems(itemQuery, limit, offset, sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items needing review or rejected
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchReviewItems: function (itemQuery, limit, offset, sort, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).searchReviewItems(itemQuery, limit, offset, sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSharedItems: function (itemQuery, limit, offset, sort, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).searchSharedItems(itemQuery, limit, offset, sort, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Send email test
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailTestRequest Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTest: function (storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).sendEmailTest(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Send postcard test
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {EmailCommseqPostcardSendTestRequest} emailCommseqPostcardTestRequest Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcardTest: function (storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).sendPostcardTest(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Start email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailCampaign: function (storefrontOid, emailCampaignUuid, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).startEmailCampaign(storefrontOid, emailCampaignUuid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Subscribe customers to email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {Array<EmailCustomer>} customers Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEmailList: function (storefrontOid, emailListUuid, customers, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).subscribeToEmailList(storefrontOid, emailListUuid, customers, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {EmailCampaign} emailCampaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaign: function (storefrontOid, emailCampaignUuid, emailCampaign, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailCampaign(storefrontOid, emailCampaignUuid, emailCampaign, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email commseq
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailCommseq} emailCommseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCommseq: function (storefrontOid, commseqUuid, emailCommseq, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailCommseq(storefrontOid, commseqUuid, emailCommseq, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email customer
         * @param {number} storefrontOid
         * @param {string} emailCustomerUuid
         * @param {EmailCustomer} emailCustomer Email customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCustomer: function (storefrontOid, emailCustomerUuid, emailCustomer, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailCustomer(storefrontOid, emailCustomerUuid, emailCustomer, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmail} emailCommseqEmail Email commseq email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailEmail: function (storefrontOid, commseqEmailUuid, emailCommseqEmail, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailEmail(storefrontOid, commseqEmailUuid, emailCommseqEmail, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {EmailFlow} emailFlow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlow: function (storefrontOid, emailFlowUuid, emailFlow, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailFlow(storefrontOid, emailFlowUuid, emailFlow, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email global settings
         * @param {EmailGlobalSettings} globalSettings global settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailGlobalSettings: function (globalSettings, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailGlobalSettings(globalSettings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {EmailList} emailList Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailList: function (storefrontOid, emailListUuid, emailList, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailList(storefrontOid, emailListUuid, emailList, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email plan
         * @param {number} storefrontOid
         * @param {EmailPlan} settings plan request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPlan: function (storefrontOid, settings, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailPlan(storefrontOid, settings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {EmailCommseqPostcard} emailCommseqPostcard Email commseq postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPostcard: function (storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailPostcard(storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {EmailSegment} emailSegment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSegment: function (storefrontOid, emailSegmentUuid, emailSegment, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailSegment(storefrontOid, emailSegmentUuid, emailSegment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update email settings
         * @param {number} storefrontOid
         * @param {EmailSettings} settings settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSettings: function (storefrontOid, settings, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateEmailSettings(storefrontOid, settings, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update experiment
         * @param {number} storefrontOid
         * @param {number} storefrontExperimentOid
         * @param {Experiment} experiment Experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: function (storefrontOid, storefrontExperimentOid, experiment, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateExperiment(storefrontOid, storefrontExperimentOid, experiment, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update library item. Note that only certain fields may be updated via this method.
         * @param {number} libraryItemOid
         * @param {LibraryItem} libraryItem Library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryItem: function (libraryItemOid, libraryItem, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateLibraryItem(libraryItemOid, libraryItem, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a transactional email
         * @summary Updates a transaction email object
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {TransactionEmail} transactionEmail TransactionEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionEmail: function (storefrontOid, emailId, transactionEmail, options) {
            var localVarFetchArgs = exports.StorefrontApiFetchParamCreator(configuration).updateTransactionEmail(storefrontOid, emailId, transactionEmail, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * StorefrontApi - factory interface
 * @export
 */
exports.StorefrontApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Add to library
         * @param {AddLibraryItemRequest} addLibraryRequest New library item request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToLibrary: function (addLibraryRequest, options) {
            return exports.StorefrontApiFp(configuration).addToLibrary(addLibraryRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Apply library item to storefront.
         * @param {ApplyLibraryItemRequest} applyLibraryRequest New library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applyToStoreFront: function (applyLibraryRequest, options) {
            return exports.StorefrontApiFp(configuration).applyToStoreFront(applyLibraryRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Archive email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailList: function (storefrontOid, emailListUuid, options) {
            return exports.StorefrontApiFp(configuration).archiveEmailList(storefrontOid, emailListUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Archive email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            return exports.StorefrontApiFp(configuration).archiveEmailSegment(storefrontOid, emailSegmentUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Back populate email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {EmailFlowBackPopulateRequest} backPopulateRequest The request to back populate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backPopulateEmailFlow: function (storefrontOid, emailFlowUuid, backPopulateRequest, options) {
            return exports.StorefrontApiFp(configuration).backPopulateEmailFlow(storefrontOid, emailFlowUuid, backPopulateRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Check download of email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} emailSegmentRebuildUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkDownloadEmailSegment: function (storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options) {
            return exports.StorefrontApiFp(configuration).checkDownloadEmailSegment(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Clone email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {number} [targetStorefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailCampaign: function (storefrontOid, emailCampaignUuid, targetStorefrontOid, options) {
            return exports.StorefrontApiFp(configuration).cloneEmailCampaign(storefrontOid, emailCampaignUuid, targetStorefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Clone email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {number} [targetStorefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneEmailFlow: function (storefrontOid, emailFlowUuid, targetStorefrontOid, options) {
            return exports.StorefrontApiFp(configuration).cloneEmailFlow(storefrontOid, emailFlowUuid, targetStorefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailSendingDomain: function (domain, options) {
            return exports.StorefrontApiFp(configuration).createEmailSendingDomain(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete communication sequence stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailCommseqStat: function (storefrontOid, commseqUuid, options) {
            return exports.StorefrontApiFp(configuration).deleteEmailCommseqStat(storefrontOid, commseqUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailEmail: function (storefrontOid, commseqEmailUuid, options) {
            return exports.StorefrontApiFp(configuration).deleteEmailEmail(storefrontOid, commseqEmailUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email list customer
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailListCustomer: function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
            return exports.StorefrontApiFp(configuration).deleteEmailListCustomer(storefrontOid, emailListUuid, emailCustomerUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailPostcard: function (storefrontOid, commseqPostcardUuid, options) {
            return exports.StorefrontApiFp(configuration).deleteEmailPostcard(storefrontOid, commseqPostcardUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary delete email campaign
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailSendingDomain: function (domain, options) {
            return exports.StorefrontApiFp(configuration).deleteEmailSendingDomain(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete experiment
         * @param {number} storefrontOid
         * @param {number} storefrontExperimentOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExperiment: function (storefrontOid, storefrontExperimentOid, options) {
            return exports.StorefrontApiFp(configuration).deleteExperiment(storefrontOid, storefrontExperimentOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete library item
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLibraryItem: function (libraryItemOid, options) {
            return exports.StorefrontApiFp(configuration).deleteLibraryItem(libraryItemOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Duplicate library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateLibraryItem: function (libraryItemOid, options) {
            return exports.StorefrontApiFp(configuration).duplicateLibraryItem(libraryItemOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Obtain lat/long for an address
         * @param {number} storefrontOid
         * @param {GeocodeRequest} geocodeRequest geocode request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodeAddress: function (storefrontOid, geocodeRequest, options) {
            return exports.StorefrontApiFp(configuration).geocodeAddress(storefrontOid, geocodeRequest, options)(fetch, basePath);
        },
        /**
         * Obtain a list of all the countries
         * @summary Get countries
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getCountries(storefrontOid, options)(fetch, basePath);
        },
        /**
         * Fetches a temporary authentication token for the editor
         * @summary Gets editor token
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEditorToken: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEditorToken(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication base templates
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailBaseTemplates: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailBaseTemplates(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaign: function (storefrontOid, emailCampaignUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCampaign(storefrontOid, emailCampaignUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaign screenshots
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignScreenshots: function (storefrontOid, emailCampaignUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCampaignScreenshots(storefrontOid, emailCampaignUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaigns
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaigns: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCampaigns(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email campaigns with stats
         * @param {number} storefrontOid
         * @param {string} statDays
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignsWithStats: function (storefrontOid, statDays, options) {
            return exports.StorefrontApiFp(configuration).getEmailCampaignsWithStats(storefrontOid, statDays, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email commseq
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseq: function (storefrontOid, commseqUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseq(storefrontOid, commseqUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence emails stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStatSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqEmailStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseqEmailStats(storefrontOid, commseqUuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence postcard stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqPostcardStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseqPostcardStats(storefrontOid, commseqUuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get communication sequence stats overall
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStatOverall: function (storefrontOid, commseqUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseqStatOverall(storefrontOid, commseqUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence step stats
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStepStatRequest} statsRequest StatsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepStats: function (storefrontOid, commseqUuid, statsRequest, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseqStepStats(storefrontOid, commseqUuid, statsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email communication sequence customers waiting at each requested step
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqStepWaiting: function (storefrontOid, commseqUuid, waitingRequest, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseqStepWaiting(storefrontOid, commseqUuid, waitingRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email commseqs
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCommseqs: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCommseqs(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get customers editor URL
         * @param {number} storefrontOid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomerEditorUrl: function (storefrontOid, emailCustomerUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailCustomerEditorUrl(storefrontOid, emailCustomerUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email customers
         * @param {number} storefrontOid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {string} [searchEmailPrefix]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCustomers: function (storefrontOid, pageNumber, pageSize, searchEmailPrefix, options) {
            return exports.StorefrontApiFp(configuration).getEmailCustomers(storefrontOid, pageNumber, pageSize, searchEmailPrefix, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email dashboard activity
         * @param {number} storefrontOid
         * @param {number} [lastRecords]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardActivity: function (storefrontOid, lastRecords, options) {
            return exports.StorefrontApiFp(configuration).getEmailDashboardActivity(storefrontOid, lastRecords, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get dashboard stats
         * @param {number} storefrontOid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailDashboardStats: function (storefrontOid, days, options) {
            return exports.StorefrontApiFp(configuration).getEmailDashboardStats(storefrontOid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmail: function (storefrontOid, commseqEmailUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailEmail(storefrontOid, commseqEmailUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email email clicks
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {string} commseqEmailUuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailClicks: function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
            return exports.StorefrontApiFp(configuration).getEmailEmailClicks(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email order customer editor url
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailCustomerEditorUrl: function (storefrontOid, commseqEmailUuid, orderId, options) {
            return exports.StorefrontApiFp(configuration).getEmailEmailCustomerEditorUrl(storefrontOid, commseqEmailUuid, orderId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email email orders
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {string} commseqEmailUuid
         * @param {number} [days]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailOrders: function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
            return exports.StorefrontApiFp(configuration).getEmailEmailOrders(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email emails
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmails: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailEmails(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email emails multiple
         * @param {number} storefrontOid
         * @param {EmailCommseqEmailsRequest} emailCommseqEmailsRequest Request of email uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailEmailsMultiple: function (storefrontOid, emailCommseqEmailsRequest, options) {
            return exports.StorefrontApiFp(configuration).getEmailEmailsMultiple(storefrontOid, emailCommseqEmailsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlow: function (storefrontOid, emailFlowUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailFlow(storefrontOid, emailFlowUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flow screenshots
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlowScreenshots: function (storefrontOid, emailFlowUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailFlowScreenshots(storefrontOid, emailFlowUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email flows
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailFlows: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailFlows(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email globalsettings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailGlobalSettings: function (options) {
            return exports.StorefrontApiFp(configuration).getEmailGlobalSettings(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailList: function (storefrontOid, emailListUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailList(storefrontOid, emailListUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email list customer editor url
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomerEditorUrl: function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailListCustomerEditorUrl(storefrontOid, emailListUuid, emailCustomerUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email list customers
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailListCustomers: function (storefrontOid, emailListUuid, pageNumber, pageSize, options) {
            return exports.StorefrontApiFp(configuration).getEmailListCustomers(storefrontOid, emailListUuid, pageNumber, pageSize, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email lists
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailLists: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailLists(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email performance
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPerformance: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailPerformance(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email plan
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPlan: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailPlan(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcard: function (storefrontOid, commseqPostcardUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailPostcard(storefrontOid, commseqPostcardUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email postcards
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcards: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailPostcards(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email postcards multiple
         * @param {number} storefrontOid
         * @param {EmailCommseqPostcardsRequest} emailCommseqPostcardsRequest Request of postcard uuids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailPostcardsMultiple: function (storefrontOid, emailCommseqPostcardsRequest, options) {
            return exports.StorefrontApiFp(configuration).getEmailPostcardsMultiple(storefrontOid, emailCommseqPostcardsRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailSegment(storefrontOid, emailSegmentUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segment customers editor URL
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} emailCustomerUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomerEditorUrl: function (storefrontOid, emailSegmentUuid, emailCustomerUuid, options) {
            return exports.StorefrontApiFp(configuration).getEmailSegmentCustomerEditorUrl(storefrontOid, emailSegmentUuid, emailCustomerUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segment customers
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {number} [pageNumber]
         * @param {number} [pageSize]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegmentCustomers: function (storefrontOid, emailSegmentUuid, pageNumber, pageSize, options) {
            return exports.StorefrontApiFp(configuration).getEmailSegmentCustomers(storefrontOid, emailSegmentUuid, pageNumber, pageSize, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email segments
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSegments: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailSegments(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sending domain
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomain: function (domain, options) {
            return exports.StorefrontApiFp(configuration).getEmailSendingDomain(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sending domain status
         * @param {string} domain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomainStatus: function (domain, options) {
            return exports.StorefrontApiFp(configuration).getEmailSendingDomainStatus(domain, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email sending domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSendingDomains: function (options) {
            return exports.StorefrontApiFp(configuration).getEmailSendingDomains(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email settings
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSettings: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailSettings(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email template
         * @param {number} storefrontOid
         * @param {number} emailTemplateOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: function (storefrontOid, emailTemplateOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailTemplate(storefrontOid, emailTemplateOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get email templates
         * @param {number} storefrontOid
         * @param {string} [triggerType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplates: function (storefrontOid, triggerType, options) {
            return exports.StorefrontApiFp(configuration).getEmailTemplates(storefrontOid, triggerType, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get a list of third party email providers
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailThirdPartyProviders: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getEmailThirdPartyProviders(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get experiments
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExperiments: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getExperiments(storefrontOid, options)(fetch, basePath);
        },
        /**
         * Obtain a list of property names for a given property type
         * @summary Get histogram property names
         * @param {number} storefrontOid
         * @param {string} [propertyType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyNames: function (storefrontOid, propertyType, options) {
            return exports.StorefrontApiFp(configuration).getHistogramPropertyNames(storefrontOid, propertyType, options)(fetch, basePath);
        },
        /**
         * Obtain a list of property values for a given property name and type
         * @summary Get histogram property values
         * @param {number} storefrontOid
         * @param {string} [propertyName]
         * @param {string} [propertyType]
         * @param {number} [limit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistogramPropertyValues: function (storefrontOid, propertyName, propertyType, limit, options) {
            return exports.StorefrontApiFp(configuration).getHistogramPropertyValues(storefrontOid, propertyName, propertyType, limit, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get library values used to populate drop down boxes for filtering.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryFilterValues: function (options) {
            return exports.StorefrontApiFp(configuration).getLibraryFilterValues(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLibraryItem: function (libraryItemOid, options) {
            return exports.StorefrontApiFp(configuration).getLibraryItem(libraryItemOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get thumbnail parameters
         * @param {ThumbnailParametersRequest} thumbnailParameters Thumbnail Parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThumbnailParameters: function (thumbnailParameters, options) {
            return exports.StorefrontApiFp(configuration).getThumbnailParameters(thumbnailParameters, options)(fetch, basePath);
        },
        /**
         * Fetch a transactional email
         * @summary Gets a transaction email object
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmail: function (storefrontOid, emailId, options) {
            return exports.StorefrontApiFp(configuration).getTransactionEmail(storefrontOid, emailId, options)(fetch, basePath);
        },
        /**
         * Obtain a list of all transactional emails and return back just their names
         * @summary Gets a list of transaction email names
         * @param {number} storefrontOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailList: function (storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).getTransactionEmailList(storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get transactional email screenshots
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionEmailScreenshots: function (storefrontOid, emailId, options) {
            return exports.StorefrontApiFp(configuration).getTransactionEmailScreenshots(storefrontOid, emailId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Globally unsubscribe a customer
         * @param {number} storefrontOid
         * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalUnsubscribe: function (storefrontOid, unsubscribe, options) {
            return exports.StorefrontApiFp(configuration).globalUnsubscribe(storefrontOid, unsubscribe, options)(fetch, basePath);
        },
        /**
         *
         * @summary Import a third party provider list
         * @param {number} storefrontOid
         * @param {EmailThirdPartyListImportRequest} importRequest lists to import
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importEmailThirdPartyProviderList: function (storefrontOid, importRequest, options) {
            return exports.StorefrontApiFp(configuration).importEmailThirdPartyProviderList(storefrontOid, importRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email campaign
         * @param {number} storefrontOid
         * @param {EmailCampaign} emailCampaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCampaign: function (storefrontOid, emailCampaign, options) {
            return exports.StorefrontApiFp(configuration).insertEmailCampaign(storefrontOid, emailCampaign, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email commseq
         * @param {number} storefrontOid
         * @param {EmailCommseq} emailCommseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailCommseq: function (storefrontOid, emailCommseq, options) {
            return exports.StorefrontApiFp(configuration).insertEmailCommseq(storefrontOid, emailCommseq, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email email
         * @param {number} storefrontOid
         * @param {EmailCommseqEmail} emailCommseqEmail Email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailEmail: function (storefrontOid, emailCommseqEmail, options) {
            return exports.StorefrontApiFp(configuration).insertEmailEmail(storefrontOid, emailCommseqEmail, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email flow
         * @param {number} storefrontOid
         * @param {EmailFlow} emailFlow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailFlow: function (storefrontOid, emailFlow, options) {
            return exports.StorefrontApiFp(configuration).insertEmailFlow(storefrontOid, emailFlow, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email list
         * @param {number} storefrontOid
         * @param {EmailList} emailList Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailList: function (storefrontOid, emailList, options) {
            return exports.StorefrontApiFp(configuration).insertEmailList(storefrontOid, emailList, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email postcard
         * @param {number} storefrontOid
         * @param {EmailCommseqPostcard} emailCommseqPostcard Email postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailPostcard: function (storefrontOid, emailCommseqPostcard, options) {
            return exports.StorefrontApiFp(configuration).insertEmailPostcard(storefrontOid, emailCommseqPostcard, options)(fetch, basePath);
        },
        /**
         *
         * @summary Insert email segment
         * @param {number} storefrontOid
         * @param {EmailSegment} emailSegment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertEmailSegment: function (storefrontOid, emailSegment, options) {
            return exports.StorefrontApiFp(configuration).insertEmailSegment(storefrontOid, emailSegment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Prepare download of email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prepareDownloadEmailSegment: function (storefrontOid, emailSegmentUuid, options) {
            return exports.StorefrontApiFp(configuration).prepareDownloadEmailSegment(storefrontOid, emailSegmentUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Publish library item.
         * @param {number} libraryItemOid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishLibraryItem: function (libraryItemOid, options) {
            return exports.StorefrontApiFp(configuration).publishLibraryItem(libraryItemOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Purchase public library item, which creates a copy of the item in your personal code library
         * @param {number} libraryItemOid
         * @param {number} [storefrontOid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLibraryItem: function (libraryItemOid, storefrontOid, options) {
            return exports.StorefrontApiFp(configuration).purchaseLibraryItem(libraryItemOid, storefrontOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Release email communication sequence customers waiting at the specified step
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {string} commseqStepUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        releaseEmailCommseqStepWaiting: function (storefrontOid, commseqUuid, commseqStepUuid, options) {
            return exports.StorefrontApiFp(configuration).releaseEmailCommseqStepWaiting(storefrontOid, commseqUuid, commseqStepUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Request a review of an email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailReviewRequest Email commseq email review request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        review: function (storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options) {
            return exports.StorefrontApiFp(configuration).review(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Searches for all matching values
         * @param {string} [category]
         * @param {string} [matches]
         * @param {string} [storefrontOid]
         * @param {number} [maxHits]
         * @param {string} [subcategory]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: function (category, matches, storefrontOid, maxHits, subcategory, options) {
            return exports.StorefrontApiFp(configuration).search(category, matches, storefrontOid, maxHits, subcategory, options)(fetch, basePath);
        },
        /**
         *
         * @summary Searches for all matching values (using POST)
         * @param {LookupRequest} lookupRequest LookupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search2: function (lookupRequest, options) {
            return exports.StorefrontApiFp(configuration).search2(lookupRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Search email list customers
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailListCustomers: function (storefrontOid, emailListUuid, startsWith, options) {
            return exports.StorefrontApiFp(configuration).searchEmailListCustomers(storefrontOid, emailListUuid, startsWith, options)(fetch, basePath);
        },
        /**
         *
         * @summary Search email segment customers
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {string} [startsWith]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchEmailSegmentCustomers: function (storefrontOid, emailSegmentUuid, startsWith, options) {
            return exports.StorefrontApiFp(configuration).searchEmailSegmentCustomers(storefrontOid, emailSegmentUuid, startsWith, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLibraryItems: function (itemQuery, limit, offset, sort, options) {
            return exports.StorefrontApiFp(configuration).searchLibraryItems(itemQuery, limit, offset, sort, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPublishedItems: function (itemQuery, limit, offset, sort, options) {
            return exports.StorefrontApiFp(configuration).searchPublishedItems(itemQuery, limit, offset, sort, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items needing review or rejected
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchReviewItems: function (itemQuery, limit, offset, sort, options) {
            return exports.StorefrontApiFp(configuration).searchReviewItems(itemQuery, limit, offset, sort, options)(fetch, basePath);
        },
        /**
         * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
         * @summary Retrieve library items
         * @param {LibraryItemQuery} itemQuery Item query
         * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSharedItems: function (itemQuery, limit, offset, sort, options) {
            return exports.StorefrontApiFp(configuration).searchSharedItems(itemQuery, limit, offset, sort, options)(fetch, basePath);
        },
        /**
         *
         * @summary Send email test
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailTestRequest Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailTest: function (storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options) {
            return exports.StorefrontApiFp(configuration).sendEmailTest(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Send postcard test
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {EmailCommseqPostcardSendTestRequest} emailCommseqPostcardTestRequest Email commseq email test request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPostcardTest: function (storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options) {
            return exports.StorefrontApiFp(configuration).sendPostcardTest(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options)(fetch, basePath);
        },
        /**
         *
         * @summary Start email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startEmailCampaign: function (storefrontOid, emailCampaignUuid, options) {
            return exports.StorefrontApiFp(configuration).startEmailCampaign(storefrontOid, emailCampaignUuid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Subscribe customers to email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {Array<EmailCustomer>} customers Customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeToEmailList: function (storefrontOid, emailListUuid, customers, options) {
            return exports.StorefrontApiFp(configuration).subscribeToEmailList(storefrontOid, emailListUuid, customers, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email campaign
         * @param {number} storefrontOid
         * @param {string} emailCampaignUuid
         * @param {EmailCampaign} emailCampaign Email campaign
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCampaign: function (storefrontOid, emailCampaignUuid, emailCampaign, options) {
            return exports.StorefrontApiFp(configuration).updateEmailCampaign(storefrontOid, emailCampaignUuid, emailCampaign, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email commseq
         * @param {number} storefrontOid
         * @param {string} commseqUuid
         * @param {EmailCommseq} emailCommseq Email commseq
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCommseq: function (storefrontOid, commseqUuid, emailCommseq, options) {
            return exports.StorefrontApiFp(configuration).updateEmailCommseq(storefrontOid, commseqUuid, emailCommseq, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email customer
         * @param {number} storefrontOid
         * @param {string} emailCustomerUuid
         * @param {EmailCustomer} emailCustomer Email customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailCustomer: function (storefrontOid, emailCustomerUuid, emailCustomer, options) {
            return exports.StorefrontApiFp(configuration).updateEmailCustomer(storefrontOid, emailCustomerUuid, emailCustomer, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email email
         * @param {number} storefrontOid
         * @param {string} commseqEmailUuid
         * @param {EmailCommseqEmail} emailCommseqEmail Email commseq email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailEmail: function (storefrontOid, commseqEmailUuid, emailCommseqEmail, options) {
            return exports.StorefrontApiFp(configuration).updateEmailEmail(storefrontOid, commseqEmailUuid, emailCommseqEmail, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email flow
         * @param {number} storefrontOid
         * @param {string} emailFlowUuid
         * @param {EmailFlow} emailFlow Email flow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailFlow: function (storefrontOid, emailFlowUuid, emailFlow, options) {
            return exports.StorefrontApiFp(configuration).updateEmailFlow(storefrontOid, emailFlowUuid, emailFlow, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email global settings
         * @param {EmailGlobalSettings} globalSettings global settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailGlobalSettings: function (globalSettings, options) {
            return exports.StorefrontApiFp(configuration).updateEmailGlobalSettings(globalSettings, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email list
         * @param {number} storefrontOid
         * @param {string} emailListUuid
         * @param {EmailList} emailList Email list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailList: function (storefrontOid, emailListUuid, emailList, options) {
            return exports.StorefrontApiFp(configuration).updateEmailList(storefrontOid, emailListUuid, emailList, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email plan
         * @param {number} storefrontOid
         * @param {EmailPlan} settings plan request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPlan: function (storefrontOid, settings, options) {
            return exports.StorefrontApiFp(configuration).updateEmailPlan(storefrontOid, settings, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email postcard
         * @param {number} storefrontOid
         * @param {string} commseqPostcardUuid
         * @param {EmailCommseqPostcard} emailCommseqPostcard Email commseq postcard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailPostcard: function (storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options) {
            return exports.StorefrontApiFp(configuration).updateEmailPostcard(storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email segment
         * @param {number} storefrontOid
         * @param {string} emailSegmentUuid
         * @param {EmailSegment} emailSegment Email segment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSegment: function (storefrontOid, emailSegmentUuid, emailSegment, options) {
            return exports.StorefrontApiFp(configuration).updateEmailSegment(storefrontOid, emailSegmentUuid, emailSegment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update email settings
         * @param {number} storefrontOid
         * @param {EmailSettings} settings settings request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailSettings: function (storefrontOid, settings, options) {
            return exports.StorefrontApiFp(configuration).updateEmailSettings(storefrontOid, settings, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update experiment
         * @param {number} storefrontOid
         * @param {number} storefrontExperimentOid
         * @param {Experiment} experiment Experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExperiment: function (storefrontOid, storefrontExperimentOid, experiment, options) {
            return exports.StorefrontApiFp(configuration).updateExperiment(storefrontOid, storefrontExperimentOid, experiment, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update library item. Note that only certain fields may be updated via this method.
         * @param {number} libraryItemOid
         * @param {LibraryItem} libraryItem Library item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLibraryItem: function (libraryItemOid, libraryItem, options) {
            return exports.StorefrontApiFp(configuration).updateLibraryItem(libraryItemOid, libraryItem, options)(fetch, basePath);
        },
        /**
         * Updates a transactional email
         * @summary Updates a transaction email object
         * @param {number} storefrontOid
         * @param {string} emailId
         * @param {TransactionEmail} transactionEmail TransactionEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTransactionEmail: function (storefrontOid, emailId, transactionEmail, options) {
            return exports.StorefrontApiFp(configuration).updateTransactionEmail(storefrontOid, emailId, transactionEmail, options)(fetch, basePath);
        },
    };
};
/**
 * StorefrontApi - object-oriented interface
 * @export
 * @class StorefrontApi
 * @extends {BaseAPI}
 */
var StorefrontApi = /** @class */ (function (_super) {
    __extends(StorefrontApi, _super);
    function StorefrontApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add to library
     * @param {AddLibraryItemRequest} addLibraryRequest New library item request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.addToLibrary = function (addLibraryRequest, options) {
        return exports.StorefrontApiFp(this.configuration).addToLibrary(addLibraryRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Apply library item to storefront.
     * @param {ApplyLibraryItemRequest} applyLibraryRequest New library item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.applyToStoreFront = function (applyLibraryRequest, options) {
        return exports.StorefrontApiFp(this.configuration).applyToStoreFront(applyLibraryRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Archive email list
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.archiveEmailList = function (storefrontOid, emailListUuid, options) {
        return exports.StorefrontApiFp(this.configuration).archiveEmailList(storefrontOid, emailListUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Archive email segment
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.archiveEmailSegment = function (storefrontOid, emailSegmentUuid, options) {
        return exports.StorefrontApiFp(this.configuration).archiveEmailSegment(storefrontOid, emailSegmentUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Back populate email flow
     * @param {number} storefrontOid
     * @param {string} emailFlowUuid
     * @param {EmailFlowBackPopulateRequest} backPopulateRequest The request to back populate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.backPopulateEmailFlow = function (storefrontOid, emailFlowUuid, backPopulateRequest, options) {
        return exports.StorefrontApiFp(this.configuration).backPopulateEmailFlow(storefrontOid, emailFlowUuid, backPopulateRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Check download of email segment
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {string} emailSegmentRebuildUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.checkDownloadEmailSegment = function (storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options) {
        return exports.StorefrontApiFp(this.configuration).checkDownloadEmailSegment(storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Clone email campaign
     * @param {number} storefrontOid
     * @param {string} emailCampaignUuid
     * @param {number} [targetStorefrontOid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.cloneEmailCampaign = function (storefrontOid, emailCampaignUuid, targetStorefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).cloneEmailCampaign(storefrontOid, emailCampaignUuid, targetStorefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Clone email flow
     * @param {number} storefrontOid
     * @param {string} emailFlowUuid
     * @param {number} [targetStorefrontOid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.cloneEmailFlow = function (storefrontOid, emailFlowUuid, targetStorefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).cloneEmailFlow(storefrontOid, emailFlowUuid, targetStorefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Create email campaign
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.createEmailSendingDomain = function (domain, options) {
        return exports.StorefrontApiFp(this.configuration).createEmailSendingDomain(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete communication sequence stats
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailCommseqStat = function (storefrontOid, commseqUuid, options) {
        return exports.StorefrontApiFp(this.configuration).deleteEmailCommseqStat(storefrontOid, commseqUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email email
     * @param {number} storefrontOid
     * @param {string} commseqEmailUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailEmail = function (storefrontOid, commseqEmailUuid, options) {
        return exports.StorefrontApiFp(this.configuration).deleteEmailEmail(storefrontOid, commseqEmailUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email list customer
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {string} emailCustomerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailListCustomer = function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
        return exports.StorefrontApiFp(this.configuration).deleteEmailListCustomer(storefrontOid, emailListUuid, emailCustomerUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete email postcard
     * @param {number} storefrontOid
     * @param {string} commseqPostcardUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailPostcard = function (storefrontOid, commseqPostcardUuid, options) {
        return exports.StorefrontApiFp(this.configuration).deleteEmailPostcard(storefrontOid, commseqPostcardUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary delete email campaign
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteEmailSendingDomain = function (domain, options) {
        return exports.StorefrontApiFp(this.configuration).deleteEmailSendingDomain(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete experiment
     * @param {number} storefrontOid
     * @param {number} storefrontExperimentOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteExperiment = function (storefrontOid, storefrontExperimentOid, options) {
        return exports.StorefrontApiFp(this.configuration).deleteExperiment(storefrontOid, storefrontExperimentOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Delete library item
     * @param {number} libraryItemOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.deleteLibraryItem = function (libraryItemOid, options) {
        return exports.StorefrontApiFp(this.configuration).deleteLibraryItem(libraryItemOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Duplicate library item.
     * @param {number} libraryItemOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.duplicateLibraryItem = function (libraryItemOid, options) {
        return exports.StorefrontApiFp(this.configuration).duplicateLibraryItem(libraryItemOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Obtain lat/long for an address
     * @param {number} storefrontOid
     * @param {GeocodeRequest} geocodeRequest geocode request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.geocodeAddress = function (storefrontOid, geocodeRequest, options) {
        return exports.StorefrontApiFp(this.configuration).geocodeAddress(storefrontOid, geocodeRequest, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of all the countries
     * @summary Get countries
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getCountries = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getCountries(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     * Fetches a temporary authentication token for the editor
     * @summary Gets editor token
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEditorToken = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEditorToken(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication base templates
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailBaseTemplates = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailBaseTemplates(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign
     * @param {number} storefrontOid
     * @param {string} emailCampaignUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaign = function (storefrontOid, emailCampaignUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCampaign(storefrontOid, emailCampaignUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaign screenshots
     * @param {number} storefrontOid
     * @param {string} emailCampaignUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaignScreenshots = function (storefrontOid, emailCampaignUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCampaignScreenshots(storefrontOid, emailCampaignUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaigns
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaigns = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCampaigns(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email campaigns with stats
     * @param {number} storefrontOid
     * @param {string} statDays
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCampaignsWithStats = function (storefrontOid, statDays, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCampaignsWithStats(storefrontOid, statDays, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email commseq
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseq = function (storefrontOid, commseqUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseq(storefrontOid, commseqUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence emails stats
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {EmailStatSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqEmailStats = function (storefrontOid, commseqUuid, statsRequest, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseqEmailStats(storefrontOid, commseqUuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence postcard stats
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqPostcardStats = function (storefrontOid, commseqUuid, statsRequest, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseqPostcardStats(storefrontOid, commseqUuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get communication sequence stats overall
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqStatOverall = function (storefrontOid, commseqUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseqStatOverall(storefrontOid, commseqUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence step stats
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {EmailStepStatRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqStepStats = function (storefrontOid, commseqUuid, statsRequest, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseqStepStats(storefrontOid, commseqUuid, statsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email communication sequence customers waiting at each requested step
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqStepWaiting = function (storefrontOid, commseqUuid, waitingRequest, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseqStepWaiting(storefrontOid, commseqUuid, waitingRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email commseqs
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCommseqs = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCommseqs(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get customers editor URL
     * @param {number} storefrontOid
     * @param {string} emailCustomerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCustomerEditorUrl = function (storefrontOid, emailCustomerUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCustomerEditorUrl(storefrontOid, emailCustomerUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email customers
     * @param {number} storefrontOid
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {string} [searchEmailPrefix]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailCustomers = function (storefrontOid, pageNumber, pageSize, searchEmailPrefix, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailCustomers(storefrontOid, pageNumber, pageSize, searchEmailPrefix, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email dashboard activity
     * @param {number} storefrontOid
     * @param {number} [lastRecords]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailDashboardActivity = function (storefrontOid, lastRecords, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailDashboardActivity(storefrontOid, lastRecords, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get dashboard stats
     * @param {number} storefrontOid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailDashboardStats = function (storefrontOid, days, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailDashboardStats(storefrontOid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email email
     * @param {number} storefrontOid
     * @param {string} commseqEmailUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmail = function (storefrontOid, commseqEmailUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailEmail(storefrontOid, commseqEmailUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email email clicks
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {string} commseqStepUuid
     * @param {string} commseqEmailUuid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailClicks = function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailEmailClicks(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email order customer editor url
     * @param {number} storefrontOid
     * @param {string} commseqEmailUuid
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailCustomerEditorUrl = function (storefrontOid, commseqEmailUuid, orderId, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailEmailCustomerEditorUrl(storefrontOid, commseqEmailUuid, orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email email orders
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {string} commseqStepUuid
     * @param {string} commseqEmailUuid
     * @param {number} [days]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailOrders = function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailEmailOrders(storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email emails
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmails = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailEmails(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email emails multiple
     * @param {number} storefrontOid
     * @param {EmailCommseqEmailsRequest} emailCommseqEmailsRequest Request of email uuids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailEmailsMultiple = function (storefrontOid, emailCommseqEmailsRequest, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailEmailsMultiple(storefrontOid, emailCommseqEmailsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flow
     * @param {number} storefrontOid
     * @param {string} emailFlowUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlow = function (storefrontOid, emailFlowUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailFlow(storefrontOid, emailFlowUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flow screenshots
     * @param {number} storefrontOid
     * @param {string} emailFlowUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlowScreenshots = function (storefrontOid, emailFlowUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailFlowScreenshots(storefrontOid, emailFlowUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email flows
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailFlows = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailFlows(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email globalsettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailGlobalSettings = function (options) {
        return exports.StorefrontApiFp(this.configuration).getEmailGlobalSettings(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email list
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailList = function (storefrontOid, emailListUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailList(storefrontOid, emailListUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email list customer editor url
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {string} emailCustomerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailListCustomerEditorUrl = function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailListCustomerEditorUrl(storefrontOid, emailListUuid, emailCustomerUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email list customers
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailListCustomers = function (storefrontOid, emailListUuid, pageNumber, pageSize, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailListCustomers(storefrontOid, emailListUuid, pageNumber, pageSize, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email lists
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailLists = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailLists(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email performance
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPerformance = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailPerformance(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email plan
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPlan = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailPlan(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email postcard
     * @param {number} storefrontOid
     * @param {string} commseqPostcardUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPostcard = function (storefrontOid, commseqPostcardUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailPostcard(storefrontOid, commseqPostcardUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email postcards
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPostcards = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailPostcards(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email postcards multiple
     * @param {number} storefrontOid
     * @param {EmailCommseqPostcardsRequest} emailCommseqPostcardsRequest Request of postcard uuids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailPostcardsMultiple = function (storefrontOid, emailCommseqPostcardsRequest, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailPostcardsMultiple(storefrontOid, emailCommseqPostcardsRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segment
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegment = function (storefrontOid, emailSegmentUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSegment(storefrontOid, emailSegmentUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segment customers editor URL
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {string} emailCustomerUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegmentCustomerEditorUrl = function (storefrontOid, emailSegmentUuid, emailCustomerUuid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSegmentCustomerEditorUrl(storefrontOid, emailSegmentUuid, emailCustomerUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segment customers
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {number} [pageNumber]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegmentCustomers = function (storefrontOid, emailSegmentUuid, pageNumber, pageSize, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSegmentCustomers(storefrontOid, emailSegmentUuid, pageNumber, pageSize, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email segments
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSegments = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSegments(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sending domain
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSendingDomain = function (domain, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSendingDomain(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sending domain status
     * @param {string} domain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSendingDomainStatus = function (domain, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSendingDomainStatus(domain, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email sending domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSendingDomains = function (options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSendingDomains(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email settings
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailSettings = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailSettings(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email template
     * @param {number} storefrontOid
     * @param {number} emailTemplateOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailTemplate = function (storefrontOid, emailTemplateOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailTemplate(storefrontOid, emailTemplateOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get email templates
     * @param {number} storefrontOid
     * @param {string} [triggerType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailTemplates = function (storefrontOid, triggerType, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailTemplates(storefrontOid, triggerType, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get a list of third party email providers
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getEmailThirdPartyProviders = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getEmailThirdPartyProviders(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get experiments
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getExperiments = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getExperiments(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of property names for a given property type
     * @summary Get histogram property names
     * @param {number} storefrontOid
     * @param {string} [propertyType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getHistogramPropertyNames = function (storefrontOid, propertyType, options) {
        return exports.StorefrontApiFp(this.configuration).getHistogramPropertyNames(storefrontOid, propertyType, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of property values for a given property name and type
     * @summary Get histogram property values
     * @param {number} storefrontOid
     * @param {string} [propertyName]
     * @param {string} [propertyType]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getHistogramPropertyValues = function (storefrontOid, propertyName, propertyType, limit, options) {
        return exports.StorefrontApiFp(this.configuration).getHistogramPropertyValues(storefrontOid, propertyName, propertyType, limit, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get library values used to populate drop down boxes for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getLibraryFilterValues = function (options) {
        return exports.StorefrontApiFp(this.configuration).getLibraryFilterValues(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get library item.
     * @param {number} libraryItemOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getLibraryItem = function (libraryItemOid, options) {
        return exports.StorefrontApiFp(this.configuration).getLibraryItem(libraryItemOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get thumbnail parameters
     * @param {ThumbnailParametersRequest} thumbnailParameters Thumbnail Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getThumbnailParameters = function (thumbnailParameters, options) {
        return exports.StorefrontApiFp(this.configuration).getThumbnailParameters(thumbnailParameters, options)(this.fetch, this.basePath);
    };
    /**
     * Fetch a transactional email
     * @summary Gets a transaction email object
     * @param {number} storefrontOid
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTransactionEmail = function (storefrontOid, emailId, options) {
        return exports.StorefrontApiFp(this.configuration).getTransactionEmail(storefrontOid, emailId, options)(this.fetch, this.basePath);
    };
    /**
     * Obtain a list of all transactional emails and return back just their names
     * @summary Gets a list of transaction email names
     * @param {number} storefrontOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTransactionEmailList = function (storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).getTransactionEmailList(storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get transactional email screenshots
     * @param {number} storefrontOid
     * @param {string} emailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.getTransactionEmailScreenshots = function (storefrontOid, emailId, options) {
        return exports.StorefrontApiFp(this.configuration).getTransactionEmailScreenshots(storefrontOid, emailId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Globally unsubscribe a customer
     * @param {number} storefrontOid
     * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.globalUnsubscribe = function (storefrontOid, unsubscribe, options) {
        return exports.StorefrontApiFp(this.configuration).globalUnsubscribe(storefrontOid, unsubscribe, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Import a third party provider list
     * @param {number} storefrontOid
     * @param {EmailThirdPartyListImportRequest} importRequest lists to import
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.importEmailThirdPartyProviderList = function (storefrontOid, importRequest, options) {
        return exports.StorefrontApiFp(this.configuration).importEmailThirdPartyProviderList(storefrontOid, importRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email campaign
     * @param {number} storefrontOid
     * @param {EmailCampaign} emailCampaign Email campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailCampaign = function (storefrontOid, emailCampaign, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailCampaign(storefrontOid, emailCampaign, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email commseq
     * @param {number} storefrontOid
     * @param {EmailCommseq} emailCommseq Email commseq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailCommseq = function (storefrontOid, emailCommseq, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailCommseq(storefrontOid, emailCommseq, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email email
     * @param {number} storefrontOid
     * @param {EmailCommseqEmail} emailCommseqEmail Email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailEmail = function (storefrontOid, emailCommseqEmail, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailEmail(storefrontOid, emailCommseqEmail, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email flow
     * @param {number} storefrontOid
     * @param {EmailFlow} emailFlow Email flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailFlow = function (storefrontOid, emailFlow, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailFlow(storefrontOid, emailFlow, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email list
     * @param {number} storefrontOid
     * @param {EmailList} emailList Email list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailList = function (storefrontOid, emailList, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailList(storefrontOid, emailList, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email postcard
     * @param {number} storefrontOid
     * @param {EmailCommseqPostcard} emailCommseqPostcard Email postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailPostcard = function (storefrontOid, emailCommseqPostcard, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailPostcard(storefrontOid, emailCommseqPostcard, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Insert email segment
     * @param {number} storefrontOid
     * @param {EmailSegment} emailSegment Email segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.insertEmailSegment = function (storefrontOid, emailSegment, options) {
        return exports.StorefrontApiFp(this.configuration).insertEmailSegment(storefrontOid, emailSegment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Prepare download of email segment
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.prepareDownloadEmailSegment = function (storefrontOid, emailSegmentUuid, options) {
        return exports.StorefrontApiFp(this.configuration).prepareDownloadEmailSegment(storefrontOid, emailSegmentUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Publish library item.
     * @param {number} libraryItemOid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.publishLibraryItem = function (libraryItemOid, options) {
        return exports.StorefrontApiFp(this.configuration).publishLibraryItem(libraryItemOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Purchase public library item, which creates a copy of the item in your personal code library
     * @param {number} libraryItemOid
     * @param {number} [storefrontOid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.purchaseLibraryItem = function (libraryItemOid, storefrontOid, options) {
        return exports.StorefrontApiFp(this.configuration).purchaseLibraryItem(libraryItemOid, storefrontOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Release email communication sequence customers waiting at the specified step
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {string} commseqStepUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.releaseEmailCommseqStepWaiting = function (storefrontOid, commseqUuid, commseqStepUuid, options) {
        return exports.StorefrontApiFp(this.configuration).releaseEmailCommseqStepWaiting(storefrontOid, commseqUuid, commseqStepUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Request a review of an email
     * @param {number} storefrontOid
     * @param {string} commseqEmailUuid
     * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailReviewRequest Email commseq email review request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.review = function (storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options) {
        return exports.StorefrontApiFp(this.configuration).review(storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Searches for all matching values
     * @param {string} [category]
     * @param {string} [matches]
     * @param {string} [storefrontOid]
     * @param {number} [maxHits]
     * @param {string} [subcategory]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.search = function (category, matches, storefrontOid, maxHits, subcategory, options) {
        return exports.StorefrontApiFp(this.configuration).search(category, matches, storefrontOid, maxHits, subcategory, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Searches for all matching values (using POST)
     * @param {LookupRequest} lookupRequest LookupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.search2 = function (lookupRequest, options) {
        return exports.StorefrontApiFp(this.configuration).search2(lookupRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Search email list customers
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {string} [startsWith]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchEmailListCustomers = function (storefrontOid, emailListUuid, startsWith, options) {
        return exports.StorefrontApiFp(this.configuration).searchEmailListCustomers(storefrontOid, emailListUuid, startsWith, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Search email segment customers
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {string} [startsWith]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchEmailSegmentCustomers = function (storefrontOid, emailSegmentUuid, startsWith, options) {
        return exports.StorefrontApiFp(this.configuration).searchEmailSegmentCustomers(storefrontOid, emailSegmentUuid, startsWith, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchLibraryItems = function (itemQuery, limit, offset, sort, options) {
        return exports.StorefrontApiFp(this.configuration).searchLibraryItems(itemQuery, limit, offset, sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchPublishedItems = function (itemQuery, limit, offset, sort, options) {
        return exports.StorefrontApiFp(this.configuration).searchPublishedItems(itemQuery, limit, offset, sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items needing review or rejected
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchReviewItems = function (itemQuery, limit, offset, sort, options) {
        return exports.StorefrontApiFp(this.configuration).searchReviewItems(itemQuery, limit, offset, sort, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination.
     * @summary Retrieve library items
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.searchSharedItems = function (itemQuery, limit, offset, sort, options) {
        return exports.StorefrontApiFp(this.configuration).searchSharedItems(itemQuery, limit, offset, sort, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Send email test
     * @param {number} storefrontOid
     * @param {string} commseqEmailUuid
     * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailTestRequest Email commseq email test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sendEmailTest = function (storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options) {
        return exports.StorefrontApiFp(this.configuration).sendEmailTest(storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Send postcard test
     * @param {number} storefrontOid
     * @param {string} commseqPostcardUuid
     * @param {EmailCommseqPostcardSendTestRequest} emailCommseqPostcardTestRequest Email commseq email test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.sendPostcardTest = function (storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options) {
        return exports.StorefrontApiFp(this.configuration).sendPostcardTest(storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Start email campaign
     * @param {number} storefrontOid
     * @param {string} emailCampaignUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.startEmailCampaign = function (storefrontOid, emailCampaignUuid, options) {
        return exports.StorefrontApiFp(this.configuration).startEmailCampaign(storefrontOid, emailCampaignUuid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Subscribe customers to email list
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {Array<EmailCustomer>} customers Customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.subscribeToEmailList = function (storefrontOid, emailListUuid, customers, options) {
        return exports.StorefrontApiFp(this.configuration).subscribeToEmailList(storefrontOid, emailListUuid, customers, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email campaign
     * @param {number} storefrontOid
     * @param {string} emailCampaignUuid
     * @param {EmailCampaign} emailCampaign Email campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCampaign = function (storefrontOid, emailCampaignUuid, emailCampaign, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailCampaign(storefrontOid, emailCampaignUuid, emailCampaign, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email commseq
     * @param {number} storefrontOid
     * @param {string} commseqUuid
     * @param {EmailCommseq} emailCommseq Email commseq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCommseq = function (storefrontOid, commseqUuid, emailCommseq, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailCommseq(storefrontOid, commseqUuid, emailCommseq, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email customer
     * @param {number} storefrontOid
     * @param {string} emailCustomerUuid
     * @param {EmailCustomer} emailCustomer Email customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailCustomer = function (storefrontOid, emailCustomerUuid, emailCustomer, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailCustomer(storefrontOid, emailCustomerUuid, emailCustomer, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email email
     * @param {number} storefrontOid
     * @param {string} commseqEmailUuid
     * @param {EmailCommseqEmail} emailCommseqEmail Email commseq email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailEmail = function (storefrontOid, commseqEmailUuid, emailCommseqEmail, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailEmail(storefrontOid, commseqEmailUuid, emailCommseqEmail, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email flow
     * @param {number} storefrontOid
     * @param {string} emailFlowUuid
     * @param {EmailFlow} emailFlow Email flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailFlow = function (storefrontOid, emailFlowUuid, emailFlow, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailFlow(storefrontOid, emailFlowUuid, emailFlow, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email global settings
     * @param {EmailGlobalSettings} globalSettings global settings request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailGlobalSettings = function (globalSettings, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailGlobalSettings(globalSettings, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email list
     * @param {number} storefrontOid
     * @param {string} emailListUuid
     * @param {EmailList} emailList Email list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailList = function (storefrontOid, emailListUuid, emailList, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailList(storefrontOid, emailListUuid, emailList, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email plan
     * @param {number} storefrontOid
     * @param {EmailPlan} settings plan request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailPlan = function (storefrontOid, settings, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailPlan(storefrontOid, settings, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email postcard
     * @param {number} storefrontOid
     * @param {string} commseqPostcardUuid
     * @param {EmailCommseqPostcard} emailCommseqPostcard Email commseq postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailPostcard = function (storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailPostcard(storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email segment
     * @param {number} storefrontOid
     * @param {string} emailSegmentUuid
     * @param {EmailSegment} emailSegment Email segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailSegment = function (storefrontOid, emailSegmentUuid, emailSegment, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailSegment(storefrontOid, emailSegmentUuid, emailSegment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update email settings
     * @param {number} storefrontOid
     * @param {EmailSettings} settings settings request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateEmailSettings = function (storefrontOid, settings, options) {
        return exports.StorefrontApiFp(this.configuration).updateEmailSettings(storefrontOid, settings, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update experiment
     * @param {number} storefrontOid
     * @param {number} storefrontExperimentOid
     * @param {Experiment} experiment Experiment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateExperiment = function (storefrontOid, storefrontExperimentOid, experiment, options) {
        return exports.StorefrontApiFp(this.configuration).updateExperiment(storefrontOid, storefrontExperimentOid, experiment, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Update library item. Note that only certain fields may be updated via this method.
     * @param {number} libraryItemOid
     * @param {LibraryItem} libraryItem Library item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateLibraryItem = function (libraryItemOid, libraryItem, options) {
        return exports.StorefrontApiFp(this.configuration).updateLibraryItem(libraryItemOid, libraryItem, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a transactional email
     * @summary Updates a transaction email object
     * @param {number} storefrontOid
     * @param {string} emailId
     * @param {TransactionEmail} transactionEmail TransactionEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApi
     */
    StorefrontApi.prototype.updateTransactionEmail = function (storefrontOid, emailId, transactionEmail, options) {
        return exports.StorefrontApiFp(this.configuration).updateTransactionEmail(storefrontOid, emailId, transactionEmail, options)(this.fetch, this.basePath);
    };
    return StorefrontApi;
}(BaseAPI));
exports.StorefrontApi = StorefrontApi;
/**
 * TaxApi - fetch parameter creator
 * @export
 */
exports.TaxApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Deletes a Self tax provider city.
         * @summary Deletes a Self tax provider city
         * @param {string} city The city being deleted.
         * @param {TaxCity} taxCity tax city to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCity: function (city, taxCity, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'city' is not null or undefined
            if (city === null || city === undefined) {
                throw new RequiredError('city', 'Required parameter city was null or undefined when calling deleteTaxProviderSelfCity.');
            }
            // verify required parameter 'taxCity' is not null or undefined
            if (taxCity === null || taxCity === undefined) {
                throw new RequiredError('taxCity', 'Required parameter taxCity was null or undefined when calling deleteTaxProviderSelfCity.');
            }
            var localVarPath = "/tax/providers/self/city/{city}"
                .replace("{" + "city" + "}", encodeURIComponent(String(city)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCity" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxCity || {}) : (taxCity || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider country.
         * @summary Deletes a Self tax provider country
         * @param {string} countryCode The country code being deleted.
         * @param {TaxCountry} taxCountry tax country to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCountry: function (countryCode, taxCountry, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling deleteTaxProviderSelfCountry.');
            }
            // verify required parameter 'taxCountry' is not null or undefined
            if (taxCountry === null || taxCountry === undefined) {
                throw new RequiredError('taxCountry', 'Required parameter taxCountry was null or undefined when calling deleteTaxProviderSelfCountry.');
            }
            var localVarPath = "/tax/providers/self/country/{countryCode}"
                .replace("{" + "countryCode" + "}", encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCountry" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxCountry || {}) : (taxCountry || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider county.
         * @summary Deletes a Self tax provider county
         * @param {string} county The county being deleted.
         * @param {TaxCounty} taxCounty tax county to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCounty: function (county, taxCounty, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'county' is not null or undefined
            if (county === null || county === undefined) {
                throw new RequiredError('county', 'Required parameter county was null or undefined when calling deleteTaxProviderSelfCounty.');
            }
            // verify required parameter 'taxCounty' is not null or undefined
            if (taxCounty === null || taxCounty === undefined) {
                throw new RequiredError('taxCounty', 'Required parameter taxCounty was null or undefined when calling deleteTaxProviderSelfCounty.');
            }
            var localVarPath = "/tax/providers/self/county/{county}"
                .replace("{" + "county" + "}", encodeURIComponent(String(county)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCounty" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxCounty || {}) : (taxCounty || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider postalCode.
         * @summary Deletes a Self tax provider postalCode
         * @param {string} postalCode The postal code being deleted.
         * @param {TaxPostalCode} taxPostalCode tax postal code to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfPostalCode: function (postalCode, taxPostalCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'postalCode' is not null or undefined
            if (postalCode === null || postalCode === undefined) {
                throw new RequiredError('postalCode', 'Required parameter postalCode was null or undefined when calling deleteTaxProviderSelfPostalCode.');
            }
            // verify required parameter 'taxPostalCode' is not null or undefined
            if (taxPostalCode === null || taxPostalCode === undefined) {
                throw new RequiredError('taxPostalCode', 'Required parameter taxPostalCode was null or undefined when calling deleteTaxProviderSelfPostalCode.');
            }
            var localVarPath = "/tax/providers/self/postalCode/{postal_code}"
                .replace("{" + "postal_code" + "}", encodeURIComponent(String(postalCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxPostalCode" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxPostalCode || {}) : (taxPostalCode || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Self tax provider state.
         * @summary Deletes a Self tax provider state
         * @param {string} stateCode The state code being deleted.
         * @param {TaxState} taxState tax state to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfState: function (stateCode, taxState, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new RequiredError('stateCode', 'Required parameter stateCode was null or undefined when calling deleteTaxProviderSelfState.');
            }
            // verify required parameter 'taxState' is not null or undefined
            if (taxState === null || taxState === undefined) {
                throw new RequiredError('taxState', 'Required parameter taxState was null or undefined when calling deleteTaxProviderSelfState.');
            }
            var localVarPath = "/tax/providers/self/state/{stateCode}"
                .replace("{" + "stateCode" + "}", encodeURIComponent(String(stateCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxState" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxState || {}) : (taxState || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Avalara tax provider.
         * @summary Retrieve the Avalara tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalara: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/avalara";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns Avalara Tax companies configured by the merchant
         * @summary Returns Avalara Tax companies configured by the merchant
         * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraCompanies: function (taxProviderAvalara, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'taxProviderAvalara' is not null or undefined
            if (taxProviderAvalara === null || taxProviderAvalara === undefined) {
                throw new RequiredError('taxProviderAvalara', 'Required parameter taxProviderAvalara was null or undefined when calling getTaxProviderAvalaraCompanies.');
            }
            var localVarPath = "/tax/providers/avalara/companies";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderAvalara" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxProviderAvalara || {}) : (taxProviderAvalara || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to connect to Avalara and returns back the response.
         * @summary Attempts to connect to Avalara and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraTest: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/avalara/test";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Self tax provider.
         * @summary Retrieve the Self tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelf: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Self tax provider countries.
         * @summary Retrieve the Self tax provider countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfCountries: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/self/countries";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Self tax provider regions for a given country code.
         * @summary Retrieve the Self tax provider regions for a given country code
         * @param {string} countryCode The country code regions desired.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfRegionsByCountryCode: function (countryCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling getTaxProviderSelfRegionsByCountryCode.');
            }
            var localVarPath = "/tax/providers/self/regions/{countryCode}"
                .replace("{" + "countryCode" + "}", encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the Sovos tax provider.
         * @summary Retrieve the Sovos tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovos: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/sovos";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to connect to Sovos and returns back the response.
         * @summary Attempts to connect to Sovos and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovosTest: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/sovos/test";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the TaxJar tax provider.
         * @summary Retrieve the TaxJar tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJar: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/taxjar";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to connect to TaxJar and returns back the response.
         * @summary Attempts to connect to TaxJar and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJarTest: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/taxjar/test";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the UltraCart tax provider.
         * @summary Retrieve the UltraCart tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderUltraCart: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers/ultracart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves tax methods for this account.
         * @summary Retrieve tax methods
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviders: function (limit, offset, expand, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/tax/providers";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (expand !== undefined) {
                localVarQueryParameter['_expand'] = expand;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle a tax provider to active.
         * @summary Toggle a tax provider to active
         * @param {string} providerName The tax provider to set active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveTaxProvider: function (providerName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'providerName' is not null or undefined
            if (providerName === null || providerName === undefined) {
                throw new RequiredError('providerName', 'Required parameter providerName was null or undefined when calling setActiveTaxProvider.');
            }
            var localVarPath = "/tax/providers/setActive/{providerName}"
                .replace("{" + "providerName" + "}", encodeURIComponent(String(providerName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Avalara tax provider.
         * @summary Update the Avalara tax provider
         * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderAvalara: function (taxProviderAvalara, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'taxProviderAvalara' is not null or undefined
            if (taxProviderAvalara === null || taxProviderAvalara === undefined) {
                throw new RequiredError('taxProviderAvalara', 'Required parameter taxProviderAvalara was null or undefined when calling updateTaxProviderAvalara.');
            }
            var localVarPath = "/tax/providers/avalara";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderAvalara" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxProviderAvalara || {}) : (taxProviderAvalara || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Self tax provider.
         * @summary Update the Self tax provider
         * @param {TaxProviderSelf} taxProviderSelf TaxProviderSelf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelf: function (taxProviderSelf, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'taxProviderSelf' is not null or undefined
            if (taxProviderSelf === null || taxProviderSelf === undefined) {
                throw new RequiredError('taxProviderSelf', 'Required parameter taxProviderSelf was null or undefined when calling updateTaxProviderSelf.');
            }
            var localVarPath = "/tax/providers/self";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderSelf" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxProviderSelf || {}) : (taxProviderSelf || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider city.
         * @summary Updates a Self tax provider city
         * @param {string} city The city being updated.
         * @param {TaxCity} taxCity tax city to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCity: function (city, taxCity, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'city' is not null or undefined
            if (city === null || city === undefined) {
                throw new RequiredError('city', 'Required parameter city was null or undefined when calling updateTaxProviderSelfCity.');
            }
            // verify required parameter 'taxCity' is not null or undefined
            if (taxCity === null || taxCity === undefined) {
                throw new RequiredError('taxCity', 'Required parameter taxCity was null or undefined when calling updateTaxProviderSelfCity.');
            }
            var localVarPath = "/tax/providers/self/city/{city}"
                .replace("{" + "city" + "}", encodeURIComponent(String(city)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCity" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxCity || {}) : (taxCity || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider country.
         * @summary Updates a Self tax provider country
         * @param {string} countryCode The country code being updated.
         * @param {TaxCountry} taxCountry tax country to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCountry: function (countryCode, taxCountry, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'countryCode' is not null or undefined
            if (countryCode === null || countryCode === undefined) {
                throw new RequiredError('countryCode', 'Required parameter countryCode was null or undefined when calling updateTaxProviderSelfCountry.');
            }
            // verify required parameter 'taxCountry' is not null or undefined
            if (taxCountry === null || taxCountry === undefined) {
                throw new RequiredError('taxCountry', 'Required parameter taxCountry was null or undefined when calling updateTaxProviderSelfCountry.');
            }
            var localVarPath = "/tax/providers/self/country/{countryCode}"
                .replace("{" + "countryCode" + "}", encodeURIComponent(String(countryCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCountry" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxCountry || {}) : (taxCountry || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider county.
         * @summary Updates a Self tax provider county
         * @param {string} county The county being updated.
         * @param {TaxCounty} taxCounty tax county to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCounty: function (county, taxCounty, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'county' is not null or undefined
            if (county === null || county === undefined) {
                throw new RequiredError('county', 'Required parameter county was null or undefined when calling updateTaxProviderSelfCounty.');
            }
            // verify required parameter 'taxCounty' is not null or undefined
            if (taxCounty === null || taxCounty === undefined) {
                throw new RequiredError('taxCounty', 'Required parameter taxCounty was null or undefined when calling updateTaxProviderSelfCounty.');
            }
            var localVarPath = "/tax/providers/self/county/{county}"
                .replace("{" + "county" + "}", encodeURIComponent(String(county)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxCounty" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxCounty || {}) : (taxCounty || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider postalCode.
         * @summary Updates a Self tax provider postalCode
         * @param {string} postalCode The postal code being updated.
         * @param {TaxPostalCode} taxPostalCode tax postal code to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfPostalCode: function (postalCode, taxPostalCode, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'postalCode' is not null or undefined
            if (postalCode === null || postalCode === undefined) {
                throw new RequiredError('postalCode', 'Required parameter postalCode was null or undefined when calling updateTaxProviderSelfPostalCode.');
            }
            // verify required parameter 'taxPostalCode' is not null or undefined
            if (taxPostalCode === null || taxPostalCode === undefined) {
                throw new RequiredError('taxPostalCode', 'Required parameter taxPostalCode was null or undefined when calling updateTaxProviderSelfPostalCode.');
            }
            var localVarPath = "/tax/providers/self/postalCode/{postal_code}"
                .replace("{" + "postal_code" + "}", encodeURIComponent(String(postalCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxPostalCode" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxPostalCode || {}) : (taxPostalCode || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Self tax provider state.
         * @summary Updates a Self tax provider state
         * @param {string} stateCode The state code being updated.
         * @param {TaxState} taxState tax state to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfState: function (stateCode, taxState, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'stateCode' is not null or undefined
            if (stateCode === null || stateCode === undefined) {
                throw new RequiredError('stateCode', 'Required parameter stateCode was null or undefined when calling updateTaxProviderSelfState.');
            }
            // verify required parameter 'taxState' is not null or undefined
            if (taxState === null || taxState === undefined) {
                throw new RequiredError('taxState', 'Required parameter taxState was null or undefined when calling updateTaxProviderSelfState.');
            }
            var localVarPath = "/tax/providers/self/state/{stateCode}"
                .replace("{" + "stateCode" + "}", encodeURIComponent(String(stateCode)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxState" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxState || {}) : (taxState || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the Sovos tax provider.
         * @summary Update the Sovos tax provider
         * @param {TaxProviderSovos} taxProviderSovos TaxProviderSovos object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSovos: function (taxProviderSovos, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'taxProviderSovos' is not null or undefined
            if (taxProviderSovos === null || taxProviderSovos === undefined) {
                throw new RequiredError('taxProviderSovos', 'Required parameter taxProviderSovos was null or undefined when calling updateTaxProviderSovos.');
            }
            var localVarPath = "/tax/providers/sovos";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderSovos" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxProviderSovos || {}) : (taxProviderSovos || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the TaxJar tax provider.
         * @summary Update the TaxJar tax provider
         * @param {TaxProviderTaxJar} taxProviderTaxJar TaxProviderTaxJar object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderTaxJar: function (taxProviderTaxJar, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'taxProviderTaxJar' is not null or undefined
            if (taxProviderTaxJar === null || taxProviderTaxJar === undefined) {
                throw new RequiredError('taxProviderTaxJar', 'Required parameter taxProviderTaxJar was null or undefined when calling updateTaxProviderTaxJar.');
            }
            var localVarPath = "/tax/providers/taxjar";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderTaxJar" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxProviderTaxJar || {}) : (taxProviderTaxJar || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the UltraCart tax provider.
         * @summary Update the UltraCart tax provider
         * @param {TaxProviderUltraCart} taxProviderUltracart TaxProviderUltraCart object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderUltraCart: function (taxProviderUltracart, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'taxProviderUltracart' is not null or undefined
            if (taxProviderUltracart === null || taxProviderUltracart === undefined) {
                throw new RequiredError('taxProviderUltracart', 'Required parameter taxProviderUltracart was null or undefined when calling updateTaxProviderUltraCart.');
            }
            var localVarPath = "/tax/providers/ultracart";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["tax_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("TaxProviderUltraCart" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(taxProviderUltracart || {}) : (taxProviderUltracart || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TaxApi - functional programming interface
 * @export
 */
exports.TaxApiFp = function (configuration) {
    return {
        /**
         * Deletes a Self tax provider city.
         * @summary Deletes a Self tax provider city
         * @param {string} city The city being deleted.
         * @param {TaxCity} taxCity tax city to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCity: function (city, taxCity, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).deleteTaxProviderSelfCity(city, taxCity, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider country.
         * @summary Deletes a Self tax provider country
         * @param {string} countryCode The country code being deleted.
         * @param {TaxCountry} taxCountry tax country to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCountry: function (countryCode, taxCountry, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).deleteTaxProviderSelfCountry(countryCode, taxCountry, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider county.
         * @summary Deletes a Self tax provider county
         * @param {string} county The county being deleted.
         * @param {TaxCounty} taxCounty tax county to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCounty: function (county, taxCounty, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).deleteTaxProviderSelfCounty(county, taxCounty, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider postalCode.
         * @summary Deletes a Self tax provider postalCode
         * @param {string} postalCode The postal code being deleted.
         * @param {TaxPostalCode} taxPostalCode tax postal code to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfPostalCode: function (postalCode, taxPostalCode, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).deleteTaxProviderSelfPostalCode(postalCode, taxPostalCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a Self tax provider state.
         * @summary Deletes a Self tax provider state
         * @param {string} stateCode The state code being deleted.
         * @param {TaxState} taxState tax state to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfState: function (stateCode, taxState, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).deleteTaxProviderSelfState(stateCode, taxState, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Avalara tax provider.
         * @summary Retrieve the Avalara tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalara: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderAvalara(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns Avalara Tax companies configured by the merchant
         * @summary Returns Avalara Tax companies configured by the merchant
         * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraCompanies: function (taxProviderAvalara, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderAvalaraCompanies(taxProviderAvalara, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attempts to connect to Avalara and returns back the response.
         * @summary Attempts to connect to Avalara and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraTest: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderAvalaraTest(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Self tax provider.
         * @summary Retrieve the Self tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelf: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderSelf(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Self tax provider countries.
         * @summary Retrieve the Self tax provider countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfCountries: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderSelfCountries(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Self tax provider regions for a given country code.
         * @summary Retrieve the Self tax provider regions for a given country code
         * @param {string} countryCode The country code regions desired.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfRegionsByCountryCode: function (countryCode, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderSelfRegionsByCountryCode(countryCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the Sovos tax provider.
         * @summary Retrieve the Sovos tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovos: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderSovos(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attempts to connect to Sovos and returns back the response.
         * @summary Attempts to connect to Sovos and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovosTest: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderSovosTest(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the TaxJar tax provider.
         * @summary Retrieve the TaxJar tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJar: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderTaxJar(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attempts to connect to TaxJar and returns back the response.
         * @summary Attempts to connect to TaxJar and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJarTest: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderTaxJarTest(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the UltraCart tax provider.
         * @summary Retrieve the UltraCart tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderUltraCart: function (options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviderUltraCart(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves tax methods for this account.
         * @summary Retrieve tax methods
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviders: function (limit, offset, expand, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).getTaxProviders(limit, offset, expand, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Toggle a tax provider to active.
         * @summary Toggle a tax provider to active
         * @param {string} providerName The tax provider to set active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveTaxProvider: function (providerName, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).setActiveTaxProvider(providerName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the Avalara tax provider.
         * @summary Update the Avalara tax provider
         * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderAvalara: function (taxProviderAvalara, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderAvalara(taxProviderAvalara, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the Self tax provider.
         * @summary Update the Self tax provider
         * @param {TaxProviderSelf} taxProviderSelf TaxProviderSelf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelf: function (taxProviderSelf, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSelf(taxProviderSelf, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider city.
         * @summary Updates a Self tax provider city
         * @param {string} city The city being updated.
         * @param {TaxCity} taxCity tax city to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCity: function (city, taxCity, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSelfCity(city, taxCity, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider country.
         * @summary Updates a Self tax provider country
         * @param {string} countryCode The country code being updated.
         * @param {TaxCountry} taxCountry tax country to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCountry: function (countryCode, taxCountry, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSelfCountry(countryCode, taxCountry, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider county.
         * @summary Updates a Self tax provider county
         * @param {string} county The county being updated.
         * @param {TaxCounty} taxCounty tax county to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCounty: function (county, taxCounty, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSelfCounty(county, taxCounty, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider postalCode.
         * @summary Updates a Self tax provider postalCode
         * @param {string} postalCode The postal code being updated.
         * @param {TaxPostalCode} taxPostalCode tax postal code to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfPostalCode: function (postalCode, taxPostalCode, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSelfPostalCode(postalCode, taxPostalCode, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a Self tax provider state.
         * @summary Updates a Self tax provider state
         * @param {string} stateCode The state code being updated.
         * @param {TaxState} taxState tax state to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfState: function (stateCode, taxState, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSelfState(stateCode, taxState, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the Sovos tax provider.
         * @summary Update the Sovos tax provider
         * @param {TaxProviderSovos} taxProviderSovos TaxProviderSovos object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSovos: function (taxProviderSovos, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderSovos(taxProviderSovos, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the TaxJar tax provider.
         * @summary Update the TaxJar tax provider
         * @param {TaxProviderTaxJar} taxProviderTaxJar TaxProviderTaxJar object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderTaxJar: function (taxProviderTaxJar, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderTaxJar(taxProviderTaxJar, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update the UltraCart tax provider.
         * @summary Update the UltraCart tax provider
         * @param {TaxProviderUltraCart} taxProviderUltracart TaxProviderUltraCart object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderUltraCart: function (taxProviderUltracart, options) {
            var localVarFetchArgs = exports.TaxApiFetchParamCreator(configuration).updateTaxProviderUltraCart(taxProviderUltracart, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TaxApi - factory interface
 * @export
 */
exports.TaxApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Deletes a Self tax provider city.
         * @summary Deletes a Self tax provider city
         * @param {string} city The city being deleted.
         * @param {TaxCity} taxCity tax city to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCity: function (city, taxCity, options) {
            return exports.TaxApiFp(configuration).deleteTaxProviderSelfCity(city, taxCity, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider country.
         * @summary Deletes a Self tax provider country
         * @param {string} countryCode The country code being deleted.
         * @param {TaxCountry} taxCountry tax country to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCountry: function (countryCode, taxCountry, options) {
            return exports.TaxApiFp(configuration).deleteTaxProviderSelfCountry(countryCode, taxCountry, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider county.
         * @summary Deletes a Self tax provider county
         * @param {string} county The county being deleted.
         * @param {TaxCounty} taxCounty tax county to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfCounty: function (county, taxCounty, options) {
            return exports.TaxApiFp(configuration).deleteTaxProviderSelfCounty(county, taxCounty, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider postalCode.
         * @summary Deletes a Self tax provider postalCode
         * @param {string} postalCode The postal code being deleted.
         * @param {TaxPostalCode} taxPostalCode tax postal code to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfPostalCode: function (postalCode, taxPostalCode, options) {
            return exports.TaxApiFp(configuration).deleteTaxProviderSelfPostalCode(postalCode, taxPostalCode, options)(fetch, basePath);
        },
        /**
         * Deletes a Self tax provider state.
         * @summary Deletes a Self tax provider state
         * @param {string} stateCode The state code being deleted.
         * @param {TaxState} taxState tax state to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaxProviderSelfState: function (stateCode, taxState, options) {
            return exports.TaxApiFp(configuration).deleteTaxProviderSelfState(stateCode, taxState, options)(fetch, basePath);
        },
        /**
         * Retrieves the Avalara tax provider.
         * @summary Retrieve the Avalara tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalara: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderAvalara(options)(fetch, basePath);
        },
        /**
         * Returns Avalara Tax companies configured by the merchant
         * @summary Returns Avalara Tax companies configured by the merchant
         * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraCompanies: function (taxProviderAvalara, options) {
            return exports.TaxApiFp(configuration).getTaxProviderAvalaraCompanies(taxProviderAvalara, options)(fetch, basePath);
        },
        /**
         * Attempts to connect to Avalara and returns back the response.
         * @summary Attempts to connect to Avalara and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderAvalaraTest: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderAvalaraTest(options)(fetch, basePath);
        },
        /**
         * Retrieves the Self tax provider.
         * @summary Retrieve the Self tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelf: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderSelf(options)(fetch, basePath);
        },
        /**
         * Retrieves the Self tax provider countries.
         * @summary Retrieve the Self tax provider countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfCountries: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderSelfCountries(options)(fetch, basePath);
        },
        /**
         * Retrieves the Self tax provider regions for a given country code.
         * @summary Retrieve the Self tax provider regions for a given country code
         * @param {string} countryCode The country code regions desired.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSelfRegionsByCountryCode: function (countryCode, options) {
            return exports.TaxApiFp(configuration).getTaxProviderSelfRegionsByCountryCode(countryCode, options)(fetch, basePath);
        },
        /**
         * Retrieves the Sovos tax provider.
         * @summary Retrieve the Sovos tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovos: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderSovos(options)(fetch, basePath);
        },
        /**
         * Attempts to connect to Sovos and returns back the response.
         * @summary Attempts to connect to Sovos and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderSovosTest: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderSovosTest(options)(fetch, basePath);
        },
        /**
         * Retrieves the TaxJar tax provider.
         * @summary Retrieve the TaxJar tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJar: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderTaxJar(options)(fetch, basePath);
        },
        /**
         * Attempts to connect to TaxJar and returns back the response.
         * @summary Attempts to connect to TaxJar and returns back the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderTaxJarTest: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderTaxJarTest(options)(fetch, basePath);
        },
        /**
         * Retrieves the UltraCart tax provider.
         * @summary Retrieve the UltraCart tax provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviderUltraCart: function (options) {
            return exports.TaxApiFp(configuration).getTaxProviderUltraCart(options)(fetch, basePath);
        },
        /**
         * Retrieves tax methods for this account.
         * @summary Retrieve tax methods
         * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxProviders: function (limit, offset, expand, options) {
            return exports.TaxApiFp(configuration).getTaxProviders(limit, offset, expand, options)(fetch, basePath);
        },
        /**
         * Toggle a tax provider to active.
         * @summary Toggle a tax provider to active
         * @param {string} providerName The tax provider to set active.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setActiveTaxProvider: function (providerName, options) {
            return exports.TaxApiFp(configuration).setActiveTaxProvider(providerName, options)(fetch, basePath);
        },
        /**
         * Update the Avalara tax provider.
         * @summary Update the Avalara tax provider
         * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderAvalara: function (taxProviderAvalara, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderAvalara(taxProviderAvalara, options)(fetch, basePath);
        },
        /**
         * Update the Self tax provider.
         * @summary Update the Self tax provider
         * @param {TaxProviderSelf} taxProviderSelf TaxProviderSelf object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelf: function (taxProviderSelf, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSelf(taxProviderSelf, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider city.
         * @summary Updates a Self tax provider city
         * @param {string} city The city being updated.
         * @param {TaxCity} taxCity tax city to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCity: function (city, taxCity, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSelfCity(city, taxCity, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider country.
         * @summary Updates a Self tax provider country
         * @param {string} countryCode The country code being updated.
         * @param {TaxCountry} taxCountry tax country to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCountry: function (countryCode, taxCountry, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSelfCountry(countryCode, taxCountry, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider county.
         * @summary Updates a Self tax provider county
         * @param {string} county The county being updated.
         * @param {TaxCounty} taxCounty tax county to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfCounty: function (county, taxCounty, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSelfCounty(county, taxCounty, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider postalCode.
         * @summary Updates a Self tax provider postalCode
         * @param {string} postalCode The postal code being updated.
         * @param {TaxPostalCode} taxPostalCode tax postal code to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfPostalCode: function (postalCode, taxPostalCode, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSelfPostalCode(postalCode, taxPostalCode, options)(fetch, basePath);
        },
        /**
         * Updates a Self tax provider state.
         * @summary Updates a Self tax provider state
         * @param {string} stateCode The state code being updated.
         * @param {TaxState} taxState tax state to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSelfState: function (stateCode, taxState, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSelfState(stateCode, taxState, options)(fetch, basePath);
        },
        /**
         * Update the Sovos tax provider.
         * @summary Update the Sovos tax provider
         * @param {TaxProviderSovos} taxProviderSovos TaxProviderSovos object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderSovos: function (taxProviderSovos, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderSovos(taxProviderSovos, options)(fetch, basePath);
        },
        /**
         * Update the TaxJar tax provider.
         * @summary Update the TaxJar tax provider
         * @param {TaxProviderTaxJar} taxProviderTaxJar TaxProviderTaxJar object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderTaxJar: function (taxProviderTaxJar, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderTaxJar(taxProviderTaxJar, options)(fetch, basePath);
        },
        /**
         * Update the UltraCart tax provider.
         * @summary Update the UltraCart tax provider
         * @param {TaxProviderUltraCart} taxProviderUltracart TaxProviderUltraCart object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaxProviderUltraCart: function (taxProviderUltracart, options) {
            return exports.TaxApiFp(configuration).updateTaxProviderUltraCart(taxProviderUltracart, options)(fetch, basePath);
        },
    };
};
/**
 * TaxApi - object-oriented interface
 * @export
 * @class TaxApi
 * @extends {BaseAPI}
 */
var TaxApi = /** @class */ (function (_super) {
    __extends(TaxApi, _super);
    function TaxApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Deletes a Self tax provider city.
     * @summary Deletes a Self tax provider city
     * @param {string} city The city being deleted.
     * @param {TaxCity} taxCity tax city to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfCity = function (city, taxCity, options) {
        return exports.TaxApiFp(this.configuration).deleteTaxProviderSelfCity(city, taxCity, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider country.
     * @summary Deletes a Self tax provider country
     * @param {string} countryCode The country code being deleted.
     * @param {TaxCountry} taxCountry tax country to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfCountry = function (countryCode, taxCountry, options) {
        return exports.TaxApiFp(this.configuration).deleteTaxProviderSelfCountry(countryCode, taxCountry, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider county.
     * @summary Deletes a Self tax provider county
     * @param {string} county The county being deleted.
     * @param {TaxCounty} taxCounty tax county to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfCounty = function (county, taxCounty, options) {
        return exports.TaxApiFp(this.configuration).deleteTaxProviderSelfCounty(county, taxCounty, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider postalCode.
     * @summary Deletes a Self tax provider postalCode
     * @param {string} postalCode The postal code being deleted.
     * @param {TaxPostalCode} taxPostalCode tax postal code to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfPostalCode = function (postalCode, taxPostalCode, options) {
        return exports.TaxApiFp(this.configuration).deleteTaxProviderSelfPostalCode(postalCode, taxPostalCode, options)(this.fetch, this.basePath);
    };
    /**
     * Deletes a Self tax provider state.
     * @summary Deletes a Self tax provider state
     * @param {string} stateCode The state code being deleted.
     * @param {TaxState} taxState tax state to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.deleteTaxProviderSelfState = function (stateCode, taxState, options) {
        return exports.TaxApiFp(this.configuration).deleteTaxProviderSelfState(stateCode, taxState, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Avalara tax provider.
     * @summary Retrieve the Avalara tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderAvalara = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderAvalara(options)(this.fetch, this.basePath);
    };
    /**
     * Returns Avalara Tax companies configured by the merchant
     * @summary Returns Avalara Tax companies configured by the merchant
     * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderAvalaraCompanies = function (taxProviderAvalara, options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderAvalaraCompanies(taxProviderAvalara, options)(this.fetch, this.basePath);
    };
    /**
     * Attempts to connect to Avalara and returns back the response.
     * @summary Attempts to connect to Avalara and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderAvalaraTest = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderAvalaraTest(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Self tax provider.
     * @summary Retrieve the Self tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSelf = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderSelf(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Self tax provider countries.
     * @summary Retrieve the Self tax provider countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSelfCountries = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderSelfCountries(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Self tax provider regions for a given country code.
     * @summary Retrieve the Self tax provider regions for a given country code
     * @param {string} countryCode The country code regions desired.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSelfRegionsByCountryCode = function (countryCode, options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderSelfRegionsByCountryCode(countryCode, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the Sovos tax provider.
     * @summary Retrieve the Sovos tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSovos = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderSovos(options)(this.fetch, this.basePath);
    };
    /**
     * Attempts to connect to Sovos and returns back the response.
     * @summary Attempts to connect to Sovos and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderSovosTest = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderSovosTest(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the TaxJar tax provider.
     * @summary Retrieve the TaxJar tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderTaxJar = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderTaxJar(options)(this.fetch, this.basePath);
    };
    /**
     * Attempts to connect to TaxJar and returns back the response.
     * @summary Attempts to connect to TaxJar and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderTaxJarTest = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderTaxJarTest(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the UltraCart tax provider.
     * @summary Retrieve the UltraCart tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviderUltraCart = function (options) {
        return exports.TaxApiFp(this.configuration).getTaxProviderUltraCart(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves tax methods for this account.
     * @summary Retrieve tax methods
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.getTaxProviders = function (limit, offset, expand, options) {
        return exports.TaxApiFp(this.configuration).getTaxProviders(limit, offset, expand, options)(this.fetch, this.basePath);
    };
    /**
     * Toggle a tax provider to active.
     * @summary Toggle a tax provider to active
     * @param {string} providerName The tax provider to set active.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.setActiveTaxProvider = function (providerName, options) {
        return exports.TaxApiFp(this.configuration).setActiveTaxProvider(providerName, options)(this.fetch, this.basePath);
    };
    /**
     * Update the Avalara tax provider.
     * @summary Update the Avalara tax provider
     * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderAvalara = function (taxProviderAvalara, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderAvalara(taxProviderAvalara, options)(this.fetch, this.basePath);
    };
    /**
     * Update the Self tax provider.
     * @summary Update the Self tax provider
     * @param {TaxProviderSelf} taxProviderSelf TaxProviderSelf object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelf = function (taxProviderSelf, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSelf(taxProviderSelf, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider city.
     * @summary Updates a Self tax provider city
     * @param {string} city The city being updated.
     * @param {TaxCity} taxCity tax city to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfCity = function (city, taxCity, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSelfCity(city, taxCity, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider country.
     * @summary Updates a Self tax provider country
     * @param {string} countryCode The country code being updated.
     * @param {TaxCountry} taxCountry tax country to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfCountry = function (countryCode, taxCountry, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSelfCountry(countryCode, taxCountry, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider county.
     * @summary Updates a Self tax provider county
     * @param {string} county The county being updated.
     * @param {TaxCounty} taxCounty tax county to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfCounty = function (county, taxCounty, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSelfCounty(county, taxCounty, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider postalCode.
     * @summary Updates a Self tax provider postalCode
     * @param {string} postalCode The postal code being updated.
     * @param {TaxPostalCode} taxPostalCode tax postal code to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfPostalCode = function (postalCode, taxPostalCode, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSelfPostalCode(postalCode, taxPostalCode, options)(this.fetch, this.basePath);
    };
    /**
     * Updates a Self tax provider state.
     * @summary Updates a Self tax provider state
     * @param {string} stateCode The state code being updated.
     * @param {TaxState} taxState tax state to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSelfState = function (stateCode, taxState, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSelfState(stateCode, taxState, options)(this.fetch, this.basePath);
    };
    /**
     * Update the Sovos tax provider.
     * @summary Update the Sovos tax provider
     * @param {TaxProviderSovos} taxProviderSovos TaxProviderSovos object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderSovos = function (taxProviderSovos, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderSovos(taxProviderSovos, options)(this.fetch, this.basePath);
    };
    /**
     * Update the TaxJar tax provider.
     * @summary Update the TaxJar tax provider
     * @param {TaxProviderTaxJar} taxProviderTaxJar TaxProviderTaxJar object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderTaxJar = function (taxProviderTaxJar, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderTaxJar(taxProviderTaxJar, options)(this.fetch, this.basePath);
    };
    /**
     * Update the UltraCart tax provider.
     * @summary Update the UltraCart tax provider
     * @param {TaxProviderUltraCart} taxProviderUltracart TaxProviderUltraCart object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    TaxApi.prototype.updateTaxProviderUltraCart = function (taxProviderUltracart, options) {
        return exports.TaxApiFp(this.configuration).updateTaxProviderUltraCart(taxProviderUltracart, options)(this.fetch, this.basePath);
    };
    return TaxApi;
}(BaseAPI));
exports.TaxApi = TaxApi;
/**
 * UserApi - fetch parameter creator
 * @export
 */
exports.UserApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a group on the UltraCart account.
         * @summary Delete a group
         * @param {number} groupOid The group_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (groupOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'groupOid' is not null or undefined
            if (groupOid === null || groupOid === undefined) {
                throw new RequiredError('groupOid', 'Required parameter groupOid was null or undefined when calling deleteGroup.');
            }
            var localVarPath = "/user/groups/{group_oid}"
                .replace("{" + "group_oid" + "}", encodeURIComponent(String(groupOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user on the UltraCart account.
         * @summary Delete a user
         * @param {number} userId The user_id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteUser.');
            }
            var localVarPath = "/user/users/{user_id}"
                .replace("{" + "user_id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single group using the specified group id.
         * @summary Retrieve a group
         * @param {number} groupOid The group id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (groupOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'groupOid' is not null or undefined
            if (groupOid === null || groupOid === undefined) {
                throw new RequiredError('groupOid', 'Required parameter groupOid was null or undefined when calling getGroup.');
            }
            var localVarPath = "/user/groups/{group_oid}"
                .replace("{" + "group_oid" + "}", encodeURIComponent(String(groupOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/user/groups";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single user using the specified user id.
         * @summary Retrieve a user
         * @param {number} userId The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling getUser.');
            }
            var localVarPath = "/user/users/{user_id}"
                .replace("{" + "user_id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves logins for a single user using the specified user id.
         * @summary Retrieve a user's login history
         * @param {number} userId The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLogins: function (userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserLogins.');
            }
            var localVarPath = "/user/users/{user_id}/logins"
                .replace("{" + "user_id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/user/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a group on the UltraCart account.
         * @summary Insert a group
         * @param {Group} group Group to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertGroup: function (group, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group', 'Required parameter group was null or undefined when calling insertGroup.');
            }
            var localVarPath = "/user/groups";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Group" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(group || {}) : (group || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Insert a user on the UltraCart account.
         * @summary Insert a user
         * @param {User} user User to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling insertUser.');
            }
            var localVarPath = "/user/users";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(user || {}) : (user || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a group on the UltraCart account.
         * @summary Update a group
         * @param {Group} group Group to update
         * @param {number} groupOid The group_oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: function (group, groupOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group', 'Required parameter group was null or undefined when calling updateGroup.');
            }
            // verify required parameter 'groupOid' is not null or undefined
            if (groupOid === null || groupOid === undefined) {
                throw new RequiredError('groupOid', 'Required parameter groupOid was null or undefined when calling updateGroup.');
            }
            var localVarPath = "/user/groups/{group_oid}"
                .replace("{" + "group_oid" + "}", encodeURIComponent(String(groupOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Group" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(group || {}) : (group || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user on the UltraCart account.
         * @summary Update a user
         * @param {User} user User to update
         * @param {number} userId The user_id to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user', 'Required parameter user was null or undefined when calling updateUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling updateUser.');
            }
            var localVarPath = "/user/users/{user_id}"
                .replace("{" + "user_id" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["user_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(user || {}) : (user || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
exports.UserApiFp = function (configuration) {
    return {
        /**
         * Delete a group on the UltraCart account.
         * @summary Delete a group
         * @param {number} groupOid The group_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (groupOid, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).deleteGroup(groupOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a user on the UltraCart account.
         * @summary Delete a user
         * @param {number} userId The user_id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).deleteUser(userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single group using the specified group id.
         * @summary Retrieve a group
         * @param {number} groupOid The group id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (groupOid, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).getGroup(groupOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).getGroups(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves a single user using the specified user id.
         * @summary Retrieve a user
         * @param {number} userId The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (userId, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).getUser(userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves logins for a single user using the specified user id.
         * @summary Retrieve a user's login history
         * @param {number} userId The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLogins: function (userId, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).getUserLogins(userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).getUsers(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a group on the UltraCart account.
         * @summary Insert a group
         * @param {Group} group Group to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertGroup: function (group, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).insertGroup(group, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Insert a user on the UltraCart account.
         * @summary Insert a user
         * @param {User} user User to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUser: function (user, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).insertUser(user, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a group on the UltraCart account.
         * @summary Update a group
         * @param {Group} group Group to update
         * @param {number} groupOid The group_oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: function (group, groupOid, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).updateGroup(group, groupOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a user on the UltraCart account.
         * @summary Update a user
         * @param {User} user User to update
         * @param {number} userId The user_id to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, userId, options) {
            var localVarFetchArgs = exports.UserApiFetchParamCreator(configuration).updateUser(user, userId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
exports.UserApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a group on the UltraCart account.
         * @summary Delete a group
         * @param {number} groupOid The group_oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: function (groupOid, options) {
            return exports.UserApiFp(configuration).deleteGroup(groupOid, options)(fetch, basePath);
        },
        /**
         * Delete a user on the UltraCart account.
         * @summary Delete a user
         * @param {number} userId The user_id to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            return exports.UserApiFp(configuration).deleteUser(userId, options)(fetch, basePath);
        },
        /**
         * Retrieves a single group using the specified group id.
         * @summary Retrieve a group
         * @param {number} groupOid The group id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: function (groupOid, options) {
            return exports.UserApiFp(configuration).getGroup(groupOid, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: function (options) {
            return exports.UserApiFp(configuration).getGroups(options)(fetch, basePath);
        },
        /**
         * Retrieves a single user using the specified user id.
         * @summary Retrieve a user
         * @param {number} userId The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (userId, options) {
            return exports.UserApiFp(configuration).getUser(userId, options)(fetch, basePath);
        },
        /**
         * Retrieves logins for a single user using the specified user id.
         * @summary Retrieve a user's login history
         * @param {number} userId The user id to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLogins: function (userId, options) {
            return exports.UserApiFp(configuration).getUserLogins(userId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: function (options) {
            return exports.UserApiFp(configuration).getUsers(options)(fetch, basePath);
        },
        /**
         * Insert a group on the UltraCart account.
         * @summary Insert a group
         * @param {Group} group Group to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertGroup: function (group, options) {
            return exports.UserApiFp(configuration).insertGroup(group, options)(fetch, basePath);
        },
        /**
         * Insert a user on the UltraCart account.
         * @summary Insert a user
         * @param {User} user User to insert
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertUser: function (user, options) {
            return exports.UserApiFp(configuration).insertUser(user, options)(fetch, basePath);
        },
        /**
         * Update a group on the UltraCart account.
         * @summary Update a group
         * @param {Group} group Group to update
         * @param {number} groupOid The group_oid to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: function (group, groupOid, options) {
            return exports.UserApiFp(configuration).updateGroup(group, groupOid, options)(fetch, basePath);
        },
        /**
         * Update a user on the UltraCart account.
         * @summary Update a user
         * @param {User} user User to update
         * @param {number} userId The user_id to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (user, userId, options) {
            return exports.UserApiFp(configuration).updateUser(user, userId, options)(fetch, basePath);
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a group on the UltraCart account.
     * @summary Delete a group
     * @param {number} groupOid The group_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteGroup = function (groupOid, options) {
        return exports.UserApiFp(this.configuration).deleteGroup(groupOid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a user on the UltraCart account.
     * @summary Delete a user
     * @param {number} userId The user_id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUser = function (userId, options) {
        return exports.UserApiFp(this.configuration).deleteUser(userId, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single group using the specified group id.
     * @summary Retrieve a group
     * @param {number} groupOid The group id to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getGroup = function (groupOid, options) {
        return exports.UserApiFp(this.configuration).getGroup(groupOid, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getGroups = function (options) {
        return exports.UserApiFp(this.configuration).getGroups(options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves a single user using the specified user id.
     * @summary Retrieve a user
     * @param {number} userId The user id to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUser = function (userId, options) {
        return exports.UserApiFp(this.configuration).getUser(userId, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves logins for a single user using the specified user id.
     * @summary Retrieve a user's login history
     * @param {number} userId The user id to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserLogins = function (userId, options) {
        return exports.UserApiFp(this.configuration).getUserLogins(userId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUsers = function (options) {
        return exports.UserApiFp(this.configuration).getUsers(options)(this.fetch, this.basePath);
    };
    /**
     * Insert a group on the UltraCart account.
     * @summary Insert a group
     * @param {Group} group Group to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.insertGroup = function (group, options) {
        return exports.UserApiFp(this.configuration).insertGroup(group, options)(this.fetch, this.basePath);
    };
    /**
     * Insert a user on the UltraCart account.
     * @summary Insert a user
     * @param {User} user User to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.insertUser = function (user, options) {
        return exports.UserApiFp(this.configuration).insertUser(user, options)(this.fetch, this.basePath);
    };
    /**
     * Update a group on the UltraCart account.
     * @summary Update a group
     * @param {Group} group Group to update
     * @param {number} groupOid The group_oid to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateGroup = function (group, groupOid, options) {
        return exports.UserApiFp(this.configuration).updateGroup(group, groupOid, options)(this.fetch, this.basePath);
    };
    /**
     * Update a user on the UltraCart account.
     * @summary Update a user
     * @param {User} user User to update
     * @param {number} userId The user_id to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUser = function (user, userId, options) {
        return exports.UserApiFp(this.configuration).updateUser(user, userId, options)(this.fetch, this.basePath);
    };
    return UserApi;
}(BaseAPI));
exports.UserApi = UserApi;
/**
 * WebhookApi - fetch parameter creator
 * @export
 */
exports.WebhookApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Delete a webhook on the UltraCart account.
         * @summary Delete a webhook
         * @param {number} webhookOid The webhook oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: function (webhookOid, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling deleteWebhook.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}"
                .replace("{" + "webhookOid" + "}", encodeURIComponent(String(webhookOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
         * @summary Delete a webhook by URL
         * @param {Webhook} webhook Webhook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookByUrl: function (webhook, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhook' is not null or undefined
            if (webhook === null || webhook === undefined) {
                throw new RequiredError('webhook', 'Required parameter webhook was null or undefined when calling deleteWebhookByUrl.');
            }
            var localVarPath = "/webhook/webhooks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Webhook" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(webhook || {}) : (webhook || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an individual log for a webhook given the webhook oid the request id.
         * @summary Retrieve an individual log
         * @param {number} webhookOid The webhook oid that owns the log.
         * @param {string} requestId The request id associated with the log to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLog: function (webhookOid, requestId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling getWebhookLog.');
            }
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId', 'Required parameter requestId was null or undefined when calling getWebhookLog.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}/logs/{requestId}"
                .replace("{" + "webhookOid" + "}", encodeURIComponent(String(webhookOid)))
                .replace("{" + "requestId" + "}", encodeURIComponent(String(requestId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
         * @summary Retrieve the log summaries
         * @param {number} webhookOid The webhook oid to retrieve log summaries for.
         * @param {number} [limit] The maximum number of records to return on this one API call.
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch log summaries that have been delivered since this date/time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogSummaries: function (webhookOid, limit, offset, since, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling getWebhookLogSummaries.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}/logs"
                .replace("{" + "webhookOid" + "}", encodeURIComponent(String(webhookOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['_since'] = since;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the webhooks associated with this application.
         * @summary Retrieve webhooks
         * @param {number} [limit] The maximum number of records to return on this one API call.
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the webhooks.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: function (limit, offset, sort, placeholders, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/webhook/webhooks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['_offset'] = offset;
            }
            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
         * @summary Add a webhook
         * @param {Webhook} webhook Webhook to create
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWebhook: function (webhook, placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhook' is not null or undefined
            if (webhook === null || webhook === undefined) {
                throw new RequiredError('webhook', 'Required parameter webhook was null or undefined when calling insertWebhook.');
            }
            var localVarPath = "/webhook/webhooks";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Webhook" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(webhook || {}) : (webhook || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
         * @summary Resend events to the webhook endpoint.
         * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
         * @param {string} eventName The event to reflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEvent: function (webhookOid, eventName, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling resendEvent.');
            }
            // verify required parameter 'eventName' is not null or undefined
            if (eventName === null || eventName === undefined) {
                throw new RequiredError('eventName', 'Required parameter eventName was null or undefined when calling resendEvent.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}/reflow/{eventName}"
                .replace("{" + "webhookOid" + "}", encodeURIComponent(String(webhookOid)))
                .replace("{" + "eventName" + "}", encodeURIComponent(String(eventName)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a webhook on the account
         * @summary Update a webhook
         * @param {Webhook} webhook Webhook to update
         * @param {number} webhookOid The webhook oid to update.
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: function (webhook, webhookOid, placeholders, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'webhook' is not null or undefined
            if (webhook === null || webhook === undefined) {
                throw new RequiredError('webhook', 'Required parameter webhook was null or undefined when calling updateWebhook.');
            }
            // verify required parameter 'webhookOid' is not null or undefined
            if (webhookOid === null || webhookOid === undefined) {
                throw new RequiredError('webhookOid', 'Required parameter webhookOid was null or undefined when calling updateWebhook.');
            }
            var localVarPath = "/webhook/webhooks/{webhookOid}"
                .replace("{" + "webhookOid" + "}", encodeURIComponent(String(webhookOid)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (configuration && configuration.apiVersion) {
                localVarHeaderParameter["X-UltraCart-Api-Version"] = configuration.apiVersion;
            }
            // authentication ultraCartOauth required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("ultraCartOauth", ["webhook_write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            // authentication ultraCartSimpleApiKey required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-ultracart-simple-key")
                    : configuration.apiKey;
                localVarHeaderParameter["x-ultracart-simple-key"] = localVarApiKeyValue;
            }
            if (placeholders !== undefined) {
                localVarQueryParameter['_placeholders'] = placeholders;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=UTF-8';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Webhook" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(webhook || {}) : (webhook || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * WebhookApi - functional programming interface
 * @export
 */
exports.WebhookApiFp = function (configuration) {
    return {
        /**
         * Delete a webhook on the UltraCart account.
         * @summary Delete a webhook
         * @param {number} webhookOid The webhook oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: function (webhookOid, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).deleteWebhook(webhookOid, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
         * @summary Delete a webhook by URL
         * @param {Webhook} webhook Webhook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookByUrl: function (webhook, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).deleteWebhookByUrl(webhook, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves an individual log for a webhook given the webhook oid the request id.
         * @summary Retrieve an individual log
         * @param {number} webhookOid The webhook oid that owns the log.
         * @param {string} requestId The request id associated with the log to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLog: function (webhookOid, requestId, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).getWebhookLog(webhookOid, requestId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
         * @summary Retrieve the log summaries
         * @param {number} webhookOid The webhook oid to retrieve log summaries for.
         * @param {number} [limit] The maximum number of records to return on this one API call.
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch log summaries that have been delivered since this date/time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogSummaries: function (webhookOid, limit, offset, since, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).getWebhookLogSummaries(webhookOid, limit, offset, since, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves the webhooks associated with this application.
         * @summary Retrieve webhooks
         * @param {number} [limit] The maximum number of records to return on this one API call.
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the webhooks.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: function (limit, offset, sort, placeholders, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).getWebhooks(limit, offset, sort, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
         * @summary Add a webhook
         * @param {Webhook} webhook Webhook to create
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWebhook: function (webhook, placeholders, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).insertWebhook(webhook, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
         * @summary Resend events to the webhook endpoint.
         * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
         * @param {string} eventName The event to reflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEvent: function (webhookOid, eventName, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).resendEvent(webhookOid, eventName, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Update a webhook on the account
         * @summary Update a webhook
         * @param {Webhook} webhook Webhook to update
         * @param {number} webhookOid The webhook oid to update.
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: function (webhook, webhookOid, placeholders, options) {
            var localVarFetchArgs = exports.WebhookApiFetchParamCreator(configuration).updateWebhook(webhook, webhookOid, placeholders, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * WebhookApi - factory interface
 * @export
 */
exports.WebhookApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Delete a webhook on the UltraCart account.
         * @summary Delete a webhook
         * @param {number} webhookOid The webhook oid to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: function (webhookOid, options) {
            return exports.WebhookApiFp(configuration).deleteWebhook(webhookOid, options)(fetch, basePath);
        },
        /**
         * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
         * @summary Delete a webhook by URL
         * @param {Webhook} webhook Webhook to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookByUrl: function (webhook, options) {
            return exports.WebhookApiFp(configuration).deleteWebhookByUrl(webhook, options)(fetch, basePath);
        },
        /**
         * Retrieves an individual log for a webhook given the webhook oid the request id.
         * @summary Retrieve an individual log
         * @param {number} webhookOid The webhook oid that owns the log.
         * @param {string} requestId The request id associated with the log to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLog: function (webhookOid, requestId, options) {
            return exports.WebhookApiFp(configuration).getWebhookLog(webhookOid, requestId, options)(fetch, basePath);
        },
        /**
         * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
         * @summary Retrieve the log summaries
         * @param {number} webhookOid The webhook oid to retrieve log summaries for.
         * @param {number} [limit] The maximum number of records to return on this one API call.
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [since] Fetch log summaries that have been delivered since this date/time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogSummaries: function (webhookOid, limit, offset, since, options) {
            return exports.WebhookApiFp(configuration).getWebhookLogSummaries(webhookOid, limit, offset, since, options)(fetch, basePath);
        },
        /**
         * Retrieves the webhooks associated with this application.
         * @summary Retrieve webhooks
         * @param {number} [limit] The maximum number of records to return on this one API call.
         * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
         * @param {string} [sort] The sort order of the webhooks.  See documentation for examples
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: function (limit, offset, sort, placeholders, options) {
            return exports.WebhookApiFp(configuration).getWebhooks(limit, offset, sort, placeholders, options)(fetch, basePath);
        },
        /**
         * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
         * @summary Add a webhook
         * @param {Webhook} webhook Webhook to create
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insertWebhook: function (webhook, placeholders, options) {
            return exports.WebhookApiFp(configuration).insertWebhook(webhook, placeholders, options)(fetch, basePath);
        },
        /**
         * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
         * @summary Resend events to the webhook endpoint.
         * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
         * @param {string} eventName The event to reflow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendEvent: function (webhookOid, eventName, options) {
            return exports.WebhookApiFp(configuration).resendEvent(webhookOid, eventName, options)(fetch, basePath);
        },
        /**
         * Update a webhook on the account
         * @summary Update a webhook
         * @param {Webhook} webhook Webhook to update
         * @param {number} webhookOid The webhook oid to update.
         * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: function (webhook, webhookOid, placeholders, options) {
            return exports.WebhookApiFp(configuration).updateWebhook(webhook, webhookOid, placeholders, options)(fetch, basePath);
        },
    };
};
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
var WebhookApi = /** @class */ (function (_super) {
    __extends(WebhookApi, _super);
    function WebhookApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete a webhook on the UltraCart account.
     * @summary Delete a webhook
     * @param {number} webhookOid The webhook oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.deleteWebhook = function (webhookOid, options) {
        return exports.WebhookApiFp(this.configuration).deleteWebhook(webhookOid, options)(this.fetch, this.basePath);
    };
    /**
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook.
     * @summary Delete a webhook by URL
     * @param {Webhook} webhook Webhook to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.deleteWebhookByUrl = function (webhook, options) {
        return exports.WebhookApiFp(this.configuration).deleteWebhookByUrl(webhook, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves an individual log for a webhook given the webhook oid the request id.
     * @summary Retrieve an individual log
     * @param {number} webhookOid The webhook oid that owns the log.
     * @param {string} requestId The request id associated with the log to view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.getWebhookLog = function (webhookOid, requestId, options) {
        return exports.WebhookApiFp(this.configuration).getWebhookLog(webhookOid, requestId, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed.
     * @summary Retrieve the log summaries
     * @param {number} webhookOid The webhook oid to retrieve log summaries for.
     * @param {number} [limit] The maximum number of records to return on this one API call.
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch log summaries that have been delivered since this date/time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.getWebhookLogSummaries = function (webhookOid, limit, offset, since, options) {
        return exports.WebhookApiFp(this.configuration).getWebhookLogSummaries(webhookOid, limit, offset, since, options)(this.fetch, this.basePath);
    };
    /**
     * Retrieves the webhooks associated with this application.
     * @summary Retrieve webhooks
     * @param {number} [limit] The maximum number of records to return on this one API call.
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the webhooks.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.getWebhooks = function (limit, offset, sort, placeholders, options) {
        return exports.WebhookApiFp(this.configuration).getWebhooks(limit, offset, sort, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook.
     * @summary Add a webhook
     * @param {Webhook} webhook Webhook to create
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.insertWebhook = function (webhook, placeholders, options) {
        return exports.WebhookApiFp(this.configuration).insertWebhook(webhook, placeholders, options)(this.fetch, this.basePath);
    };
    /**
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook.
     * @summary Resend events to the webhook endpoint.
     * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
     * @param {string} eventName The event to reflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.resendEvent = function (webhookOid, eventName, options) {
        return exports.WebhookApiFp(this.configuration).resendEvent(webhookOid, eventName, options)(this.fetch, this.basePath);
    };
    /**
     * Update a webhook on the account
     * @summary Update a webhook
     * @param {Webhook} webhook Webhook to update
     * @param {number} webhookOid The webhook oid to update.
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    WebhookApi.prototype.updateWebhook = function (webhook, webhookOid, placeholders, options) {
        return exports.WebhookApiFp(this.configuration).updateWebhook(webhook, webhookOid, placeholders, options)(this.fetch, this.basePath);
    };
    return WebhookApi;
}(BaseAPI));
exports.WebhookApi = WebhookApi;

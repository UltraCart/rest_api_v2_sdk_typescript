"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var localVarRequest = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'https://secure.ultracart.com/rest/v2';
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var ObjectSerializer = (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty];
                }
                else {
                    return expectedType;
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            var subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            var subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    };
    return ObjectSerializer;
}());
var AccountsReceivableRetryConfig = (function () {
    function AccountsReceivableRetryConfig() {
    }
    AccountsReceivableRetryConfig.getAttributeTypeMap = function () {
        return AccountsReceivableRetryConfig.attributeTypeMap;
    };
    AccountsReceivableRetryConfig.discriminator = undefined;
    AccountsReceivableRetryConfig.attributeTypeMap = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "allowProcessLinkedAccounts",
            "baseName": "allow_process_linked_accounts",
            "type": "boolean"
        },
        {
            "name": "currentServicePlan",
            "baseName": "current_service_plan",
            "type": "string"
        },
        {
            "name": "dailyActivityList",
            "baseName": "daily_activity_list",
            "type": "Array<AccountsReceivableRetryDayActivity>"
        },
        {
            "name": "managedByLinkedAccountMerchantId",
            "baseName": "managed_by_linked_account_merchant_id",
            "type": "boolean"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "notifyEmails",
            "baseName": "notify_emails",
            "type": "Array<string>"
        },
        {
            "name": "notifyRejections",
            "baseName": "notify_rejections",
            "type": "boolean"
        },
        {
            "name": "notifySuccesses",
            "baseName": "notify_successes",
            "type": "boolean"
        },
        {
            "name": "processLinkedAccounts",
            "baseName": "process_linked_accounts",
            "type": "boolean"
        },
        {
            "name": "processingPercentage",
            "baseName": "processing_percentage",
            "type": "string"
        },
        {
            "name": "rejectAtEnd",
            "baseName": "reject_at_end",
            "type": "boolean"
        },
        {
            "name": "trialMode",
            "baseName": "trial_mode",
            "type": "boolean"
        },
        {
            "name": "trialModeExpirationDts",
            "baseName": "trial_mode_expiration_dts",
            "type": "string"
        }
    ];
    return AccountsReceivableRetryConfig;
}());
exports.AccountsReceivableRetryConfig = AccountsReceivableRetryConfig;
var AccountsReceivableRetryConfigResponse = (function () {
    function AccountsReceivableRetryConfigResponse() {
    }
    AccountsReceivableRetryConfigResponse.getAttributeTypeMap = function () {
        return AccountsReceivableRetryConfigResponse.attributeTypeMap;
    };
    AccountsReceivableRetryConfigResponse.discriminator = undefined;
    AccountsReceivableRetryConfigResponse.attributeTypeMap = [
        {
            "name": "config",
            "baseName": "config",
            "type": "AccountsReceivableRetryConfig"
        },
        {
            "name": "couponCodes",
            "baseName": "coupon_codes",
            "type": "Array<string>"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<string>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "hasLinkedAccounts",
            "baseName": "has_linked_accounts",
            "type": "boolean"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return AccountsReceivableRetryConfigResponse;
}());
exports.AccountsReceivableRetryConfigResponse = AccountsReceivableRetryConfigResponse;
var AccountsReceivableRetryDayActivity = (function () {
    function AccountsReceivableRetryDayActivity() {
    }
    AccountsReceivableRetryDayActivity.getAttributeTypeMap = function () {
        return AccountsReceivableRetryDayActivity.attributeTypeMap;
    };
    AccountsReceivableRetryDayActivity.discriminator = undefined;
    AccountsReceivableRetryDayActivity.attributeTypeMap = [
        {
            "name": "charge",
            "baseName": "charge",
            "type": "boolean"
        },
        {
            "name": "couponCode",
            "baseName": "coupon_code",
            "type": "string"
        },
        {
            "name": "day",
            "baseName": "day",
            "type": "number"
        }
    ];
    return AccountsReceivableRetryDayActivity;
}());
exports.AccountsReceivableRetryDayActivity = AccountsReceivableRetryDayActivity;
var AccountsReceivableRetryStatAccount = (function () {
    function AccountsReceivableRetryStatAccount() {
    }
    AccountsReceivableRetryStatAccount.getAttributeTypeMap = function () {
        return AccountsReceivableRetryStatAccount.attributeTypeMap;
    };
    AccountsReceivableRetryStatAccount.discriminator = undefined;
    AccountsReceivableRetryStatAccount.attributeTypeMap = [
        {
            "name": "days",
            "baseName": "days",
            "type": "Array<AccountsReceivableRetryStatMetrics>"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "overall",
            "baseName": "overall",
            "type": "AccountsReceivableRetryStatMetrics"
        },
        {
            "name": "revenueForPeriod",
            "baseName": "revenue_for_period",
            "type": "Array<AccountsReceivableRetryStatRevenue>"
        }
    ];
    return AccountsReceivableRetryStatAccount;
}());
exports.AccountsReceivableRetryStatAccount = AccountsReceivableRetryStatAccount;
var AccountsReceivableRetryStatMetrics = (function () {
    function AccountsReceivableRetryStatMetrics() {
    }
    AccountsReceivableRetryStatMetrics.getAttributeTypeMap = function () {
        return AccountsReceivableRetryStatMetrics.attributeTypeMap;
    };
    AccountsReceivableRetryStatMetrics.discriminator = undefined;
    AccountsReceivableRetryStatMetrics.attributeTypeMap = [
        {
            "name": "attempts",
            "baseName": "attempts",
            "type": "number"
        },
        {
            "name": "attemptsFormatted",
            "baseName": "attempts_formatted",
            "type": "string"
        },
        {
            "name": "conversionRate",
            "baseName": "conversion_rate",
            "type": "number"
        },
        {
            "name": "conversionRateFormatted",
            "baseName": "conversion_rate_formatted",
            "type": "string"
        },
        {
            "name": "day",
            "baseName": "day",
            "type": "number"
        },
        {
            "name": "discounts",
            "baseName": "discounts",
            "type": "number"
        },
        {
            "name": "discountsFormatted",
            "baseName": "discounts_formatted",
            "type": "string"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "revenueFormatted",
            "baseName": "revenue_formatted",
            "type": "string"
        },
        {
            "name": "successes",
            "baseName": "successes",
            "type": "number"
        },
        {
            "name": "successesFormatted",
            "baseName": "successes_formatted",
            "type": "string"
        }
    ];
    return AccountsReceivableRetryStatMetrics;
}());
exports.AccountsReceivableRetryStatMetrics = AccountsReceivableRetryStatMetrics;
var AccountsReceivableRetryStatRevenue = (function () {
    function AccountsReceivableRetryStatRevenue() {
    }
    AccountsReceivableRetryStatRevenue.getAttributeTypeMap = function () {
        return AccountsReceivableRetryStatRevenue.attributeTypeMap;
    };
    AccountsReceivableRetryStatRevenue.discriminator = undefined;
    AccountsReceivableRetryStatRevenue.attributeTypeMap = [
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        }
    ];
    return AccountsReceivableRetryStatRevenue;
}());
exports.AccountsReceivableRetryStatRevenue = AccountsReceivableRetryStatRevenue;
var AccountsReceivableRetryStatsResponse = (function () {
    function AccountsReceivableRetryStatsResponse() {
    }
    AccountsReceivableRetryStatsResponse.getAttributeTypeMap = function () {
        return AccountsReceivableRetryStatsResponse.attributeTypeMap;
    };
    AccountsReceivableRetryStatsResponse.discriminator = undefined;
    AccountsReceivableRetryStatsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "linkedAccounts",
            "baseName": "linked_accounts",
            "type": "Array<AccountsReceivableRetryStatAccount>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "overall",
            "baseName": "overall",
            "type": "AccountsReceivableRetryStatAccount"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return AccountsReceivableRetryStatsResponse;
}());
exports.AccountsReceivableRetryStatsResponse = AccountsReceivableRetryStatsResponse;
var Activity = (function () {
    function Activity() {
    }
    Activity.getAttributeTypeMap = function () {
        return Activity.attributeTypeMap;
    };
    Activity.discriminator = undefined;
    Activity.attributeTypeMap = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "metric",
            "baseName": "metric",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "ts",
            "baseName": "ts",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        }
    ];
    return Activity;
}());
exports.Activity = Activity;
var AddLibraryItemRequest = (function () {
    function AddLibraryItemRequest() {
    }
    AddLibraryItemRequest.getAttributeTypeMap = function () {
        return AddLibraryItemRequest.attributeTypeMap;
    };
    AddLibraryItemRequest.discriminator = undefined;
    AddLibraryItemRequest.attributeTypeMap = [
        {
            "name": "cjson",
            "baseName": "cjson",
            "type": "string"
        },
        {
            "name": "contentType",
            "baseName": "content_type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "emailName",
            "baseName": "email_name",
            "type": "string"
        },
        {
            "name": "emailPath",
            "baseName": "email_path",
            "type": "string"
        },
        {
            "name": "screenshots",
            "baseName": "screenshots",
            "type": "Array<LibraryItemScreenshot>"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "upsellOfferOid",
            "baseName": "upsell_offer_oid",
            "type": "number"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        }
    ];
    return AddLibraryItemRequest;
}());
exports.AddLibraryItemRequest = AddLibraryItemRequest;
var AffiliateClick = (function () {
    function AffiliateClick() {
    }
    AffiliateClick.getAttributeTypeMap = function () {
        return AffiliateClick.attributeTypeMap;
    };
    AffiliateClick.discriminator = undefined;
    AffiliateClick.attributeTypeMap = [
        {
            "name": "affiliateClickOid",
            "baseName": "affiliate_click_oid",
            "type": "number"
        },
        {
            "name": "affiliateLinkOid",
            "baseName": "affiliate_link_oid",
            "type": "number"
        },
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "clickDts",
            "baseName": "click_dts",
            "type": "string"
        },
        {
            "name": "ipAddress",
            "baseName": "ip_address",
            "type": "string"
        },
        {
            "name": "landingPage",
            "baseName": "landing_page",
            "type": "string"
        },
        {
            "name": "landingPageQueryString",
            "baseName": "landing_page_query_string",
            "type": "string"
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "AffiliateLink"
        },
        {
            "name": "referrer",
            "baseName": "referrer",
            "type": "string"
        },
        {
            "name": "referrerQueryString",
            "baseName": "referrer_query_string",
            "type": "string"
        },
        {
            "name": "subId",
            "baseName": "sub_id",
            "type": "string"
        }
    ];
    return AffiliateClick;
}());
exports.AffiliateClick = AffiliateClick;
var AffiliateClickQuery = (function () {
    function AffiliateClickQuery() {
    }
    AffiliateClickQuery.getAttributeTypeMap = function () {
        return AffiliateClickQuery.attributeTypeMap;
    };
    AffiliateClickQuery.discriminator = undefined;
    AffiliateClickQuery.attributeTypeMap = [
        {
            "name": "affiliateLinkOid",
            "baseName": "affiliate_link_oid",
            "type": "number"
        },
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "clickDtsBegin",
            "baseName": "click_dts_begin",
            "type": "string"
        },
        {
            "name": "clickDtsEnd",
            "baseName": "click_dts_end",
            "type": "string"
        },
        {
            "name": "ipAddress",
            "baseName": "ip_address",
            "type": "string"
        },
        {
            "name": "subId",
            "baseName": "sub_id",
            "type": "string"
        }
    ];
    return AffiliateClickQuery;
}());
exports.AffiliateClickQuery = AffiliateClickQuery;
var AffiliateClicksResponse = (function () {
    function AffiliateClicksResponse() {
    }
    AffiliateClicksResponse.getAttributeTypeMap = function () {
        return AffiliateClicksResponse.attributeTypeMap;
    };
    AffiliateClicksResponse.discriminator = undefined;
    AffiliateClicksResponse.attributeTypeMap = [
        {
            "name": "clicks",
            "baseName": "clicks",
            "type": "Array<AffiliateClick>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return AffiliateClicksResponse;
}());
exports.AffiliateClicksResponse = AffiliateClicksResponse;
var AffiliateLedger = (function () {
    function AffiliateLedger() {
    }
    AffiliateLedger.getAttributeTypeMap = function () {
        return AffiliateLedger.attributeTypeMap;
    };
    AffiliateLedger.discriminator = undefined;
    AffiliateLedger.attributeTypeMap = [
        {
            "name": "affiliateClickOid",
            "baseName": "affiliate_click_oid",
            "type": "number"
        },
        {
            "name": "affiliateLinkOid",
            "baseName": "affiliate_link_oid",
            "type": "number"
        },
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "assignedByUser",
            "baseName": "assigned_by_user",
            "type": "string"
        },
        {
            "name": "click",
            "baseName": "click",
            "type": "AffiliateClick"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "AffiliateLink"
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "Order"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "originalTransactionDts",
            "baseName": "original_transaction_dts",
            "type": "string"
        },
        {
            "name": "subId",
            "baseName": "sub_id",
            "type": "string"
        },
        {
            "name": "tierNumber",
            "baseName": "tier_number",
            "type": "string"
        },
        {
            "name": "transactionAmount",
            "baseName": "transaction_amount",
            "type": "number"
        },
        {
            "name": "transactionAmountPaid",
            "baseName": "transaction_amount_paid",
            "type": "number"
        },
        {
            "name": "transactionDts",
            "baseName": "transaction_dts",
            "type": "string"
        },
        {
            "name": "transactionMemo",
            "baseName": "transaction_memo",
            "type": "string"
        },
        {
            "name": "transactionPercentage",
            "baseName": "transaction_percentage",
            "type": "string"
        },
        {
            "name": "transactionState",
            "baseName": "transaction_state",
            "type": "AffiliateLedger.TransactionStateEnum"
        }
    ];
    return AffiliateLedger;
}());
exports.AffiliateLedger = AffiliateLedger;
(function (AffiliateLedger) {
    var TransactionStateEnum;
    (function (TransactionStateEnum) {
        TransactionStateEnum[TransactionStateEnum["Pending"] = 'Pending'] = "Pending";
        TransactionStateEnum[TransactionStateEnum["Posted"] = 'Posted'] = "Posted";
        TransactionStateEnum[TransactionStateEnum["Approved"] = 'Approved'] = "Approved";
        TransactionStateEnum[TransactionStateEnum["Paid"] = 'Paid'] = "Paid";
        TransactionStateEnum[TransactionStateEnum["Rejected"] = 'Rejected'] = "Rejected";
        TransactionStateEnum[TransactionStateEnum["PartiallyPaid"] = 'Partially Paid'] = "PartiallyPaid";
    })(TransactionStateEnum = AffiliateLedger.TransactionStateEnum || (AffiliateLedger.TransactionStateEnum = {}));
})(AffiliateLedger = exports.AffiliateLedger || (exports.AffiliateLedger = {}));
exports.AffiliateLedger = AffiliateLedger;
var AffiliateLedgerQuery = (function () {
    function AffiliateLedgerQuery() {
    }
    AffiliateLedgerQuery.getAttributeTypeMap = function () {
        return AffiliateLedgerQuery.attributeTypeMap;
    };
    AffiliateLedgerQuery.discriminator = undefined;
    AffiliateLedgerQuery.attributeTypeMap = [
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "subId",
            "baseName": "sub_id",
            "type": "string"
        },
        {
            "name": "transactionDtsBegin",
            "baseName": "transaction_dts_begin",
            "type": "string"
        },
        {
            "name": "transactionDtsEnd",
            "baseName": "transaction_dts_end",
            "type": "string"
        }
    ];
    return AffiliateLedgerQuery;
}());
exports.AffiliateLedgerQuery = AffiliateLedgerQuery;
var AffiliateLedgersResponse = (function () {
    function AffiliateLedgersResponse() {
    }
    AffiliateLedgersResponse.getAttributeTypeMap = function () {
        return AffiliateLedgersResponse.attributeTypeMap;
    };
    AffiliateLedgersResponse.discriminator = undefined;
    AffiliateLedgersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "ledgers",
            "baseName": "ledgers",
            "type": "Array<AffiliateLedger>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return AffiliateLedgersResponse;
}());
exports.AffiliateLedgersResponse = AffiliateLedgersResponse;
var AffiliateLink = (function () {
    function AffiliateLink() {
    }
    AffiliateLink.getAttributeTypeMap = function () {
        return AffiliateLink.attributeTypeMap;
    };
    AffiliateLink.discriminator = undefined;
    AffiliateLink.attributeTypeMap = [
        {
            "name": "affiliateLinkOid",
            "baseName": "affiliate_link_oid",
            "type": "number"
        },
        {
            "name": "affiliateManagedLinkOid",
            "baseName": "affiliate_managed_link_oid",
            "type": "number"
        },
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "affiliateProgramItemOid",
            "baseName": "affiliate_program_item_oid",
            "type": "number"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "creativeOid",
            "baseName": "creative_oid",
            "type": "number"
        },
        {
            "name": "customHtml",
            "baseName": "custom_html",
            "type": "string"
        },
        {
            "name": "customHtmlApprovalStatus",
            "baseName": "custom_html_approval_status",
            "type": "AffiliateLink.CustomHtmlApprovalStatusEnum"
        },
        {
            "name": "customLandingUrl",
            "baseName": "custom_landing_url",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "invisibleLinkApprovalStatus",
            "baseName": "invisible_link_approval_status",
            "type": "AffiliateLink.InvisibleLinkApprovalStatusEnum"
        },
        {
            "name": "invisibleLinkUrlPrefix",
            "baseName": "invisible_link_url_prefix",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "AffiliateLink.TypeEnum"
        }
    ];
    return AffiliateLink;
}());
exports.AffiliateLink = AffiliateLink;
(function (AffiliateLink) {
    var CustomHtmlApprovalStatusEnum;
    (function (CustomHtmlApprovalStatusEnum) {
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Pending"] = 'Pending'] = "Pending";
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Approved"] = 'Approved'] = "Approved";
        CustomHtmlApprovalStatusEnum[CustomHtmlApprovalStatusEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(CustomHtmlApprovalStatusEnum = AffiliateLink.CustomHtmlApprovalStatusEnum || (AffiliateLink.CustomHtmlApprovalStatusEnum = {}));
    var InvisibleLinkApprovalStatusEnum;
    (function (InvisibleLinkApprovalStatusEnum) {
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Pending"] = 'Pending'] = "Pending";
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Approved"] = 'Approved'] = "Approved";
        InvisibleLinkApprovalStatusEnum[InvisibleLinkApprovalStatusEnum["Rejected"] = 'Rejected'] = "Rejected";
    })(InvisibleLinkApprovalStatusEnum = AffiliateLink.InvisibleLinkApprovalStatusEnum || (AffiliateLink.InvisibleLinkApprovalStatusEnum = {}));
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'image'] = "Image";
        TypeEnum[TypeEnum["Text"] = 'text'] = "Text";
        TypeEnum[TypeEnum["Invisible"] = 'invisible'] = "Invisible";
        TypeEnum[TypeEnum["Direct"] = 'direct'] = "Direct";
    })(TypeEnum = AffiliateLink.TypeEnum || (AffiliateLink.TypeEnum = {}));
})(AffiliateLink = exports.AffiliateLink || (exports.AffiliateLink = {}));
exports.AffiliateLink = AffiliateLink;
var ApiUserApplicationProfile = (function () {
    function ApiUserApplicationProfile() {
    }
    ApiUserApplicationProfile.getAttributeTypeMap = function () {
        return ApiUserApplicationProfile.attributeTypeMap;
    };
    ApiUserApplicationProfile.discriminator = undefined;
    ApiUserApplicationProfile.attributeTypeMap = [
        {
            "name": "apiApplicationLogoUrl",
            "baseName": "api_application_logo_url",
            "type": "string"
        },
        {
            "name": "applicationDescription",
            "baseName": "application_description",
            "type": "string"
        },
        {
            "name": "applicationName",
            "baseName": "application_name",
            "type": "string"
        },
        {
            "name": "developerName",
            "baseName": "developer_name",
            "type": "string"
        },
        {
            "name": "developerWebsite",
            "baseName": "developer_website",
            "type": "string"
        }
    ];
    return ApiUserApplicationProfile;
}());
exports.ApiUserApplicationProfile = ApiUserApplicationProfile;
var ApplyLibraryItemRequest = (function () {
    function ApplyLibraryItemRequest() {
    }
    ApplyLibraryItemRequest.getAttributeTypeMap = function () {
        return ApplyLibraryItemRequest.attributeTypeMap;
    };
    ApplyLibraryItemRequest.discriminator = undefined;
    ApplyLibraryItemRequest.attributeTypeMap = [
        {
            "name": "emailUuid",
            "baseName": "email_uuid",
            "type": "string"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        }
    ];
    return ApplyLibraryItemRequest;
}());
exports.ApplyLibraryItemRequest = ApplyLibraryItemRequest;
var ApplyLibraryItemResponse = (function () {
    function ApplyLibraryItemResponse() {
    }
    ApplyLibraryItemResponse.getAttributeTypeMap = function () {
        return ApplyLibraryItemResponse.attributeTypeMap;
    };
    ApplyLibraryItemResponse.discriminator = undefined;
    ApplyLibraryItemResponse.attributeTypeMap = [
        {
            "name": "cjson",
            "baseName": "cjson",
            "type": "string"
        },
        {
            "name": "contentType",
            "baseName": "content_type",
            "type": "string"
        },
        {
            "name": "emailTemplateVmPath",
            "baseName": "email_template_vm_path",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ApplyLibraryItemResponse;
}());
exports.ApplyLibraryItemResponse = ApplyLibraryItemResponse;
var AutoOrder = (function () {
    function AutoOrder() {
    }
    AutoOrder.getAttributeTypeMap = function () {
        return AutoOrder.attributeTypeMap;
    };
    AutoOrder.discriminator = undefined;
    AutoOrder.attributeTypeMap = [
        {
            "name": "autoOrderCode",
            "baseName": "auto_order_code",
            "type": "string"
        },
        {
            "name": "autoOrderOid",
            "baseName": "auto_order_oid",
            "type": "number"
        },
        {
            "name": "cancelAfterNextXOrders",
            "baseName": "cancel_after_next_x_orders",
            "type": "number"
        },
        {
            "name": "cancelDowngrade",
            "baseName": "cancel_downgrade",
            "type": "boolean"
        },
        {
            "name": "cancelUpgrade",
            "baseName": "cancel_upgrade",
            "type": "boolean"
        },
        {
            "name": "canceledByUser",
            "baseName": "canceled_by_user",
            "type": "string"
        },
        {
            "name": "canceledDts",
            "baseName": "canceled_dts",
            "type": "string"
        },
        {
            "name": "completed",
            "baseName": "completed",
            "type": "boolean"
        },
        {
            "name": "creditCardAttempt",
            "baseName": "credit_card_attempt",
            "type": "number"
        },
        {
            "name": "disabledDts",
            "baseName": "disabled_dts",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "failureReason",
            "baseName": "failure_reason",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<AutoOrderItem>"
        },
        {
            "name": "nextAttempt",
            "baseName": "next_attempt",
            "type": "string"
        },
        {
            "name": "originalOrder",
            "baseName": "original_order",
            "type": "Order"
        },
        {
            "name": "originalOrderId",
            "baseName": "original_order_id",
            "type": "string"
        },
        {
            "name": "overrideAffiliateId",
            "baseName": "override_affiliate_id",
            "type": "number"
        },
        {
            "name": "rebillOrders",
            "baseName": "rebill_orders",
            "type": "Array<Order>"
        },
        {
            "name": "rotatingTransactionGatewayCode",
            "baseName": "rotating_transaction_gateway_code",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "AutoOrder.StatusEnum"
        }
    ];
    return AutoOrder;
}());
exports.AutoOrder = AutoOrder;
(function (AutoOrder) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Canceled"] = 'canceled'] = "Canceled";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
    })(StatusEnum = AutoOrder.StatusEnum || (AutoOrder.StatusEnum = {}));
})(AutoOrder = exports.AutoOrder || (exports.AutoOrder = {}));
exports.AutoOrder = AutoOrder;
var AutoOrderItem = (function () {
    function AutoOrderItem() {
    }
    AutoOrderItem.getAttributeTypeMap = function () {
        return AutoOrderItem.attributeTypeMap;
    };
    AutoOrderItem.discriminator = undefined;
    AutoOrderItem.attributeTypeMap = [
        {
            "name": "arbitraryItemId",
            "baseName": "arbitrary_item_id",
            "type": "string"
        },
        {
            "name": "arbitraryPercentageDiscount",
            "baseName": "arbitrary_percentage_discount",
            "type": "number"
        },
        {
            "name": "arbitraryQuantity",
            "baseName": "arbitrary_quantity",
            "type": "number"
        },
        {
            "name": "arbitraryScheduleDays",
            "baseName": "arbitrary_schedule_days",
            "type": "number"
        },
        {
            "name": "arbitraryUnitCost",
            "baseName": "arbitrary_unit_cost",
            "type": "number"
        },
        {
            "name": "arbitraryUnitCostRemainingOrders",
            "baseName": "arbitrary_unit_cost_remaining_orders",
            "type": "number"
        },
        {
            "name": "autoOrderItemOid",
            "baseName": "auto_order_item_oid",
            "type": "number"
        },
        {
            "name": "frequency",
            "baseName": "frequency",
            "type": "AutoOrderItem.FrequencyEnum"
        },
        {
            "name": "futureSchedules",
            "baseName": "future_schedules",
            "type": "Array<AutoOrderItemFutureSchedule>"
        },
        {
            "name": "lastOrderDts",
            "baseName": "last_order_dts",
            "type": "string"
        },
        {
            "name": "lifeTimeValue",
            "baseName": "life_time_value",
            "type": "number"
        },
        {
            "name": "nextPreshipmentNoticeDts",
            "baseName": "next_preshipment_notice_dts",
            "type": "string"
        },
        {
            "name": "nextShipmentDts",
            "baseName": "next_shipment_dts",
            "type": "string"
        },
        {
            "name": "noOrderAfterDts",
            "baseName": "no_order_after_dts",
            "type": "string"
        },
        {
            "name": "numberOfRebills",
            "baseName": "number_of_rebills",
            "type": "number"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<AutoOrderItemOption>"
        },
        {
            "name": "originalItemId",
            "baseName": "original_item_id",
            "type": "string"
        },
        {
            "name": "originalQuantity",
            "baseName": "original_quantity",
            "type": "number"
        },
        {
            "name": "paypalPayerId",
            "baseName": "paypal_payer_id",
            "type": "string"
        },
        {
            "name": "paypalRecurringPaymentProfileId",
            "baseName": "paypal_recurring_payment_profile_id",
            "type": "string"
        },
        {
            "name": "preshipmentNoticeSent",
            "baseName": "preshipment_notice_sent",
            "type": "boolean"
        },
        {
            "name": "rebillValue",
            "baseName": "rebill_value",
            "type": "number"
        },
        {
            "name": "remainingRepeatCount",
            "baseName": "remaining_repeat_count",
            "type": "number"
        },
        {
            "name": "simpleSchedule",
            "baseName": "simple_schedule",
            "type": "AutoOrderItemSimpleSchedule"
        }
    ];
    return AutoOrderItem;
}());
exports.AutoOrderItem = AutoOrderItem;
(function (AutoOrderItem) {
    var FrequencyEnum;
    (function (FrequencyEnum) {
        FrequencyEnum[FrequencyEnum["Weekly"] = 'Weekly'] = "Weekly";
        FrequencyEnum[FrequencyEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        FrequencyEnum[FrequencyEnum["Every_"] = 'Every...'] = "Every_";
        FrequencyEnum[FrequencyEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        FrequencyEnum[FrequencyEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        FrequencyEnum[FrequencyEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        FrequencyEnum[FrequencyEnum["Monthly"] = 'Monthly'] = "Monthly";
        FrequencyEnum[FrequencyEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        FrequencyEnum[FrequencyEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        FrequencyEnum[FrequencyEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        FrequencyEnum[FrequencyEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        FrequencyEnum[FrequencyEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        FrequencyEnum[FrequencyEnum["Yearly"] = 'Yearly'] = "Yearly";
    })(FrequencyEnum = AutoOrderItem.FrequencyEnum || (AutoOrderItem.FrequencyEnum = {}));
})(AutoOrderItem = exports.AutoOrderItem || (exports.AutoOrderItem = {}));
exports.AutoOrderItem = AutoOrderItem;
var AutoOrderItemFutureSchedule = (function () {
    function AutoOrderItemFutureSchedule() {
    }
    AutoOrderItemFutureSchedule.getAttributeTypeMap = function () {
        return AutoOrderItemFutureSchedule.attributeTypeMap;
    };
    AutoOrderItemFutureSchedule.discriminator = undefined;
    AutoOrderItemFutureSchedule.attributeTypeMap = [
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "rebillCount",
            "baseName": "rebill_count",
            "type": "number"
        },
        {
            "name": "shipmentDts",
            "baseName": "shipment_dts",
            "type": "string"
        },
        {
            "name": "unitCost",
            "baseName": "unit_cost",
            "type": "number"
        }
    ];
    return AutoOrderItemFutureSchedule;
}());
exports.AutoOrderItemFutureSchedule = AutoOrderItemFutureSchedule;
var AutoOrderItemOption = (function () {
    function AutoOrderItemOption() {
    }
    AutoOrderItemOption.getAttributeTypeMap = function () {
        return AutoOrderItemOption.attributeTypeMap;
    };
    AutoOrderItemOption.discriminator = undefined;
    AutoOrderItemOption.attributeTypeMap = [
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return AutoOrderItemOption;
}());
exports.AutoOrderItemOption = AutoOrderItemOption;
var AutoOrderItemSimpleSchedule = (function () {
    function AutoOrderItemSimpleSchedule() {
    }
    AutoOrderItemSimpleSchedule.getAttributeTypeMap = function () {
        return AutoOrderItemSimpleSchedule.attributeTypeMap;
    };
    AutoOrderItemSimpleSchedule.discriminator = undefined;
    AutoOrderItemSimpleSchedule.attributeTypeMap = [
        {
            "name": "frequency",
            "baseName": "frequency",
            "type": "AutoOrderItemSimpleSchedule.FrequencyEnum"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "repeatCount",
            "baseName": "repeat_count",
            "type": "number"
        }
    ];
    return AutoOrderItemSimpleSchedule;
}());
exports.AutoOrderItemSimpleSchedule = AutoOrderItemSimpleSchedule;
(function (AutoOrderItemSimpleSchedule) {
    var FrequencyEnum;
    (function (FrequencyEnum) {
        FrequencyEnum[FrequencyEnum["Weekly"] = 'Weekly'] = "Weekly";
        FrequencyEnum[FrequencyEnum["Biweekly"] = 'Biweekly'] = "Biweekly";
        FrequencyEnum[FrequencyEnum["Every_"] = 'Every...'] = "Every_";
        FrequencyEnum[FrequencyEnum["Every10Days"] = 'Every 10 Days'] = "Every10Days";
        FrequencyEnum[FrequencyEnum["Every24Days"] = 'Every 24 Days'] = "Every24Days";
        FrequencyEnum[FrequencyEnum["Every28Days"] = 'Every 28 Days'] = "Every28Days";
        FrequencyEnum[FrequencyEnum["Monthly"] = 'Monthly'] = "Monthly";
        FrequencyEnum[FrequencyEnum["Every45Days"] = 'Every 45 Days'] = "Every45Days";
        FrequencyEnum[FrequencyEnum["Every2Months"] = 'Every 2 Months'] = "Every2Months";
        FrequencyEnum[FrequencyEnum["Every3Months"] = 'Every 3 Months'] = "Every3Months";
        FrequencyEnum[FrequencyEnum["Every4Months"] = 'Every 4 Months'] = "Every4Months";
        FrequencyEnum[FrequencyEnum["Every6Months"] = 'Every 6 Months'] = "Every6Months";
        FrequencyEnum[FrequencyEnum["Yearly"] = 'Yearly'] = "Yearly";
    })(FrequencyEnum = AutoOrderItemSimpleSchedule.FrequencyEnum || (AutoOrderItemSimpleSchedule.FrequencyEnum = {}));
})(AutoOrderItemSimpleSchedule = exports.AutoOrderItemSimpleSchedule || (exports.AutoOrderItemSimpleSchedule = {}));
exports.AutoOrderItemSimpleSchedule = AutoOrderItemSimpleSchedule;
var AutoOrderQuery = (function () {
    function AutoOrderQuery() {
    }
    AutoOrderQuery.getAttributeTypeMap = function () {
        return AutoOrderQuery.attributeTypeMap;
    };
    AutoOrderQuery.discriminator = undefined;
    AutoOrderQuery.attributeTypeMap = [
        {
            "name": "autoOrderCode",
            "baseName": "auto_order_code",
            "type": "string"
        },
        {
            "name": "cardType",
            "baseName": "card_type",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "nextShipmentDateBegin",
            "baseName": "next_shipment_date_begin",
            "type": "string"
        },
        {
            "name": "nextShipmentDateEnd",
            "baseName": "next_shipment_date_end",
            "type": "string"
        },
        {
            "name": "originalOrderDateBegin",
            "baseName": "original_order_date_begin",
            "type": "string"
        },
        {
            "name": "originalOrderDateEnd",
            "baseName": "original_order_date_end",
            "type": "string"
        },
        {
            "name": "originalOrderId",
            "baseName": "original_order_id",
            "type": "string"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        }
    ];
    return AutoOrderQuery;
}());
exports.AutoOrderQuery = AutoOrderQuery;
var AutoOrderQueryBatch = (function () {
    function AutoOrderQueryBatch() {
    }
    AutoOrderQueryBatch.getAttributeTypeMap = function () {
        return AutoOrderQueryBatch.attributeTypeMap;
    };
    AutoOrderQueryBatch.discriminator = undefined;
    AutoOrderQueryBatch.attributeTypeMap = [
        {
            "name": "autoOrderOids",
            "baseName": "auto_order_oids",
            "type": "Array<number>"
        }
    ];
    return AutoOrderQueryBatch;
}());
exports.AutoOrderQueryBatch = AutoOrderQueryBatch;
var AutoOrderResponse = (function () {
    function AutoOrderResponse() {
    }
    AutoOrderResponse.getAttributeTypeMap = function () {
        return AutoOrderResponse.attributeTypeMap;
    };
    AutoOrderResponse.discriminator = undefined;
    AutoOrderResponse.attributeTypeMap = [
        {
            "name": "autoOrder",
            "baseName": "auto_order",
            "type": "AutoOrder"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return AutoOrderResponse;
}());
exports.AutoOrderResponse = AutoOrderResponse;
var AutoOrdersRequest = (function () {
    function AutoOrdersRequest() {
    }
    AutoOrdersRequest.getAttributeTypeMap = function () {
        return AutoOrdersRequest.attributeTypeMap;
    };
    AutoOrdersRequest.discriminator = undefined;
    AutoOrdersRequest.attributeTypeMap = [
        {
            "name": "autoOrders",
            "baseName": "autoOrders",
            "type": "Array<AutoOrder>"
        }
    ];
    return AutoOrdersRequest;
}());
exports.AutoOrdersRequest = AutoOrdersRequest;
var AutoOrdersResponse = (function () {
    function AutoOrdersResponse() {
    }
    AutoOrdersResponse.getAttributeTypeMap = function () {
        return AutoOrdersResponse.attributeTypeMap;
    };
    AutoOrdersResponse.discriminator = undefined;
    AutoOrdersResponse.attributeTypeMap = [
        {
            "name": "autoOrders",
            "baseName": "auto_orders",
            "type": "Array<AutoOrder>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return AutoOrdersResponse;
}());
exports.AutoOrdersResponse = AutoOrdersResponse;
var AvalaraConfig = (function () {
    function AvalaraConfig() {
    }
    AvalaraConfig.getAttributeTypeMap = function () {
        return AvalaraConfig.attributeTypeMap;
    };
    AvalaraConfig.discriminator = undefined;
    AvalaraConfig.attributeTypeMap = [
        {
            "name": "accountId",
            "baseName": "account_id",
            "type": "string"
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "avalaraOid",
            "baseName": "avalara_oid",
            "type": "number"
        },
        {
            "name": "companyId",
            "baseName": "company_id",
            "type": "string"
        },
        {
            "name": "enableUpc",
            "baseName": "enable_upc",
            "type": "boolean"
        },
        {
            "name": "estimateOnly",
            "baseName": "estimate_only",
            "type": "boolean"
        },
        {
            "name": "guestCustomerCode",
            "baseName": "guest_customer_code",
            "type": "string"
        },
        {
            "name": "lastTestDts",
            "baseName": "last_test_dts",
            "type": "string"
        },
        {
            "name": "licenseKey",
            "baseName": "license_key",
            "type": "string"
        },
        {
            "name": "sandbox",
            "baseName": "sandbox",
            "type": "boolean"
        },
        {
            "name": "sendTestOrders",
            "baseName": "send_test_orders",
            "type": "boolean"
        },
        {
            "name": "serviceUrl",
            "baseName": "service_url",
            "type": "string"
        },
        {
            "name": "testResults",
            "baseName": "test_results",
            "type": "string"
        }
    ];
    return AvalaraConfig;
}());
exports.AvalaraConfig = AvalaraConfig;
var BaseResponse = (function () {
    function BaseResponse() {
    }
    BaseResponse.getAttributeTypeMap = function () {
        return BaseResponse.attributeTypeMap;
    };
    BaseResponse.discriminator = undefined;
    BaseResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return BaseResponse;
}());
exports.BaseResponse = BaseResponse;
var Cart = (function () {
    function Cart() {
    }
    Cart.getAttributeTypeMap = function () {
        return Cart.attributeTypeMap;
    };
    Cart.discriminator = undefined;
    Cart.attributeTypeMap = [
        {
            "name": "affiliate",
            "baseName": "affiliate",
            "type": "CartAffiliate"
        },
        {
            "name": "baseCurrencyCode",
            "baseName": "base_currency_code",
            "type": "string"
        },
        {
            "name": "billing",
            "baseName": "billing",
            "type": "CartBilling"
        },
        {
            "name": "buysafe",
            "baseName": "buysafe",
            "type": "CartBuysafe"
        },
        {
            "name": "cartId",
            "baseName": "cart_id",
            "type": "string"
        },
        {
            "name": "checkout",
            "baseName": "checkout",
            "type": "CartCheckout"
        },
        {
            "name": "coupons",
            "baseName": "coupons",
            "type": "Array<CartCoupon>"
        },
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "currencyConversion",
            "baseName": "currency_conversion",
            "type": "CartCurrencyConversion"
        },
        {
            "name": "customerProfile",
            "baseName": "customer_profile",
            "type": "CartCustomerProfile"
        },
        {
            "name": "exchangeRate",
            "baseName": "exchange_rate",
            "type": "number"
        },
        {
            "name": "gift",
            "baseName": "gift",
            "type": "CartGift"
        },
        {
            "name": "giftCertificate",
            "baseName": "gift_certificate",
            "type": "CartGiftCertificate"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<CartItem>"
        },
        {
            "name": "languageIsoCode",
            "baseName": "language_iso_code",
            "type": "string"
        },
        {
            "name": "loggedIn",
            "baseName": "logged_in",
            "type": "boolean"
        },
        {
            "name": "marketing",
            "baseName": "marketing",
            "type": "CartMarketing"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "payment",
            "baseName": "payment",
            "type": "CartPayment"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<CartProperty>"
        },
        {
            "name": "settings",
            "baseName": "settings",
            "type": "CartSettings"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "CartShipping"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "CartSummary"
        },
        {
            "name": "taxes",
            "baseName": "taxes",
            "type": "CartTaxes"
        },
        {
            "name": "upsellAfter",
            "baseName": "upsell_after",
            "type": "CartUpsellAfter"
        }
    ];
    return Cart;
}());
exports.Cart = Cart;
var CartAffiliate = (function () {
    function CartAffiliate() {
    }
    CartAffiliate.getAttributeTypeMap = function () {
        return CartAffiliate.attributeTypeMap;
    };
    CartAffiliate.discriminator = undefined;
    CartAffiliate.attributeTypeMap = [
        {
            "name": "affiliateId",
            "baseName": "affiliate_id",
            "type": "number"
        },
        {
            "name": "affiliateSubId",
            "baseName": "affiliate_sub_id",
            "type": "string"
        }
    ];
    return CartAffiliate;
}());
exports.CartAffiliate = CartAffiliate;
var CartAffirmCheckoutResponse = (function () {
    function CartAffirmCheckoutResponse() {
    }
    CartAffirmCheckoutResponse.getAttributeTypeMap = function () {
        return CartAffirmCheckoutResponse.attributeTypeMap;
    };
    CartAffirmCheckoutResponse.discriminator = undefined;
    CartAffirmCheckoutResponse.attributeTypeMap = [
        {
            "name": "checkoutJson",
            "baseName": "checkout_json",
            "type": "string"
        },
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        }
    ];
    return CartAffirmCheckoutResponse;
}());
exports.CartAffirmCheckoutResponse = CartAffirmCheckoutResponse;
var CartBilling = (function () {
    function CartBilling() {
    }
    CartBilling.getAttributeTypeMap = function () {
        return CartBilling.attributeTypeMap;
    };
    CartBilling.discriminator = undefined;
    CartBilling.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "ccEmails",
            "baseName": "cc_emails",
            "type": "Array<string>"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "emailConfirm",
            "baseName": "email_confirm",
            "type": "string"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return CartBilling;
}());
exports.CartBilling = CartBilling;
var CartBuysafe = (function () {
    function CartBuysafe() {
    }
    CartBuysafe.getAttributeTypeMap = function () {
        return CartBuysafe.attributeTypeMap;
    };
    CartBuysafe.discriminator = undefined;
    CartBuysafe.attributeTypeMap = [
        {
            "name": "bondAvailable",
            "baseName": "bond_available",
            "type": "boolean"
        },
        {
            "name": "bondCost",
            "baseName": "bond_cost",
            "type": "Currency"
        },
        {
            "name": "bondFree",
            "baseName": "bond_free",
            "type": "boolean"
        },
        {
            "name": "bondWanted",
            "baseName": "bond_wanted",
            "type": "boolean"
        },
        {
            "name": "cartDisplayText",
            "baseName": "cart_display_text",
            "type": "string"
        },
        {
            "name": "cartDisplayUrl",
            "baseName": "cart_display_url",
            "type": "string"
        }
    ];
    return CartBuysafe;
}());
exports.CartBuysafe = CartBuysafe;
var CartCheckout = (function () {
    function CartCheckout() {
    }
    CartCheckout.getAttributeTypeMap = function () {
        return CartCheckout.attributeTypeMap;
    };
    CartCheckout.discriminator = undefined;
    CartCheckout.attributeTypeMap = [
        {
            "name": "comments",
            "baseName": "comments",
            "type": "string"
        },
        {
            "name": "customField1",
            "baseName": "custom_field1",
            "type": "string"
        },
        {
            "name": "customField2",
            "baseName": "custom_field2",
            "type": "string"
        },
        {
            "name": "customField3",
            "baseName": "custom_field3",
            "type": "string"
        },
        {
            "name": "customField4",
            "baseName": "custom_field4",
            "type": "string"
        },
        {
            "name": "customField5",
            "baseName": "custom_field5",
            "type": "string"
        },
        {
            "name": "customField6",
            "baseName": "custom_field6",
            "type": "string"
        },
        {
            "name": "customField7",
            "baseName": "custom_field7",
            "type": "string"
        },
        {
            "name": "ipAddress",
            "baseName": "ip_address",
            "type": "string"
        },
        {
            "name": "returnCode",
            "baseName": "return_code",
            "type": "string"
        },
        {
            "name": "screenBrandingThemeCode",
            "baseName": "screen_branding_theme_code",
            "type": "string"
        },
        {
            "name": "storefrontHostName",
            "baseName": "storefront_host_name",
            "type": "string"
        },
        {
            "name": "userAgent",
            "baseName": "user_agent",
            "type": "string"
        }
    ];
    return CartCheckout;
}());
exports.CartCheckout = CartCheckout;
var CartCoupon = (function () {
    function CartCoupon() {
    }
    CartCoupon.getAttributeTypeMap = function () {
        return CartCoupon.attributeTypeMap;
    };
    CartCoupon.discriminator = undefined;
    CartCoupon.attributeTypeMap = [
        {
            "name": "couponCode",
            "baseName": "coupon_code",
            "type": "string"
        }
    ];
    return CartCoupon;
}());
exports.CartCoupon = CartCoupon;
var CartCurrencyConversion = (function () {
    function CartCurrencyConversion() {
    }
    CartCurrencyConversion.getAttributeTypeMap = function () {
        return CartCurrencyConversion.attributeTypeMap;
    };
    CartCurrencyConversion.discriminator = undefined;
    CartCurrencyConversion.attributeTypeMap = [
        {
            "name": "baseCurrencyCode",
            "baseName": "base_currency_Code",
            "type": "string"
        },
        {
            "name": "currencies",
            "baseName": "currencies",
            "type": "Array<Currency>"
        }
    ];
    return CartCurrencyConversion;
}());
exports.CartCurrencyConversion = CartCurrencyConversion;
var CartCustomerProfile = (function () {
    function CartCustomerProfile() {
    }
    CartCustomerProfile.getAttributeTypeMap = function () {
        return CartCustomerProfile.attributeTypeMap;
    };
    CartCustomerProfile.discriminator = undefined;
    CartCustomerProfile.attributeTypeMap = [
        {
            "name": "allow3rdPartyBilling",
            "baseName": "allow_3rd_party_billing",
            "type": "boolean"
        },
        {
            "name": "allowCod",
            "baseName": "allow_cod",
            "type": "boolean"
        },
        {
            "name": "allowPurchaseOrder",
            "baseName": "allow_purchase_order",
            "type": "boolean"
        },
        {
            "name": "billingAddresses",
            "baseName": "billing_addresses",
            "type": "Array<CartCustomerProfileAddress>"
        },
        {
            "name": "creditCards",
            "baseName": "credit_cards",
            "type": "Array<CartCustomerProfileCreditCard>"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "dhlAccountNumber",
            "baseName": "dhl_account_number",
            "type": "string"
        },
        {
            "name": "dhlDutyAccountNumber",
            "baseName": "dhl_duty_account_number",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "fedexAccountNumber",
            "baseName": "fedex_account_number",
            "type": "string"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "freeShippingMinimum",
            "baseName": "free_shipping_minimum",
            "type": "number"
        },
        {
            "name": "maximumItemCount",
            "baseName": "maximum_item_count",
            "type": "number"
        },
        {
            "name": "minimumItemCount",
            "baseName": "minimum_item_count",
            "type": "number"
        },
        {
            "name": "minimumSubtotal",
            "baseName": "minimum_subtotal",
            "type": "number"
        },
        {
            "name": "noCoupons",
            "baseName": "no_coupons",
            "type": "boolean"
        },
        {
            "name": "noFreeShipping",
            "baseName": "no_free_shipping",
            "type": "boolean"
        },
        {
            "name": "noRealtimeCharge",
            "baseName": "no_realtime_charge",
            "type": "boolean"
        },
        {
            "name": "pricingTiers",
            "baseName": "pricing_tiers",
            "type": "Array<string>"
        },
        {
            "name": "shippingAddresses",
            "baseName": "shipping_addresses",
            "type": "Array<CartCustomerProfileAddress>"
        },
        {
            "name": "taxExempt",
            "baseName": "tax_exempt",
            "type": "boolean"
        },
        {
            "name": "upsAccountNumber",
            "baseName": "ups_account_number",
            "type": "string"
        }
    ];
    return CartCustomerProfile;
}());
exports.CartCustomerProfile = CartCustomerProfile;
var CartCustomerProfileAddress = (function () {
    function CartCustomerProfileAddress() {
    }
    CartCustomerProfileAddress.getAttributeTypeMap = function () {
        return CartCustomerProfileAddress.attributeTypeMap;
    };
    CartCustomerProfileAddress.discriminator = undefined;
    CartCustomerProfileAddress.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "oid",
            "baseName": "oid",
            "type": "number"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "taxCounty",
            "baseName": "tax_county",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return CartCustomerProfileAddress;
}());
exports.CartCustomerProfileAddress = CartCustomerProfileAddress;
var CartCustomerProfileCreditCard = (function () {
    function CartCustomerProfileCreditCard() {
    }
    CartCustomerProfileCreditCard.getAttributeTypeMap = function () {
        return CartCustomerProfileCreditCard.attributeTypeMap;
    };
    CartCustomerProfileCreditCard.discriminator = undefined;
    CartCustomerProfileCreditCard.attributeTypeMap = [
        {
            "name": "cardExpirationMonth",
            "baseName": "card_expiration_month",
            "type": "number"
        },
        {
            "name": "cardExpirationYear",
            "baseName": "card_expiration_year",
            "type": "number"
        },
        {
            "name": "cardNumber",
            "baseName": "card_number",
            "type": "string"
        },
        {
            "name": "cardType",
            "baseName": "card_type",
            "type": "CartCustomerProfileCreditCard.CardTypeEnum"
        },
        {
            "name": "customerProfileCreditCardId",
            "baseName": "customer_profile_credit_card_id",
            "type": "number"
        },
        {
            "name": "lastUsedDate",
            "baseName": "last_used_date",
            "type": "string"
        }
    ];
    return CartCustomerProfileCreditCard;
}());
exports.CartCustomerProfileCreditCard = CartCustomerProfileCreditCard;
(function (CartCustomerProfileCreditCard) {
    var CardTypeEnum;
    (function (CardTypeEnum) {
        CardTypeEnum[CardTypeEnum["AMEX"] = 'AMEX'] = "AMEX";
        CardTypeEnum[CardTypeEnum["DinersClub"] = 'Diners Club'] = "DinersClub";
        CardTypeEnum[CardTypeEnum["Discover"] = 'Discover'] = "Discover";
        CardTypeEnum[CardTypeEnum["MasterCard"] = 'MasterCard'] = "MasterCard";
        CardTypeEnum[CardTypeEnum["JCB"] = 'JCB'] = "JCB";
        CardTypeEnum[CardTypeEnum["VISA"] = 'VISA'] = "VISA";
    })(CardTypeEnum = CartCustomerProfileCreditCard.CardTypeEnum || (CartCustomerProfileCreditCard.CardTypeEnum = {}));
})(CartCustomerProfileCreditCard = exports.CartCustomerProfileCreditCard || (exports.CartCustomerProfileCreditCard = {}));
exports.CartCustomerProfileCreditCard = CartCustomerProfileCreditCard;
var CartFinalizeOrderRequest = (function () {
    function CartFinalizeOrderRequest() {
    }
    CartFinalizeOrderRequest.getAttributeTypeMap = function () {
        return CartFinalizeOrderRequest.attributeTypeMap;
    };
    CartFinalizeOrderRequest.discriminator = undefined;
    CartFinalizeOrderRequest.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "CartFinalizeOrderRequestOptions"
        }
    ];
    return CartFinalizeOrderRequest;
}());
exports.CartFinalizeOrderRequest = CartFinalizeOrderRequest;
var CartFinalizeOrderRequestOptions = (function () {
    function CartFinalizeOrderRequestOptions() {
    }
    CartFinalizeOrderRequestOptions.getAttributeTypeMap = function () {
        return CartFinalizeOrderRequestOptions.attributeTypeMap;
    };
    CartFinalizeOrderRequestOptions.discriminator = undefined;
    CartFinalizeOrderRequestOptions.attributeTypeMap = [
        {
            "name": "autoApprovePurchaseOrder",
            "baseName": "auto_approve_purchase_order",
            "type": "boolean"
        },
        {
            "name": "channelPartnerCode",
            "baseName": "channel_partner_code",
            "type": "string"
        },
        {
            "name": "channelPartnerOid",
            "baseName": "channel_partner_oid",
            "type": "number"
        },
        {
            "name": "channelPartnerOrderId",
            "baseName": "channel_partner_order_id",
            "type": "string"
        },
        {
            "name": "considerRecurring",
            "baseName": "consider_recurring",
            "type": "boolean"
        },
        {
            "name": "creditCardAuthorizationAmount",
            "baseName": "credit_card_authorization_amount",
            "type": "number"
        },
        {
            "name": "creditCardAuthorizationDate",
            "baseName": "credit_card_authorization_date",
            "type": "string"
        },
        {
            "name": "creditCardAuthorizationReferenceNumber",
            "baseName": "credit_card_authorization_reference_number",
            "type": "string"
        },
        {
            "name": "noRealtimePaymentProcessing",
            "baseName": "no_realtime_payment_processing",
            "type": "boolean"
        },
        {
            "name": "setupNextCart",
            "baseName": "setup_next_cart",
            "type": "boolean"
        },
        {
            "name": "skipPaymentProcessing",
            "baseName": "skip_payment_processing",
            "type": "boolean"
        },
        {
            "name": "storeCompleted",
            "baseName": "store_completed",
            "type": "boolean"
        },
        {
            "name": "storeIfPaymentDeclines",
            "baseName": "store_if_payment_declines",
            "type": "boolean"
        }
    ];
    return CartFinalizeOrderRequestOptions;
}());
exports.CartFinalizeOrderRequestOptions = CartFinalizeOrderRequestOptions;
var CartFinalizeOrderResponse = (function () {
    function CartFinalizeOrderResponse() {
    }
    CartFinalizeOrderResponse.getAttributeTypeMap = function () {
        return CartFinalizeOrderResponse.attributeTypeMap;
    };
    CartFinalizeOrderResponse.discriminator = undefined;
    CartFinalizeOrderResponse.attributeTypeMap = [
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        },
        {
            "name": "nextCart",
            "baseName": "next_cart",
            "type": "Cart"
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "Order"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "successful",
            "baseName": "successful",
            "type": "boolean"
        }
    ];
    return CartFinalizeOrderResponse;
}());
exports.CartFinalizeOrderResponse = CartFinalizeOrderResponse;
var CartGift = (function () {
    function CartGift() {
    }
    CartGift.getAttributeTypeMap = function () {
        return CartGift.attributeTypeMap;
    };
    CartGift.discriminator = undefined;
    CartGift.attributeTypeMap = [
        {
            "name": "gift",
            "baseName": "gift",
            "type": "boolean"
        },
        {
            "name": "giftCharge",
            "baseName": "gift_charge",
            "type": "Currency"
        },
        {
            "name": "giftEmail",
            "baseName": "gift_email",
            "type": "string"
        },
        {
            "name": "giftMessage",
            "baseName": "gift_message",
            "type": "string"
        },
        {
            "name": "giftWrapCost",
            "baseName": "gift_wrap_cost",
            "type": "Currency"
        },
        {
            "name": "giftWrapTitle",
            "baseName": "gift_wrap_title",
            "type": "string"
        }
    ];
    return CartGift;
}());
exports.CartGift = CartGift;
var CartGiftCertificate = (function () {
    function CartGiftCertificate() {
    }
    CartGiftCertificate.getAttributeTypeMap = function () {
        return CartGiftCertificate.attributeTypeMap;
    };
    CartGiftCertificate.discriminator = undefined;
    CartGiftCertificate.attributeTypeMap = [
        {
            "name": "giftCertificateAmount",
            "baseName": "gift_certificate_amount",
            "type": "Currency"
        },
        {
            "name": "giftCertificateCode",
            "baseName": "gift_certificate_code",
            "type": "string"
        },
        {
            "name": "giftCertificateRemainingBalanceAfterOrder",
            "baseName": "gift_certificate_remaining_balance_after_order",
            "type": "Currency"
        }
    ];
    return CartGiftCertificate;
}());
exports.CartGiftCertificate = CartGiftCertificate;
var CartItem = (function () {
    function CartItem() {
    }
    CartItem.getAttributeTypeMap = function () {
        return CartItem.attributeTypeMap;
    };
    CartItem.discriminator = undefined;
    CartItem.attributeTypeMap = [
        {
            "name": "arbitraryUnitCost",
            "baseName": "arbitrary_unit_cost",
            "type": "Currency"
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "Array<CartItemAttribute>"
        },
        {
            "name": "autoOrderSchedule",
            "baseName": "auto_order_schedule",
            "type": "string"
        },
        {
            "name": "defaultImageUrl",
            "baseName": "default_image_url",
            "type": "string"
        },
        {
            "name": "defaultThumbnailUrl",
            "baseName": "default_thumbnail_url",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "discount",
            "baseName": "discount",
            "type": "Currency"
        },
        {
            "name": "extendedDescription",
            "baseName": "extended_description",
            "type": "string"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "itemOid",
            "baseName": "item_oid",
            "type": "number"
        },
        {
            "name": "kit",
            "baseName": "kit",
            "type": "boolean"
        },
        {
            "name": "kitComponentOptions",
            "baseName": "kit_component_options",
            "type": "Array<CartKitComponentOption>"
        },
        {
            "name": "manufacturerSuggestedRetailPrice",
            "baseName": "manufacturer_suggested_retail_price",
            "type": "Currency"
        },
        {
            "name": "maximumQuantity",
            "baseName": "maximum_quantity",
            "type": "number"
        },
        {
            "name": "minimumQuantity",
            "baseName": "minimum_quantity",
            "type": "number"
        },
        {
            "name": "multimedia",
            "baseName": "multimedia",
            "type": "Array<CartItemMultimedia>"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<CartItemOption>"
        },
        {
            "name": "phsyical",
            "baseName": "phsyical",
            "type": "CartItemPhysical"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "preorder",
            "baseName": "preorder",
            "type": "boolean"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "schedules",
            "baseName": "schedules",
            "type": "Array<string>"
        },
        {
            "name": "totalCost",
            "baseName": "total_cost",
            "type": "Currency"
        },
        {
            "name": "totalCostWithDiscount",
            "baseName": "total_cost_with_discount",
            "type": "Currency"
        },
        {
            "name": "unitCost",
            "baseName": "unit_cost",
            "type": "Currency"
        },
        {
            "name": "unitCostWithDiscount",
            "baseName": "unit_cost_with_discount",
            "type": "Currency"
        },
        {
            "name": "upsell",
            "baseName": "upsell",
            "type": "boolean"
        },
        {
            "name": "variations",
            "baseName": "variations",
            "type": "Array<CartItemVariationSelection>"
        },
        {
            "name": "viewUrl",
            "baseName": "view_url",
            "type": "string"
        }
    ];
    return CartItem;
}());
exports.CartItem = CartItem;
var CartItemAttribute = (function () {
    function CartItemAttribute() {
    }
    CartItemAttribute.getAttributeTypeMap = function () {
        return CartItemAttribute.attributeTypeMap;
    };
    CartItemAttribute.discriminator = undefined;
    CartItemAttribute.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return CartItemAttribute;
}());
exports.CartItemAttribute = CartItemAttribute;
var CartItemMultimedia = (function () {
    function CartItemMultimedia() {
    }
    CartItemMultimedia.getAttributeTypeMap = function () {
        return CartItemMultimedia.attributeTypeMap;
    };
    CartItemMultimedia.discriminator = undefined;
    CartItemMultimedia.attributeTypeMap = [
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "excludeFromGallery",
            "baseName": "exclude_from_gallery",
            "type": "boolean"
        },
        {
            "name": "imageHeight",
            "baseName": "image_height",
            "type": "number"
        },
        {
            "name": "imageWidth",
            "baseName": "image_width",
            "type": "number"
        },
        {
            "name": "isDefault",
            "baseName": "is_default",
            "type": "boolean"
        },
        {
            "name": "thumbnails",
            "baseName": "thumbnails",
            "type": "Array<CartItemMultimediaThumbnail>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CartItemMultimedia.TypeEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return CartItemMultimedia;
}());
exports.CartItemMultimedia = CartItemMultimedia;
(function (CartItemMultimedia) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'Image'] = "Image";
        TypeEnum[TypeEnum["PDF"] = 'PDF'] = "PDF";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Unknown"] = 'Unknown'] = "Unknown";
        TypeEnum[TypeEnum["Video"] = 'Video'] = "Video";
    })(TypeEnum = CartItemMultimedia.TypeEnum || (CartItemMultimedia.TypeEnum = {}));
})(CartItemMultimedia = exports.CartItemMultimedia || (exports.CartItemMultimedia = {}));
exports.CartItemMultimedia = CartItemMultimedia;
var CartItemMultimediaThumbnail = (function () {
    function CartItemMultimediaThumbnail() {
    }
    CartItemMultimediaThumbnail.getAttributeTypeMap = function () {
        return CartItemMultimediaThumbnail.attributeTypeMap;
    };
    CartItemMultimediaThumbnail.discriminator = undefined;
    CartItemMultimediaThumbnail.attributeTypeMap = [
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "png",
            "baseName": "png",
            "type": "boolean"
        },
        {
            "name": "square",
            "baseName": "square",
            "type": "boolean"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        }
    ];
    return CartItemMultimediaThumbnail;
}());
exports.CartItemMultimediaThumbnail = CartItemMultimediaThumbnail;
var CartItemOption = (function () {
    function CartItemOption() {
    }
    CartItemOption.getAttributeTypeMap = function () {
        return CartItemOption.attributeTypeMap;
    };
    CartItemOption.discriminator = undefined;
    CartItemOption.attributeTypeMap = [
        {
            "name": "costIfSpecified",
            "baseName": "cost_if_specified",
            "type": "Currency"
        },
        {
            "name": "costPerLetter",
            "baseName": "cost_per_letter",
            "type": "Currency"
        },
        {
            "name": "costPerLine",
            "baseName": "cost_per_line",
            "type": "Currency"
        },
        {
            "name": "ignoreIfDefault",
            "baseName": "ignore_if_default",
            "type": "boolean"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "oneTimeFee",
            "baseName": "one_time_fee",
            "type": "boolean"
        },
        {
            "name": "optionOid",
            "baseName": "option_oid",
            "type": "number"
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "boolean"
        },
        {
            "name": "selectedValue",
            "baseName": "selected_value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CartItemOption.TypeEnum"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<CartItemOptionValue>"
        }
    ];
    return CartItemOption;
}());
exports.CartItemOption = CartItemOption;
(function (CartItemOption) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
    })(TypeEnum = CartItemOption.TypeEnum || (CartItemOption.TypeEnum = {}));
})(CartItemOption = exports.CartItemOption || (exports.CartItemOption = {}));
exports.CartItemOption = CartItemOption;
var CartItemOptionValue = (function () {
    function CartItemOptionValue() {
    }
    CartItemOptionValue.getAttributeTypeMap = function () {
        return CartItemOptionValue.attributeTypeMap;
    };
    CartItemOptionValue.discriminator = undefined;
    CartItemOptionValue.attributeTypeMap = [
        {
            "name": "additionalCost",
            "baseName": "additional_cost",
            "type": "Currency"
        },
        {
            "name": "additionalWeight",
            "baseName": "additional_weight",
            "type": "Weight"
        },
        {
            "name": "defaultValue",
            "baseName": "default_value",
            "type": "boolean"
        },
        {
            "name": "displayOrder",
            "baseName": "display_order",
            "type": "number"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return CartItemOptionValue;
}());
exports.CartItemOptionValue = CartItemOptionValue;
var CartItemPhysical = (function () {
    function CartItemPhysical() {
    }
    CartItemPhysical.getAttributeTypeMap = function () {
        return CartItemPhysical.attributeTypeMap;
    };
    CartItemPhysical.discriminator = undefined;
    CartItemPhysical.attributeTypeMap = [
        {
            "name": "height",
            "baseName": "height",
            "type": "Distance"
        },
        {
            "name": "length",
            "baseName": "length",
            "type": "Distance"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "Weight"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "Distance"
        }
    ];
    return CartItemPhysical;
}());
exports.CartItemPhysical = CartItemPhysical;
var CartItemVariationSelection = (function () {
    function CartItemVariationSelection() {
    }
    CartItemVariationSelection.getAttributeTypeMap = function () {
        return CartItemVariationSelection.attributeTypeMap;
    };
    CartItemVariationSelection.discriminator = undefined;
    CartItemVariationSelection.attributeTypeMap = [
        {
            "name": "variationName",
            "baseName": "variation_name",
            "type": "string"
        },
        {
            "name": "variationValue",
            "baseName": "variation_value",
            "type": "string"
        }
    ];
    return CartItemVariationSelection;
}());
exports.CartItemVariationSelection = CartItemVariationSelection;
var CartKitComponentOption = (function () {
    function CartKitComponentOption() {
    }
    CartKitComponentOption.getAttributeTypeMap = function () {
        return CartKitComponentOption.attributeTypeMap;
    };
    CartKitComponentOption.discriminator = undefined;
    CartKitComponentOption.attributeTypeMap = [
        {
            "name": "costIfSpecified",
            "baseName": "cost_if_specified",
            "type": "Currency"
        },
        {
            "name": "costPerLetter",
            "baseName": "cost_per_letter",
            "type": "Currency"
        },
        {
            "name": "costPerLine",
            "baseName": "cost_per_line",
            "type": "Currency"
        },
        {
            "name": "ignoreIfDefault",
            "baseName": "ignore_if_default",
            "type": "boolean"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "itemOid",
            "baseName": "item_oid",
            "type": "number"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "oneTimeFee",
            "baseName": "one_time_fee",
            "type": "boolean"
        },
        {
            "name": "optionOid",
            "baseName": "option_oid",
            "type": "number"
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "boolean"
        },
        {
            "name": "selectedValue",
            "baseName": "selected_value",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CartKitComponentOption.TypeEnum"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<CartItemOptionValue>"
        }
    ];
    return CartKitComponentOption;
}());
exports.CartKitComponentOption = CartKitComponentOption;
(function (CartKitComponentOption) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
    })(TypeEnum = CartKitComponentOption.TypeEnum || (CartKitComponentOption.TypeEnum = {}));
})(CartKitComponentOption = exports.CartKitComponentOption || (exports.CartKitComponentOption = {}));
exports.CartKitComponentOption = CartKitComponentOption;
var CartMarketing = (function () {
    function CartMarketing() {
    }
    CartMarketing.getAttributeTypeMap = function () {
        return CartMarketing.attributeTypeMap;
    };
    CartMarketing.discriminator = undefined;
    CartMarketing.attributeTypeMap = [
        {
            "name": "advertisingSource",
            "baseName": "advertising_source",
            "type": "string"
        },
        {
            "name": "mailingListOptIn",
            "baseName": "mailing_list_opt_in",
            "type": "boolean"
        }
    ];
    return CartMarketing;
}());
exports.CartMarketing = CartMarketing;
var CartPayment = (function () {
    function CartPayment() {
    }
    CartPayment.getAttributeTypeMap = function () {
        return CartPayment.attributeTypeMap;
    };
    CartPayment.discriminator = undefined;
    CartPayment.attributeTypeMap = [
        {
            "name": "affirm",
            "baseName": "affirm",
            "type": "CartPaymentAffirm"
        },
        {
            "name": "amazon",
            "baseName": "amazon",
            "type": "CartPaymentAmazon"
        },
        {
            "name": "check",
            "baseName": "check",
            "type": "CartPaymentCheck"
        },
        {
            "name": "creditCard",
            "baseName": "credit_card",
            "type": "CartPaymentCreditCard"
        },
        {
            "name": "paymentMethod",
            "baseName": "payment_method",
            "type": "string"
        },
        {
            "name": "purchaseOrder",
            "baseName": "purchase_order",
            "type": "CartPaymentPurchaseOrder"
        },
        {
            "name": "rtgCode",
            "baseName": "rtg_code",
            "type": "string"
        }
    ];
    return CartPayment;
}());
exports.CartPayment = CartPayment;
var CartPaymentAffirm = (function () {
    function CartPaymentAffirm() {
    }
    CartPaymentAffirm.getAttributeTypeMap = function () {
        return CartPaymentAffirm.attributeTypeMap;
    };
    CartPaymentAffirm.discriminator = undefined;
    CartPaymentAffirm.attributeTypeMap = [
        {
            "name": "affirmCheckoutToken",
            "baseName": "affirm_checkout_token",
            "type": "string"
        }
    ];
    return CartPaymentAffirm;
}());
exports.CartPaymentAffirm = CartPaymentAffirm;
var CartPaymentAmazon = (function () {
    function CartPaymentAmazon() {
    }
    CartPaymentAmazon.getAttributeTypeMap = function () {
        return CartPaymentAmazon.attributeTypeMap;
    };
    CartPaymentAmazon.discriminator = undefined;
    CartPaymentAmazon.attributeTypeMap = [
        {
            "name": "amazonOrderReferenceId",
            "baseName": "amazon_order_reference_id",
            "type": "string"
        }
    ];
    return CartPaymentAmazon;
}());
exports.CartPaymentAmazon = CartPaymentAmazon;
var CartPaymentCheck = (function () {
    function CartPaymentCheck() {
    }
    CartPaymentCheck.getAttributeTypeMap = function () {
        return CartPaymentCheck.attributeTypeMap;
    };
    CartPaymentCheck.discriminator = undefined;
    CartPaymentCheck.attributeTypeMap = [
        {
            "name": "checkNumber",
            "baseName": "check_number",
            "type": "number"
        }
    ];
    return CartPaymentCheck;
}());
exports.CartPaymentCheck = CartPaymentCheck;
var CartPaymentCreditCard = (function () {
    function CartPaymentCreditCard() {
    }
    CartPaymentCreditCard.getAttributeTypeMap = function () {
        return CartPaymentCreditCard.attributeTypeMap;
    };
    CartPaymentCreditCard.discriminator = undefined;
    CartPaymentCreditCard.attributeTypeMap = [
        {
            "name": "cardExpirationMonth",
            "baseName": "card_expiration_month",
            "type": "number"
        },
        {
            "name": "cardExpirationYear",
            "baseName": "card_expiration_year",
            "type": "number"
        },
        {
            "name": "cardNumber",
            "baseName": "card_number",
            "type": "string"
        },
        {
            "name": "cardNumberToken",
            "baseName": "card_number_token",
            "type": "string"
        },
        {
            "name": "cardType",
            "baseName": "card_type",
            "type": "string"
        },
        {
            "name": "cardVerificationNumber",
            "baseName": "card_verification_number",
            "type": "string"
        },
        {
            "name": "cardVerificationNumberToken",
            "baseName": "card_verification_number_token",
            "type": "string"
        },
        {
            "name": "customerProfileCreditCardId",
            "baseName": "customer_profile_credit_card_id",
            "type": "number"
        },
        {
            "name": "storeCreditCard",
            "baseName": "store_credit_card",
            "type": "boolean"
        }
    ];
    return CartPaymentCreditCard;
}());
exports.CartPaymentCreditCard = CartPaymentCreditCard;
var CartPaymentPurchaseOrder = (function () {
    function CartPaymentPurchaseOrder() {
    }
    CartPaymentPurchaseOrder.getAttributeTypeMap = function () {
        return CartPaymentPurchaseOrder.attributeTypeMap;
    };
    CartPaymentPurchaseOrder.discriminator = undefined;
    CartPaymentPurchaseOrder.attributeTypeMap = [
        {
            "name": "purchaseOrderNumber",
            "baseName": "purchase_order_number",
            "type": "string"
        }
    ];
    return CartPaymentPurchaseOrder;
}());
exports.CartPaymentPurchaseOrder = CartPaymentPurchaseOrder;
var CartProfileLoginRequest = (function () {
    function CartProfileLoginRequest() {
    }
    CartProfileLoginRequest.getAttributeTypeMap = function () {
        return CartProfileLoginRequest.attributeTypeMap;
    };
    CartProfileLoginRequest.discriminator = undefined;
    CartProfileLoginRequest.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        }
    ];
    return CartProfileLoginRequest;
}());
exports.CartProfileLoginRequest = CartProfileLoginRequest;
var CartProfileLoginResponse = (function () {
    function CartProfileLoginResponse() {
    }
    CartProfileLoginResponse.getAttributeTypeMap = function () {
        return CartProfileLoginResponse.attributeTypeMap;
    };
    CartProfileLoginResponse.discriminator = undefined;
    CartProfileLoginResponse.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        }
    ];
    return CartProfileLoginResponse;
}());
exports.CartProfileLoginResponse = CartProfileLoginResponse;
var CartProfileRegisterRequest = (function () {
    function CartProfileRegisterRequest() {
    }
    CartProfileRegisterRequest.getAttributeTypeMap = function () {
        return CartProfileRegisterRequest.attributeTypeMap;
    };
    CartProfileRegisterRequest.discriminator = undefined;
    CartProfileRegisterRequest.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        }
    ];
    return CartProfileRegisterRequest;
}());
exports.CartProfileRegisterRequest = CartProfileRegisterRequest;
var CartProfileRegisterResponse = (function () {
    function CartProfileRegisterResponse() {
    }
    CartProfileRegisterResponse.getAttributeTypeMap = function () {
        return CartProfileRegisterResponse.attributeTypeMap;
    };
    CartProfileRegisterResponse.discriminator = undefined;
    CartProfileRegisterResponse.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        }
    ];
    return CartProfileRegisterResponse;
}());
exports.CartProfileRegisterResponse = CartProfileRegisterResponse;
var CartProperty = (function () {
    function CartProperty() {
    }
    CartProperty.getAttributeTypeMap = function () {
        return CartProperty.attributeTypeMap;
    };
    CartProperty.discriminator = undefined;
    CartProperty.attributeTypeMap = [
        {
            "name": "display",
            "baseName": "display",
            "type": "boolean"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return CartProperty;
}());
exports.CartProperty = CartProperty;
var CartResponse = (function () {
    function CartResponse() {
    }
    CartResponse.getAttributeTypeMap = function () {
        return CartResponse.attributeTypeMap;
    };
    CartResponse.discriminator = undefined;
    CartResponse.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        }
    ];
    return CartResponse;
}());
exports.CartResponse = CartResponse;
var CartSettings = (function () {
    function CartSettings() {
    }
    CartSettings.getAttributeTypeMap = function () {
        return CartSettings.attributeTypeMap;
    };
    CartSettings.discriminator = undefined;
    CartSettings.attributeTypeMap = [
        {
            "name": "billing",
            "baseName": "billing",
            "type": "CartSettingsBilling"
        },
        {
            "name": "gift",
            "baseName": "gift",
            "type": "CartSettingsGift"
        },
        {
            "name": "payment",
            "baseName": "payment",
            "type": "CartSettingsPayment"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "CartSettingsShipping"
        },
        {
            "name": "taxes",
            "baseName": "taxes",
            "type": "CartSettingsTaxes"
        },
        {
            "name": "terms",
            "baseName": "terms",
            "type": "CartSettingsTerms"
        }
    ];
    return CartSettings;
}());
exports.CartSettings = CartSettings;
var CartSettingsBilling = (function () {
    function CartSettingsBilling() {
    }
    CartSettingsBilling.getAttributeTypeMap = function () {
        return CartSettingsBilling.attributeTypeMap;
    };
    CartSettingsBilling.discriminator = undefined;
    CartSettingsBilling.attributeTypeMap = [
        {
            "name": "provinces",
            "baseName": "provinces",
            "type": "Array<CartSettingsProvince>"
        }
    ];
    return CartSettingsBilling;
}());
exports.CartSettingsBilling = CartSettingsBilling;
var CartSettingsGift = (function () {
    function CartSettingsGift() {
    }
    CartSettingsGift.getAttributeTypeMap = function () {
        return CartSettingsGift.attributeTypeMap;
    };
    CartSettingsGift.discriminator = undefined;
    CartSettingsGift.attributeTypeMap = [
        {
            "name": "allowGifts",
            "baseName": "allow_gifts",
            "type": "boolean"
        },
        {
            "name": "giftCharge",
            "baseName": "gift_charge",
            "type": "Currency"
        },
        {
            "name": "giftWraps",
            "baseName": "gift_wraps",
            "type": "Array<CartSettingsGiftWrap>"
        },
        {
            "name": "maxMessageLength",
            "baseName": "max_message_length",
            "type": "number"
        }
    ];
    return CartSettingsGift;
}());
exports.CartSettingsGift = CartSettingsGift;
var CartSettingsGiftWrap = (function () {
    function CartSettingsGiftWrap() {
    }
    CartSettingsGiftWrap.getAttributeTypeMap = function () {
        return CartSettingsGiftWrap.attributeTypeMap;
    };
    CartSettingsGiftWrap.discriminator = undefined;
    CartSettingsGiftWrap.attributeTypeMap = [
        {
            "name": "cost",
            "baseName": "cost",
            "type": "Currency"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return CartSettingsGiftWrap;
}());
exports.CartSettingsGiftWrap = CartSettingsGiftWrap;
var CartSettingsPayment = (function () {
    function CartSettingsPayment() {
    }
    CartSettingsPayment.getAttributeTypeMap = function () {
        return CartSettingsPayment.attributeTypeMap;
    };
    CartSettingsPayment.discriminator = undefined;
    CartSettingsPayment.attributeTypeMap = [
        {
            "name": "amazon",
            "baseName": "amazon",
            "type": "CartSettingsPaymentAmazon"
        },
        {
            "name": "creditCard",
            "baseName": "credit_card",
            "type": "CartSettingsPaymentCreditCard"
        },
        {
            "name": "needPayment",
            "baseName": "need_payment",
            "type": "boolean"
        },
        {
            "name": "paypal",
            "baseName": "paypal",
            "type": "CartSettingsPaymentPayPal"
        },
        {
            "name": "supportsAmazon",
            "baseName": "supports_amazon",
            "type": "boolean"
        },
        {
            "name": "supportsCheck",
            "baseName": "supports_check",
            "type": "boolean"
        },
        {
            "name": "supportsCod",
            "baseName": "supports_cod",
            "type": "boolean"
        },
        {
            "name": "supportsCreditCard",
            "baseName": "supports_credit_card",
            "type": "boolean"
        },
        {
            "name": "supportsMoneyOrder",
            "baseName": "supports_money_order",
            "type": "boolean"
        },
        {
            "name": "supportsPaypal",
            "baseName": "supports_paypal",
            "type": "boolean"
        },
        {
            "name": "supportsPurchaseOrder",
            "baseName": "supports_purchase_order",
            "type": "boolean"
        },
        {
            "name": "supportsQuoteRequest",
            "baseName": "supports_quote_request",
            "type": "boolean"
        },
        {
            "name": "supportsWireTransfer",
            "baseName": "supports_wire_transfer",
            "type": "boolean"
        }
    ];
    return CartSettingsPayment;
}());
exports.CartSettingsPayment = CartSettingsPayment;
var CartSettingsPaymentAmazon = (function () {
    function CartSettingsPaymentAmazon() {
    }
    CartSettingsPaymentAmazon.getAttributeTypeMap = function () {
        return CartSettingsPaymentAmazon.attributeTypeMap;
    };
    CartSettingsPaymentAmazon.discriminator = undefined;
    CartSettingsPaymentAmazon.attributeTypeMap = [
        {
            "name": "amazonButtonUrl",
            "baseName": "amazon_button_url",
            "type": "string"
        },
        {
            "name": "amazonMerchantId",
            "baseName": "amazon_merchant_id",
            "type": "string"
        },
        {
            "name": "amazonWidgetUrl",
            "baseName": "amazon_widget_url",
            "type": "string"
        }
    ];
    return CartSettingsPaymentAmazon;
}());
exports.CartSettingsPaymentAmazon = CartSettingsPaymentAmazon;
var CartSettingsPaymentCreditCard = (function () {
    function CartSettingsPaymentCreditCard() {
    }
    CartSettingsPaymentCreditCard.getAttributeTypeMap = function () {
        return CartSettingsPaymentCreditCard.attributeTypeMap;
    };
    CartSettingsPaymentCreditCard.discriminator = undefined;
    CartSettingsPaymentCreditCard.attributeTypeMap = [
        {
            "name": "collectCreditCardVerificationNumber",
            "baseName": "collect_credit_card_verification_number",
            "type": "boolean"
        },
        {
            "name": "creditCardTypes",
            "baseName": "credit_card_types",
            "type": "Array<string>"
        },
        {
            "name": "hostedFieldsShoppingCartToken",
            "baseName": "hosted_fields_shopping_cart_token",
            "type": "string"
        }
    ];
    return CartSettingsPaymentCreditCard;
}());
exports.CartSettingsPaymentCreditCard = CartSettingsPaymentCreditCard;
var CartSettingsPaymentPayPal = (function () {
    function CartSettingsPaymentPayPal() {
    }
    CartSettingsPaymentPayPal.getAttributeTypeMap = function () {
        return CartSettingsPaymentPayPal.attributeTypeMap;
    };
    CartSettingsPaymentPayPal.discriminator = undefined;
    CartSettingsPaymentPayPal.attributeTypeMap = [
        {
            "name": "paypalButtonAltText",
            "baseName": "paypal_button_alt_text",
            "type": "string"
        },
        {
            "name": "paypalButtonUrl",
            "baseName": "paypal_button_url",
            "type": "string"
        },
        {
            "name": "paypalCreditButtonUrl",
            "baseName": "paypal_credit_button_url",
            "type": "string"
        },
        {
            "name": "paypalCreditLegalImageUrl",
            "baseName": "paypal_credit_legal_image_url",
            "type": "string"
        },
        {
            "name": "paypalCreditLegalUrl",
            "baseName": "paypal_credit_legal_url",
            "type": "string"
        }
    ];
    return CartSettingsPaymentPayPal;
}());
exports.CartSettingsPaymentPayPal = CartSettingsPaymentPayPal;
var CartSettingsProvince = (function () {
    function CartSettingsProvince() {
    }
    CartSettingsProvince.getAttributeTypeMap = function () {
        return CartSettingsProvince.attributeTypeMap;
    };
    CartSettingsProvince.discriminator = undefined;
    CartSettingsProvince.attributeTypeMap = [
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "province",
            "baseName": "province",
            "type": "string"
        }
    ];
    return CartSettingsProvince;
}());
exports.CartSettingsProvince = CartSettingsProvince;
var CartSettingsShipping = (function () {
    function CartSettingsShipping() {
    }
    CartSettingsShipping.getAttributeTypeMap = function () {
        return CartSettingsShipping.attributeTypeMap;
    };
    CartSettingsShipping.discriminator = undefined;
    CartSettingsShipping.attributeTypeMap = [
        {
            "name": "deliverOnDate",
            "baseName": "deliver_on_date",
            "type": "CartSettingsShippingCalendar"
        },
        {
            "name": "estimates",
            "baseName": "estimates",
            "type": "Array<CartSettingsShippingEstimate>"
        },
        {
            "name": "needShipping",
            "baseName": "need_shipping",
            "type": "boolean"
        },
        {
            "name": "provinces",
            "baseName": "provinces",
            "type": "Array<CartSettingsProvince>"
        },
        {
            "name": "shipOnDate",
            "baseName": "ship_on_date",
            "type": "CartSettingsShippingCalendar"
        }
    ];
    return CartSettingsShipping;
}());
exports.CartSettingsShipping = CartSettingsShipping;
var CartSettingsShippingCalendar = (function () {
    function CartSettingsShippingCalendar() {
    }
    CartSettingsShippingCalendar.getAttributeTypeMap = function () {
        return CartSettingsShippingCalendar.attributeTypeMap;
    };
    CartSettingsShippingCalendar.discriminator = undefined;
    CartSettingsShippingCalendar.attributeTypeMap = [
        {
            "name": "blackouts",
            "baseName": "blackouts",
            "type": "Array<string>"
        },
        {
            "name": "daysOfWeek",
            "baseName": "days_of_week",
            "type": "Array<boolean>"
        },
        {
            "name": "earliest",
            "baseName": "earliest",
            "type": "string"
        },
        {
            "name": "require",
            "baseName": "require",
            "type": "boolean"
        },
        {
            "name": "show",
            "baseName": "show",
            "type": "boolean"
        }
    ];
    return CartSettingsShippingCalendar;
}());
exports.CartSettingsShippingCalendar = CartSettingsShippingCalendar;
var CartSettingsShippingEstimate = (function () {
    function CartSettingsShippingEstimate() {
    }
    CartSettingsShippingEstimate.getAttributeTypeMap = function () {
        return CartSettingsShippingEstimate.attributeTypeMap;
    };
    CartSettingsShippingEstimate.discriminator = undefined;
    CartSettingsShippingEstimate.attributeTypeMap = [
        {
            "name": "allow3rdPartyBilling",
            "baseName": "allow_3rd_party_billing",
            "type": "boolean"
        },
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string"
        },
        {
            "name": "cost",
            "baseName": "cost",
            "type": "Currency"
        },
        {
            "name": "costBeforeDiscount",
            "baseName": "cost_before_discount",
            "type": "Currency"
        },
        {
            "name": "defaultMethod",
            "baseName": "default_method",
            "type": "boolean"
        },
        {
            "name": "discount",
            "baseName": "discount",
            "type": "Currency"
        },
        {
            "name": "discounted",
            "baseName": "discounted",
            "type": "boolean"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "estimatedDelivery",
            "baseName": "estimated_delivery",
            "type": "string"
        },
        {
            "name": "liftGateOption",
            "baseName": "lift_gate_option",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "tax",
            "baseName": "tax",
            "type": "Currency"
        },
        {
            "name": "totalTax",
            "baseName": "total_tax",
            "type": "Currency"
        }
    ];
    return CartSettingsShippingEstimate;
}());
exports.CartSettingsShippingEstimate = CartSettingsShippingEstimate;
var CartSettingsTaxes = (function () {
    function CartSettingsTaxes() {
    }
    CartSettingsTaxes.getAttributeTypeMap = function () {
        return CartSettingsTaxes.attributeTypeMap;
    };
    CartSettingsTaxes.discriminator = undefined;
    CartSettingsTaxes.attributeTypeMap = [
        {
            "name": "counties",
            "baseName": "counties",
            "type": "Array<string>"
        }
    ];
    return CartSettingsTaxes;
}());
exports.CartSettingsTaxes = CartSettingsTaxes;
var CartSettingsTerms = (function () {
    function CartSettingsTerms() {
    }
    CartSettingsTerms.getAttributeTypeMap = function () {
        return CartSettingsTerms.attributeTypeMap;
    };
    CartSettingsTerms.discriminator = undefined;
    CartSettingsTerms.attributeTypeMap = [
        {
            "name": "html",
            "baseName": "html",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        }
    ];
    return CartSettingsTerms;
}());
exports.CartSettingsTerms = CartSettingsTerms;
var CartShipping = (function () {
    function CartShipping() {
    }
    CartShipping.getAttributeTypeMap = function () {
        return CartShipping.attributeTypeMap;
    };
    CartShipping.discriminator = undefined;
    CartShipping.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "deliveryDate",
            "baseName": "delivery_date",
            "type": "string"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "liftGate",
            "baseName": "lift_gate",
            "type": "boolean"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "shipOnDate",
            "baseName": "ship_on_date",
            "type": "string"
        },
        {
            "name": "shipToResidential",
            "baseName": "ship_to_residential",
            "type": "boolean"
        },
        {
            "name": "shipping3rdPartyAccountNumber",
            "baseName": "shipping_3rd_party_account_number",
            "type": "string"
        },
        {
            "name": "shippingMethod",
            "baseName": "shipping_method",
            "type": "string"
        },
        {
            "name": "specialInstructions",
            "baseName": "special_instructions",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return CartShipping;
}());
exports.CartShipping = CartShipping;
var CartSummary = (function () {
    function CartSummary() {
    }
    CartSummary.getAttributeTypeMap = function () {
        return CartSummary.attributeTypeMap;
    };
    CartSummary.discriminator = undefined;
    CartSummary.attributeTypeMap = [
        {
            "name": "arbitraryShippingHandlingTotal",
            "baseName": "arbitrary_shipping_handling_total",
            "type": "Currency"
        },
        {
            "name": "arbitraryTax",
            "baseName": "arbitrary_tax",
            "type": "Currency"
        },
        {
            "name": "arbitraryTaxRate",
            "baseName": "arbitrary_tax_rate",
            "type": "Currency"
        },
        {
            "name": "arbitraryTaxableSubtotal",
            "baseName": "arbitrary_taxable_subtotal",
            "type": "Currency"
        },
        {
            "name": "shippingHandling",
            "baseName": "shipping_handling",
            "type": "Currency"
        },
        {
            "name": "shippingHandlingDiscount",
            "baseName": "shipping_handling_discount",
            "type": "Currency"
        },
        {
            "name": "shippingHandlingWithDiscount",
            "baseName": "shipping_handling_with_discount",
            "type": "Currency"
        },
        {
            "name": "subtotal",
            "baseName": "subtotal",
            "type": "Currency"
        },
        {
            "name": "subtotalDiscount",
            "baseName": "subtotal_discount",
            "type": "Currency"
        },
        {
            "name": "subtotalWithDiscount",
            "baseName": "subtotal_with_discount",
            "type": "Currency"
        },
        {
            "name": "surcharge",
            "baseName": "surcharge",
            "type": "Currency"
        },
        {
            "name": "tax",
            "baseName": "tax",
            "type": "Currency"
        },
        {
            "name": "taxableSubtotal",
            "baseName": "taxable_subtotal",
            "type": "Currency"
        },
        {
            "name": "taxableSubtotalDiscount",
            "baseName": "taxable_subtotal_discount",
            "type": "Currency"
        },
        {
            "name": "taxableSubtotalWithDiscount",
            "baseName": "taxable_subtotal_with_discount",
            "type": "Currency"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "Currency"
        }
    ];
    return CartSummary;
}());
exports.CartSummary = CartSummary;
var CartTaxes = (function () {
    function CartTaxes() {
    }
    CartTaxes.getAttributeTypeMap = function () {
        return CartTaxes.attributeTypeMap;
    };
    CartTaxes.discriminator = undefined;
    CartTaxes.attributeTypeMap = [
        {
            "name": "county",
            "baseName": "county",
            "type": "string"
        },
        {
            "name": "exempt",
            "baseName": "exempt",
            "type": "boolean"
        },
        {
            "name": "rate",
            "baseName": "rate",
            "type": "number"
        }
    ];
    return CartTaxes;
}());
exports.CartTaxes = CartTaxes;
var CartUpsellAfter = (function () {
    function CartUpsellAfter() {
    }
    CartUpsellAfter.getAttributeTypeMap = function () {
        return CartUpsellAfter.attributeTypeMap;
    };
    CartUpsellAfter.discriminator = undefined;
    CartUpsellAfter.attributeTypeMap = [
        {
            "name": "finalizeAfterDts",
            "baseName": "finalize_after_dts",
            "type": "string"
        },
        {
            "name": "finalizeAfterMinutes",
            "baseName": "finalize_after_minutes",
            "type": "number"
        },
        {
            "name": "upsellPathCode",
            "baseName": "upsell_path_code",
            "type": "string"
        }
    ];
    return CartUpsellAfter;
}());
exports.CartUpsellAfter = CartUpsellAfter;
var CartValidationRequest = (function () {
    function CartValidationRequest() {
    }
    CartValidationRequest.getAttributeTypeMap = function () {
        return CartValidationRequest.attributeTypeMap;
    };
    CartValidationRequest.discriminator = undefined;
    CartValidationRequest.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "checks",
            "baseName": "checks",
            "type": "Array<string>"
        }
    ];
    return CartValidationRequest;
}());
exports.CartValidationRequest = CartValidationRequest;
var CartValidationResponse = (function () {
    function CartValidationResponse() {
    }
    CartValidationResponse.getAttributeTypeMap = function () {
        return CartValidationResponse.attributeTypeMap;
    };
    CartValidationResponse.discriminator = undefined;
    CartValidationResponse.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        }
    ];
    return CartValidationResponse;
}());
exports.CartValidationResponse = CartValidationResponse;
var ChargebackDispute = (function () {
    function ChargebackDispute() {
    }
    ChargebackDispute.getAttributeTypeMap = function () {
        return ChargebackDispute.attributeTypeMap;
    };
    ChargebackDispute.discriminator = undefined;
    ChargebackDispute.attributeTypeMap = [
        {
            "name": "accountNumber",
            "baseName": "account_number",
            "type": "string"
        },
        {
            "name": "adjustmentRequestText",
            "baseName": "adjustment_request_text",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "authCode",
            "baseName": "auth_code",
            "type": "string"
        },
        {
            "name": "caseNumber",
            "baseName": "case_number",
            "type": "string"
        },
        {
            "name": "chargebackDisputeOid",
            "baseName": "chargeback_dispute_oid",
            "type": "number"
        },
        {
            "name": "chargebackDts",
            "baseName": "chargeback_dts",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "customerCareNotes",
            "baseName": "customer_care_notes",
            "type": "string"
        },
        {
            "name": "encryptionKey",
            "baseName": "encryption_key",
            "type": "string"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "faxFailureReason",
            "baseName": "fax_failure_reason",
            "type": "string"
        },
        {
            "name": "faxNumber",
            "baseName": "fax_number",
            "type": "string"
        },
        {
            "name": "faxTransactionId",
            "baseName": "fax_transaction_id",
            "type": "number"
        },
        {
            "name": "icsid",
            "baseName": "icsid",
            "type": "string"
        },
        {
            "name": "merchantAccountProfileOid",
            "baseName": "merchant_account_profile_oid",
            "type": "number"
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "Order"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "partialCardNumber",
            "baseName": "partial_card_number",
            "type": "string"
        },
        {
            "name": "pdfFileOid",
            "baseName": "pdf_file_oid",
            "type": "string"
        },
        {
            "name": "reasonCode",
            "baseName": "reason_code",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "websiteUrl",
            "baseName": "website_url",
            "type": "string"
        }
    ];
    return ChargebackDispute;
}());
exports.ChargebackDispute = ChargebackDispute;
var ChargebackDisputeResponse = (function () {
    function ChargebackDisputeResponse() {
    }
    ChargebackDisputeResponse.getAttributeTypeMap = function () {
        return ChargebackDisputeResponse.attributeTypeMap;
    };
    ChargebackDisputeResponse.discriminator = undefined;
    ChargebackDisputeResponse.attributeTypeMap = [
        {
            "name": "chargeback",
            "baseName": "chargeback",
            "type": "ChargebackDispute"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ChargebackDisputeResponse;
}());
exports.ChargebackDisputeResponse = ChargebackDisputeResponse;
var ChargebackDisputesResponse = (function () {
    function ChargebackDisputesResponse() {
    }
    ChargebackDisputesResponse.getAttributeTypeMap = function () {
        return ChargebackDisputesResponse.attributeTypeMap;
    };
    ChargebackDisputesResponse.discriminator = undefined;
    ChargebackDisputesResponse.attributeTypeMap = [
        {
            "name": "chargebacks",
            "baseName": "chargebacks",
            "type": "Array<ChargebackDispute>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ChargebackDisputesResponse;
}());
exports.ChargebackDisputesResponse = ChargebackDisputesResponse;
var CheckoutAllowedCountriesResponse = (function () {
    function CheckoutAllowedCountriesResponse() {
    }
    CheckoutAllowedCountriesResponse.getAttributeTypeMap = function () {
        return CheckoutAllowedCountriesResponse.attributeTypeMap;
    };
    CheckoutAllowedCountriesResponse.discriminator = undefined;
    CheckoutAllowedCountriesResponse.attributeTypeMap = [
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<Country>"
        }
    ];
    return CheckoutAllowedCountriesResponse;
}());
exports.CheckoutAllowedCountriesResponse = CheckoutAllowedCountriesResponse;
var CheckoutHandoffRequest = (function () {
    function CheckoutHandoffRequest() {
    }
    CheckoutHandoffRequest.getAttributeTypeMap = function () {
        return CheckoutHandoffRequest.attributeTypeMap;
    };
    CheckoutHandoffRequest.discriminator = undefined;
    CheckoutHandoffRequest.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "errorParameterName",
            "baseName": "error_parameter_name",
            "type": "string"
        },
        {
            "name": "errorReturnUrl",
            "baseName": "error_return_url",
            "type": "string"
        },
        {
            "name": "operation",
            "baseName": "operation",
            "type": "CheckoutHandoffRequest.OperationEnum"
        },
        {
            "name": "paypalMaximumUpsellRevenue",
            "baseName": "paypal_maximum_upsell_revenue",
            "type": "number"
        },
        {
            "name": "paypalReturnUrl",
            "baseName": "paypal_return_url",
            "type": "string"
        },
        {
            "name": "secureHostName",
            "baseName": "secure_host_name",
            "type": "string"
        },
        {
            "name": "ucacid",
            "baseName": "ucacid",
            "type": "string"
        }
    ];
    return CheckoutHandoffRequest;
}());
exports.CheckoutHandoffRequest = CheckoutHandoffRequest;
(function (CheckoutHandoffRequest) {
    var OperationEnum;
    (function (OperationEnum) {
        OperationEnum[OperationEnum["Checkout"] = 'checkout'] = "Checkout";
        OperationEnum[OperationEnum["PayPal"] = 'payPal'] = "PayPal";
        OperationEnum[OperationEnum["PayPalCredit"] = 'payPalCredit'] = "PayPalCredit";
        OperationEnum[OperationEnum["View"] = 'view'] = "View";
        OperationEnum[OperationEnum["Affirm"] = 'affirm'] = "Affirm";
    })(OperationEnum = CheckoutHandoffRequest.OperationEnum || (CheckoutHandoffRequest.OperationEnum = {}));
})(CheckoutHandoffRequest = exports.CheckoutHandoffRequest || (exports.CheckoutHandoffRequest = {}));
exports.CheckoutHandoffRequest = CheckoutHandoffRequest;
var CheckoutHandoffResponse = (function () {
    function CheckoutHandoffResponse() {
    }
    CheckoutHandoffResponse.getAttributeTypeMap = function () {
        return CheckoutHandoffResponse.attributeTypeMap;
    };
    CheckoutHandoffResponse.discriminator = undefined;
    CheckoutHandoffResponse.attributeTypeMap = [
        {
            "name": "cart",
            "baseName": "cart",
            "type": "Cart"
        },
        {
            "name": "errors",
            "baseName": "errors",
            "type": "Array<string>"
        },
        {
            "name": "redirectToUrl",
            "baseName": "redirect_to_url",
            "type": "string"
        }
    ];
    return CheckoutHandoffResponse;
}());
exports.CheckoutHandoffResponse = CheckoutHandoffResponse;
var CheckoutSetupBrowserKeyRequest = (function () {
    function CheckoutSetupBrowserKeyRequest() {
    }
    CheckoutSetupBrowserKeyRequest.getAttributeTypeMap = function () {
        return CheckoutSetupBrowserKeyRequest.attributeTypeMap;
    };
    CheckoutSetupBrowserKeyRequest.discriminator = undefined;
    CheckoutSetupBrowserKeyRequest.attributeTypeMap = [
        {
            "name": "allowedReferrers",
            "baseName": "allowed_referrers",
            "type": "Array<string>"
        }
    ];
    return CheckoutSetupBrowserKeyRequest;
}());
exports.CheckoutSetupBrowserKeyRequest = CheckoutSetupBrowserKeyRequest;
var CheckoutSetupBrowserKeyResponse = (function () {
    function CheckoutSetupBrowserKeyResponse() {
    }
    CheckoutSetupBrowserKeyResponse.getAttributeTypeMap = function () {
        return CheckoutSetupBrowserKeyResponse.attributeTypeMap;
    };
    CheckoutSetupBrowserKeyResponse.discriminator = undefined;
    CheckoutSetupBrowserKeyResponse.attributeTypeMap = [
        {
            "name": "browserKey",
            "baseName": "browser_key",
            "type": "string"
        }
    ];
    return CheckoutSetupBrowserKeyResponse;
}());
exports.CheckoutSetupBrowserKeyResponse = CheckoutSetupBrowserKeyResponse;
var CheckoutStateProvinceResponse = (function () {
    function CheckoutStateProvinceResponse() {
    }
    CheckoutStateProvinceResponse.getAttributeTypeMap = function () {
        return CheckoutStateProvinceResponse.attributeTypeMap;
    };
    CheckoutStateProvinceResponse.discriminator = undefined;
    CheckoutStateProvinceResponse.attributeTypeMap = [
        {
            "name": "stateProvinces",
            "baseName": "stateProvinces",
            "type": "Array<StateProvince>"
        }
    ];
    return CheckoutStateProvinceResponse;
}());
exports.CheckoutStateProvinceResponse = CheckoutStateProvinceResponse;
var CityStateZip = (function () {
    function CityStateZip() {
    }
    CityStateZip.getAttributeTypeMap = function () {
        return CityStateZip.attributeTypeMap;
    };
    CityStateZip.discriminator = undefined;
    CityStateZip.attributeTypeMap = [
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "validZip",
            "baseName": "validZip",
            "type": "boolean"
        },
        {
            "name": "zip",
            "baseName": "zip",
            "type": "string"
        }
    ];
    return CityStateZip;
}());
exports.CityStateZip = CityStateZip;
var CountriesResponse = (function () {
    function CountriesResponse() {
    }
    CountriesResponse.getAttributeTypeMap = function () {
        return CountriesResponse.attributeTypeMap;
    };
    CountriesResponse.discriminator = undefined;
    CountriesResponse.attributeTypeMap = [
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<Country>"
        }
    ];
    return CountriesResponse;
}());
exports.CountriesResponse = CountriesResponse;
var Country = (function () {
    function Country() {
    }
    Country.getAttributeTypeMap = function () {
        return Country.attributeTypeMap;
    };
    Country.discriminator = undefined;
    Country.attributeTypeMap = [
        {
            "name": "iso2Code",
            "baseName": "iso_2_code",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return Country;
}());
exports.Country = Country;
var Coupon = (function () {
    function Coupon() {
    }
    Coupon.getAttributeTypeMap = function () {
        return Coupon.attributeTypeMap;
    };
    Coupon.discriminator = undefined;
    Coupon.attributeTypeMap = [
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "allowMultipleOneTimeCodes",
            "baseName": "allow_multiple_one_time_codes",
            "type": "boolean"
        },
        {
            "name": "amountOffItems",
            "baseName": "amount_off_items",
            "type": "CouponAmountOffItems"
        },
        {
            "name": "amountOffShipping",
            "baseName": "amount_off_shipping",
            "type": "CouponAmountOffShipping"
        },
        {
            "name": "amountOffShippingWithItemsPurchase",
            "baseName": "amount_off_shipping_with_items_purchase",
            "type": "CouponAmountOffShippingWithItemsPurchase"
        },
        {
            "name": "amountOffSubtotal",
            "baseName": "amount_off_subtotal",
            "type": "CouponAmountOffSubtotal"
        },
        {
            "name": "amountOffSubtotalAndFreeShipping",
            "baseName": "amount_off_subtotal_and_free_shipping",
            "type": "CouponAmountOffSubtotalFreeShippingWithPurchase"
        },
        {
            "name": "amountOffSubtotalAndShipping",
            "baseName": "amount_off_subtotal_and_shipping",
            "type": "CouponAmountOffSubtotalAndShipping"
        },
        {
            "name": "amountOffSubtotalWithBlockPurchase",
            "baseName": "amount_off_subtotal_with_block_purchase",
            "type": "CouponAmountOffSubtotalWithBlockPurchase"
        },
        {
            "name": "amountOffSubtotalWithItemsPurchase",
            "baseName": "amount_off_subtotal_with_items_purchase",
            "type": "CouponAmountOffSubtotalWithItemsPurchase"
        },
        {
            "name": "automaticallyApplyCouponCodes",
            "baseName": "automatically_apply_coupon_codes",
            "type": "CouponAutomaticallyApplyCouponCodes"
        },
        {
            "name": "calculatedDescription",
            "baseName": "calculated_description",
            "type": "string"
        },
        {
            "name": "canBeUsedWithOtherCoupons",
            "baseName": "can_be_used_with_other_coupons",
            "type": "boolean"
        },
        {
            "name": "couponOid",
            "baseName": "coupon_oid",
            "type": "number"
        },
        {
            "name": "couponType",
            "baseName": "coupon_type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "discountItemWithItemPurchase",
            "baseName": "discount_item_with_item_purchase",
            "type": "CouponDiscountItemWithItemPurchase"
        },
        {
            "name": "discountItems",
            "baseName": "discount_items",
            "type": "CouponDiscountItems"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "freeItemAndShippingWithSubtotal",
            "baseName": "free_item_and_shipping_with_subtotal",
            "type": "CouponFreeItemAndShippingWithSubtotal"
        },
        {
            "name": "freeItemWithItemPurchase",
            "baseName": "free_item_with_item_purchase",
            "type": "CouponFreeItemWithItemPurchase"
        },
        {
            "name": "freeItemWithSubtotal",
            "baseName": "free_item_with_subtotal",
            "type": "CouponFreeItemWithSubtotal"
        },
        {
            "name": "freeItemsWithItemPurchase",
            "baseName": "free_items_with_item_purchase",
            "type": "CouponFreeItemsWithItemPurchase"
        },
        {
            "name": "freeItemsWithMixmatchPurchase",
            "baseName": "free_items_with_mixmatch_purchase",
            "type": "CouponFreeItemsWithMixMatchPurchase"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "CouponFreeShipping"
        },
        {
            "name": "freeShippingSpecificItems",
            "baseName": "free_shipping_specific_items",
            "type": "CouponFreeShippingSpecificItems"
        },
        {
            "name": "freeShippingWithItemsPurchase",
            "baseName": "free_shipping_with_items_purchase",
            "type": "CouponFreeShippingWithItemsPurchase"
        },
        {
            "name": "freeShippingWithSubtotal",
            "baseName": "free_shipping_with_subtotal",
            "type": "CouponFreeShippingWithSubtotal"
        },
        {
            "name": "merchantCode",
            "baseName": "merchant_code",
            "type": "string"
        },
        {
            "name": "merchantNotes",
            "baseName": "merchant_notes",
            "type": "string"
        },
        {
            "name": "multipleAmountsOffItems",
            "baseName": "multiple_amounts_off_items",
            "type": "CouponMultipleAmountsOffItems"
        },
        {
            "name": "noDiscount",
            "baseName": "no_discount",
            "type": "CouponNoDiscount"
        },
        {
            "name": "percentOffItemWithItemsQuantityPurchase",
            "baseName": "percent_off_item_with_items_quantity_purchase",
            "type": "CouponPercentOffItemWithItemsQuantityPurchase"
        },
        {
            "name": "percentOffItems",
            "baseName": "percent_off_items",
            "type": "CouponPercentOffItems"
        },
        {
            "name": "percentOffItemsAndFreeShipping",
            "baseName": "percent_off_items_and_free_shipping",
            "type": "CouponPercentOffItemsAndFreeShipping"
        },
        {
            "name": "percentOffItemsWithItemsPurchase",
            "baseName": "percent_off_items_with_items_purchase",
            "type": "CouponPercentOffItemsWithItemsPurchase"
        },
        {
            "name": "percentOffRetailPriceItems",
            "baseName": "percent_off_retail_price_items",
            "type": "CouponPercentOffRetailPriceItems"
        },
        {
            "name": "percentOffShipping",
            "baseName": "percent_off_shipping",
            "type": "CouponPercentOffShipping"
        },
        {
            "name": "percentOffSubtotal",
            "baseName": "percent_off_subtotal",
            "type": "CouponPercentOffSubtotal"
        },
        {
            "name": "percentOffSubtotalAndFreeShipping",
            "baseName": "percent_off_subtotal_and_free_shipping",
            "type": "CouponPercentOffSubtotalAndFreeShipping"
        },
        {
            "name": "percentOffSubtotalLimit",
            "baseName": "percent_off_subtotal_limit",
            "type": "CouponPercentOffSubtotalLimit"
        },
        {
            "name": "percentOffSubtotalWithItemsPurchase",
            "baseName": "percent_off_subtotal_with_items_purchase",
            "type": "CouponPercentOffSubtotalWithItemsPurchase"
        },
        {
            "name": "percentOffSubtotalWithSubtotal",
            "baseName": "percent_off_subtotal_with_subtotal",
            "type": "CouponPercentOffSubtotalWithSubtotal"
        },
        {
            "name": "quickbooksCode",
            "baseName": "quickbooks_code",
            "type": "string"
        },
        {
            "name": "restrictByPostalCodes",
            "baseName": "restrict_by_postal_codes",
            "type": "Array<string>"
        },
        {
            "name": "restrictByScreenBrandingThemeCodes",
            "baseName": "restrict_by_screen_branding_theme_codes",
            "type": "Array<CouponRestriction>"
        },
        {
            "name": "restrictByStorefronts",
            "baseName": "restrict_by_storefronts",
            "type": "Array<CouponRestriction>"
        },
        {
            "name": "startDts",
            "baseName": "start_dts",
            "type": "string"
        },
        {
            "name": "tieredAmountOffItem",
            "baseName": "tiered_amount_off_item",
            "type": "CouponTieredAmountOffItem"
        },
        {
            "name": "tieredAmountOffSubtotal",
            "baseName": "tiered_amount_off_subtotal",
            "type": "CouponTieredAmountOffSubtotal"
        },
        {
            "name": "tieredPercentOffItems",
            "baseName": "tiered_percent_off_items",
            "type": "CouponTieredPercentOffItems"
        },
        {
            "name": "tieredPercentOffShipping",
            "baseName": "tiered_percent_off_shipping",
            "type": "CouponTieredPercentOffShipping"
        },
        {
            "name": "tieredPercentOffSubtotal",
            "baseName": "tiered_percent_off_subtotal",
            "type": "CouponTieredPercentOffSubtotal"
        },
        {
            "name": "usableBy",
            "baseName": "usable_by",
            "type": "string"
        }
    ];
    return Coupon;
}());
exports.Coupon = Coupon;
var CouponAmountOffItems = (function () {
    function CouponAmountOffItems() {
    }
    CouponAmountOffItems.getAttributeTypeMap = function () {
        return CouponAmountOffItems.attributeTypeMap;
    };
    CouponAmountOffItems.discriminator = undefined;
    CouponAmountOffItems.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        }
    ];
    return CouponAmountOffItems;
}());
exports.CouponAmountOffItems = CouponAmountOffItems;
var CouponAmountOffShipping = (function () {
    function CouponAmountOffShipping() {
    }
    CouponAmountOffShipping.getAttributeTypeMap = function () {
        return CouponAmountOffShipping.attributeTypeMap;
    };
    CouponAmountOffShipping.discriminator = undefined;
    CouponAmountOffShipping.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponAmountOffShipping;
}());
exports.CouponAmountOffShipping = CouponAmountOffShipping;
var CouponAmountOffShippingWithItemsPurchase = (function () {
    function CouponAmountOffShippingWithItemsPurchase() {
    }
    CouponAmountOffShippingWithItemsPurchase.getAttributeTypeMap = function () {
        return CouponAmountOffShippingWithItemsPurchase.attributeTypeMap;
    };
    CouponAmountOffShippingWithItemsPurchase.discriminator = undefined;
    CouponAmountOffShippingWithItemsPurchase.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponAmountOffShippingWithItemsPurchase;
}());
exports.CouponAmountOffShippingWithItemsPurchase = CouponAmountOffShippingWithItemsPurchase;
var CouponAmountOffSubtotal = (function () {
    function CouponAmountOffSubtotal() {
    }
    CouponAmountOffSubtotal.getAttributeTypeMap = function () {
        return CouponAmountOffSubtotal.attributeTypeMap;
    };
    CouponAmountOffSubtotal.discriminator = undefined;
    CouponAmountOffSubtotal.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        }
    ];
    return CouponAmountOffSubtotal;
}());
exports.CouponAmountOffSubtotal = CouponAmountOffSubtotal;
var CouponAmountOffSubtotalAndShipping = (function () {
    function CouponAmountOffSubtotalAndShipping() {
    }
    CouponAmountOffSubtotalAndShipping.getAttributeTypeMap = function () {
        return CouponAmountOffSubtotalAndShipping.attributeTypeMap;
    };
    CouponAmountOffSubtotalAndShipping.discriminator = undefined;
    CouponAmountOffSubtotalAndShipping.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        }
    ];
    return CouponAmountOffSubtotalAndShipping;
}());
exports.CouponAmountOffSubtotalAndShipping = CouponAmountOffSubtotalAndShipping;
var CouponAmountOffSubtotalFreeShippingWithPurchase = (function () {
    function CouponAmountOffSubtotalFreeShippingWithPurchase() {
    }
    CouponAmountOffSubtotalFreeShippingWithPurchase.getAttributeTypeMap = function () {
        return CouponAmountOffSubtotalFreeShippingWithPurchase.attributeTypeMap;
    };
    CouponAmountOffSubtotalFreeShippingWithPurchase.discriminator = undefined;
    CouponAmountOffSubtotalFreeShippingWithPurchase.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "purchaseAmount",
            "baseName": "purchase_amount",
            "type": "number"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponAmountOffSubtotalFreeShippingWithPurchase;
}());
exports.CouponAmountOffSubtotalFreeShippingWithPurchase = CouponAmountOffSubtotalFreeShippingWithPurchase;
var CouponAmountOffSubtotalWithBlockPurchase = (function () {
    function CouponAmountOffSubtotalWithBlockPurchase() {
    }
    CouponAmountOffSubtotalWithBlockPurchase.getAttributeTypeMap = function () {
        return CouponAmountOffSubtotalWithBlockPurchase.attributeTypeMap;
    };
    CouponAmountOffSubtotalWithBlockPurchase.discriminator = undefined;
    CouponAmountOffSubtotalWithBlockPurchase.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "requiredPurchaseItem",
            "baseName": "required_purchase_item",
            "type": "string"
        },
        {
            "name": "requiredPurchaseQuantity",
            "baseName": "required_purchase_quantity",
            "type": "number"
        }
    ];
    return CouponAmountOffSubtotalWithBlockPurchase;
}());
exports.CouponAmountOffSubtotalWithBlockPurchase = CouponAmountOffSubtotalWithBlockPurchase;
var CouponAmountOffSubtotalWithItemsPurchase = (function () {
    function CouponAmountOffSubtotalWithItemsPurchase() {
    }
    CouponAmountOffSubtotalWithItemsPurchase.getAttributeTypeMap = function () {
        return CouponAmountOffSubtotalWithItemsPurchase.attributeTypeMap;
    };
    CouponAmountOffSubtotalWithItemsPurchase.discriminator = undefined;
    CouponAmountOffSubtotalWithItemsPurchase.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "requiredPurchaseQuantity",
            "baseName": "required_purchase_quantity",
            "type": "number"
        }
    ];
    return CouponAmountOffSubtotalWithItemsPurchase;
}());
exports.CouponAmountOffSubtotalWithItemsPurchase = CouponAmountOffSubtotalWithItemsPurchase;
var CouponAutomaticallyApplyCouponCodes = (function () {
    function CouponAutomaticallyApplyCouponCodes() {
    }
    CouponAutomaticallyApplyCouponCodes.getAttributeTypeMap = function () {
        return CouponAutomaticallyApplyCouponCodes.attributeTypeMap;
    };
    CouponAutomaticallyApplyCouponCodes.discriminator = undefined;
    CouponAutomaticallyApplyCouponCodes.attributeTypeMap = [
        {
            "name": "couponCodes",
            "baseName": "coupon_codes",
            "type": "Array<string>"
        }
    ];
    return CouponAutomaticallyApplyCouponCodes;
}());
exports.CouponAutomaticallyApplyCouponCodes = CouponAutomaticallyApplyCouponCodes;
var CouponCodesRequest = (function () {
    function CouponCodesRequest() {
    }
    CouponCodesRequest.getAttributeTypeMap = function () {
        return CouponCodesRequest.attributeTypeMap;
    };
    CouponCodesRequest.discriminator = undefined;
    CouponCodesRequest.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "expirationSeconds",
            "baseName": "expiration_seconds",
            "type": "number"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return CouponCodesRequest;
}());
exports.CouponCodesRequest = CouponCodesRequest;
var CouponCodesResponse = (function () {
    function CouponCodesResponse() {
    }
    CouponCodesResponse.getAttributeTypeMap = function () {
        return CouponCodesResponse.attributeTypeMap;
    };
    CouponCodesResponse.discriminator = undefined;
    CouponCodesResponse.attributeTypeMap = [
        {
            "name": "couponCodes",
            "baseName": "coupon_codes",
            "type": "Array<string>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return CouponCodesResponse;
}());
exports.CouponCodesResponse = CouponCodesResponse;
var CouponDiscountItemWithItemPurchase = (function () {
    function CouponDiscountItemWithItemPurchase() {
    }
    CouponDiscountItemWithItemPurchase.getAttributeTypeMap = function () {
        return CouponDiscountItemWithItemPurchase.attributeTypeMap;
    };
    CouponDiscountItemWithItemPurchase.discriminator = undefined;
    CouponDiscountItemWithItemPurchase.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountItem",
            "baseName": "discount_item",
            "type": "string"
        },
        {
            "name": "discountPrice",
            "baseName": "discount_price",
            "type": "number"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "requiredPurchaseItem",
            "baseName": "required_purchase_item",
            "type": "string"
        }
    ];
    return CouponDiscountItemWithItemPurchase;
}());
exports.CouponDiscountItemWithItemPurchase = CouponDiscountItemWithItemPurchase;
var CouponDiscountItems = (function () {
    function CouponDiscountItems() {
    }
    CouponDiscountItems.getAttributeTypeMap = function () {
        return CouponDiscountItems.attributeTypeMap;
    };
    CouponDiscountItems.discriminator = undefined;
    CouponDiscountItems.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountPrice",
            "baseName": "discount_price",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        }
    ];
    return CouponDiscountItems;
}());
exports.CouponDiscountItems = CouponDiscountItems;
var CouponEditorValues = (function () {
    function CouponEditorValues() {
    }
    CouponEditorValues.getAttributeTypeMap = function () {
        return CouponEditorValues.attributeTypeMap;
    };
    CouponEditorValues.discriminator = undefined;
    CouponEditorValues.attributeTypeMap = [
        {
            "name": "couponTypes",
            "baseName": "coupon_types",
            "type": "Array<string>"
        }
    ];
    return CouponEditorValues;
}());
exports.CouponEditorValues = CouponEditorValues;
var CouponFreeItemAndShippingWithSubtotal = (function () {
    function CouponFreeItemAndShippingWithSubtotal() {
    }
    CouponFreeItemAndShippingWithSubtotal.getAttributeTypeMap = function () {
        return CouponFreeItemAndShippingWithSubtotal.attributeTypeMap;
    };
    CouponFreeItemAndShippingWithSubtotal.discriminator = undefined;
    CouponFreeItemAndShippingWithSubtotal.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        },
        {
            "name": "subtotalAmount",
            "baseName": "subtotal_amount",
            "type": "number"
        }
    ];
    return CouponFreeItemAndShippingWithSubtotal;
}());
exports.CouponFreeItemAndShippingWithSubtotal = CouponFreeItemAndShippingWithSubtotal;
var CouponFreeItemWithItemPurchase = (function () {
    function CouponFreeItemWithItemPurchase() {
    }
    CouponFreeItemWithItemPurchase.getAttributeTypeMap = function () {
        return CouponFreeItemWithItemPurchase.attributeTypeMap;
    };
    CouponFreeItemWithItemPurchase.discriminator = undefined;
    CouponFreeItemWithItemPurchase.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "matchRequiredPurchaseItemToFreeItem",
            "baseName": "match_required_purchase_item_to_free_item",
            "type": "boolean"
        },
        {
            "name": "requiredPurchaseItems",
            "baseName": "required_purchase_items",
            "type": "Array<string>"
        }
    ];
    return CouponFreeItemWithItemPurchase;
}());
exports.CouponFreeItemWithItemPurchase = CouponFreeItemWithItemPurchase;
var CouponFreeItemWithSubtotal = (function () {
    function CouponFreeItemWithSubtotal() {
    }
    CouponFreeItemWithSubtotal.getAttributeTypeMap = function () {
        return CouponFreeItemWithSubtotal.attributeTypeMap;
    };
    CouponFreeItemWithSubtotal.discriminator = undefined;
    CouponFreeItemWithSubtotal.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "subtotalAmount",
            "baseName": "subtotal_amount",
            "type": "number"
        }
    ];
    return CouponFreeItemWithSubtotal;
}());
exports.CouponFreeItemWithSubtotal = CouponFreeItemWithSubtotal;
var CouponFreeItemsWithItemPurchase = (function () {
    function CouponFreeItemsWithItemPurchase() {
    }
    CouponFreeItemsWithItemPurchase.getAttributeTypeMap = function () {
        return CouponFreeItemsWithItemPurchase.attributeTypeMap;
    };
    CouponFreeItemsWithItemPurchase.discriminator = undefined;
    CouponFreeItemsWithItemPurchase.attributeTypeMap = [
        {
            "name": "freeItem",
            "baseName": "free_item",
            "type": "string"
        },
        {
            "name": "freeQuantity",
            "baseName": "free_quantity",
            "type": "number"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "requiredPurchaseItem",
            "baseName": "required_purchase_item",
            "type": "string"
        },
        {
            "name": "requiredPurchaseQuantity",
            "baseName": "required_purchase_quantity",
            "type": "number"
        }
    ];
    return CouponFreeItemsWithItemPurchase;
}());
exports.CouponFreeItemsWithItemPurchase = CouponFreeItemsWithItemPurchase;
var CouponFreeItemsWithMixMatchPurchase = (function () {
    function CouponFreeItemsWithMixMatchPurchase() {
    }
    CouponFreeItemsWithMixMatchPurchase.getAttributeTypeMap = function () {
        return CouponFreeItemsWithMixMatchPurchase.attributeTypeMap;
    };
    CouponFreeItemsWithMixMatchPurchase.discriminator = undefined;
    CouponFreeItemsWithMixMatchPurchase.attributeTypeMap = [
        {
            "name": "freeItem",
            "baseName": "free_item",
            "type": "string"
        },
        {
            "name": "freeQuantity",
            "baseName": "free_quantity",
            "type": "number"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "requiredPurchaseMixAndMatchGroup",
            "baseName": "required_purchase_mix_and_match_group",
            "type": "string"
        },
        {
            "name": "requiredPurchaseQuantity",
            "baseName": "required_purchase_quantity",
            "type": "number"
        }
    ];
    return CouponFreeItemsWithMixMatchPurchase;
}());
exports.CouponFreeItemsWithMixMatchPurchase = CouponFreeItemsWithMixMatchPurchase;
var CouponFreeShipping = (function () {
    function CouponFreeShipping() {
    }
    CouponFreeShipping.getAttributeTypeMap = function () {
        return CouponFreeShipping.attributeTypeMap;
    };
    CouponFreeShipping.discriminator = undefined;
    CouponFreeShipping.attributeTypeMap = [
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponFreeShipping;
}());
exports.CouponFreeShipping = CouponFreeShipping;
var CouponFreeShippingSpecificItems = (function () {
    function CouponFreeShippingSpecificItems() {
    }
    CouponFreeShippingSpecificItems.getAttributeTypeMap = function () {
        return CouponFreeShippingSpecificItems.attributeTypeMap;
    };
    CouponFreeShippingSpecificItems.discriminator = undefined;
    CouponFreeShippingSpecificItems.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        }
    ];
    return CouponFreeShippingSpecificItems;
}());
exports.CouponFreeShippingSpecificItems = CouponFreeShippingSpecificItems;
var CouponFreeShippingWithItemsPurchase = (function () {
    function CouponFreeShippingWithItemsPurchase() {
    }
    CouponFreeShippingWithItemsPurchase.getAttributeTypeMap = function () {
        return CouponFreeShippingWithItemsPurchase.attributeTypeMap;
    };
    CouponFreeShippingWithItemsPurchase.discriminator = undefined;
    CouponFreeShippingWithItemsPurchase.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponFreeShippingWithItemsPurchase;
}());
exports.CouponFreeShippingWithItemsPurchase = CouponFreeShippingWithItemsPurchase;
var CouponFreeShippingWithSubtotal = (function () {
    function CouponFreeShippingWithSubtotal() {
    }
    CouponFreeShippingWithSubtotal.getAttributeTypeMap = function () {
        return CouponFreeShippingWithSubtotal.attributeTypeMap;
    };
    CouponFreeShippingWithSubtotal.discriminator = undefined;
    CouponFreeShippingWithSubtotal.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "purchaseAmount",
            "baseName": "purchase_amount",
            "type": "number"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponFreeShippingWithSubtotal;
}());
exports.CouponFreeShippingWithSubtotal = CouponFreeShippingWithSubtotal;
var CouponMultipleAmountsOffItems = (function () {
    function CouponMultipleAmountsOffItems() {
    }
    CouponMultipleAmountsOffItems.getAttributeTypeMap = function () {
        return CouponMultipleAmountsOffItems.attributeTypeMap;
    };
    CouponMultipleAmountsOffItems.discriminator = undefined;
    CouponMultipleAmountsOffItems.attributeTypeMap = [
        {
            "name": "discounts",
            "baseName": "discounts",
            "type": "Array<CouponTierItemDiscount>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        }
    ];
    return CouponMultipleAmountsOffItems;
}());
exports.CouponMultipleAmountsOffItems = CouponMultipleAmountsOffItems;
var CouponNoDiscount = (function () {
    function CouponNoDiscount() {
    }
    CouponNoDiscount.getAttributeTypeMap = function () {
        return CouponNoDiscount.attributeTypeMap;
    };
    CouponNoDiscount.discriminator = undefined;
    CouponNoDiscount.attributeTypeMap = [];
    return CouponNoDiscount;
}());
exports.CouponNoDiscount = CouponNoDiscount;
var CouponPercentOffItemWithItemsQuantityPurchase = (function () {
    function CouponPercentOffItemWithItemsQuantityPurchase() {
    }
    CouponPercentOffItemWithItemsQuantityPurchase.getAttributeTypeMap = function () {
        return CouponPercentOffItemWithItemsQuantityPurchase.attributeTypeMap;
    };
    CouponPercentOffItemWithItemsQuantityPurchase.discriminator = undefined;
    CouponPercentOffItemWithItemsQuantityPurchase.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "requiredPurchaseItems",
            "baseName": "required_purchase_items",
            "type": "Array<string>"
        },
        {
            "name": "requiredPurchaseQuantity",
            "baseName": "required_purchase_quantity",
            "type": "number"
        }
    ];
    return CouponPercentOffItemWithItemsQuantityPurchase;
}());
exports.CouponPercentOffItemWithItemsQuantityPurchase = CouponPercentOffItemWithItemsQuantityPurchase;
var CouponPercentOffItems = (function () {
    function CouponPercentOffItems() {
    }
    CouponPercentOffItems.getAttributeTypeMap = function () {
        return CouponPercentOffItems.attributeTypeMap;
    };
    CouponPercentOffItems.discriminator = undefined;
    CouponPercentOffItems.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "excludedItems",
            "baseName": "excluded_items",
            "type": "Array<string>"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        }
    ];
    return CouponPercentOffItems;
}());
exports.CouponPercentOffItems = CouponPercentOffItems;
var CouponPercentOffItemsAndFreeShipping = (function () {
    function CouponPercentOffItemsAndFreeShipping() {
    }
    CouponPercentOffItemsAndFreeShipping.getAttributeTypeMap = function () {
        return CouponPercentOffItemsAndFreeShipping.attributeTypeMap;
    };
    CouponPercentOffItemsAndFreeShipping.discriminator = undefined;
    CouponPercentOffItemsAndFreeShipping.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "excludedItems",
            "baseName": "excluded_items",
            "type": "Array<string>"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        }
    ];
    return CouponPercentOffItemsAndFreeShipping;
}());
exports.CouponPercentOffItemsAndFreeShipping = CouponPercentOffItemsAndFreeShipping;
var CouponPercentOffItemsWithItemsPurchase = (function () {
    function CouponPercentOffItemsWithItemsPurchase() {
    }
    CouponPercentOffItemsWithItemsPurchase.getAttributeTypeMap = function () {
        return CouponPercentOffItemsWithItemsPurchase.attributeTypeMap;
    };
    CouponPercentOffItemsWithItemsPurchase.discriminator = undefined;
    CouponPercentOffItemsWithItemsPurchase.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "requiredPurchaseItems",
            "baseName": "required_purchase_items",
            "type": "Array<string>"
        }
    ];
    return CouponPercentOffItemsWithItemsPurchase;
}());
exports.CouponPercentOffItemsWithItemsPurchase = CouponPercentOffItemsWithItemsPurchase;
var CouponPercentOffRetailPriceItems = (function () {
    function CouponPercentOffRetailPriceItems() {
    }
    CouponPercentOffRetailPriceItems.getAttributeTypeMap = function () {
        return CouponPercentOffRetailPriceItems.attributeTypeMap;
    };
    CouponPercentOffRetailPriceItems.discriminator = undefined;
    CouponPercentOffRetailPriceItems.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "excludedItems",
            "baseName": "excluded_items",
            "type": "Array<string>"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        }
    ];
    return CouponPercentOffRetailPriceItems;
}());
exports.CouponPercentOffRetailPriceItems = CouponPercentOffRetailPriceItems;
var CouponPercentOffShipping = (function () {
    function CouponPercentOffShipping() {
    }
    CouponPercentOffShipping.getAttributeTypeMap = function () {
        return CouponPercentOffShipping.attributeTypeMap;
    };
    CouponPercentOffShipping.discriminator = undefined;
    CouponPercentOffShipping.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponPercentOffShipping;
}());
exports.CouponPercentOffShipping = CouponPercentOffShipping;
var CouponPercentOffSubtotal = (function () {
    function CouponPercentOffSubtotal() {
    }
    CouponPercentOffSubtotal.getAttributeTypeMap = function () {
        return CouponPercentOffSubtotal.attributeTypeMap;
    };
    CouponPercentOffSubtotal.discriminator = undefined;
    CouponPercentOffSubtotal.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        }
    ];
    return CouponPercentOffSubtotal;
}());
exports.CouponPercentOffSubtotal = CouponPercentOffSubtotal;
var CouponPercentOffSubtotalAndFreeShipping = (function () {
    function CouponPercentOffSubtotalAndFreeShipping() {
    }
    CouponPercentOffSubtotalAndFreeShipping.getAttributeTypeMap = function () {
        return CouponPercentOffSubtotalAndFreeShipping.attributeTypeMap;
    };
    CouponPercentOffSubtotalAndFreeShipping.discriminator = undefined;
    CouponPercentOffSubtotalAndFreeShipping.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        }
    ];
    return CouponPercentOffSubtotalAndFreeShipping;
}());
exports.CouponPercentOffSubtotalAndFreeShipping = CouponPercentOffSubtotalAndFreeShipping;
var CouponPercentOffSubtotalLimit = (function () {
    function CouponPercentOffSubtotalLimit() {
    }
    CouponPercentOffSubtotalLimit.getAttributeTypeMap = function () {
        return CouponPercentOffSubtotalLimit.attributeTypeMap;
    };
    CouponPercentOffSubtotalLimit.discriminator = undefined;
    CouponPercentOffSubtotalLimit.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        }
    ];
    return CouponPercentOffSubtotalLimit;
}());
exports.CouponPercentOffSubtotalLimit = CouponPercentOffSubtotalLimit;
var CouponPercentOffSubtotalWithItemsPurchase = (function () {
    function CouponPercentOffSubtotalWithItemsPurchase() {
    }
    CouponPercentOffSubtotalWithItemsPurchase.getAttributeTypeMap = function () {
        return CouponPercentOffSubtotalWithItemsPurchase.attributeTypeMap;
    };
    CouponPercentOffSubtotalWithItemsPurchase.discriminator = undefined;
    CouponPercentOffSubtotalWithItemsPurchase.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        }
    ];
    return CouponPercentOffSubtotalWithItemsPurchase;
}());
exports.CouponPercentOffSubtotalWithItemsPurchase = CouponPercentOffSubtotalWithItemsPurchase;
var CouponPercentOffSubtotalWithSubtotal = (function () {
    function CouponPercentOffSubtotalWithSubtotal() {
    }
    CouponPercentOffSubtotalWithSubtotal.getAttributeTypeMap = function () {
        return CouponPercentOffSubtotalWithSubtotal.attributeTypeMap;
    };
    CouponPercentOffSubtotalWithSubtotal.discriminator = undefined;
    CouponPercentOffSubtotalWithSubtotal.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "subtotalAmount",
            "baseName": "subtotal_amount",
            "type": "number"
        }
    ];
    return CouponPercentOffSubtotalWithSubtotal;
}());
exports.CouponPercentOffSubtotalWithSubtotal = CouponPercentOffSubtotalWithSubtotal;
var CouponQuery = (function () {
    function CouponQuery() {
    }
    CouponQuery.getAttributeTypeMap = function () {
        return CouponQuery.attributeTypeMap;
    };
    CouponQuery.discriminator = undefined;
    CouponQuery.attributeTypeMap = [
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "couponType",
            "baseName": "coupon_type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "excludeExpired",
            "baseName": "exclude_expired",
            "type": "boolean"
        },
        {
            "name": "expirationDtsBegin",
            "baseName": "expiration_dts_begin",
            "type": "string"
        },
        {
            "name": "expirationDtsEnd",
            "baseName": "expiration_dts_end",
            "type": "string"
        },
        {
            "name": "merchantCode",
            "baseName": "merchant_code",
            "type": "string"
        },
        {
            "name": "startDtsBegin",
            "baseName": "start_dts_begin",
            "type": "string"
        },
        {
            "name": "startDtsEnd",
            "baseName": "start_dts_end",
            "type": "string"
        }
    ];
    return CouponQuery;
}());
exports.CouponQuery = CouponQuery;
var CouponResponse = (function () {
    function CouponResponse() {
    }
    CouponResponse.getAttributeTypeMap = function () {
        return CouponResponse.attributeTypeMap;
    };
    CouponResponse.discriminator = undefined;
    CouponResponse.attributeTypeMap = [
        {
            "name": "coupon",
            "baseName": "coupon",
            "type": "Coupon"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return CouponResponse;
}());
exports.CouponResponse = CouponResponse;
var CouponRestriction = (function () {
    function CouponRestriction() {
    }
    CouponRestriction.getAttributeTypeMap = function () {
        return CouponRestriction.attributeTypeMap;
    };
    CouponRestriction.discriminator = undefined;
    CouponRestriction.attributeTypeMap = [
        {
            "name": "invalidForThis",
            "baseName": "invalidForThis",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "validForThis",
            "baseName": "validForThis",
            "type": "boolean"
        },
        {
            "name": "validOnlyForThis",
            "baseName": "validOnlyForThis",
            "type": "boolean"
        }
    ];
    return CouponRestriction;
}());
exports.CouponRestriction = CouponRestriction;
var CouponTierAmount = (function () {
    function CouponTierAmount() {
    }
    CouponTierAmount.getAttributeTypeMap = function () {
        return CouponTierAmount.attributeTypeMap;
    };
    CouponTierAmount.discriminator = undefined;
    CouponTierAmount.attributeTypeMap = [
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "subtotalAmount",
            "baseName": "subtotal_amount",
            "type": "number"
        }
    ];
    return CouponTierAmount;
}());
exports.CouponTierAmount = CouponTierAmount;
var CouponTierItemDiscount = (function () {
    function CouponTierItemDiscount() {
    }
    CouponTierItemDiscount.getAttributeTypeMap = function () {
        return CouponTierItemDiscount.attributeTypeMap;
    };
    CouponTierItemDiscount.discriminator = undefined;
    CouponTierItemDiscount.attributeTypeMap = [
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        }
    ];
    return CouponTierItemDiscount;
}());
exports.CouponTierItemDiscount = CouponTierItemDiscount;
var CouponTierPercent = (function () {
    function CouponTierPercent() {
    }
    CouponTierPercent.getAttributeTypeMap = function () {
        return CouponTierPercent.attributeTypeMap;
    };
    CouponTierPercent.discriminator = undefined;
    CouponTierPercent.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "subtotalAmount",
            "baseName": "subtotal_amount",
            "type": "number"
        }
    ];
    return CouponTierPercent;
}());
exports.CouponTierPercent = CouponTierPercent;
var CouponTierQuantityAmount = (function () {
    function CouponTierQuantityAmount() {
    }
    CouponTierQuantityAmount.getAttributeTypeMap = function () {
        return CouponTierQuantityAmount.attributeTypeMap;
    };
    CouponTierQuantityAmount.discriminator = undefined;
    CouponTierQuantityAmount.attributeTypeMap = [
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "itemQuantity",
            "baseName": "item_quantity",
            "type": "number"
        }
    ];
    return CouponTierQuantityAmount;
}());
exports.CouponTierQuantityAmount = CouponTierQuantityAmount;
var CouponTierQuantityPercent = (function () {
    function CouponTierQuantityPercent() {
    }
    CouponTierQuantityPercent.getAttributeTypeMap = function () {
        return CouponTierQuantityPercent.attributeTypeMap;
    };
    CouponTierQuantityPercent.discriminator = undefined;
    CouponTierQuantityPercent.attributeTypeMap = [
        {
            "name": "discountPercent",
            "baseName": "discount_percent",
            "type": "number"
        },
        {
            "name": "itemQuantity",
            "baseName": "item_quantity",
            "type": "number"
        }
    ];
    return CouponTierQuantityPercent;
}());
exports.CouponTierQuantityPercent = CouponTierQuantityPercent;
var CouponTieredAmountOffItem = (function () {
    function CouponTieredAmountOffItem() {
    }
    CouponTieredAmountOffItem.getAttributeTypeMap = function () {
        return CouponTieredAmountOffItem.attributeTypeMap;
    };
    CouponTieredAmountOffItem.discriminator = undefined;
    CouponTieredAmountOffItem.attributeTypeMap = [
        {
            "name": "item",
            "baseName": "item",
            "type": "string"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<CouponTierQuantityAmount>"
        }
    ];
    return CouponTieredAmountOffItem;
}());
exports.CouponTieredAmountOffItem = CouponTieredAmountOffItem;
var CouponTieredAmountOffSubtotal = (function () {
    function CouponTieredAmountOffSubtotal() {
    }
    CouponTieredAmountOffSubtotal.getAttributeTypeMap = function () {
        return CouponTieredAmountOffSubtotal.attributeTypeMap;
    };
    CouponTieredAmountOffSubtotal.discriminator = undefined;
    CouponTieredAmountOffSubtotal.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<CouponTierAmount>"
        }
    ];
    return CouponTieredAmountOffSubtotal;
}());
exports.CouponTieredAmountOffSubtotal = CouponTieredAmountOffSubtotal;
var CouponTieredPercentOffItems = (function () {
    function CouponTieredPercentOffItems() {
    }
    CouponTieredPercentOffItems.getAttributeTypeMap = function () {
        return CouponTieredPercentOffItems.attributeTypeMap;
    };
    CouponTieredPercentOffItems.discriminator = undefined;
    CouponTieredPercentOffItems.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<CouponTierQuantityPercent>"
        }
    ];
    return CouponTieredPercentOffItems;
}());
exports.CouponTieredPercentOffItems = CouponTieredPercentOffItems;
var CouponTieredPercentOffShipping = (function () {
    function CouponTieredPercentOffShipping() {
    }
    CouponTieredPercentOffShipping.getAttributeTypeMap = function () {
        return CouponTieredPercentOffShipping.attributeTypeMap;
    };
    CouponTieredPercentOffShipping.discriminator = undefined;
    CouponTieredPercentOffShipping.attributeTypeMap = [
        {
            "name": "shippingMethods",
            "baseName": "shipping_methods",
            "type": "Array<string>"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<CouponTierPercent>"
        }
    ];
    return CouponTieredPercentOffShipping;
}());
exports.CouponTieredPercentOffShipping = CouponTieredPercentOffShipping;
var CouponTieredPercentOffSubtotal = (function () {
    function CouponTieredPercentOffSubtotal() {
    }
    CouponTieredPercentOffSubtotal.getAttributeTypeMap = function () {
        return CouponTieredPercentOffSubtotal.attributeTypeMap;
    };
    CouponTieredPercentOffSubtotal.discriminator = undefined;
    CouponTieredPercentOffSubtotal.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<string>"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<CouponTierPercent>"
        }
    ];
    return CouponTieredPercentOffSubtotal;
}());
exports.CouponTieredPercentOffSubtotal = CouponTieredPercentOffSubtotal;
var CouponsResponse = (function () {
    function CouponsResponse() {
    }
    CouponsResponse.getAttributeTypeMap = function () {
        return CouponsResponse.attributeTypeMap;
    };
    CouponsResponse.discriminator = undefined;
    CouponsResponse.attributeTypeMap = [
        {
            "name": "coupons",
            "baseName": "coupons",
            "type": "Array<Coupon>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return CouponsResponse;
}());
exports.CouponsResponse = CouponsResponse;
var Currency = (function () {
    function Currency() {
    }
    Currency.getAttributeTypeMap = function () {
        return Currency.attributeTypeMap;
    };
    Currency.discriminator = undefined;
    Currency.attributeTypeMap = [
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "exchangeRate",
            "baseName": "exchange_rate",
            "type": "number"
        },
        {
            "name": "localized",
            "baseName": "localized",
            "type": "number"
        },
        {
            "name": "localizedFormatted",
            "baseName": "localized_formatted",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        }
    ];
    return Currency;
}());
exports.Currency = Currency;
var Customer = (function () {
    function Customer() {
    }
    Customer.getAttributeTypeMap = function () {
        return Customer.attributeTypeMap;
    };
    Customer.discriminator = undefined;
    Customer.attributeTypeMap = [
        {
            "name": "activity",
            "baseName": "activity",
            "type": "CustomerActivity"
        },
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "allow3rdPartyBilling",
            "baseName": "allow_3rd_party_billing",
            "type": "boolean"
        },
        {
            "name": "allowCod",
            "baseName": "allow_cod",
            "type": "boolean"
        },
        {
            "name": "allowPurchaseOrder",
            "baseName": "allow_purchase_order",
            "type": "boolean"
        },
        {
            "name": "allowQuoteRequest",
            "baseName": "allow_quote_request",
            "type": "boolean"
        },
        {
            "name": "allowSelectionOfAddressType",
            "baseName": "allow_selection_of_address_type",
            "type": "boolean"
        },
        {
            "name": "attachments",
            "baseName": "attachments",
            "type": "Array<CustomerAttachment>"
        },
        {
            "name": "autoApproveCod",
            "baseName": "auto_approve_cod",
            "type": "boolean"
        },
        {
            "name": "autoApprovePurchaseOrder",
            "baseName": "auto_approve_purchase_order",
            "type": "boolean"
        },
        {
            "name": "automaticMerchantNotes",
            "baseName": "automatic_merchant_notes",
            "type": "string"
        },
        {
            "name": "billing",
            "baseName": "billing",
            "type": "Array<CustomerBilling>"
        },
        {
            "name": "businessNotes",
            "baseName": "business_notes",
            "type": "string"
        },
        {
            "name": "cards",
            "baseName": "cards",
            "type": "Array<CustomerCard>"
        },
        {
            "name": "ccEmails",
            "baseName": "cc_emails",
            "type": "Array<CustomerEmail>"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "dhlAccountNumber",
            "baseName": "dhl_account_number",
            "type": "string"
        },
        {
            "name": "dhlDutyAccountNumber",
            "baseName": "dhl_duty_account_number",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "exemptShippingHandlingCharge",
            "baseName": "exempt_shipping_handling_charge",
            "type": "boolean"
        },
        {
            "name": "fedexAccountNumber",
            "baseName": "fedex_account_number",
            "type": "string"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "freeShippingMinimum",
            "baseName": "free_shipping_minimum",
            "type": "number"
        },
        {
            "name": "lastModifiedBy",
            "baseName": "last_modified_by",
            "type": "string"
        },
        {
            "name": "lastModifiedDts",
            "baseName": "last_modified_dts",
            "type": "string"
        },
        {
            "name": "loyalty",
            "baseName": "loyalty",
            "type": "CustomerLoyalty"
        },
        {
            "name": "maximumItemCount",
            "baseName": "maximum_item_count",
            "type": "number"
        },
        {
            "name": "minimumItemCount",
            "baseName": "minimum_item_count",
            "type": "number"
        },
        {
            "name": "minimumSubtotal",
            "baseName": "minimum_subtotal",
            "type": "number"
        },
        {
            "name": "noCoupons",
            "baseName": "no_coupons",
            "type": "boolean"
        },
        {
            "name": "noFreeShipping",
            "baseName": "no_free_shipping",
            "type": "boolean"
        },
        {
            "name": "noRealtimeCharge",
            "baseName": "no_realtime_charge",
            "type": "boolean"
        },
        {
            "name": "orders",
            "baseName": "orders",
            "type": "Array<Order>"
        },
        {
            "name": "ordersSummary",
            "baseName": "orders_summary",
            "type": "CustomerOrdersSummary"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "pricingTiers",
            "baseName": "pricing_tiers",
            "type": "Array<CustomerPricingTier>"
        },
        {
            "name": "privacy",
            "baseName": "privacy",
            "type": "CustomerPrivacy"
        },
        {
            "name": "qbClass",
            "baseName": "qb_class",
            "type": "string"
        },
        {
            "name": "qbCode",
            "baseName": "qb_code",
            "type": "string"
        },
        {
            "name": "quotes",
            "baseName": "quotes",
            "type": "Array<Order>"
        },
        {
            "name": "quotesSummary",
            "baseName": "quotes_summary",
            "type": "CustomerQuotesSummary"
        },
        {
            "name": "referralSource",
            "baseName": "referral_source",
            "type": "string"
        },
        {
            "name": "reviewer",
            "baseName": "reviewer",
            "type": "CustomerReviewer"
        },
        {
            "name": "salesRepCode",
            "baseName": "sales_rep_code",
            "type": "string"
        },
        {
            "name": "sendSignupNotification",
            "baseName": "send_signup_notification",
            "type": "boolean"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "Array<CustomerShipping>"
        },
        {
            "name": "signupDts",
            "baseName": "signup_dts",
            "type": "string"
        },
        {
            "name": "softwareEntitlements",
            "baseName": "software_entitlements",
            "type": "Array<CustomerSoftwareEntitlement>"
        },
        {
            "name": "suppressBuysafe",
            "baseName": "suppress_buysafe",
            "type": "boolean"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<CustomerTag>"
        },
        {
            "name": "taxCodes",
            "baseName": "tax_codes",
            "type": "CustomerTaxCodes"
        },
        {
            "name": "taxExempt",
            "baseName": "tax_exempt",
            "type": "boolean"
        },
        {
            "name": "taxId",
            "baseName": "tax_id",
            "type": "string"
        },
        {
            "name": "terms",
            "baseName": "terms",
            "type": "string"
        },
        {
            "name": "trackSeparately",
            "baseName": "track_separately",
            "type": "boolean"
        },
        {
            "name": "unapproved",
            "baseName": "unapproved",
            "type": "boolean"
        },
        {
            "name": "upsAccountNumber",
            "baseName": "ups_account_number",
            "type": "string"
        },
        {
            "name": "websiteUrl",
            "baseName": "website_url",
            "type": "string"
        }
    ];
    return Customer;
}());
exports.Customer = Customer;
var CustomerActivity = (function () {
    function CustomerActivity() {
    }
    CustomerActivity.getAttributeTypeMap = function () {
        return CustomerActivity.attributeTypeMap;
    };
    CustomerActivity.discriminator = undefined;
    CustomerActivity.attributeTypeMap = [
        {
            "name": "activities",
            "baseName": "activities",
            "type": "Array<Activity>"
        },
        {
            "name": "memberships",
            "baseName": "memberships",
            "type": "Array<ListSegmentMembership>"
        },
        {
            "name": "metrics",
            "baseName": "metrics",
            "type": "Array<Metric>"
        },
        {
            "name": "propertiesList",
            "baseName": "properties_list",
            "type": "Array<Property>"
        }
    ];
    return CustomerActivity;
}());
exports.CustomerActivity = CustomerActivity;
var CustomerAffiliate = (function () {
    function CustomerAffiliate() {
    }
    CustomerAffiliate.getAttributeTypeMap = function () {
        return CustomerAffiliate.attributeTypeMap;
    };
    CustomerAffiliate.discriminator = undefined;
    CustomerAffiliate.attributeTypeMap = [
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        }
    ];
    return CustomerAffiliate;
}());
exports.CustomerAffiliate = CustomerAffiliate;
var CustomerAttachment = (function () {
    function CustomerAttachment() {
    }
    CustomerAttachment.getAttributeTypeMap = function () {
        return CustomerAttachment.attributeTypeMap;
    };
    CustomerAttachment.discriminator = undefined;
    CustomerAttachment.attributeTypeMap = [
        {
            "name": "customerProfileAttachmentOid",
            "baseName": "customer_profile_attachment_oid",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "fileName",
            "baseName": "file_name",
            "type": "string"
        },
        {
            "name": "mimeType",
            "baseName": "mime_type",
            "type": "string"
        },
        {
            "name": "uploadDts",
            "baseName": "upload_dts",
            "type": "string"
        }
    ];
    return CustomerAttachment;
}());
exports.CustomerAttachment = CustomerAttachment;
var CustomerBilling = (function () {
    function CustomerBilling() {
    }
    CustomerBilling.getAttributeTypeMap = function () {
        return CustomerBilling.attributeTypeMap;
    };
    CustomerBilling.discriminator = undefined;
    CustomerBilling.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "customerBillingOid",
            "baseName": "customer_billing_oid",
            "type": "number"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "defaultBilling",
            "baseName": "default_billing",
            "type": "boolean"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "lastUsedDts",
            "baseName": "last_used_dts",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "taxCounty",
            "baseName": "tax_county",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return CustomerBilling;
}());
exports.CustomerBilling = CustomerBilling;
var CustomerCard = (function () {
    function CustomerCard() {
    }
    CustomerCard.getAttributeTypeMap = function () {
        return CustomerCard.attributeTypeMap;
    };
    CustomerCard.discriminator = undefined;
    CustomerCard.attributeTypeMap = [
        {
            "name": "cardExpirationMonth",
            "baseName": "card_expiration_month",
            "type": "number"
        },
        {
            "name": "cardExpirationYear",
            "baseName": "card_expiration_year",
            "type": "number"
        },
        {
            "name": "cardNumber",
            "baseName": "card_number",
            "type": "string"
        },
        {
            "name": "cardNumberToken",
            "baseName": "card_number_token",
            "type": "string"
        },
        {
            "name": "cardType",
            "baseName": "card_type",
            "type": "string"
        },
        {
            "name": "customerProfileCreditCardId",
            "baseName": "customer_profile_credit_card_id",
            "type": "number"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "lastUsedDts",
            "baseName": "last_used_dts",
            "type": "string"
        }
    ];
    return CustomerCard;
}());
exports.CustomerCard = CustomerCard;
var CustomerEditorValues = (function () {
    function CustomerEditorValues() {
    }
    CustomerEditorValues.getAttributeTypeMap = function () {
        return CustomerEditorValues.attributeTypeMap;
    };
    CustomerEditorValues.discriminator = undefined;
    CustomerEditorValues.attributeTypeMap = [
        {
            "name": "affiliates",
            "baseName": "affiliates",
            "type": "Array<CustomerAffiliate>"
        },
        {
            "name": "cardExpMonths",
            "baseName": "card_exp_months",
            "type": "Array<string>"
        },
        {
            "name": "cardExpYears",
            "baseName": "card_exp_years",
            "type": "Array<string>"
        },
        {
            "name": "cardTypes",
            "baseName": "card_types",
            "type": "Array<string>"
        },
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<Country>"
        },
        {
            "name": "qbClasses",
            "baseName": "qb_classes",
            "type": "Array<string>"
        },
        {
            "name": "salesRepCodes",
            "baseName": "sales_rep_codes",
            "type": "Array<string>"
        },
        {
            "name": "terms",
            "baseName": "terms",
            "type": "Array<string>"
        }
    ];
    return CustomerEditorValues;
}());
exports.CustomerEditorValues = CustomerEditorValues;
var CustomerEmail = (function () {
    function CustomerEmail() {
    }
    CustomerEmail.getAttributeTypeMap = function () {
        return CustomerEmail.attributeTypeMap;
    };
    CustomerEmail.discriminator = undefined;
    CustomerEmail.attributeTypeMap = [
        {
            "name": "customerProfileEmailOid",
            "baseName": "customer_profile_email_oid",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "receiptNotification",
            "baseName": "receipt_notification",
            "type": "boolean"
        },
        {
            "name": "refundNotification",
            "baseName": "refund_notification",
            "type": "boolean"
        },
        {
            "name": "shipmentNotification",
            "baseName": "shipment_notification",
            "type": "boolean"
        }
    ];
    return CustomerEmail;
}());
exports.CustomerEmail = CustomerEmail;
var CustomerEmailListChanges = (function () {
    function CustomerEmailListChanges() {
    }
    CustomerEmailListChanges.getAttributeTypeMap = function () {
        return CustomerEmailListChanges.attributeTypeMap;
    };
    CustomerEmailListChanges.discriminator = undefined;
    CustomerEmailListChanges.attributeTypeMap = [
        {
            "name": "addToLists",
            "baseName": "add_to_lists",
            "type": "Array<string>"
        },
        {
            "name": "removeFromLists",
            "baseName": "remove_from_lists",
            "type": "Array<string>"
        }
    ];
    return CustomerEmailListChanges;
}());
exports.CustomerEmailListChanges = CustomerEmailListChanges;
var CustomerLoyalty = (function () {
    function CustomerLoyalty() {
    }
    CustomerLoyalty.getAttributeTypeMap = function () {
        return CustomerLoyalty.attributeTypeMap;
    };
    CustomerLoyalty.discriminator = undefined;
    CustomerLoyalty.attributeTypeMap = [
        {
            "name": "currentPoints",
            "baseName": "current_points",
            "type": "number"
        },
        {
            "name": "ledgerEntries",
            "baseName": "ledger_entries",
            "type": "Array<CustomerLoyaltyLedger>"
        },
        {
            "name": "redemptions",
            "baseName": "redemptions",
            "type": "Array<CustomerLoyaltyRedemption>"
        }
    ];
    return CustomerLoyalty;
}());
exports.CustomerLoyalty = CustomerLoyalty;
var CustomerLoyaltyLedger = (function () {
    function CustomerLoyaltyLedger() {
    }
    CustomerLoyaltyLedger.getAttributeTypeMap = function () {
        return CustomerLoyaltyLedger.attributeTypeMap;
    };
    CustomerLoyaltyLedger.discriminator = undefined;
    CustomerLoyaltyLedger.attributeTypeMap = [
        {
            "name": "createdBy",
            "baseName": "created_by",
            "type": "string"
        },
        {
            "name": "createdDts",
            "baseName": "created_dts",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "itemIndex",
            "baseName": "item_index",
            "type": "number"
        },
        {
            "name": "ledgerDts",
            "baseName": "ledger_dts",
            "type": "string"
        },
        {
            "name": "loyaltyCampaignOid",
            "baseName": "loyalty_campaign_oid",
            "type": "number"
        },
        {
            "name": "loyaltyLedgerOid",
            "baseName": "loyalty_ledger_oid",
            "type": "number"
        },
        {
            "name": "loyaltyPoints",
            "baseName": "loyalty_points",
            "type": "number"
        },
        {
            "name": "modifiedBy",
            "baseName": "modified_by",
            "type": "string"
        },
        {
            "name": "modifiedDts",
            "baseName": "modified_dts",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "vestingDts",
            "baseName": "vesting_dts",
            "type": "string"
        }
    ];
    return CustomerLoyaltyLedger;
}());
exports.CustomerLoyaltyLedger = CustomerLoyaltyLedger;
var CustomerLoyaltyRedemption = (function () {
    function CustomerLoyaltyRedemption() {
    }
    CustomerLoyaltyRedemption.getAttributeTypeMap = function () {
        return CustomerLoyaltyRedemption.attributeTypeMap;
    };
    CustomerLoyaltyRedemption.discriminator = undefined;
    CustomerLoyaltyRedemption.attributeTypeMap = [
        {
            "name": "couponCode",
            "baseName": "coupon_code",
            "type": "string"
        },
        {
            "name": "couponCodeOid",
            "baseName": "coupon_code_oid",
            "type": "number"
        },
        {
            "name": "couponUsed",
            "baseName": "coupon_used",
            "type": "boolean"
        },
        {
            "name": "descriptionForCustomer",
            "baseName": "description_for_customer",
            "type": "string"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "giftCertificateCode",
            "baseName": "gift_certificate_code",
            "type": "string"
        },
        {
            "name": "giftCertificateOid",
            "baseName": "gift_certificate_oid",
            "type": "number"
        },
        {
            "name": "loyaltyLedgerOid",
            "baseName": "loyalty_ledger_oid",
            "type": "number"
        },
        {
            "name": "loyaltyPoints",
            "baseName": "loyalty_points",
            "type": "number"
        },
        {
            "name": "loyaltyRedemptionOid",
            "baseName": "loyalty_redemption_oid",
            "type": "number"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "redemptionDts",
            "baseName": "redemption_dts",
            "type": "string"
        },
        {
            "name": "remainingBalance",
            "baseName": "remaining_balance",
            "type": "number"
        }
    ];
    return CustomerLoyaltyRedemption;
}());
exports.CustomerLoyaltyRedemption = CustomerLoyaltyRedemption;
var CustomerOrdersSummary = (function () {
    function CustomerOrdersSummary() {
    }
    CustomerOrdersSummary.getAttributeTypeMap = function () {
        return CustomerOrdersSummary.attributeTypeMap;
    };
    CustomerOrdersSummary.discriminator = undefined;
    CustomerOrdersSummary.attributeTypeMap = [
        {
            "name": "firstOrderDts",
            "baseName": "first_order_dts",
            "type": "string"
        },
        {
            "name": "lastOrderDts",
            "baseName": "last_order_dts",
            "type": "string"
        },
        {
            "name": "orderCount",
            "baseName": "order_count",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }
    ];
    return CustomerOrdersSummary;
}());
exports.CustomerOrdersSummary = CustomerOrdersSummary;
var CustomerPricingTier = (function () {
    function CustomerPricingTier() {
    }
    CustomerPricingTier.getAttributeTypeMap = function () {
        return CustomerPricingTier.attributeTypeMap;
    };
    CustomerPricingTier.discriminator = undefined;
    CustomerPricingTier.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "pricingTierOid",
            "baseName": "pricing_tier_oid",
            "type": "number"
        }
    ];
    return CustomerPricingTier;
}());
exports.CustomerPricingTier = CustomerPricingTier;
var CustomerPrivacy = (function () {
    function CustomerPrivacy() {
    }
    CustomerPrivacy.getAttributeTypeMap = function () {
        return CustomerPrivacy.attributeTypeMap;
    };
    CustomerPrivacy.discriminator = undefined;
    CustomerPrivacy.attributeTypeMap = [
        {
            "name": "lastUpdateDts",
            "baseName": "last_update_dts",
            "type": "string"
        },
        {
            "name": "marketing",
            "baseName": "marketing",
            "type": "boolean"
        },
        {
            "name": "preference",
            "baseName": "preference",
            "type": "boolean"
        },
        {
            "name": "statistics",
            "baseName": "statistics",
            "type": "boolean"
        }
    ];
    return CustomerPrivacy;
}());
exports.CustomerPrivacy = CustomerPrivacy;
var CustomerQuery = (function () {
    function CustomerQuery() {
    }
    CustomerQuery.getAttributeTypeMap = function () {
        return CustomerQuery.attributeTypeMap;
    };
    CustomerQuery.discriminator = undefined;
    CustomerQuery.attributeTypeMap = [
        {
            "name": "allTags",
            "baseName": "all_tags",
            "type": "Array<string>"
        },
        {
            "name": "anyTags",
            "baseName": "any_tags",
            "type": "Array<string>"
        },
        {
            "name": "billingCity",
            "baseName": "billing_city",
            "type": "string"
        },
        {
            "name": "billingCompany",
            "baseName": "billing_company",
            "type": "string"
        },
        {
            "name": "billingCountryCode",
            "baseName": "billing_country_code",
            "type": "string"
        },
        {
            "name": "billingDayPhone",
            "baseName": "billing_day_phone",
            "type": "string"
        },
        {
            "name": "billingEveningPhone",
            "baseName": "billing_evening_phone",
            "type": "string"
        },
        {
            "name": "billingFirstName",
            "baseName": "billing_first_name",
            "type": "string"
        },
        {
            "name": "billingLastName",
            "baseName": "billing_last_name",
            "type": "string"
        },
        {
            "name": "billingPostalCode",
            "baseName": "billing_postal_code",
            "type": "string"
        },
        {
            "name": "billingState",
            "baseName": "billing_state",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "lastModifiedDtsEnd",
            "baseName": "last_modified_dts_end",
            "type": "string"
        },
        {
            "name": "lastModifiedDtsStart",
            "baseName": "last_modified_dts_start",
            "type": "string"
        },
        {
            "name": "pricingTierName",
            "baseName": "pricing_tier_name",
            "type": "string"
        },
        {
            "name": "pricingTierOid",
            "baseName": "pricing_tier_oid",
            "type": "number"
        },
        {
            "name": "qbClass",
            "baseName": "qb_class",
            "type": "string"
        },
        {
            "name": "quickbooksCode",
            "baseName": "quickbooks_code",
            "type": "string"
        },
        {
            "name": "shippingCity",
            "baseName": "shipping_city",
            "type": "string"
        },
        {
            "name": "shippingCompany",
            "baseName": "shipping_company",
            "type": "string"
        },
        {
            "name": "shippingCountryCode",
            "baseName": "shipping_country_code",
            "type": "string"
        },
        {
            "name": "shippingDayPhone",
            "baseName": "shipping_day_phone",
            "type": "string"
        },
        {
            "name": "shippingEveningPhone",
            "baseName": "shipping_evening_phone",
            "type": "string"
        },
        {
            "name": "shippingFirstName",
            "baseName": "shipping_first_name",
            "type": "string"
        },
        {
            "name": "shippingLastName",
            "baseName": "shipping_last_name",
            "type": "string"
        },
        {
            "name": "shippingPostalCode",
            "baseName": "shipping_postal_code",
            "type": "string"
        },
        {
            "name": "shippingState",
            "baseName": "shipping_state",
            "type": "string"
        },
        {
            "name": "signupDtsEnd",
            "baseName": "signup_dts_end",
            "type": "string"
        },
        {
            "name": "signupDtsStart",
            "baseName": "signup_dts_start",
            "type": "string"
        }
    ];
    return CustomerQuery;
}());
exports.CustomerQuery = CustomerQuery;
var CustomerQuotesSummary = (function () {
    function CustomerQuotesSummary() {
    }
    CustomerQuotesSummary.getAttributeTypeMap = function () {
        return CustomerQuotesSummary.attributeTypeMap;
    };
    CustomerQuotesSummary.discriminator = undefined;
    CustomerQuotesSummary.attributeTypeMap = [
        {
            "name": "firstQuoteDts",
            "baseName": "first_quote_dts",
            "type": "string"
        },
        {
            "name": "lastQuoteDts",
            "baseName": "last_quote_dts",
            "type": "string"
        },
        {
            "name": "quoteCount",
            "baseName": "quote_count",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }
    ];
    return CustomerQuotesSummary;
}());
exports.CustomerQuotesSummary = CustomerQuotesSummary;
var CustomerResponse = (function () {
    function CustomerResponse() {
    }
    CustomerResponse.getAttributeTypeMap = function () {
        return CustomerResponse.attributeTypeMap;
    };
    CustomerResponse.discriminator = undefined;
    CustomerResponse.attributeTypeMap = [
        {
            "name": "customer",
            "baseName": "customer",
            "type": "Customer"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return CustomerResponse;
}());
exports.CustomerResponse = CustomerResponse;
var CustomerReviewer = (function () {
    function CustomerReviewer() {
    }
    CustomerReviewer.getAttributeTypeMap = function () {
        return CustomerReviewer.attributeTypeMap;
    };
    CustomerReviewer.discriminator = undefined;
    CustomerReviewer.attributeTypeMap = [
        {
            "name": "autoApprove",
            "baseName": "auto_approve",
            "type": "boolean"
        },
        {
            "name": "averageOverallRating",
            "baseName": "average_overall_rating",
            "type": "number"
        },
        {
            "name": "expert",
            "baseName": "expert",
            "type": "boolean"
        },
        {
            "name": "firstReview",
            "baseName": "first_review",
            "type": "string"
        },
        {
            "name": "lastReview",
            "baseName": "last_review",
            "type": "string"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "string"
        },
        {
            "name": "nickname",
            "baseName": "nickname",
            "type": "string"
        },
        {
            "name": "numberHelpfulReviewVotes",
            "baseName": "number_helpful_review_votes",
            "type": "number"
        },
        {
            "name": "rank",
            "baseName": "rank",
            "type": "number"
        },
        {
            "name": "reviewsContributed",
            "baseName": "reviews_contributed",
            "type": "number"
        }
    ];
    return CustomerReviewer;
}());
exports.CustomerReviewer = CustomerReviewer;
var CustomerShipping = (function () {
    function CustomerShipping() {
    }
    CustomerShipping.getAttributeTypeMap = function () {
        return CustomerShipping.attributeTypeMap;
    };
    CustomerShipping.discriminator = undefined;
    CustomerShipping.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "customerShippingOid",
            "baseName": "customer_shipping_oid",
            "type": "number"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "defaultShipping",
            "baseName": "default_shipping",
            "type": "boolean"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "lastUsedDts",
            "baseName": "last_used_dts",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "taxCounty",
            "baseName": "tax_county",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return CustomerShipping;
}());
exports.CustomerShipping = CustomerShipping;
var CustomerSoftwareEntitlement = (function () {
    function CustomerSoftwareEntitlement() {
    }
    CustomerSoftwareEntitlement.getAttributeTypeMap = function () {
        return CustomerSoftwareEntitlement.attributeTypeMap;
    };
    CustomerSoftwareEntitlement.discriminator = undefined;
    CustomerSoftwareEntitlement.attributeTypeMap = [
        {
            "name": "activationCode",
            "baseName": "activation_code",
            "type": "string"
        },
        {
            "name": "activationDts",
            "baseName": "activation_dts",
            "type": "string"
        },
        {
            "name": "customerSoftwareEntitlementOid",
            "baseName": "customer_software_entitlement_oid",
            "type": "number"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "purchasedViaItemDescription",
            "baseName": "purchased_via_item_description",
            "type": "string"
        },
        {
            "name": "purchasedViaItemId",
            "baseName": "purchased_via_item_id",
            "type": "string"
        },
        {
            "name": "purchasedViaOrderId",
            "baseName": "purchased_via_order_id",
            "type": "string"
        },
        {
            "name": "softwareSku",
            "baseName": "software_sku",
            "type": "string"
        }
    ];
    return CustomerSoftwareEntitlement;
}());
exports.CustomerSoftwareEntitlement = CustomerSoftwareEntitlement;
var CustomerTag = (function () {
    function CustomerTag() {
    }
    CustomerTag.getAttributeTypeMap = function () {
        return CustomerTag.attributeTypeMap;
    };
    CustomerTag.discriminator = undefined;
    CustomerTag.attributeTypeMap = [
        {
            "name": "tagValue",
            "baseName": "tag_value",
            "type": "string"
        }
    ];
    return CustomerTag;
}());
exports.CustomerTag = CustomerTag;
var CustomerTaxCodes = (function () {
    function CustomerTaxCodes() {
    }
    CustomerTaxCodes.getAttributeTypeMap = function () {
        return CustomerTaxCodes.attributeTypeMap;
    };
    CustomerTaxCodes.discriminator = undefined;
    CustomerTaxCodes.attributeTypeMap = [
        {
            "name": "avalaraCustomerCode",
            "baseName": "avalara_customer_code",
            "type": "string"
        },
        {
            "name": "avalaraEntityUseCode",
            "baseName": "avalara_entity_use_code",
            "type": "string"
        },
        {
            "name": "sovosCustomerCode",
            "baseName": "sovos_customer_code",
            "type": "string"
        },
        {
            "name": "taxjarCustomerId",
            "baseName": "taxjar_customer_id",
            "type": "string"
        },
        {
            "name": "taxjarExemptionType",
            "baseName": "taxjar_exemption_type",
            "type": "string"
        }
    ];
    return CustomerTaxCodes;
}());
exports.CustomerTaxCodes = CustomerTaxCodes;
var CustomersResponse = (function () {
    function CustomersResponse() {
    }
    CustomersResponse.getAttributeTypeMap = function () {
        return CustomersResponse.attributeTypeMap;
    };
    CustomersResponse.discriminator = undefined;
    CustomersResponse.attributeTypeMap = [
        {
            "name": "customers",
            "baseName": "customers",
            "type": "Array<Customer>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return CustomersResponse;
}());
exports.CustomersResponse = CustomersResponse;
var DataTablesServerSideResponse = (function () {
    function DataTablesServerSideResponse() {
    }
    DataTablesServerSideResponse.getAttributeTypeMap = function () {
        return DataTablesServerSideResponse.attributeTypeMap;
    };
    DataTablesServerSideResponse.discriminator = undefined;
    DataTablesServerSideResponse.attributeTypeMap = [
        {
            "name": "data",
            "baseName": "data",
            "type": "Array<Customer>"
        },
        {
            "name": "draw",
            "baseName": "draw",
            "type": "number"
        },
        {
            "name": "recordsFiltered",
            "baseName": "recordsFiltered",
            "type": "number"
        },
        {
            "name": "recordsTotal",
            "baseName": "recordsTotal",
            "type": "number"
        }
    ];
    return DataTablesServerSideResponse;
}());
exports.DataTablesServerSideResponse = DataTablesServerSideResponse;
var Distance = (function () {
    function Distance() {
    }
    Distance.getAttributeTypeMap = function () {
        return Distance.attributeTypeMap;
    };
    Distance.discriminator = undefined;
    Distance.attributeTypeMap = [
        {
            "name": "uom",
            "baseName": "uom",
            "type": "Distance.UomEnum"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        }
    ];
    return Distance;
}());
exports.Distance = Distance;
(function (Distance) {
    var UomEnum;
    (function (UomEnum) {
        UomEnum[UomEnum["IN"] = 'IN'] = "IN";
        UomEnum[UomEnum["CM"] = 'CM'] = "CM";
    })(UomEnum = Distance.UomEnum || (Distance.UomEnum = {}));
})(Distance = exports.Distance || (exports.Distance = {}));
exports.Distance = Distance;
var DistributionCenter = (function () {
    function DistributionCenter() {
    }
    DistributionCenter.getAttributeTypeMap = function () {
        return DistributionCenter.attributeTypeMap;
    };
    DistributionCenter.discriminator = undefined;
    DistributionCenter.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "defaultCenter",
            "baseName": "default_center",
            "type": "boolean"
        },
        {
            "name": "defaultHandlesAllItems",
            "baseName": "default_handles_all_items",
            "type": "boolean"
        },
        {
            "name": "distributionCenterOid",
            "baseName": "distribution_center_oid",
            "type": "number"
        },
        {
            "name": "duns",
            "baseName": "duns",
            "type": "string"
        },
        {
            "name": "estimateFromDistributionCenterOid",
            "baseName": "estimate_from_distribution_center_oid",
            "type": "number"
        },
        {
            "name": "ftpPassword",
            "baseName": "ftp_password",
            "type": "string"
        },
        {
            "name": "holdBeforeShipmentMinutes",
            "baseName": "hold_before_shipment_minutes",
            "type": "number"
        },
        {
            "name": "holdBeforeTransmission",
            "baseName": "hold_before_transmission",
            "type": "boolean"
        },
        {
            "name": "holdAutoOrderBeforeShipmentMinutes",
            "baseName": "holdAutoOrderBeforeShipmentMinutes",
            "type": "number"
        },
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "number"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "noCustomerDirectShipments",
            "baseName": "no_customer_direct_shipments",
            "type": "boolean"
        },
        {
            "name": "noSplitShipment",
            "baseName": "no_split_shipment",
            "type": "boolean"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "processDays",
            "baseName": "process_days",
            "type": "number"
        },
        {
            "name": "processInventoryStartTime",
            "baseName": "process_inventory_start_time",
            "type": "string"
        },
        {
            "name": "processInventoryStopTime",
            "baseName": "process_inventory_stop_time",
            "type": "string"
        },
        {
            "name": "requireAsn",
            "baseName": "require_asn",
            "type": "boolean"
        },
        {
            "name": "sendKitInsteadOfComponents",
            "baseName": "send_kit_instead_of_components",
            "type": "boolean"
        },
        {
            "name": "shipmentCutoffTimeFriday",
            "baseName": "shipment_cutoff_time_friday",
            "type": "string"
        },
        {
            "name": "shipmentCutoffTimeMonday",
            "baseName": "shipment_cutoff_time_monday",
            "type": "string"
        },
        {
            "name": "shipmentCutoffTimeSaturday",
            "baseName": "shipment_cutoff_time_saturday",
            "type": "string"
        },
        {
            "name": "shipmentCutoffTimeSunday",
            "baseName": "shipment_cutoff_time_sunday",
            "type": "string"
        },
        {
            "name": "shipmentCutoffTimeThursday",
            "baseName": "shipment_cutoff_time_thursday",
            "type": "string"
        },
        {
            "name": "shipmentCutoffTimeTuesday",
            "baseName": "shipment_cutoff_time_tuesday",
            "type": "string"
        },
        {
            "name": "shipmentCutoffTimeWednesday",
            "baseName": "shipment_cutoff_time_wednesday",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "transport",
            "baseName": "transport",
            "type": "string"
        }
    ];
    return DistributionCenter;
}());
exports.DistributionCenter = DistributionCenter;
var DistributionCentersResponse = (function () {
    function DistributionCentersResponse() {
    }
    DistributionCentersResponse.getAttributeTypeMap = function () {
        return DistributionCentersResponse.attributeTypeMap;
    };
    DistributionCentersResponse.discriminator = undefined;
    DistributionCentersResponse.attributeTypeMap = [
        {
            "name": "distributionCenters",
            "baseName": "distribution_centers",
            "type": "Array<DistributionCenter>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return DistributionCentersResponse;
}());
exports.DistributionCentersResponse = DistributionCentersResponse;
var EmailBaseTemplateListResponse = (function () {
    function EmailBaseTemplateListResponse() {
    }
    EmailBaseTemplateListResponse.getAttributeTypeMap = function () {
        return EmailBaseTemplateListResponse.attributeTypeMap;
    };
    EmailBaseTemplateListResponse.discriminator = undefined;
    EmailBaseTemplateListResponse.attributeTypeMap = [
        {
            "name": "templatePaths",
            "baseName": "templatePaths",
            "type": "Array<string>"
        }
    ];
    return EmailBaseTemplateListResponse;
}());
exports.EmailBaseTemplateListResponse = EmailBaseTemplateListResponse;
var EmailCampaign = (function () {
    function EmailCampaign() {
    }
    EmailCampaign.getAttributeTypeMap = function () {
        return EmailCampaign.attributeTypeMap;
    };
    EmailCampaign.discriminator = undefined;
    EmailCampaign.attributeTypeMap = [
        {
            "name": "clickRateFormatted",
            "baseName": "click_rate_formatted",
            "type": "string"
        },
        {
            "name": "createdDts",
            "baseName": "created_dts",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "emailCampaignUuid",
            "baseName": "email_campaign_uuid",
            "type": "string"
        },
        {
            "name": "emailCommunicationSequenceUuid",
            "baseName": "email_communication_sequence_uuid",
            "type": "string"
        },
        {
            "name": "endOnceCustomerPurchases",
            "baseName": "end_once_customer_purchases",
            "type": "boolean"
        },
        {
            "name": "espDomainUser",
            "baseName": "esp_domain_user",
            "type": "string"
        },
        {
            "name": "espDomainUuid",
            "baseName": "esp_domain_uuid",
            "type": "string"
        },
        {
            "name": "espFriendlyName",
            "baseName": "esp_friendly_name",
            "type": "string"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "memberships",
            "baseName": "memberships",
            "type": "Array<EmailListSegmentMembership>"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "openRateFormatted",
            "baseName": "open_rate_formatted",
            "type": "string"
        },
        {
            "name": "preventSendingDueToSpam",
            "baseName": "prevent_sending_due_to_spam",
            "type": "boolean"
        },
        {
            "name": "revenueFormatted",
            "baseName": "revenue_formatted",
            "type": "string"
        },
        {
            "name": "scheduledDts",
            "baseName": "scheduled_dts",
            "type": "string"
        },
        {
            "name": "screenshotLargeFullUrl",
            "baseName": "screenshot_large_full_url",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "statusDts",
            "baseName": "status_dts",
            "type": "string"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        }
    ];
    return EmailCampaign;
}());
exports.EmailCampaign = EmailCampaign;
var EmailCampaignResponse = (function () {
    function EmailCampaignResponse() {
    }
    EmailCampaignResponse.getAttributeTypeMap = function () {
        return EmailCampaignResponse.attributeTypeMap;
    };
    EmailCampaignResponse.discriminator = undefined;
    EmailCampaignResponse.attributeTypeMap = [
        {
            "name": "campaign",
            "baseName": "campaign",
            "type": "EmailCampaign"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCampaignResponse;
}());
exports.EmailCampaignResponse = EmailCampaignResponse;
var EmailCampaignsResponse = (function () {
    function EmailCampaignsResponse() {
    }
    EmailCampaignsResponse.getAttributeTypeMap = function () {
        return EmailCampaignsResponse.attributeTypeMap;
    };
    EmailCampaignsResponse.discriminator = undefined;
    EmailCampaignsResponse.attributeTypeMap = [
        {
            "name": "campaigns",
            "baseName": "campaigns",
            "type": "Array<EmailCampaign>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCampaignsResponse;
}());
exports.EmailCampaignsResponse = EmailCampaignsResponse;
var EmailClick = (function () {
    function EmailClick() {
    }
    EmailClick.getAttributeTypeMap = function () {
        return EmailClick.attributeTypeMap;
    };
    EmailClick.discriminator = undefined;
    EmailClick.attributeTypeMap = [
        {
            "name": "clickCount",
            "baseName": "click_count",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return EmailClick;
}());
exports.EmailClick = EmailClick;
var EmailClicksResponse = (function () {
    function EmailClicksResponse() {
    }
    EmailClicksResponse.getAttributeTypeMap = function () {
        return EmailClicksResponse.attributeTypeMap;
    };
    EmailClicksResponse.discriminator = undefined;
    EmailClicksResponse.attributeTypeMap = [
        {
            "name": "clicks",
            "baseName": "clicks",
            "type": "Array<EmailClick>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailClicksResponse;
}());
exports.EmailClicksResponse = EmailClicksResponse;
var EmailCommseq = (function () {
    function EmailCommseq() {
    }
    EmailCommseq.getAttributeTypeMap = function () {
        return EmailCommseq.attributeTypeMap;
    };
    EmailCommseq.discriminator = undefined;
    EmailCommseq.attributeTypeMap = [
        {
            "name": "emailCommunicationSequenceSteps",
            "baseName": "email_communication_sequence_steps",
            "type": "Array<EmailCommseqStep>"
        },
        {
            "name": "emailCommunicationSequenceUuid",
            "baseName": "email_communication_sequence_uuid",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        }
    ];
    return EmailCommseq;
}());
exports.EmailCommseq = EmailCommseq;
var EmailCommseqEmail = (function () {
    function EmailCommseqEmail() {
    }
    EmailCommseqEmail.getAttributeTypeMap = function () {
        return EmailCommseqEmail.attributeTypeMap;
    };
    EmailCommseqEmail.discriminator = undefined;
    EmailCommseqEmail.attributeTypeMap = [
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "editedByUser",
            "baseName": "edited_by_user",
            "type": "string"
        },
        {
            "name": "emailCommunicationSequenceEmailUuid",
            "baseName": "email_communication_sequence_email_uuid",
            "type": "string"
        },
        {
            "name": "emailCommunicationSequenceUuid",
            "baseName": "email_communication_sequence_uuid",
            "type": "string"
        },
        {
            "name": "emailContainerCjson",
            "baseName": "email_container_cjson",
            "type": "string"
        },
        {
            "name": "emailContainerCjsonLastModifiedDts",
            "baseName": "email_container_cjson_last_modified_dts",
            "type": "string"
        },
        {
            "name": "emailTemplateVmPath",
            "baseName": "email_template_vm_path",
            "type": "string"
        },
        {
            "name": "filterProfileEquationJson",
            "baseName": "filter_profile_equation_json",
            "type": "string"
        },
        {
            "name": "individuallyRender",
            "baseName": "individually_render",
            "type": "boolean"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "pendingReview",
            "baseName": "pending_review",
            "type": "boolean"
        },
        {
            "name": "previewText",
            "baseName": "preview_text",
            "type": "string"
        },
        {
            "name": "rejected",
            "baseName": "rejected",
            "type": "boolean"
        },
        {
            "name": "requiresReview",
            "baseName": "requires_review",
            "type": "boolean"
        },
        {
            "name": "screenshotLargeFullUrl",
            "baseName": "screenshot_large_full_url",
            "type": "string"
        },
        {
            "name": "screenshotLargeViewportUrl",
            "baseName": "screenshot_large_viewport_url",
            "type": "string"
        },
        {
            "name": "screenshotSmallFullUrl",
            "baseName": "screenshot_small_full_url",
            "type": "string"
        },
        {
            "name": "screenshotSmallViewportUrl",
            "baseName": "screenshot_small_viewport_url",
            "type": "string"
        },
        {
            "name": "smartSending",
            "baseName": "smart_sending",
            "type": "boolean"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "transactionalEmail",
            "baseName": "transactional_email",
            "type": "boolean"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "number"
        }
    ];
    return EmailCommseqEmail;
}());
exports.EmailCommseqEmail = EmailCommseqEmail;
var EmailCommseqEmailResponse = (function () {
    function EmailCommseqEmailResponse() {
    }
    EmailCommseqEmailResponse.getAttributeTypeMap = function () {
        return EmailCommseqEmailResponse.attributeTypeMap;
    };
    EmailCommseqEmailResponse.discriminator = undefined;
    EmailCommseqEmailResponse.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "EmailCommseqEmail"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqEmailResponse;
}());
exports.EmailCommseqEmailResponse = EmailCommseqEmailResponse;
var EmailCommseqEmailSendTestRequest = (function () {
    function EmailCommseqEmailSendTestRequest() {
    }
    EmailCommseqEmailSendTestRequest.getAttributeTypeMap = function () {
        return EmailCommseqEmailSendTestRequest.attributeTypeMap;
    };
    EmailCommseqEmailSendTestRequest.discriminator = undefined;
    EmailCommseqEmailSendTestRequest.attributeTypeMap = [
        {
            "name": "cartId",
            "baseName": "cart_id",
            "type": "string"
        },
        {
            "name": "cartItemIds",
            "baseName": "cart_item_ids",
            "type": "Array<string>"
        },
        {
            "name": "espCommseqEmailUuid",
            "baseName": "esp_commseq_email_uuid",
            "type": "string"
        },
        {
            "name": "espCommseqStepUuid",
            "baseName": "esp_commseq_step_uuid",
            "type": "string"
        },
        {
            "name": "espCommseqUuid",
            "baseName": "esp_commseq_uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "pleaseReview",
            "baseName": "please_review",
            "type": "boolean"
        },
        {
            "name": "sendToAdditionalEmails",
            "baseName": "send_to_additional_emails",
            "type": "Array<string>"
        },
        {
            "name": "sendToLoggedInUser",
            "baseName": "send_to_logged_in_user",
            "type": "boolean"
        }
    ];
    return EmailCommseqEmailSendTestRequest;
}());
exports.EmailCommseqEmailSendTestRequest = EmailCommseqEmailSendTestRequest;
var EmailCommseqEmailSendTestResponse = (function () {
    function EmailCommseqEmailSendTestResponse() {
    }
    EmailCommseqEmailSendTestResponse.getAttributeTypeMap = function () {
        return EmailCommseqEmailSendTestResponse.attributeTypeMap;
    };
    EmailCommseqEmailSendTestResponse.discriminator = undefined;
    EmailCommseqEmailSendTestResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqEmailSendTestResponse;
}());
exports.EmailCommseqEmailSendTestResponse = EmailCommseqEmailSendTestResponse;
var EmailCommseqEmailsRequest = (function () {
    function EmailCommseqEmailsRequest() {
    }
    EmailCommseqEmailsRequest.getAttributeTypeMap = function () {
        return EmailCommseqEmailsRequest.attributeTypeMap;
    };
    EmailCommseqEmailsRequest.discriminator = undefined;
    EmailCommseqEmailsRequest.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "espCommseqEmailUuids",
            "baseName": "esp_commseq_email_uuids",
            "type": "Array<string>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqEmailsRequest;
}());
exports.EmailCommseqEmailsRequest = EmailCommseqEmailsRequest;
var EmailCommseqEmailsResponse = (function () {
    function EmailCommseqEmailsResponse() {
    }
    EmailCommseqEmailsResponse.getAttributeTypeMap = function () {
        return EmailCommseqEmailsResponse.attributeTypeMap;
    };
    EmailCommseqEmailsResponse.discriminator = undefined;
    EmailCommseqEmailsResponse.attributeTypeMap = [
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<EmailCommseqEmail>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqEmailsResponse;
}());
exports.EmailCommseqEmailsResponse = EmailCommseqEmailsResponse;
var EmailCommseqPostcard = (function () {
    function EmailCommseqPostcard() {
    }
    EmailCommseqPostcard.getAttributeTypeMap = function () {
        return EmailCommseqPostcard.attributeTypeMap;
    };
    EmailCommseqPostcard.discriminator = undefined;
    EmailCommseqPostcard.attributeTypeMap = [
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "editedByUser",
            "baseName": "edited_by_user",
            "type": "string"
        },
        {
            "name": "emailCommunicationSequencePostcardUuid",
            "baseName": "email_communication_sequence_postcard_uuid",
            "type": "string"
        },
        {
            "name": "filterProfileEquationJson",
            "baseName": "filter_profile_equation_json",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "postcardBackContainerCjson",
            "baseName": "postcard_back_container_cjson",
            "type": "string"
        },
        {
            "name": "postcardBackContainerUuid",
            "baseName": "postcard_back_container_uuid",
            "type": "string"
        },
        {
            "name": "postcardContainerCjsonLastModifiedDts",
            "baseName": "postcard_container_cjson_last_modified_dts",
            "type": "string"
        },
        {
            "name": "postcardFrontContainerCjson",
            "baseName": "postcard_front_container_cjson",
            "type": "string"
        },
        {
            "name": "postcardFrontContainerUuid",
            "baseName": "postcard_front_container_uuid",
            "type": "string"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        }
    ];
    return EmailCommseqPostcard;
}());
exports.EmailCommseqPostcard = EmailCommseqPostcard;
var EmailCommseqPostcardResponse = (function () {
    function EmailCommseqPostcardResponse() {
    }
    EmailCommseqPostcardResponse.getAttributeTypeMap = function () {
        return EmailCommseqPostcardResponse.attributeTypeMap;
    };
    EmailCommseqPostcardResponse.discriminator = undefined;
    EmailCommseqPostcardResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "postcard",
            "baseName": "postcard",
            "type": "EmailCommseqPostcard"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqPostcardResponse;
}());
exports.EmailCommseqPostcardResponse = EmailCommseqPostcardResponse;
var EmailCommseqPostcardSendTestRequest = (function () {
    function EmailCommseqPostcardSendTestRequest() {
    }
    EmailCommseqPostcardSendTestRequest.getAttributeTypeMap = function () {
        return EmailCommseqPostcardSendTestRequest.attributeTypeMap;
    };
    EmailCommseqPostcardSendTestRequest.discriminator = undefined;
    EmailCommseqPostcardSendTestRequest.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address_1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address_2",
            "type": "string"
        },
        {
            "name": "cartId",
            "baseName": "cart_id",
            "type": "string"
        },
        {
            "name": "cartItemIds",
            "baseName": "cart_item_ids",
            "type": "Array<string>"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "espCommseqPostcardUuid",
            "baseName": "esp_commseq_postcard_uuid",
            "type": "string"
        },
        {
            "name": "espCommseqStepUuid",
            "baseName": "esp_commseq_step_uuid",
            "type": "string"
        },
        {
            "name": "espCommseqUuid",
            "baseName": "esp_commseq_uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        }
    ];
    return EmailCommseqPostcardSendTestRequest;
}());
exports.EmailCommseqPostcardSendTestRequest = EmailCommseqPostcardSendTestRequest;
var EmailCommseqPostcardSendTestResponse = (function () {
    function EmailCommseqPostcardSendTestResponse() {
    }
    EmailCommseqPostcardSendTestResponse.getAttributeTypeMap = function () {
        return EmailCommseqPostcardSendTestResponse.attributeTypeMap;
    };
    EmailCommseqPostcardSendTestResponse.discriminator = undefined;
    EmailCommseqPostcardSendTestResponse.attributeTypeMap = [
        {
            "name": "backThumbnail",
            "baseName": "backThumbnail",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "frontThumbnail",
            "baseName": "frontThumbnail",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "renderedPdf",
            "baseName": "renderedPdf",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqPostcardSendTestResponse;
}());
exports.EmailCommseqPostcardSendTestResponse = EmailCommseqPostcardSendTestResponse;
var EmailCommseqPostcardsRequest = (function () {
    function EmailCommseqPostcardsRequest() {
    }
    EmailCommseqPostcardsRequest.getAttributeTypeMap = function () {
        return EmailCommseqPostcardsRequest.attributeTypeMap;
    };
    EmailCommseqPostcardsRequest.discriminator = undefined;
    EmailCommseqPostcardsRequest.attributeTypeMap = [
        {
            "name": "espCommseqPostcardUuids",
            "baseName": "esp_commseq_postcard_uuids",
            "type": "Array<string>"
        }
    ];
    return EmailCommseqPostcardsRequest;
}());
exports.EmailCommseqPostcardsRequest = EmailCommseqPostcardsRequest;
var EmailCommseqPostcardsResponse = (function () {
    function EmailCommseqPostcardsResponse() {
    }
    EmailCommseqPostcardsResponse.getAttributeTypeMap = function () {
        return EmailCommseqPostcardsResponse.attributeTypeMap;
    };
    EmailCommseqPostcardsResponse.discriminator = undefined;
    EmailCommseqPostcardsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "postcards",
            "baseName": "postcards",
            "type": "Array<EmailCommseqPostcard>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqPostcardsResponse;
}());
exports.EmailCommseqPostcardsResponse = EmailCommseqPostcardsResponse;
var EmailCommseqResponse = (function () {
    function EmailCommseqResponse() {
    }
    EmailCommseqResponse.getAttributeTypeMap = function () {
        return EmailCommseqResponse.attributeTypeMap;
    };
    EmailCommseqResponse.discriminator = undefined;
    EmailCommseqResponse.attributeTypeMap = [
        {
            "name": "communicationSequence",
            "baseName": "communication_sequence",
            "type": "EmailCommseq"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqResponse;
}());
exports.EmailCommseqResponse = EmailCommseqResponse;
var EmailCommseqStat = (function () {
    function EmailCommseqStat() {
    }
    EmailCommseqStat.getAttributeTypeMap = function () {
        return EmailCommseqStat.attributeTypeMap;
    };
    EmailCommseqStat.discriminator = undefined;
    EmailCommseqStat.attributeTypeMap = [
        {
            "name": "clickCount",
            "baseName": "click_count",
            "type": "number"
        },
        {
            "name": "clickCountFormatted",
            "baseName": "click_count_formatted",
            "type": "string"
        },
        {
            "name": "conversionCount",
            "baseName": "conversion_count",
            "type": "number"
        },
        {
            "name": "conversionCountFormatted",
            "baseName": "conversion_count_formatted",
            "type": "string"
        },
        {
            "name": "deliveredCount",
            "baseName": "delivered_count",
            "type": "number"
        },
        {
            "name": "deliveredCountFormatted",
            "baseName": "delivered_count_formatted",
            "type": "string"
        },
        {
            "name": "emailCommunicationSequenceUuid",
            "baseName": "email_communication_sequence_uuid",
            "type": "string"
        },
        {
            "name": "finishedCount",
            "baseName": "finished_count",
            "type": "number"
        },
        {
            "name": "finishedCountFormatted",
            "baseName": "finished_count_formatted",
            "type": "string"
        },
        {
            "name": "inProgressCount",
            "baseName": "in_progress_count",
            "type": "number"
        },
        {
            "name": "inProgressCountFormatted",
            "baseName": "in_progress_count_formatted",
            "type": "string"
        },
        {
            "name": "kickboxCount",
            "baseName": "kickbox_count",
            "type": "number"
        },
        {
            "name": "kickboxCountFormatted",
            "baseName": "kickbox_count_formatted",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "openCount",
            "baseName": "open_count",
            "type": "number"
        },
        {
            "name": "openCountFormatted",
            "baseName": "open_count_formatted",
            "type": "string"
        },
        {
            "name": "orderCount",
            "baseName": "order_count",
            "type": "number"
        },
        {
            "name": "orderCountFormatted",
            "baseName": "order_count_formatted",
            "type": "string"
        },
        {
            "name": "permanentBounceCount",
            "baseName": "permanent_bounce_count",
            "type": "number"
        },
        {
            "name": "permanentBounceCountFormatted",
            "baseName": "permanent_bounce_count_formatted",
            "type": "string"
        },
        {
            "name": "profit",
            "baseName": "profit",
            "type": "number"
        },
        {
            "name": "profitFormatted",
            "baseName": "profit_formatted",
            "type": "string"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "revenueFormatted",
            "baseName": "revenue_formatted",
            "type": "string"
        },
        {
            "name": "sendCount",
            "baseName": "send_count",
            "type": "number"
        },
        {
            "name": "sendCountFormatted",
            "baseName": "send_count_formatted",
            "type": "string"
        },
        {
            "name": "skippedCount",
            "baseName": "skipped_count",
            "type": "number"
        },
        {
            "name": "skippedCountFormatted",
            "baseName": "skipped_count_formatted",
            "type": "string"
        },
        {
            "name": "spamCount",
            "baseName": "spam_count",
            "type": "number"
        },
        {
            "name": "spamCountFormatted",
            "baseName": "spam_count_formatted",
            "type": "string"
        },
        {
            "name": "startedCount",
            "baseName": "started_count",
            "type": "number"
        },
        {
            "name": "startedCountFormatted",
            "baseName": "started_count_formatted",
            "type": "string"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "unsubscribeCount",
            "baseName": "unsubscribe_count",
            "type": "number"
        },
        {
            "name": "unsubscribeCountFormatted",
            "baseName": "unsubscribe_count_formatted",
            "type": "string"
        },
        {
            "name": "viewCount",
            "baseName": "view_count",
            "type": "number"
        },
        {
            "name": "viewCountFormatted",
            "baseName": "view_count_formatted",
            "type": "string"
        }
    ];
    return EmailCommseqStat;
}());
exports.EmailCommseqStat = EmailCommseqStat;
var EmailCommseqStatResponse = (function () {
    function EmailCommseqStatResponse() {
    }
    EmailCommseqStatResponse.getAttributeTypeMap = function () {
        return EmailCommseqStatResponse.attributeTypeMap;
    };
    EmailCommseqStatResponse.discriminator = undefined;
    EmailCommseqStatResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "EmailCommseqStat"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqStatResponse;
}());
exports.EmailCommseqStatResponse = EmailCommseqStatResponse;
var EmailCommseqStep = (function () {
    function EmailCommseqStep() {
    }
    EmailCommseqStep.getAttributeTypeMap = function () {
        return EmailCommseqStep.attributeTypeMap;
    };
    EmailCommseqStep.discriminator = undefined;
    EmailCommseqStep.attributeTypeMap = [
        {
            "name": "altChildEmailCommunicationSequenceSteps",
            "baseName": "alt_child_email_communication_sequence_steps",
            "type": "Array<EmailCommseqStep>"
        },
        {
            "name": "childEmailCommunicationSequenceSteps",
            "baseName": "child_email_communication_sequence_steps",
            "type": "Array<EmailCommseqStep>"
        },
        {
            "name": "emailCommunicationSequenceStepUuid",
            "baseName": "email_communication_sequence_step_uuid",
            "type": "string"
        },
        {
            "name": "emailPendingReview",
            "baseName": "email_pending_review",
            "type": "boolean"
        },
        {
            "name": "emailRejected",
            "baseName": "email_rejected",
            "type": "boolean"
        },
        {
            "name": "emailRequiresReview",
            "baseName": "email_requires_review",
            "type": "boolean"
        },
        {
            "name": "filterProfileEquationJson",
            "baseName": "filter_profile_equation_json",
            "type": "string"
        },
        {
            "name": "merchantNotes",
            "baseName": "merchant_notes",
            "type": "string"
        },
        {
            "name": "stepConfigJson",
            "baseName": "step_config_json",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "EmailCommseqStep.TypeEnum"
        }
    ];
    return EmailCommseqStep;
}());
exports.EmailCommseqStep = EmailCommseqStep;
(function (EmailCommseqStep) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Begin"] = 'begin'] = "Begin";
        TypeEnum[TypeEnum["Wait"] = 'wait'] = "Wait";
        TypeEnum[TypeEnum["Email"] = 'email'] = "Email";
        TypeEnum[TypeEnum["Merge"] = 'merge'] = "Merge";
        TypeEnum[TypeEnum["Condition"] = 'condition'] = "Condition";
        TypeEnum[TypeEnum["End"] = 'end'] = "End";
    })(TypeEnum = EmailCommseqStep.TypeEnum || (EmailCommseqStep.TypeEnum = {}));
})(EmailCommseqStep = exports.EmailCommseqStep || (exports.EmailCommseqStep = {}));
exports.EmailCommseqStep = EmailCommseqStep;
var EmailCommseqsResponse = (function () {
    function EmailCommseqsResponse() {
    }
    EmailCommseqsResponse.getAttributeTypeMap = function () {
        return EmailCommseqsResponse.attributeTypeMap;
    };
    EmailCommseqsResponse.discriminator = undefined;
    EmailCommseqsResponse.attributeTypeMap = [
        {
            "name": "communicationSequences",
            "baseName": "communication_sequences",
            "type": "Array<EmailCommseq>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCommseqsResponse;
}());
exports.EmailCommseqsResponse = EmailCommseqsResponse;
var EmailCustomer = (function () {
    function EmailCustomer() {
    }
    EmailCustomer.getAttributeTypeMap = function () {
        return EmailCustomer.attributeTypeMap;
    };
    EmailCustomer.discriminator = undefined;
    EmailCustomer.attributeTypeMap = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "emailCustomerUuid",
            "baseName": "email_customer_uuid",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "globalUnsubscribe",
            "baseName": "global_unsubscribe",
            "type": "boolean"
        },
        {
            "name": "lastInteractionDts",
            "baseName": "last_interaction_dts",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "listUuids",
            "baseName": "list_uuids",
            "type": "Array<string>"
        }
    ];
    return EmailCustomer;
}());
exports.EmailCustomer = EmailCustomer;
var EmailCustomerEditorUrlResponse = (function () {
    function EmailCustomerEditorUrlResponse() {
    }
    EmailCustomerEditorUrlResponse.getAttributeTypeMap = function () {
        return EmailCustomerEditorUrlResponse.attributeTypeMap;
    };
    EmailCustomerEditorUrlResponse.discriminator = undefined;
    EmailCustomerEditorUrlResponse.attributeTypeMap = [
        {
            "name": "editorUrl",
            "baseName": "editor_url",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailCustomerEditorUrlResponse;
}());
exports.EmailCustomerEditorUrlResponse = EmailCustomerEditorUrlResponse;
var EmailCustomersResponse = (function () {
    function EmailCustomersResponse() {
    }
    EmailCustomersResponse.getAttributeTypeMap = function () {
        return EmailCustomersResponse.attributeTypeMap;
    };
    EmailCustomersResponse.discriminator = undefined;
    EmailCustomersResponse.attributeTypeMap = [
        {
            "name": "customers",
            "baseName": "customers",
            "type": "Array<EmailCustomer>"
        },
        {
            "name": "pageNumber",
            "baseName": "page_number",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "page_size",
            "type": "number"
        },
        {
            "name": "totalCustomers",
            "baseName": "total_customers",
            "type": "number"
        },
        {
            "name": "totalPages",
            "baseName": "total_pages",
            "type": "number"
        }
    ];
    return EmailCustomersResponse;
}());
exports.EmailCustomersResponse = EmailCustomersResponse;
var EmailDashboardActivity = (function () {
    function EmailDashboardActivity() {
    }
    EmailDashboardActivity.getAttributeTypeMap = function () {
        return EmailDashboardActivity.attributeTypeMap;
    };
    EmailDashboardActivity.discriminator = undefined;
    EmailDashboardActivity.attributeTypeMap = [
        {
            "name": "action",
            "baseName": "action",
            "type": "string"
        },
        {
            "name": "activityDts",
            "baseName": "activity_dts",
            "type": "string"
        },
        {
            "name": "destinationName",
            "baseName": "destination_name",
            "type": "string"
        },
        {
            "name": "destinationUuid",
            "baseName": "destination_uuid",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "isList",
            "baseName": "is_list",
            "type": "boolean"
        },
        {
            "name": "isSegment",
            "baseName": "is_segment",
            "type": "boolean"
        }
    ];
    return EmailDashboardActivity;
}());
exports.EmailDashboardActivity = EmailDashboardActivity;
var EmailDashboardActivityResponse = (function () {
    function EmailDashboardActivityResponse() {
    }
    EmailDashboardActivityResponse.getAttributeTypeMap = function () {
        return EmailDashboardActivityResponse.attributeTypeMap;
    };
    EmailDashboardActivityResponse.discriminator = undefined;
    EmailDashboardActivityResponse.attributeTypeMap = [
        {
            "name": "activity",
            "baseName": "activity",
            "type": "Array<EmailDashboardActivity>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailDashboardActivityResponse;
}());
exports.EmailDashboardActivityResponse = EmailDashboardActivityResponse;
var EmailDashboardStatsResponse = (function () {
    function EmailDashboardStatsResponse() {
    }
    EmailDashboardStatsResponse.getAttributeTypeMap = function () {
        return EmailDashboardStatsResponse.attributeTypeMap;
    };
    EmailDashboardStatsResponse.discriminator = undefined;
    EmailDashboardStatsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "Array<EmailStat>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailDashboardStatsResponse;
}());
exports.EmailDashboardStatsResponse = EmailDashboardStatsResponse;
var EmailDomain = (function () {
    function EmailDomain() {
    }
    EmailDomain.getAttributeTypeMap = function () {
        return EmailDomain.attributeTypeMap;
    };
    EmailDomain.discriminator = undefined;
    EmailDomain.attributeTypeMap = [
        {
            "name": "comment",
            "baseName": "comment",
            "type": "string"
        },
        {
            "name": "dkim",
            "baseName": "dkim",
            "type": "Array<VerificationRecord>"
        },
        {
            "name": "dkimStatus",
            "baseName": "dkim_status",
            "type": "string"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "espDomainUuid",
            "baseName": "esp_domain_uuid",
            "type": "string"
        },
        {
            "name": "identityStatus",
            "baseName": "identity_status",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "provider",
            "baseName": "provider",
            "type": "string"
        },
        {
            "name": "startDkimDts",
            "baseName": "start_dkim_dts",
            "type": "string"
        },
        {
            "name": "startIdentityDts",
            "baseName": "start_identity_dts",
            "type": "string"
        },
        {
            "name": "verification",
            "baseName": "verification",
            "type": "VerificationRecord"
        }
    ];
    return EmailDomain;
}());
exports.EmailDomain = EmailDomain;
var EmailEditorTokenResponse = (function () {
    function EmailEditorTokenResponse() {
    }
    EmailEditorTokenResponse.getAttributeTypeMap = function () {
        return EmailEditorTokenResponse.attributeTypeMap;
    };
    EmailEditorTokenResponse.discriminator = undefined;
    EmailEditorTokenResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailEditorTokenResponse;
}());
exports.EmailEditorTokenResponse = EmailEditorTokenResponse;
var EmailFlow = (function () {
    function EmailFlow() {
    }
    EmailFlow.getAttributeTypeMap = function () {
        return EmailFlow.attributeTypeMap;
    };
    EmailFlow.discriminator = undefined;
    EmailFlow.attributeTypeMap = [
        {
            "name": "allowMultipleConcurrentEnrollments",
            "baseName": "allow_multiple_concurrent_enrollments",
            "type": "boolean"
        },
        {
            "name": "backPopulating",
            "baseName": "back_populating",
            "type": "boolean"
        },
        {
            "name": "clickRateFormatted",
            "baseName": "click_rate_formatted",
            "type": "string"
        },
        {
            "name": "createdDts",
            "baseName": "created_dts",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "emailCommunicationSequenceUuid",
            "baseName": "email_communication_sequence_uuid",
            "type": "string"
        },
        {
            "name": "emailFlowUuid",
            "baseName": "email_flow_uuid",
            "type": "string"
        },
        {
            "name": "endOnceCustomerPurchases",
            "baseName": "end_once_customer_purchases",
            "type": "boolean"
        },
        {
            "name": "enrolledCustomers",
            "baseName": "enrolled_customers",
            "type": "number"
        },
        {
            "name": "espDomainUser",
            "baseName": "esp_domain_user",
            "type": "string"
        },
        {
            "name": "espDomainUuid",
            "baseName": "esp_domain_uuid",
            "type": "string"
        },
        {
            "name": "espFriendlyName",
            "baseName": "esp_friendly_name",
            "type": "string"
        },
        {
            "name": "filterProfileEquationJson",
            "baseName": "filter_profile_equation_json",
            "type": "string"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "openRateFormatted",
            "baseName": "open_rate_formatted",
            "type": "string"
        },
        {
            "name": "revenueFormatted",
            "baseName": "revenue_formatted",
            "type": "string"
        },
        {
            "name": "screenshotLargeFullUrl",
            "baseName": "screenshot_large_full_url",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "statusDts",
            "baseName": "status_dts",
            "type": "string"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "triggerParameter",
            "baseName": "trigger_parameter",
            "type": "string"
        },
        {
            "name": "triggerParameterName",
            "baseName": "trigger_parameter_name",
            "type": "string"
        },
        {
            "name": "triggerType",
            "baseName": "trigger_type",
            "type": "string"
        }
    ];
    return EmailFlow;
}());
exports.EmailFlow = EmailFlow;
var EmailFlowBackPopulateRequest = (function () {
    function EmailFlowBackPopulateRequest() {
    }
    EmailFlowBackPopulateRequest.getAttributeTypeMap = function () {
        return EmailFlowBackPopulateRequest.attributeTypeMap;
    };
    EmailFlowBackPopulateRequest.discriminator = undefined;
    EmailFlowBackPopulateRequest.attributeTypeMap = [
        {
            "name": "orderDaysOld",
            "baseName": "order_days_old",
            "type": "number"
        },
        {
            "name": "relativeToEvent",
            "baseName": "relative_to_event",
            "type": "boolean"
        }
    ];
    return EmailFlowBackPopulateRequest;
}());
exports.EmailFlowBackPopulateRequest = EmailFlowBackPopulateRequest;
var EmailFlowBackPopulateResponse = (function () {
    function EmailFlowBackPopulateResponse() {
    }
    EmailFlowBackPopulateResponse.getAttributeTypeMap = function () {
        return EmailFlowBackPopulateResponse.attributeTypeMap;
    };
    EmailFlowBackPopulateResponse.discriminator = undefined;
    EmailFlowBackPopulateResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailFlowBackPopulateResponse;
}());
exports.EmailFlowBackPopulateResponse = EmailFlowBackPopulateResponse;
var EmailFlowResponse = (function () {
    function EmailFlowResponse() {
    }
    EmailFlowResponse.getAttributeTypeMap = function () {
        return EmailFlowResponse.attributeTypeMap;
    };
    EmailFlowResponse.discriminator = undefined;
    EmailFlowResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "flow",
            "baseName": "flow",
            "type": "EmailFlow"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailFlowResponse;
}());
exports.EmailFlowResponse = EmailFlowResponse;
var EmailFlowsResponse = (function () {
    function EmailFlowsResponse() {
    }
    EmailFlowsResponse.getAttributeTypeMap = function () {
        return EmailFlowsResponse.attributeTypeMap;
    };
    EmailFlowsResponse.discriminator = undefined;
    EmailFlowsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "flows",
            "baseName": "flows",
            "type": "Array<EmailFlow>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailFlowsResponse;
}());
exports.EmailFlowsResponse = EmailFlowsResponse;
var EmailGlobalSettings = (function () {
    function EmailGlobalSettings() {
    }
    EmailGlobalSettings.getAttributeTypeMap = function () {
        return EmailGlobalSettings.attributeTypeMap;
    };
    EmailGlobalSettings.discriminator = undefined;
    EmailGlobalSettings.attributeTypeMap = [
        {
            "name": "dedicatedIp",
            "baseName": "dedicated_ip",
            "type": "boolean"
        }
    ];
    return EmailGlobalSettings;
}());
exports.EmailGlobalSettings = EmailGlobalSettings;
var EmailGlobalSettingsResponse = (function () {
    function EmailGlobalSettingsResponse() {
    }
    EmailGlobalSettingsResponse.getAttributeTypeMap = function () {
        return EmailGlobalSettingsResponse.attributeTypeMap;
    };
    EmailGlobalSettingsResponse.discriminator = undefined;
    EmailGlobalSettingsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "globalSettings",
            "baseName": "global_settings",
            "type": "EmailGlobalSettings"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailGlobalSettingsResponse;
}());
exports.EmailGlobalSettingsResponse = EmailGlobalSettingsResponse;
var EmailGlobalUnsubscribeRequest = (function () {
    function EmailGlobalUnsubscribeRequest() {
    }
    EmailGlobalUnsubscribeRequest.getAttributeTypeMap = function () {
        return EmailGlobalUnsubscribeRequest.attributeTypeMap;
    };
    EmailGlobalUnsubscribeRequest.discriminator = undefined;
    EmailGlobalUnsubscribeRequest.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        }
    ];
    return EmailGlobalUnsubscribeRequest;
}());
exports.EmailGlobalUnsubscribeRequest = EmailGlobalUnsubscribeRequest;
var EmailGlobalUnsubscribeResponse = (function () {
    function EmailGlobalUnsubscribeResponse() {
    }
    EmailGlobalUnsubscribeResponse.getAttributeTypeMap = function () {
        return EmailGlobalUnsubscribeResponse.attributeTypeMap;
    };
    EmailGlobalUnsubscribeResponse.discriminator = undefined;
    EmailGlobalUnsubscribeResponse.attributeTypeMap = [
        {
            "name": "listsUnsubscribed",
            "baseName": "listsUnsubscribed",
            "type": "number"
        }
    ];
    return EmailGlobalUnsubscribeResponse;
}());
exports.EmailGlobalUnsubscribeResponse = EmailGlobalUnsubscribeResponse;
var EmailHistogramPropertyNamesResponse = (function () {
    function EmailHistogramPropertyNamesResponse() {
    }
    EmailHistogramPropertyNamesResponse.getAttributeTypeMap = function () {
        return EmailHistogramPropertyNamesResponse.attributeTypeMap;
    };
    EmailHistogramPropertyNamesResponse.discriminator = undefined;
    EmailHistogramPropertyNamesResponse.attributeTypeMap = [
        {
            "name": "propertyNames",
            "baseName": "property_names",
            "type": "Array<string>"
        }
    ];
    return EmailHistogramPropertyNamesResponse;
}());
exports.EmailHistogramPropertyNamesResponse = EmailHistogramPropertyNamesResponse;
var EmailHistogramPropertyValuesResponse = (function () {
    function EmailHistogramPropertyValuesResponse() {
    }
    EmailHistogramPropertyValuesResponse.getAttributeTypeMap = function () {
        return EmailHistogramPropertyValuesResponse.attributeTypeMap;
    };
    EmailHistogramPropertyValuesResponse.discriminator = undefined;
    EmailHistogramPropertyValuesResponse.attributeTypeMap = [
        {
            "name": "propertyValues",
            "baseName": "property_values",
            "type": "Array<string>"
        }
    ];
    return EmailHistogramPropertyValuesResponse;
}());
exports.EmailHistogramPropertyValuesResponse = EmailHistogramPropertyValuesResponse;
var EmailList = (function () {
    function EmailList() {
    }
    EmailList.getAttributeTypeMap = function () {
        return EmailList.attributeTypeMap;
    };
    EmailList.discriminator = undefined;
    EmailList.attributeTypeMap = [
        {
            "name": "allowCsvDownload",
            "baseName": "allow_csv_download",
            "type": "boolean"
        },
        {
            "name": "createdDts",
            "baseName": "created_dts",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "emailListUuid",
            "baseName": "email_list_uuid",
            "type": "string"
        },
        {
            "name": "memberCount",
            "baseName": "member_count",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "publicDescription",
            "baseName": "public_description",
            "type": "string"
        },
        {
            "name": "publicList",
            "baseName": "public_list",
            "type": "boolean"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "usedBy",
            "baseName": "used_by",
            "type": "Array<EmailListSegmentUsedBy>"
        }
    ];
    return EmailList;
}());
exports.EmailList = EmailList;
var EmailListArchiveResponse = (function () {
    function EmailListArchiveResponse() {
    }
    EmailListArchiveResponse.getAttributeTypeMap = function () {
        return EmailListArchiveResponse.attributeTypeMap;
    };
    EmailListArchiveResponse.discriminator = undefined;
    EmailListArchiveResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "listInUse",
            "baseName": "list_in_use",
            "type": "boolean"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailListArchiveResponse;
}());
exports.EmailListArchiveResponse = EmailListArchiveResponse;
var EmailListCustomer = (function () {
    function EmailListCustomer() {
    }
    EmailListCustomer.getAttributeTypeMap = function () {
        return EmailListCustomer.attributeTypeMap;
    };
    EmailListCustomer.discriminator = undefined;
    EmailListCustomer.attributeTypeMap = [
        {
            "name": "addDts",
            "baseName": "add_dts",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "emailCustomerUuid",
            "baseName": "email_customer_uuid",
            "type": "string"
        },
        {
            "name": "emailListMemberUuid",
            "baseName": "email_list_member_uuid",
            "type": "string"
        }
    ];
    return EmailListCustomer;
}());
exports.EmailListCustomer = EmailListCustomer;
var EmailListCustomersResponse = (function () {
    function EmailListCustomersResponse() {
    }
    EmailListCustomersResponse.getAttributeTypeMap = function () {
        return EmailListCustomersResponse.attributeTypeMap;
    };
    EmailListCustomersResponse.discriminator = undefined;
    EmailListCustomersResponse.attributeTypeMap = [
        {
            "name": "customers",
            "baseName": "customers",
            "type": "Array<EmailListCustomer>"
        },
        {
            "name": "pageNumber",
            "baseName": "page_number",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "page_size",
            "type": "number"
        },
        {
            "name": "totalCustomers",
            "baseName": "total_customers",
            "type": "number"
        },
        {
            "name": "totalPages",
            "baseName": "total_pages",
            "type": "number"
        }
    ];
    return EmailListCustomersResponse;
}());
exports.EmailListCustomersResponse = EmailListCustomersResponse;
var EmailListResponse = (function () {
    function EmailListResponse() {
    }
    EmailListResponse.getAttributeTypeMap = function () {
        return EmailListResponse.attributeTypeMap;
    };
    EmailListResponse.discriminator = undefined;
    EmailListResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "list",
            "baseName": "list",
            "type": "EmailList"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailListResponse;
}());
exports.EmailListResponse = EmailListResponse;
var EmailListSegmentMembership = (function () {
    function EmailListSegmentMembership() {
    }
    EmailListSegmentMembership.getAttributeTypeMap = function () {
        return EmailListSegmentMembership.attributeTypeMap;
    };
    EmailListSegmentMembership.discriminator = undefined;
    EmailListSegmentMembership.attributeTypeMap = [
        {
            "name": "emailListUuid",
            "baseName": "email_list_uuid",
            "type": "string"
        },
        {
            "name": "emailSegmentUuid",
            "baseName": "email_segment_uuid",
            "type": "string"
        },
        {
            "name": "exclude",
            "baseName": "exclude",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return EmailListSegmentMembership;
}());
exports.EmailListSegmentMembership = EmailListSegmentMembership;
var EmailListSegmentUsedBy = (function () {
    function EmailListSegmentUsedBy() {
    }
    EmailListSegmentUsedBy.getAttributeTypeMap = function () {
        return EmailListSegmentUsedBy.attributeTypeMap;
    };
    EmailListSegmentUsedBy.discriminator = undefined;
    EmailListSegmentUsedBy.attributeTypeMap = [
        {
            "name": "emailCampaignUuid",
            "baseName": "email_campaign_uuid",
            "type": "string"
        },
        {
            "name": "emailFlowUuid",
            "baseName": "email_flow_uuid",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return EmailListSegmentUsedBy;
}());
exports.EmailListSegmentUsedBy = EmailListSegmentUsedBy;
var EmailListSubscribeResponse = (function () {
    function EmailListSubscribeResponse() {
    }
    EmailListSubscribeResponse.getAttributeTypeMap = function () {
        return EmailListSubscribeResponse.attributeTypeMap;
    };
    EmailListSubscribeResponse.discriminator = undefined;
    EmailListSubscribeResponse.attributeTypeMap = [
        {
            "name": "added",
            "baseName": "added",
            "type": "number"
        },
        {
            "name": "memberCount",
            "baseName": "memberCount",
            "type": "number"
        }
    ];
    return EmailListSubscribeResponse;
}());
exports.EmailListSubscribeResponse = EmailListSubscribeResponse;
var EmailListsResponse = (function () {
    function EmailListsResponse() {
    }
    EmailListsResponse.getAttributeTypeMap = function () {
        return EmailListsResponse.attributeTypeMap;
    };
    EmailListsResponse.discriminator = undefined;
    EmailListsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "lists",
            "baseName": "lists",
            "type": "Array<EmailList>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailListsResponse;
}());
exports.EmailListsResponse = EmailListsResponse;
var EmailOrder = (function () {
    function EmailOrder() {
    }
    EmailOrder.getAttributeTypeMap = function () {
        return EmailOrder.attributeTypeMap;
    };
    EmailOrder.discriminator = undefined;
    EmailOrder.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "orderDts",
            "baseName": "order_dts",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "Currency"
        }
    ];
    return EmailOrder;
}());
exports.EmailOrder = EmailOrder;
var EmailOrdersResponse = (function () {
    function EmailOrdersResponse() {
    }
    EmailOrdersResponse.getAttributeTypeMap = function () {
        return EmailOrdersResponse.attributeTypeMap;
    };
    EmailOrdersResponse.discriminator = undefined;
    EmailOrdersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "orders",
            "baseName": "orders",
            "type": "Array<EmailOrder>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailOrdersResponse;
}());
exports.EmailOrdersResponse = EmailOrdersResponse;
var EmailPerformance = (function () {
    function EmailPerformance() {
    }
    EmailPerformance.getAttributeTypeMap = function () {
        return EmailPerformance.attributeTypeMap;
    };
    EmailPerformance.discriminator = undefined;
    EmailPerformance.attributeTypeMap = [
        {
            "name": "activeCustomers",
            "baseName": "active_customers",
            "type": "number"
        },
        {
            "name": "actualCustomers",
            "baseName": "actual_customers",
            "type": "number"
        },
        {
            "name": "bounceCount",
            "baseName": "bounce_count",
            "type": "number"
        },
        {
            "name": "bouncePercentage",
            "baseName": "bounce_percentage",
            "type": "number"
        },
        {
            "name": "bouncePercentageFormatted",
            "baseName": "bounce_percentage_formatted",
            "type": "string"
        },
        {
            "name": "customerHistogram",
            "baseName": "customer_histogram",
            "type": "EmailPerformanceCustomerHistogram"
        },
        {
            "name": "dailyStats",
            "baseName": "daily_stats",
            "type": "Array<EmailPerformanceDaily>"
        },
        {
            "name": "deliveredCount",
            "baseName": "delivered_count",
            "type": "number"
        },
        {
            "name": "maxActiveCustomers",
            "baseName": "max_active_customers",
            "type": "number"
        },
        {
            "name": "maxEmailsPerDay",
            "baseName": "max_emails_per_day",
            "type": "number"
        },
        {
            "name": "maxEmailsPerHour",
            "baseName": "max_emails_per_hour",
            "type": "number"
        },
        {
            "name": "maxEmailsPerMonth",
            "baseName": "max_emails_per_month",
            "type": "number"
        },
        {
            "name": "pausedForSpam",
            "baseName": "paused_for_spam",
            "type": "boolean"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "sentEmailsPerDay",
            "baseName": "sent_emails_per_day",
            "type": "number"
        },
        {
            "name": "sentEmailsPerHour",
            "baseName": "sent_emails_per_hour",
            "type": "number"
        },
        {
            "name": "sentEmailsPerMonth",
            "baseName": "sent_emails_per_month",
            "type": "number"
        },
        {
            "name": "sequenceSendCount",
            "baseName": "sequence_send_count",
            "type": "number"
        },
        {
            "name": "spamCount",
            "baseName": "spam_count",
            "type": "number"
        },
        {
            "name": "spamPercentage",
            "baseName": "spam_percentage",
            "type": "number"
        },
        {
            "name": "spamPercentageFormatted",
            "baseName": "spam_percentage_formatted",
            "type": "string"
        },
        {
            "name": "transactionalSendCount",
            "baseName": "transactional_send_count",
            "type": "number"
        }
    ];
    return EmailPerformance;
}());
exports.EmailPerformance = EmailPerformance;
var EmailPerformanceCustomerHistogram = (function () {
    function EmailPerformanceCustomerHistogram() {
    }
    EmailPerformanceCustomerHistogram.getAttributeTypeMap = function () {
        return EmailPerformanceCustomerHistogram.attributeTypeMap;
    };
    EmailPerformanceCustomerHistogram.discriminator = undefined;
    EmailPerformanceCustomerHistogram.attributeTypeMap = [
        {
            "name": "periods",
            "baseName": "periods",
            "type": "Array<EmailPerformanceCustomerHistogramPeriod>"
        }
    ];
    return EmailPerformanceCustomerHistogram;
}());
exports.EmailPerformanceCustomerHistogram = EmailPerformanceCustomerHistogram;
var EmailPerformanceCustomerHistogramPeriod = (function () {
    function EmailPerformanceCustomerHistogramPeriod() {
    }
    EmailPerformanceCustomerHistogramPeriod.getAttributeTypeMap = function () {
        return EmailPerformanceCustomerHistogramPeriod.attributeTypeMap;
    };
    EmailPerformanceCustomerHistogramPeriod.discriminator = undefined;
    EmailPerformanceCustomerHistogramPeriod.attributeTypeMap = [
        {
            "name": "active",
            "baseName": "active",
            "type": "number"
        },
        {
            "name": "inactive",
            "baseName": "inactive",
            "type": "number"
        },
        {
            "name": "month",
            "baseName": "month",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "year",
            "baseName": "year",
            "type": "number"
        }
    ];
    return EmailPerformanceCustomerHistogramPeriod;
}());
exports.EmailPerformanceCustomerHistogramPeriod = EmailPerformanceCustomerHistogramPeriod;
var EmailPerformanceDaily = (function () {
    function EmailPerformanceDaily() {
    }
    EmailPerformanceDaily.getAttributeTypeMap = function () {
        return EmailPerformanceDaily.attributeTypeMap;
    };
    EmailPerformanceDaily.discriminator = undefined;
    EmailPerformanceDaily.attributeTypeMap = [
        {
            "name": "bounceCount",
            "baseName": "bounce_count",
            "type": "number"
        },
        {
            "name": "deliveredCount",
            "baseName": "delivered_count",
            "type": "number"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "sequenceSendCount",
            "baseName": "sequence_send_count",
            "type": "number"
        },
        {
            "name": "spamCount",
            "baseName": "spam_count",
            "type": "number"
        },
        {
            "name": "statDts",
            "baseName": "stat_dts",
            "type": "string"
        },
        {
            "name": "transactionalSendCount",
            "baseName": "transactional_send_count",
            "type": "number"
        }
    ];
    return EmailPerformanceDaily;
}());
exports.EmailPerformanceDaily = EmailPerformanceDaily;
var EmailPerformanceResponse = (function () {
    function EmailPerformanceResponse() {
    }
    EmailPerformanceResponse.getAttributeTypeMap = function () {
        return EmailPerformanceResponse.attributeTypeMap;
    };
    EmailPerformanceResponse.discriminator = undefined;
    EmailPerformanceResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "performance",
            "baseName": "performance",
            "type": "EmailPerformance"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailPerformanceResponse;
}());
exports.EmailPerformanceResponse = EmailPerformanceResponse;
var EmailPlan = (function () {
    function EmailPlan() {
    }
    EmailPlan.getAttributeTypeMap = function () {
        return EmailPlan.attributeTypeMap;
    };
    EmailPlan.discriminator = undefined;
    EmailPlan.attributeTypeMap = [
        {
            "name": "additionalCustomers",
            "baseName": "additional_customers",
            "type": "number"
        },
        {
            "name": "additionalEmails",
            "baseName": "additional_emails",
            "type": "number"
        },
        {
            "name": "allowListImport",
            "baseName": "allow_list_import",
            "type": "boolean"
        },
        {
            "name": "allowTrackingEmails",
            "baseName": "allow_tracking_emails",
            "type": "boolean"
        },
        {
            "name": "customerTiers",
            "baseName": "customer_tiers",
            "type": "Array<EmailPlanAdditional>"
        },
        {
            "name": "initialSendingLimits",
            "baseName": "initial_sending_limits",
            "type": "number"
        },
        {
            "name": "planCustomers",
            "baseName": "plan_customers",
            "type": "number"
        },
        {
            "name": "planEmails",
            "baseName": "plan_emails",
            "type": "number"
        },
        {
            "name": "planName",
            "baseName": "plan_name",
            "type": "string"
        },
        {
            "name": "planNameFormatted",
            "baseName": "plan_name_formatted",
            "type": "string"
        },
        {
            "name": "requireOrderWithinLastDays",
            "baseName": "require_order_within_last_days",
            "type": "number"
        },
        {
            "name": "revenuePercent",
            "baseName": "revenue_percent",
            "type": "number"
        },
        {
            "name": "spamPercentLimit",
            "baseName": "spam_percent_limit",
            "type": "number"
        },
        {
            "name": "totalCustomers",
            "baseName": "total_customers",
            "type": "number"
        },
        {
            "name": "totalEmails",
            "baseName": "total_emails",
            "type": "number"
        },
        {
            "name": "upgradeTo",
            "baseName": "upgrade_to",
            "type": "number"
        }
    ];
    return EmailPlan;
}());
exports.EmailPlan = EmailPlan;
var EmailPlanAdditional = (function () {
    function EmailPlanAdditional() {
    }
    EmailPlanAdditional.getAttributeTypeMap = function () {
        return EmailPlanAdditional.attributeTypeMap;
    };
    EmailPlanAdditional.discriminator = undefined;
    EmailPlanAdditional.attributeTypeMap = [
        {
            "name": "canDowngrade",
            "baseName": "can_downgrade",
            "type": "boolean"
        },
        {
            "name": "canUpgrade",
            "baseName": "can_upgrade",
            "type": "boolean"
        },
        {
            "name": "cost",
            "baseName": "cost",
            "type": "number"
        },
        {
            "name": "costFormatted",
            "baseName": "cost_formatted",
            "type": "string"
        },
        {
            "name": "customers",
            "baseName": "customers",
            "type": "number"
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "number"
        }
    ];
    return EmailPlanAdditional;
}());
exports.EmailPlanAdditional = EmailPlanAdditional;
var EmailPlanResponse = (function () {
    function EmailPlanResponse() {
    }
    EmailPlanResponse.getAttributeTypeMap = function () {
        return EmailPlanResponse.attributeTypeMap;
    };
    EmailPlanResponse.discriminator = undefined;
    EmailPlanResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "plan",
            "baseName": "plan",
            "type": "EmailPlan"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailPlanResponse;
}());
exports.EmailPlanResponse = EmailPlanResponse;
var EmailPostcardStat = (function () {
    function EmailPostcardStat() {
    }
    EmailPostcardStat.getAttributeTypeMap = function () {
        return EmailPostcardStat.attributeTypeMap;
    };
    EmailPostcardStat.discriminator = undefined;
    EmailPostcardStat.attributeTypeMap = [
        {
            "name": "clickCount",
            "baseName": "click_count",
            "type": "number"
        },
        {
            "name": "clickCountFormatted",
            "baseName": "click_count_formatted",
            "type": "string"
        },
        {
            "name": "conversionCount",
            "baseName": "conversion_count",
            "type": "number"
        },
        {
            "name": "conversionCountFormatted",
            "baseName": "conversion_count_formatted",
            "type": "string"
        },
        {
            "name": "deliveredCount",
            "baseName": "delivered_count",
            "type": "number"
        },
        {
            "name": "deliveredCountFormatted",
            "baseName": "delivered_count_formatted",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "orderCount",
            "baseName": "order_count",
            "type": "number"
        },
        {
            "name": "orderCountFormatted",
            "baseName": "order_count_formatted",
            "type": "string"
        },
        {
            "name": "profit",
            "baseName": "profit",
            "type": "number"
        },
        {
            "name": "profitFormatted",
            "baseName": "profit_formatted",
            "type": "string"
        },
        {
            "name": "returnToSenderCount",
            "baseName": "return_to_sender_count",
            "type": "number"
        },
        {
            "name": "returnToSenderCountFormatted",
            "baseName": "return_to_sender_count_formatted",
            "type": "string"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "revenueFormatted",
            "baseName": "revenue_formatted",
            "type": "string"
        },
        {
            "name": "sendCount",
            "baseName": "send_count",
            "type": "number"
        },
        {
            "name": "sendCountFormatted",
            "baseName": "send_count_formatted",
            "type": "string"
        },
        {
            "name": "skippedCount",
            "baseName": "skipped_count",
            "type": "number"
        },
        {
            "name": "skippedCountFormatted",
            "baseName": "skipped_count_formatted",
            "type": "string"
        },
        {
            "name": "spamCount",
            "baseName": "spam_count",
            "type": "number"
        },
        {
            "name": "spamCountFormatted",
            "baseName": "spam_count_formatted",
            "type": "string"
        },
        {
            "name": "statType",
            "baseName": "stat_type",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "statusDts",
            "baseName": "status_dts",
            "type": "string"
        },
        {
            "name": "steps",
            "baseName": "steps",
            "type": "Array<EmailPostcardStat>"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "unsubscribeCount",
            "baseName": "unsubscribe_count",
            "type": "number"
        },
        {
            "name": "unsubscribeCountFormatted",
            "baseName": "unsubscribe_count_formatted",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "viewCount",
            "baseName": "view_count",
            "type": "number"
        },
        {
            "name": "viewCountFormatted",
            "baseName": "view_count_formatted",
            "type": "string"
        }
    ];
    return EmailPostcardStat;
}());
exports.EmailPostcardStat = EmailPostcardStat;
var EmailSegment = (function () {
    function EmailSegment() {
    }
    EmailSegment.getAttributeTypeMap = function () {
        return EmailSegment.attributeTypeMap;
    };
    EmailSegment.discriminator = undefined;
    EmailSegment.attributeTypeMap = [
        {
            "name": "allowCsvDownload",
            "baseName": "allow_csv_download",
            "type": "boolean"
        },
        {
            "name": "allowFacebookAudiences",
            "baseName": "allow_facebook_audiences",
            "type": "boolean"
        },
        {
            "name": "createdDts",
            "baseName": "created_dts",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "emailSegmentUuid",
            "baseName": "email_segment_uuid",
            "type": "string"
        },
        {
            "name": "facebookCustomAudience",
            "baseName": "facebook_custom_audience",
            "type": "boolean"
        },
        {
            "name": "filterProfileEquationJson",
            "baseName": "filter_profile_equation_json",
            "type": "string"
        },
        {
            "name": "memberCount",
            "baseName": "member_count",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "rankJson",
            "baseName": "rank_json",
            "type": "string"
        },
        {
            "name": "rebuildRequired",
            "baseName": "rebuild_required",
            "type": "boolean"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "usedBy",
            "baseName": "used_by",
            "type": "Array<EmailListSegmentUsedBy>"
        }
    ];
    return EmailSegment;
}());
exports.EmailSegment = EmailSegment;
var EmailSegmentArchiveResponse = (function () {
    function EmailSegmentArchiveResponse() {
    }
    EmailSegmentArchiveResponse.getAttributeTypeMap = function () {
        return EmailSegmentArchiveResponse.attributeTypeMap;
    };
    EmailSegmentArchiveResponse.discriminator = undefined;
    EmailSegmentArchiveResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "segmentInUse",
            "baseName": "segment_in_use",
            "type": "boolean"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSegmentArchiveResponse;
}());
exports.EmailSegmentArchiveResponse = EmailSegmentArchiveResponse;
var EmailSegmentCustomer = (function () {
    function EmailSegmentCustomer() {
    }
    EmailSegmentCustomer.getAttributeTypeMap = function () {
        return EmailSegmentCustomer.attributeTypeMap;
    };
    EmailSegmentCustomer.discriminator = undefined;
    EmailSegmentCustomer.attributeTypeMap = [
        {
            "name": "addDts",
            "baseName": "add_dts",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "emailCustomerUuid",
            "baseName": "email_customer_uuid",
            "type": "string"
        },
        {
            "name": "emailSegmentMemberUuid",
            "baseName": "email_segment_member_uuid",
            "type": "string"
        }
    ];
    return EmailSegmentCustomer;
}());
exports.EmailSegmentCustomer = EmailSegmentCustomer;
var EmailSegmentCustomersResponse = (function () {
    function EmailSegmentCustomersResponse() {
    }
    EmailSegmentCustomersResponse.getAttributeTypeMap = function () {
        return EmailSegmentCustomersResponse.attributeTypeMap;
    };
    EmailSegmentCustomersResponse.discriminator = undefined;
    EmailSegmentCustomersResponse.attributeTypeMap = [
        {
            "name": "customers",
            "baseName": "customers",
            "type": "Array<EmailSegmentCustomer>"
        },
        {
            "name": "pageNumber",
            "baseName": "page_number",
            "type": "number"
        },
        {
            "name": "pageSize",
            "baseName": "page_size",
            "type": "number"
        },
        {
            "name": "totalCustomers",
            "baseName": "total_customers",
            "type": "number"
        },
        {
            "name": "totalPages",
            "baseName": "total_pages",
            "type": "number"
        }
    ];
    return EmailSegmentCustomersResponse;
}());
exports.EmailSegmentCustomersResponse = EmailSegmentCustomersResponse;
var EmailSegmentDownloadPrepareResponse = (function () {
    function EmailSegmentDownloadPrepareResponse() {
    }
    EmailSegmentDownloadPrepareResponse.getAttributeTypeMap = function () {
        return EmailSegmentDownloadPrepareResponse.attributeTypeMap;
    };
    EmailSegmentDownloadPrepareResponse.discriminator = undefined;
    EmailSegmentDownloadPrepareResponse.attributeTypeMap = [
        {
            "name": "emailSegmentRebuildUuid",
            "baseName": "email_segment_rebuild_uuid",
            "type": "string"
        },
        {
            "name": "emailSegmentUuid",
            "baseName": "email_segment_uuid",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "percentageComplete",
            "baseName": "percentage_complete",
            "type": "number"
        },
        {
            "name": "proceed",
            "baseName": "proceed",
            "type": "boolean"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSegmentDownloadPrepareResponse;
}());
exports.EmailSegmentDownloadPrepareResponse = EmailSegmentDownloadPrepareResponse;
var EmailSegmentResponse = (function () {
    function EmailSegmentResponse() {
    }
    EmailSegmentResponse.getAttributeTypeMap = function () {
        return EmailSegmentResponse.attributeTypeMap;
    };
    EmailSegmentResponse.discriminator = undefined;
    EmailSegmentResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "segment",
            "baseName": "segment",
            "type": "EmailSegment"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSegmentResponse;
}());
exports.EmailSegmentResponse = EmailSegmentResponse;
var EmailSegmentsResponse = (function () {
    function EmailSegmentsResponse() {
    }
    EmailSegmentsResponse.getAttributeTypeMap = function () {
        return EmailSegmentsResponse.attributeTypeMap;
    };
    EmailSegmentsResponse.discriminator = undefined;
    EmailSegmentsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "segments",
            "baseName": "segments",
            "type": "Array<EmailSegment>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSegmentsResponse;
}());
exports.EmailSegmentsResponse = EmailSegmentsResponse;
var EmailSendingDomainResponse = (function () {
    function EmailSendingDomainResponse() {
    }
    EmailSendingDomainResponse.getAttributeTypeMap = function () {
        return EmailSendingDomainResponse.attributeTypeMap;
    };
    EmailSendingDomainResponse.discriminator = undefined;
    EmailSendingDomainResponse.attributeTypeMap = [
        {
            "name": "domain",
            "baseName": "domain",
            "type": "EmailDomain"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSendingDomainResponse;
}());
exports.EmailSendingDomainResponse = EmailSendingDomainResponse;
var EmailSendingDomainsResponse = (function () {
    function EmailSendingDomainsResponse() {
    }
    EmailSendingDomainsResponse.getAttributeTypeMap = function () {
        return EmailSendingDomainsResponse.attributeTypeMap;
    };
    EmailSendingDomainsResponse.discriminator = undefined;
    EmailSendingDomainsResponse.attributeTypeMap = [
        {
            "name": "domains",
            "baseName": "domains",
            "type": "Array<EmailDomain>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSendingDomainsResponse;
}());
exports.EmailSendingDomainsResponse = EmailSendingDomainsResponse;
var EmailSettings = (function () {
    function EmailSettings() {
    }
    EmailSettings.getAttributeTypeMap = function () {
        return EmailSettings.attributeTypeMap;
    };
    EmailSettings.discriminator = undefined;
    EmailSettings.attributeTypeMap = [
        {
            "name": "marketingEspDomainUser",
            "baseName": "marketing_esp_domain_user",
            "type": "string"
        },
        {
            "name": "marketingEspDomainUuid",
            "baseName": "marketing_esp_domain_uuid",
            "type": "string"
        },
        {
            "name": "marketingEspFriendlyName",
            "baseName": "marketing_esp_friendly_name",
            "type": "string"
        },
        {
            "name": "postcardFromAddress1",
            "baseName": "postcard_from_address1",
            "type": "string"
        },
        {
            "name": "postcardFromAddress2",
            "baseName": "postcard_from_address2",
            "type": "string"
        },
        {
            "name": "postcardFromCity",
            "baseName": "postcard_from_city",
            "type": "string"
        },
        {
            "name": "postcardFromName",
            "baseName": "postcard_from_name",
            "type": "string"
        },
        {
            "name": "postcardFromPostalCode",
            "baseName": "postcard_from_postal_code",
            "type": "string"
        },
        {
            "name": "postcardFromState",
            "baseName": "postcard_from_state",
            "type": "string"
        },
        {
            "name": "transactionalEspDomainUser",
            "baseName": "transactional_esp_domain_user",
            "type": "string"
        },
        {
            "name": "transactionalEspDomainUuid",
            "baseName": "transactional_esp_domain_uuid",
            "type": "string"
        },
        {
            "name": "transactionalEspFriendlyName",
            "baseName": "transactional_esp_friendly_name",
            "type": "string"
        }
    ];
    return EmailSettings;
}());
exports.EmailSettings = EmailSettings;
var EmailSettingsResponse = (function () {
    function EmailSettingsResponse() {
    }
    EmailSettingsResponse.getAttributeTypeMap = function () {
        return EmailSettingsResponse.attributeTypeMap;
    };
    EmailSettingsResponse.discriminator = undefined;
    EmailSettingsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "settings",
            "baseName": "settings",
            "type": "EmailSettings"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailSettingsResponse;
}());
exports.EmailSettingsResponse = EmailSettingsResponse;
var EmailStat = (function () {
    function EmailStat() {
    }
    EmailStat.getAttributeTypeMap = function () {
        return EmailStat.attributeTypeMap;
    };
    EmailStat.discriminator = undefined;
    EmailStat.attributeTypeMap = [
        {
            "name": "clickCount",
            "baseName": "click_count",
            "type": "number"
        },
        {
            "name": "clickCountFormatted",
            "baseName": "click_count_formatted",
            "type": "string"
        },
        {
            "name": "conversionCount",
            "baseName": "conversion_count",
            "type": "number"
        },
        {
            "name": "conversionCountFormatted",
            "baseName": "conversion_count_formatted",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "deliveredCount",
            "baseName": "delivered_count",
            "type": "number"
        },
        {
            "name": "deliveredCountFormatted",
            "baseName": "delivered_count_formatted",
            "type": "string"
        },
        {
            "name": "kickboxCount",
            "baseName": "kickbox_count",
            "type": "number"
        },
        {
            "name": "kickboxCountFormatted",
            "baseName": "kickbox_count_formatted",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "openCount",
            "baseName": "open_count",
            "type": "number"
        },
        {
            "name": "openCountFormatted",
            "baseName": "open_count_formatted",
            "type": "string"
        },
        {
            "name": "orderCount",
            "baseName": "order_count",
            "type": "number"
        },
        {
            "name": "orderCountFormatted",
            "baseName": "order_count_formatted",
            "type": "string"
        },
        {
            "name": "permanentBounceCount",
            "baseName": "permanent_bounce_count",
            "type": "number"
        },
        {
            "name": "permanentBounceCountFormatted",
            "baseName": "permanent_bounce_count_formatted",
            "type": "string"
        },
        {
            "name": "profit",
            "baseName": "profit",
            "type": "number"
        },
        {
            "name": "profitFormatted",
            "baseName": "profit_formatted",
            "type": "string"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "revenueFormatted",
            "baseName": "revenue_formatted",
            "type": "string"
        },
        {
            "name": "sendCount",
            "baseName": "send_count",
            "type": "number"
        },
        {
            "name": "sendCountFormatted",
            "baseName": "send_count_formatted",
            "type": "string"
        },
        {
            "name": "skippedCount",
            "baseName": "skipped_count",
            "type": "number"
        },
        {
            "name": "skippedCountFormatted",
            "baseName": "skipped_count_formatted",
            "type": "string"
        },
        {
            "name": "spamCount",
            "baseName": "spam_count",
            "type": "number"
        },
        {
            "name": "spamCountFormatted",
            "baseName": "spam_count_formatted",
            "type": "string"
        },
        {
            "name": "statType",
            "baseName": "stat_type",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "statusDts",
            "baseName": "status_dts",
            "type": "string"
        },
        {
            "name": "stepUuid",
            "baseName": "step_uuid",
            "type": "string"
        },
        {
            "name": "steps",
            "baseName": "steps",
            "type": "Array<EmailStat>"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "unsubscribeCount",
            "baseName": "unsubscribe_count",
            "type": "number"
        },
        {
            "name": "unsubscribeCountFormatted",
            "baseName": "unsubscribe_count_formatted",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "viewCount",
            "baseName": "view_count",
            "type": "number"
        },
        {
            "name": "viewCountFormatted",
            "baseName": "view_count_formatted",
            "type": "string"
        }
    ];
    return EmailStat;
}());
exports.EmailStat = EmailStat;
var EmailStatPostcardSummaryRequest = (function () {
    function EmailStatPostcardSummaryRequest() {
    }
    EmailStatPostcardSummaryRequest.getAttributeTypeMap = function () {
        return EmailStatPostcardSummaryRequest.attributeTypeMap;
    };
    EmailStatPostcardSummaryRequest.discriminator = undefined;
    EmailStatPostcardSummaryRequest.attributeTypeMap = [
        {
            "name": "commseqPostcardUuids",
            "baseName": "commseq_postcard_uuids",
            "type": "Array<string>"
        },
        {
            "name": "days",
            "baseName": "days",
            "type": "number"
        }
    ];
    return EmailStatPostcardSummaryRequest;
}());
exports.EmailStatPostcardSummaryRequest = EmailStatPostcardSummaryRequest;
var EmailStatPostcardSummaryResponse = (function () {
    function EmailStatPostcardSummaryResponse() {
    }
    EmailStatPostcardSummaryResponse.getAttributeTypeMap = function () {
        return EmailStatPostcardSummaryResponse.attributeTypeMap;
    };
    EmailStatPostcardSummaryResponse.discriminator = undefined;
    EmailStatPostcardSummaryResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "Array<EmailPostcardStat>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailStatPostcardSummaryResponse;
}());
exports.EmailStatPostcardSummaryResponse = EmailStatPostcardSummaryResponse;
var EmailStatSummaryRequest = (function () {
    function EmailStatSummaryRequest() {
    }
    EmailStatSummaryRequest.getAttributeTypeMap = function () {
        return EmailStatSummaryRequest.attributeTypeMap;
    };
    EmailStatSummaryRequest.discriminator = undefined;
    EmailStatSummaryRequest.attributeTypeMap = [
        {
            "name": "commseqEmailUuids",
            "baseName": "commseq_email_uuids",
            "type": "Array<string>"
        },
        {
            "name": "commseqStepUuids",
            "baseName": "commseq_step_uuids",
            "type": "Array<string>"
        },
        {
            "name": "days",
            "baseName": "days",
            "type": "number"
        }
    ];
    return EmailStatSummaryRequest;
}());
exports.EmailStatSummaryRequest = EmailStatSummaryRequest;
var EmailStatSummaryResponse = (function () {
    function EmailStatSummaryResponse() {
    }
    EmailStatSummaryResponse.getAttributeTypeMap = function () {
        return EmailStatSummaryResponse.attributeTypeMap;
    };
    EmailStatSummaryResponse.discriminator = undefined;
    EmailStatSummaryResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "Array<EmailStat>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailStatSummaryResponse;
}());
exports.EmailStatSummaryResponse = EmailStatSummaryResponse;
var EmailStepStat = (function () {
    function EmailStepStat() {
    }
    EmailStepStat.getAttributeTypeMap = function () {
        return EmailStepStat.attributeTypeMap;
    };
    EmailStepStat.discriminator = undefined;
    EmailStepStat.attributeTypeMap = [
        {
            "name": "leftConversionCount",
            "baseName": "left_conversion_count",
            "type": "number"
        },
        {
            "name": "leftConversionCountFormatted",
            "baseName": "left_conversion_count_formatted",
            "type": "string"
        },
        {
            "name": "leftCustomerCount",
            "baseName": "left_customer_count",
            "type": "number"
        },
        {
            "name": "leftCustomerCountFormatted",
            "baseName": "left_customer_count_formatted",
            "type": "string"
        },
        {
            "name": "leftOrderCount",
            "baseName": "left_order_count",
            "type": "number"
        },
        {
            "name": "leftOrderCountFormatted",
            "baseName": "left_order_count_formatted",
            "type": "string"
        },
        {
            "name": "leftProfit",
            "baseName": "left_profit",
            "type": "number"
        },
        {
            "name": "leftProfitFormatted",
            "baseName": "left_profit_formatted",
            "type": "string"
        },
        {
            "name": "leftRevenue",
            "baseName": "left_revenue",
            "type": "number"
        },
        {
            "name": "leftRevenueFormatted",
            "baseName": "left_revenue_formatted",
            "type": "string"
        },
        {
            "name": "rightConversionCount",
            "baseName": "right_conversion_count",
            "type": "number"
        },
        {
            "name": "rightConversionCountFormatted",
            "baseName": "right_conversion_count_formatted",
            "type": "string"
        },
        {
            "name": "rightCustomerCount",
            "baseName": "right_customer_count",
            "type": "number"
        },
        {
            "name": "rightCustomerCountFormatted",
            "baseName": "right_customer_count_formatted",
            "type": "string"
        },
        {
            "name": "rightOrderCount",
            "baseName": "right_order_count",
            "type": "number"
        },
        {
            "name": "rightOrderCountFormatted",
            "baseName": "right_order_count_formatted",
            "type": "string"
        },
        {
            "name": "rightProfit",
            "baseName": "right_profit",
            "type": "number"
        },
        {
            "name": "rightProfitFormatted",
            "baseName": "right_profit_formatted",
            "type": "string"
        },
        {
            "name": "rightRevenue",
            "baseName": "right_revenue",
            "type": "number"
        },
        {
            "name": "rightRevenueFormatted",
            "baseName": "right_revenue_formatted",
            "type": "string"
        }
    ];
    return EmailStepStat;
}());
exports.EmailStepStat = EmailStepStat;
var EmailStepStatRequest = (function () {
    function EmailStepStatRequest() {
    }
    EmailStepStatRequest.getAttributeTypeMap = function () {
        return EmailStepStatRequest.attributeTypeMap;
    };
    EmailStepStatRequest.discriminator = undefined;
    EmailStepStatRequest.attributeTypeMap = [
        {
            "name": "commseqStepUuids",
            "baseName": "commseq_step_uuids",
            "type": "Array<string>"
        },
        {
            "name": "days",
            "baseName": "days",
            "type": "number"
        }
    ];
    return EmailStepStatRequest;
}());
exports.EmailStepStatRequest = EmailStepStatRequest;
var EmailStepStatResponse = (function () {
    function EmailStepStatResponse() {
    }
    EmailStepStatResponse.getAttributeTypeMap = function () {
        return EmailStepStatResponse.attributeTypeMap;
    };
    EmailStepStatResponse.discriminator = undefined;
    EmailStepStatResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "Array<EmailStepStat>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailStepStatResponse;
}());
exports.EmailStepStatResponse = EmailStepStatResponse;
var EmailStepWaitingRequest = (function () {
    function EmailStepWaitingRequest() {
    }
    EmailStepWaitingRequest.getAttributeTypeMap = function () {
        return EmailStepWaitingRequest.attributeTypeMap;
    };
    EmailStepWaitingRequest.discriminator = undefined;
    EmailStepWaitingRequest.attributeTypeMap = [
        {
            "name": "commseqStepUuids",
            "baseName": "commseq_step_uuids",
            "type": "Array<string>"
        }
    ];
    return EmailStepWaitingRequest;
}());
exports.EmailStepWaitingRequest = EmailStepWaitingRequest;
var EmailStepWaitingResponse = (function () {
    function EmailStepWaitingResponse() {
    }
    EmailStepWaitingResponse.getAttributeTypeMap = function () {
        return EmailStepWaitingResponse.attributeTypeMap;
    };
    EmailStepWaitingResponse.discriminator = undefined;
    EmailStepWaitingResponse.attributeTypeMap = [
        {
            "name": "stepWaitings",
            "baseName": "step_waitings",
            "type": "Array<StepWaiting>"
        }
    ];
    return EmailStepWaitingResponse;
}());
exports.EmailStepWaitingResponse = EmailStepWaitingResponse;
var EmailTemplate = (function () {
    function EmailTemplate() {
    }
    EmailTemplate.getAttributeTypeMap = function () {
        return EmailTemplate.attributeTypeMap;
    };
    EmailTemplate.discriminator = undefined;
    EmailTemplate.attributeTypeMap = [
        {
            "name": "containerCjson",
            "baseName": "container_cjson",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "emailTemplateOid",
            "baseName": "email_template_oid",
            "type": "number"
        },
        {
            "name": "emailTemplateVmPath",
            "baseName": "email_template_vm_path",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "previewAmazonListingKey",
            "baseName": "preview_amazon_listing_key",
            "type": "string"
        },
        {
            "name": "sortOrder",
            "baseName": "sort_order",
            "type": "number"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "system",
            "baseName": "system",
            "type": "boolean"
        },
        {
            "name": "triggerType",
            "baseName": "trigger_type",
            "type": "string"
        }
    ];
    return EmailTemplate;
}());
exports.EmailTemplate = EmailTemplate;
var EmailTemplatesResponse = (function () {
    function EmailTemplatesResponse() {
    }
    EmailTemplatesResponse.getAttributeTypeMap = function () {
        return EmailTemplatesResponse.attributeTypeMap;
    };
    EmailTemplatesResponse.discriminator = undefined;
    EmailTemplatesResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "templates",
            "baseName": "templates",
            "type": "Array<EmailTemplate>"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailTemplatesResponse;
}());
exports.EmailTemplatesResponse = EmailTemplatesResponse;
var EmailThirdPartyList = (function () {
    function EmailThirdPartyList() {
    }
    EmailThirdPartyList.getAttributeTypeMap = function () {
        return EmailThirdPartyList.attributeTypeMap;
    };
    EmailThirdPartyList.discriminator = undefined;
    EmailThirdPartyList.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return EmailThirdPartyList;
}());
exports.EmailThirdPartyList = EmailThirdPartyList;
var EmailThirdPartyListImportRequest = (function () {
    function EmailThirdPartyListImportRequest() {
    }
    EmailThirdPartyListImportRequest.getAttributeTypeMap = function () {
        return EmailThirdPartyListImportRequest.attributeTypeMap;
    };
    EmailThirdPartyListImportRequest.discriminator = undefined;
    EmailThirdPartyListImportRequest.attributeTypeMap = [
        {
            "name": "providers",
            "baseName": "providers",
            "type": "Array<EmailThirdPartyProvider>"
        }
    ];
    return EmailThirdPartyListImportRequest;
}());
exports.EmailThirdPartyListImportRequest = EmailThirdPartyListImportRequest;
var EmailThirdPartyProvider = (function () {
    function EmailThirdPartyProvider() {
    }
    EmailThirdPartyProvider.getAttributeTypeMap = function () {
        return EmailThirdPartyProvider.attributeTypeMap;
    };
    EmailThirdPartyProvider.discriminator = undefined;
    EmailThirdPartyProvider.attributeTypeMap = [
        {
            "name": "connectUrl",
            "baseName": "connect_url",
            "type": "string"
        },
        {
            "name": "listCount",
            "baseName": "list_count",
            "type": "number"
        },
        {
            "name": "lists",
            "baseName": "lists",
            "type": "Array<EmailThirdPartyList>"
        },
        {
            "name": "logoUrl",
            "baseName": "logo_url",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return EmailThirdPartyProvider;
}());
exports.EmailThirdPartyProvider = EmailThirdPartyProvider;
var EmailThirdPartyProvidersResponse = (function () {
    function EmailThirdPartyProvidersResponse() {
    }
    EmailThirdPartyProvidersResponse.getAttributeTypeMap = function () {
        return EmailThirdPartyProvidersResponse.attributeTypeMap;
    };
    EmailThirdPartyProvidersResponse.discriminator = undefined;
    EmailThirdPartyProvidersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "providers",
            "baseName": "providers",
            "type": "Array<EmailThirdPartyProvider>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return EmailThirdPartyProvidersResponse;
}());
exports.EmailThirdPartyProvidersResponse = EmailThirdPartyProvidersResponse;
var ErrorResponse = (function () {
    function ErrorResponse() {
    }
    ErrorResponse.getAttributeTypeMap = function () {
        return ErrorResponse.attributeTypeMap;
    };
    ErrorResponse.discriminator = undefined;
    ErrorResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ErrorResponse;
}());
exports.ErrorResponse = ErrorResponse;
var Experiment = (function () {
    function Experiment() {
    }
    Experiment.getAttributeTypeMap = function () {
        return Experiment.attributeTypeMap;
    };
    Experiment.discriminator = undefined;
    Experiment.attributeTypeMap = [
        {
            "name": "containerId",
            "baseName": "container_id",
            "type": "string"
        },
        {
            "name": "durationDays",
            "baseName": "duration_days",
            "type": "number"
        },
        {
            "name": "endDts",
            "baseName": "end_dts",
            "type": "string"
        },
        {
            "name": "equalWeighting",
            "baseName": "equal_weighting",
            "type": "boolean"
        },
        {
            "name": "experimentType",
            "baseName": "experiment_type",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "notes",
            "baseName": "notes",
            "type": "string"
        },
        {
            "name": "objective",
            "baseName": "objective",
            "type": "string"
        },
        {
            "name": "objectiveParameter",
            "baseName": "objective_parameter",
            "type": "string"
        },
        {
            "name": "optimizationType",
            "baseName": "optimization_type",
            "type": "string"
        },
        {
            "name": "sessionCount",
            "baseName": "session_count",
            "type": "number"
        },
        {
            "name": "startDts",
            "baseName": "start_dts",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Experiment.StatusEnum"
        },
        {
            "name": "storefrontExperimentOid",
            "baseName": "storefront_experiment_oid",
            "type": "number"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string"
        },
        {
            "name": "variations",
            "baseName": "variations",
            "type": "Array<ExperimentVariation>"
        }
    ];
    return Experiment;
}());
exports.Experiment = Experiment;
(function (Experiment) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Running"] = 'Running'] = "Running";
        StatusEnum[StatusEnum["Ended"] = 'Ended'] = "Ended";
        StatusEnum[StatusEnum["Deleted"] = 'Deleted'] = "Deleted";
    })(StatusEnum = Experiment.StatusEnum || (Experiment.StatusEnum = {}));
})(Experiment = exports.Experiment || (exports.Experiment = {}));
exports.Experiment = Experiment;
var ExperimentResponse = (function () {
    function ExperimentResponse() {
    }
    ExperimentResponse.getAttributeTypeMap = function () {
        return ExperimentResponse.attributeTypeMap;
    };
    ExperimentResponse.discriminator = undefined;
    ExperimentResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "experiment",
            "baseName": "experiment",
            "type": "Experiment"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ExperimentResponse;
}());
exports.ExperimentResponse = ExperimentResponse;
var ExperimentVariation = (function () {
    function ExperimentVariation() {
    }
    ExperimentVariation.getAttributeTypeMap = function () {
        return ExperimentVariation.attributeTypeMap;
    };
    ExperimentVariation.discriminator = undefined;
    ExperimentVariation.attributeTypeMap = [
        {
            "name": "addToCartCount",
            "baseName": "add_to_cart_count",
            "type": "number"
        },
        {
            "name": "averageDurationSeconds",
            "baseName": "average_duration_seconds",
            "type": "number"
        },
        {
            "name": "averageObjectivePerSession",
            "baseName": "average_objective_per_session",
            "type": "number"
        },
        {
            "name": "averageOrderValue",
            "baseName": "average_order_value",
            "type": "number"
        },
        {
            "name": "bounceCount",
            "baseName": "bounce_count",
            "type": "number"
        },
        {
            "name": "conversionRate",
            "baseName": "conversion_rate",
            "type": "number"
        },
        {
            "name": "durationSecondsSum",
            "baseName": "duration_seconds_sum",
            "type": "number"
        },
        {
            "name": "eventCount",
            "baseName": "event_count",
            "type": "number"
        },
        {
            "name": "initiateCheckoutCount",
            "baseName": "initiate_checkout_count",
            "type": "number"
        },
        {
            "name": "orderCount",
            "baseName": "order_count",
            "type": "number"
        },
        {
            "name": "originalTrafficPercentage",
            "baseName": "original_traffic_percentage",
            "type": "number"
        },
        {
            "name": "pageViewCount",
            "baseName": "page_view_count",
            "type": "number"
        },
        {
            "name": "revenue",
            "baseName": "revenue",
            "type": "number"
        },
        {
            "name": "sessionCount",
            "baseName": "session_count",
            "type": "number"
        },
        {
            "name": "trafficPercentage",
            "baseName": "traffic_percentage",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "variationName",
            "baseName": "variation_name",
            "type": "string"
        },
        {
            "name": "variationNumber",
            "baseName": "variation_number",
            "type": "number"
        },
        {
            "name": "winner",
            "baseName": "winner",
            "type": "boolean"
        }
    ];
    return ExperimentVariation;
}());
exports.ExperimentVariation = ExperimentVariation;
var ExperimentsResponse = (function () {
    function ExperimentsResponse() {
    }
    ExperimentsResponse.getAttributeTypeMap = function () {
        return ExperimentsResponse.attributeTypeMap;
    };
    ExperimentsResponse.discriminator = undefined;
    ExperimentsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "experiments",
            "baseName": "experiments",
            "type": "Array<Experiment>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ExperimentsResponse;
}());
exports.ExperimentsResponse = ExperimentsResponse;
var FulfillmentInventory = (function () {
    function FulfillmentInventory() {
    }
    FulfillmentInventory.getAttributeTypeMap = function () {
        return FulfillmentInventory.attributeTypeMap;
    };
    FulfillmentInventory.discriminator = undefined;
    FulfillmentInventory.attributeTypeMap = [
        {
            "name": "itemId",
            "baseName": "itemId",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }
    ];
    return FulfillmentInventory;
}());
exports.FulfillmentInventory = FulfillmentInventory;
var FulfillmentShipment = (function () {
    function FulfillmentShipment() {
    }
    FulfillmentShipment.getAttributeTypeMap = function () {
        return FulfillmentShipment.attributeTypeMap;
    };
    FulfillmentShipment.discriminator = undefined;
    FulfillmentShipment.attributeTypeMap = [
        {
            "name": "fulfillmentFee",
            "baseName": "fulfillment_fee",
            "type": "number"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "packageCost",
            "baseName": "package_cost",
            "type": "number"
        },
        {
            "name": "shippingCost",
            "baseName": "shipping_cost",
            "type": "number"
        },
        {
            "name": "trackingNumbers",
            "baseName": "tracking_numbers",
            "type": "Array<string>"
        }
    ];
    return FulfillmentShipment;
}());
exports.FulfillmentShipment = FulfillmentShipment;
var GeocodeRequest = (function () {
    function GeocodeRequest() {
    }
    GeocodeRequest.getAttributeTypeMap = function () {
        return GeocodeRequest.attributeTypeMap;
    };
    GeocodeRequest.discriminator = undefined;
    GeocodeRequest.attributeTypeMap = [
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        }
    ];
    return GeocodeRequest;
}());
exports.GeocodeRequest = GeocodeRequest;
var GeocodeResponse = (function () {
    function GeocodeResponse() {
    }
    GeocodeResponse.getAttributeTypeMap = function () {
        return GeocodeResponse.attributeTypeMap;
    };
    GeocodeResponse.discriminator = undefined;
    GeocodeResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "number"
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "number"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return GeocodeResponse;
}());
exports.GeocodeResponse = GeocodeResponse;
var Group = (function () {
    function Group() {
    }
    Group.getAttributeTypeMap = function () {
        return Group.attributeTypeMap;
    };
    Group.discriminator = undefined;
    Group.attributeTypeMap = [
        {
            "name": "groupOid",
            "baseName": "group_oid",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<Notification>"
        },
        {
            "name": "permissions",
            "baseName": "permissions",
            "type": "Array<Permission>"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<GroupUserMembership>"
        }
    ];
    return Group;
}());
exports.Group = Group;
var GroupResponse = (function () {
    function GroupResponse() {
    }
    GroupResponse.getAttributeTypeMap = function () {
        return GroupResponse.attributeTypeMap;
    };
    GroupResponse.discriminator = undefined;
    GroupResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "Group"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return GroupResponse;
}());
exports.GroupResponse = GroupResponse;
var GroupUserMembership = (function () {
    function GroupUserMembership() {
    }
    GroupUserMembership.getAttributeTypeMap = function () {
        return GroupUserMembership.attributeTypeMap;
    };
    GroupUserMembership.discriminator = undefined;
    GroupUserMembership.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "fullName",
            "baseName": "fullName",
            "type": "string"
        },
        {
            "name": "login",
            "baseName": "login",
            "type": "string"
        },
        {
            "name": "member",
            "baseName": "member",
            "type": "boolean"
        },
        {
            "name": "userId",
            "baseName": "user_id",
            "type": "number"
        }
    ];
    return GroupUserMembership;
}());
exports.GroupUserMembership = GroupUserMembership;
var GroupsResponse = (function () {
    function GroupsResponse() {
    }
    GroupsResponse.getAttributeTypeMap = function () {
        return GroupsResponse.attributeTypeMap;
    };
    GroupsResponse.discriminator = undefined;
    GroupsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<Group>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return GroupsResponse;
}());
exports.GroupsResponse = GroupsResponse;
var HTTPHeader = (function () {
    function HTTPHeader() {
    }
    HTTPHeader.getAttributeTypeMap = function () {
        return HTTPHeader.attributeTypeMap;
    };
    HTTPHeader.discriminator = undefined;
    HTTPHeader.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return HTTPHeader;
}());
exports.HTTPHeader = HTTPHeader;
var Item = (function () {
    function Item() {
    }
    Item.getAttributeTypeMap = function () {
        return Item.attributeTypeMap;
    };
    Item.discriminator = undefined;
    Item.attributeTypeMap = [
        {
            "name": "accounting",
            "baseName": "accounting",
            "type": "ItemAccounting"
        },
        {
            "name": "amember",
            "baseName": "amember",
            "type": "ItemAmember"
        },
        {
            "name": "autoOrder",
            "baseName": "auto_order",
            "type": "ItemAutoOrder"
        },
        {
            "name": "ccbill",
            "baseName": "ccbill",
            "type": "ItemCCBill"
        },
        {
            "name": "channelPartnerMappings",
            "baseName": "channelPartnerMappings",
            "type": "Array<ItemChannelPartnerMapping>"
        },
        {
            "name": "chargeback",
            "baseName": "chargeback",
            "type": "ItemChargeback"
        },
        {
            "name": "checkout",
            "baseName": "checkout",
            "type": "ItemCheckout"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "ItemContent"
        },
        {
            "name": "creationDts",
            "baseName": "creation_dts",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "descriptionTranslatedTextInstanceOid",
            "baseName": "description_translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "digitalDelivery",
            "baseName": "digital_delivery",
            "type": "ItemDigitalDelivery"
        },
        {
            "name": "ebay",
            "baseName": "ebay",
            "type": "ItemEbay"
        },
        {
            "name": "emailNotifications",
            "baseName": "email_notifications",
            "type": "ItemEmailNotifications"
        },
        {
            "name": "enrollment123",
            "baseName": "enrollment123",
            "type": "ItemEnrollment123"
        },
        {
            "name": "giftCertificate",
            "baseName": "gift_certificate",
            "type": "ItemGiftCertificate"
        },
        {
            "name": "googleProductSearch",
            "baseName": "google_product_search",
            "type": "ItemGoogleProductSearch"
        },
        {
            "name": "identifiers",
            "baseName": "identifiers",
            "type": "ItemIdentifiers"
        },
        {
            "name": "inactive",
            "baseName": "inactive",
            "type": "boolean"
        },
        {
            "name": "instantPaymentNotifications",
            "baseName": "instant_payment_notifications",
            "type": "ItemInstantPaymentNotifications"
        },
        {
            "name": "internal",
            "baseName": "internal",
            "type": "ItemInternal"
        },
        {
            "name": "kit",
            "baseName": "kit",
            "type": "boolean"
        },
        {
            "name": "kitComponentOnly",
            "baseName": "kit_component_only",
            "type": "boolean"
        },
        {
            "name": "kitDefinition",
            "baseName": "kit_definition",
            "type": "ItemKitDefinition"
        },
        {
            "name": "lastModifiedDts",
            "baseName": "last_modified_dts",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "merchantItemId",
            "baseName": "merchant_item_id",
            "type": "string"
        },
        {
            "name": "merchantItemOid",
            "baseName": "merchant_item_oid",
            "type": "number"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<ItemOption>"
        },
        {
            "name": "parentCategoryId",
            "baseName": "parent_category_id",
            "type": "number"
        },
        {
            "name": "parentCategoryPath",
            "baseName": "parent_category_path",
            "type": "string"
        },
        {
            "name": "paymentProcessing",
            "baseName": "payment_processing",
            "type": "ItemPaymentProcessing"
        },
        {
            "name": "physical",
            "baseName": "physical",
            "type": "ItemPhysical"
        },
        {
            "name": "pricing",
            "baseName": "pricing",
            "type": "ItemPricing"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<ItemProperty>"
        },
        {
            "name": "realtimePricing",
            "baseName": "realtime_pricing",
            "type": "ItemRealtimePricing"
        },
        {
            "name": "recommendReplenishmentDays",
            "baseName": "recommend_replenishment_days",
            "type": "number"
        },
        {
            "name": "related",
            "baseName": "related",
            "type": "ItemRelated"
        },
        {
            "name": "reporting",
            "baseName": "reporting",
            "type": "ItemReporting"
        },
        {
            "name": "restriction",
            "baseName": "restriction",
            "type": "ItemRestriction"
        },
        {
            "name": "revguard",
            "baseName": "revguard",
            "type": "ItemRevguard"
        },
        {
            "name": "reviews",
            "baseName": "reviews",
            "type": "ItemReviews"
        },
        {
            "name": "salesforce",
            "baseName": "salesforce",
            "type": "ItemSalesforce"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "ItemShipping"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "ItemTags"
        },
        {
            "name": "tax",
            "baseName": "tax",
            "type": "ItemTax"
        },
        {
            "name": "thirdPartyEmailMarketing",
            "baseName": "third_party_email_marketing",
            "type": "Array<ItemThirdPartyEmailMarketing>"
        },
        {
            "name": "variantItems",
            "baseName": "variant_items",
            "type": "Array<ItemVariantItem>"
        },
        {
            "name": "variations",
            "baseName": "variations",
            "type": "Array<ItemVariation>"
        },
        {
            "name": "wishlistMember",
            "baseName": "wishlist_member",
            "type": "ItemWishlistMember"
        }
    ];
    return Item;
}());
exports.Item = Item;
var ItemAccounting = (function () {
    function ItemAccounting() {
    }
    ItemAccounting.getAttributeTypeMap = function () {
        return ItemAccounting.attributeTypeMap;
    };
    ItemAccounting.discriminator = undefined;
    ItemAccounting.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "qbClass",
            "baseName": "qb_class",
            "type": "string"
        }
    ];
    return ItemAccounting;
}());
exports.ItemAccounting = ItemAccounting;
var ItemAmember = (function () {
    function ItemAmember() {
    }
    ItemAmember.getAttributeTypeMap = function () {
        return ItemAmember.attributeTypeMap;
    };
    ItemAmember.discriminator = undefined;
    ItemAmember.attributeTypeMap = [
        {
            "name": "amemberPaymentDurationDays",
            "baseName": "amember_payment_duration_days",
            "type": "number"
        },
        {
            "name": "amemberProductId",
            "baseName": "amember_product_id",
            "type": "string"
        }
    ];
    return ItemAmember;
}());
exports.ItemAmember = ItemAmember;
var ItemAutoOrder = (function () {
    function ItemAutoOrder() {
    }
    ItemAutoOrder.getAttributeTypeMap = function () {
        return ItemAutoOrder.attributeTypeMap;
    };
    ItemAutoOrder.discriminator = undefined;
    ItemAutoOrder.attributeTypeMap = [
        {
            "name": "authFutureAmount",
            "baseName": "auth_future_amount",
            "type": "number"
        },
        {
            "name": "authTestAmount",
            "baseName": "auth_test_amount",
            "type": "number"
        },
        {
            "name": "autoOrderCancelItemId",
            "baseName": "auto_order_cancel_item_id",
            "type": "string"
        },
        {
            "name": "autoOrderCancelItemOid",
            "baseName": "auto_order_cancel_item_oid",
            "type": "number"
        },
        {
            "name": "autoOrderDowngradeItems",
            "baseName": "auto_order_downgrade_items",
            "type": "Array<string>"
        },
        {
            "name": "autoOrderPaused",
            "baseName": "auto_order_paused",
            "type": "boolean"
        },
        {
            "name": "autoOrderSchedules",
            "baseName": "auto_order_schedules",
            "type": "Array<string>"
        },
        {
            "name": "autoOrderUpgradeItems",
            "baseName": "auto_order_upgrade_items",
            "type": "Array<string>"
        },
        {
            "name": "autoOrderUpsell",
            "baseName": "auto_order_upsell",
            "type": "boolean"
        },
        {
            "name": "autoOrderUpsellNoEasyCancel",
            "baseName": "auto_order_upsell_no_easy_cancel",
            "type": "boolean"
        },
        {
            "name": "autoOrderUpsellOnePerCustomer",
            "baseName": "auto_order_upsell_one_per_customer",
            "type": "boolean"
        },
        {
            "name": "autoOrderable",
            "baseName": "auto_orderable",
            "type": "boolean"
        },
        {
            "name": "cancelOtherAutoOrders",
            "baseName": "cancel_other_auto_orders",
            "type": "boolean"
        },
        {
            "name": "freeShippingAutoOrder",
            "baseName": "free_shipping_auto_order",
            "type": "boolean"
        },
        {
            "name": "refundOtherAutoOrders",
            "baseName": "refund_other_auto_orders",
            "type": "boolean"
        },
        {
            "name": "steps",
            "baseName": "steps",
            "type": "Array<ItemAutoOrderStep>"
        }
    ];
    return ItemAutoOrder;
}());
exports.ItemAutoOrder = ItemAutoOrder;
var ItemAutoOrderStep = (function () {
    function ItemAutoOrderStep() {
    }
    ItemAutoOrderStep.getAttributeTypeMap = function () {
        return ItemAutoOrderStep.attributeTypeMap;
    };
    ItemAutoOrderStep.discriminator = undefined;
    ItemAutoOrderStep.attributeTypeMap = [
        {
            "name": "arbitraryScheduleDays",
            "baseName": "arbitrary_schedule_days",
            "type": "number"
        },
        {
            "name": "arbitraryUnitCost",
            "baseName": "arbitrary_unit_cost",
            "type": "number"
        },
        {
            "name": "arbitraryUnitCostSchedules",
            "baseName": "arbitrary_unit_cost_schedules",
            "type": "Array<ItemAutoOrderStepArbitraryUnitCostSchedule>"
        },
        {
            "name": "grandfatherPricing",
            "baseName": "grandfather_pricing",
            "type": "Array<ItemAutoOrderStepGrandfatherPricing>"
        },
        {
            "name": "managedBy",
            "baseName": "managed_by",
            "type": "string"
        },
        {
            "name": "pauseDays",
            "baseName": "pause_days",
            "type": "number"
        },
        {
            "name": "pauseUntilDate",
            "baseName": "pause_until_date",
            "type": "string"
        },
        {
            "name": "preshipmentNoticeDays",
            "baseName": "preshipment_notice_days",
            "type": "number"
        },
        {
            "name": "recurringMerchantItemId",
            "baseName": "recurring_merchant_item_id",
            "type": "string"
        },
        {
            "name": "recurringMerchantItemOid",
            "baseName": "recurring_merchant_item_oid",
            "type": "number"
        },
        {
            "name": "repeatCount",
            "baseName": "repeat_count",
            "type": "number"
        },
        {
            "name": "schedule",
            "baseName": "schedule",
            "type": "string"
        },
        {
            "name": "subscribeEmailListName",
            "baseName": "subscribe_email_list_name",
            "type": "string"
        },
        {
            "name": "subscribeEmailListOid",
            "baseName": "subscribe_email_list_oid",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ItemAutoOrderStep.TypeEnum"
        }
    ];
    return ItemAutoOrderStep;
}());
exports.ItemAutoOrderStep = ItemAutoOrderStep;
(function (ItemAutoOrderStep) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Item"] = 'item'] = "Item";
        TypeEnum[TypeEnum["Pause"] = 'pause'] = "Pause";
    })(TypeEnum = ItemAutoOrderStep.TypeEnum || (ItemAutoOrderStep.TypeEnum = {}));
})(ItemAutoOrderStep = exports.ItemAutoOrderStep || (exports.ItemAutoOrderStep = {}));
exports.ItemAutoOrderStep = ItemAutoOrderStep;
var ItemAutoOrderStepArbitraryUnitCostSchedule = (function () {
    function ItemAutoOrderStepArbitraryUnitCostSchedule() {
    }
    ItemAutoOrderStepArbitraryUnitCostSchedule.getAttributeTypeMap = function () {
        return ItemAutoOrderStepArbitraryUnitCostSchedule.attributeTypeMap;
    };
    ItemAutoOrderStepArbitraryUnitCostSchedule.discriminator = undefined;
    ItemAutoOrderStepArbitraryUnitCostSchedule.attributeTypeMap = [
        {
            "name": "arbitraryUnitCost",
            "baseName": "arbitrary_unit_cost",
            "type": "number"
        },
        {
            "name": "retryDays",
            "baseName": "retry_days",
            "type": "number"
        }
    ];
    return ItemAutoOrderStepArbitraryUnitCostSchedule;
}());
exports.ItemAutoOrderStepArbitraryUnitCostSchedule = ItemAutoOrderStepArbitraryUnitCostSchedule;
var ItemAutoOrderStepGrandfatherPricing = (function () {
    function ItemAutoOrderStepGrandfatherPricing() {
    }
    ItemAutoOrderStepGrandfatherPricing.getAttributeTypeMap = function () {
        return ItemAutoOrderStepGrandfatherPricing.attributeTypeMap;
    };
    ItemAutoOrderStepGrandfatherPricing.discriminator = undefined;
    ItemAutoOrderStepGrandfatherPricing.attributeTypeMap = [
        {
            "name": "onOrBeforeDate",
            "baseName": "on_or_before_date",
            "type": "string"
        },
        {
            "name": "unitCost",
            "baseName": "unit_cost",
            "type": "number"
        }
    ];
    return ItemAutoOrderStepGrandfatherPricing;
}());
exports.ItemAutoOrderStepGrandfatherPricing = ItemAutoOrderStepGrandfatherPricing;
var ItemCCBill = (function () {
    function ItemCCBill() {
    }
    ItemCCBill.getAttributeTypeMap = function () {
        return ItemCCBill.attributeTypeMap;
    };
    ItemCCBill.discriminator = undefined;
    ItemCCBill.attributeTypeMap = [
        {
            "name": "ccbillAllowedCurrencies",
            "baseName": "ccbill_allowed_currencies",
            "type": "string"
        },
        {
            "name": "ccbillAllowedTypes",
            "baseName": "ccbill_allowed_types",
            "type": "string"
        },
        {
            "name": "ccbillCurrencyCode",
            "baseName": "ccbill_currency_code",
            "type": "string"
        },
        {
            "name": "ccbillFormName",
            "baseName": "ccbill_form_name",
            "type": "string"
        },
        {
            "name": "ccbillSubaccountId",
            "baseName": "ccbill_subaccount_id",
            "type": "string"
        },
        {
            "name": "ccbillSubscriptionTypeId",
            "baseName": "ccbill_subscription_type_id",
            "type": "string"
        }
    ];
    return ItemCCBill;
}());
exports.ItemCCBill = ItemCCBill;
var ItemChannelPartnerMapping = (function () {
    function ItemChannelPartnerMapping() {
    }
    ItemChannelPartnerMapping.getAttributeTypeMap = function () {
        return ItemChannelPartnerMapping.attributeTypeMap;
    };
    ItemChannelPartnerMapping.discriminator = undefined;
    ItemChannelPartnerMapping.attributeTypeMap = [
        {
            "name": "barcodeUa",
            "baseName": "barcode_ua",
            "type": "string"
        },
        {
            "name": "barcodeUc",
            "baseName": "barcode_uc",
            "type": "string"
        },
        {
            "name": "barcodeUi",
            "baseName": "barcode_ui",
            "type": "string"
        },
        {
            "name": "barcodeUk",
            "baseName": "barcode_uk",
            "type": "string"
        },
        {
            "name": "buyerCatalogNumber",
            "baseName": "buyer_catalog_number",
            "type": "string"
        },
        {
            "name": "buyerDpci",
            "baseName": "buyer_dpci",
            "type": "string"
        },
        {
            "name": "buyerItemNumber",
            "baseName": "buyer_item_number",
            "type": "string"
        },
        {
            "name": "channelPartnerCode",
            "baseName": "channel_partner_code",
            "type": "string"
        },
        {
            "name": "channelPartnerOid",
            "baseName": "channel_partner_oid",
            "type": "number"
        },
        {
            "name": "fromItemId",
            "baseName": "from_item_id",
            "type": "string"
        },
        {
            "name": "fromSku",
            "baseName": "from_sku",
            "type": "string"
        },
        {
            "name": "mutuallyDefinedNumber",
            "baseName": "mutually_defined_number",
            "type": "string"
        },
        {
            "name": "quantityRatioCp",
            "baseName": "quantity_ratio_cp",
            "type": "number"
        },
        {
            "name": "quantityRatioUc",
            "baseName": "quantity_ratio_uc",
            "type": "number"
        },
        {
            "name": "sku",
            "baseName": "sku",
            "type": "string"
        },
        {
            "name": "unitOfMeasure",
            "baseName": "unit_of_measure",
            "type": "string"
        },
        {
            "name": "vendorNumber",
            "baseName": "vendor_number",
            "type": "string"
        },
        {
            "name": "vendorStyleNumber",
            "baseName": "vendor_style_number",
            "type": "string"
        }
    ];
    return ItemChannelPartnerMapping;
}());
exports.ItemChannelPartnerMapping = ItemChannelPartnerMapping;
var ItemChargeback = (function () {
    function ItemChargeback() {
    }
    ItemChargeback.getAttributeTypeMap = function () {
        return ItemChargeback.attributeTypeMap;
    };
    ItemChargeback.discriminator = undefined;
    ItemChargeback.attributeTypeMap = [
        {
            "name": "addendums",
            "baseName": "addendums",
            "type": "Array<ItemChargebackAddendum>"
        },
        {
            "name": "adjustmentRequests",
            "baseName": "adjustment_requests",
            "type": "Array<ItemChargebackAdjustmentRequest>"
        }
    ];
    return ItemChargeback;
}());
exports.ItemChargeback = ItemChargeback;
var ItemChargebackAddendum = (function () {
    function ItemChargebackAddendum() {
    }
    ItemChargebackAddendum.getAttributeTypeMap = function () {
        return ItemChargebackAddendum.attributeTypeMap;
    };
    ItemChargebackAddendum.discriminator = undefined;
    ItemChargebackAddendum.attributeTypeMap = [
        {
            "name": "chargebackAddendumOid",
            "baseName": "chargeback_addendum_oid",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "fileSize",
            "baseName": "file_size",
            "type": "number"
        },
        {
            "name": "pages",
            "baseName": "pages",
            "type": "number"
        }
    ];
    return ItemChargebackAddendum;
}());
exports.ItemChargebackAddendum = ItemChargebackAddendum;
var ItemChargebackAdjustmentRequest = (function () {
    function ItemChargebackAdjustmentRequest() {
    }
    ItemChargebackAdjustmentRequest.getAttributeTypeMap = function () {
        return ItemChargebackAdjustmentRequest.attributeTypeMap;
    };
    ItemChargebackAdjustmentRequest.discriminator = undefined;
    ItemChargebackAdjustmentRequest.attributeTypeMap = [
        {
            "name": "chargebackAdjustmentRequestOid",
            "baseName": "chargeback_adjustment_request_oid",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "reasonCode",
            "baseName": "reason_code",
            "type": "string"
        }
    ];
    return ItemChargebackAdjustmentRequest;
}());
exports.ItemChargebackAdjustmentRequest = ItemChargebackAdjustmentRequest;
var ItemCheckout = (function () {
    function ItemCheckout() {
    }
    ItemCheckout.getAttributeTypeMap = function () {
        return ItemCheckout.attributeTypeMap;
    };
    ItemCheckout.discriminator = undefined;
    ItemCheckout.attributeTypeMap = [
        {
            "name": "suppressBuysafe",
            "baseName": "suppress_buysafe",
            "type": "boolean"
        },
        {
            "name": "terms",
            "baseName": "terms",
            "type": "string"
        },
        {
            "name": "termsTranslatedTextInstanceOid",
            "baseName": "terms_translated_text_instance_oid",
            "type": "number"
        }
    ];
    return ItemCheckout;
}());
exports.ItemCheckout = ItemCheckout;
var ItemContent = (function () {
    function ItemContent() {
    }
    ItemContent.getAttributeTypeMap = function () {
        return ItemContent.attributeTypeMap;
    };
    ItemContent.discriminator = undefined;
    ItemContent.attributeTypeMap = [
        {
            "name": "assignments",
            "baseName": "assignments",
            "type": "Array<ItemContentAssignment>"
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "Array<ItemContentAttribute>"
        },
        {
            "name": "customThankYouUrl",
            "baseName": "custom_thank_you_url",
            "type": "string"
        },
        {
            "name": "excludeFromSearch",
            "baseName": "exclude_from_search",
            "type": "boolean"
        },
        {
            "name": "excludeFromTopSellers",
            "baseName": "exclude_from_top_sellers",
            "type": "boolean"
        },
        {
            "name": "extendedDescription",
            "baseName": "extended_description",
            "type": "string"
        },
        {
            "name": "extendedDescriptionTranslatedTextInstanceOid",
            "baseName": "extended_description_translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "multimedia",
            "baseName": "multimedia",
            "type": "Array<ItemContentMultimedia>"
        },
        {
            "name": "newItem",
            "baseName": "new_item",
            "type": "boolean"
        },
        {
            "name": "newItemEnd",
            "baseName": "new_item_end",
            "type": "string"
        },
        {
            "name": "newItemStart",
            "baseName": "new_item_start",
            "type": "string"
        },
        {
            "name": "viewUrl",
            "baseName": "view_url",
            "type": "string"
        }
    ];
    return ItemContent;
}());
exports.ItemContent = ItemContent;
var ItemContentAssignment = (function () {
    function ItemContentAssignment() {
    }
    ItemContentAssignment.getAttributeTypeMap = function () {
        return ItemContentAssignment.attributeTypeMap;
    };
    ItemContentAssignment.discriminator = undefined;
    ItemContentAssignment.attributeTypeMap = [
        {
            "name": "groupOid",
            "baseName": "group_oid",
            "type": "number"
        },
        {
            "name": "groupPath",
            "baseName": "group_path",
            "type": "string"
        },
        {
            "name": "host",
            "baseName": "host",
            "type": "string"
        },
        {
            "name": "sortOrder",
            "baseName": "sort_order",
            "type": "number"
        },
        {
            "name": "urlPart",
            "baseName": "url_part",
            "type": "string"
        }
    ];
    return ItemContentAssignment;
}());
exports.ItemContentAssignment = ItemContentAssignment;
var ItemContentAttribute = (function () {
    function ItemContentAttribute() {
    }
    ItemContentAttribute.getAttributeTypeMap = function () {
        return ItemContentAttribute.attributeTypeMap;
    };
    ItemContentAttribute.discriminator = undefined;
    ItemContentAttribute.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "translatedTextInstanceOid",
            "baseName": "translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return ItemContentAttribute;
}());
exports.ItemContentAttribute = ItemContentAttribute;
var ItemContentMultimedia = (function () {
    function ItemContentMultimedia() {
    }
    ItemContentMultimedia.getAttributeTypeMap = function () {
        return ItemContentMultimedia.attributeTypeMap;
    };
    ItemContentMultimedia.discriminator = undefined;
    ItemContentMultimedia.attributeTypeMap = [
        {
            "name": "cloudUrl",
            "baseName": "cloud_url",
            "type": "string"
        },
        {
            "name": "cloudUrlExpiration",
            "baseName": "cloud_url_expiration",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "excludeFromGallery",
            "baseName": "exclude_from_gallery",
            "type": "boolean"
        },
        {
            "name": "fileName",
            "baseName": "file_name",
            "type": "string"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "merchantItemMultimediaOid",
            "baseName": "merchant_item_multimedia_oid",
            "type": "number"
        },
        {
            "name": "orphan",
            "baseName": "orphan",
            "type": "boolean"
        },
        {
            "name": "placeholder",
            "baseName": "placeholder",
            "type": "boolean"
        },
        {
            "name": "tempMultimediaOid",
            "baseName": "temp_multimedia_oid",
            "type": "number"
        },
        {
            "name": "thumbnails",
            "baseName": "thumbnails",
            "type": "Array<ItemContentMultimediaThumbnail>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ItemContentMultimedia.TypeEnum"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        }
    ];
    return ItemContentMultimedia;
}());
exports.ItemContentMultimedia = ItemContentMultimedia;
(function (ItemContentMultimedia) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Image"] = 'Image'] = "Image";
        TypeEnum[TypeEnum["PDF"] = 'PDF'] = "PDF";
        TypeEnum[TypeEnum["Text"] = 'Text'] = "Text";
        TypeEnum[TypeEnum["Unknown"] = 'Unknown'] = "Unknown";
        TypeEnum[TypeEnum["Video"] = 'Video'] = "Video";
    })(TypeEnum = ItemContentMultimedia.TypeEnum || (ItemContentMultimedia.TypeEnum = {}));
})(ItemContentMultimedia = exports.ItemContentMultimedia || (exports.ItemContentMultimedia = {}));
exports.ItemContentMultimedia = ItemContentMultimedia;
var ItemContentMultimediaThumbnail = (function () {
    function ItemContentMultimediaThumbnail() {
    }
    ItemContentMultimediaThumbnail.getAttributeTypeMap = function () {
        return ItemContentMultimediaThumbnail.attributeTypeMap;
    };
    ItemContentMultimediaThumbnail.discriminator = undefined;
    ItemContentMultimediaThumbnail.attributeTypeMap = [
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "httpUrl",
            "baseName": "http_url",
            "type": "string"
        },
        {
            "name": "httpsUrl",
            "baseName": "https_url",
            "type": "string"
        },
        {
            "name": "pngFormat",
            "baseName": "png_format",
            "type": "boolean"
        },
        {
            "name": "square",
            "baseName": "square",
            "type": "boolean"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        }
    ];
    return ItemContentMultimediaThumbnail;
}());
exports.ItemContentMultimediaThumbnail = ItemContentMultimediaThumbnail;
var ItemDigitalDelivery = (function () {
    function ItemDigitalDelivery() {
    }
    ItemDigitalDelivery.getAttributeTypeMap = function () {
        return ItemDigitalDelivery.attributeTypeMap;
    };
    ItemDigitalDelivery.discriminator = undefined;
    ItemDigitalDelivery.attributeTypeMap = [
        {
            "name": "activationCodeDescription",
            "baseName": "activation_code_description",
            "type": "string"
        },
        {
            "name": "activationCodeLowWarning",
            "baseName": "activation_code_low_warning",
            "type": "number"
        },
        {
            "name": "activationCodeRealtimeUrl",
            "baseName": "activation_code_realtime_url",
            "type": "string"
        },
        {
            "name": "activationCodeSharedSecret",
            "baseName": "activation_code_shared_secret",
            "type": "string"
        },
        {
            "name": "activationCodeType",
            "baseName": "activation_code_type",
            "type": "string"
        },
        {
            "name": "digitalItems",
            "baseName": "digital_items",
            "type": "Array<ItemDigitalItem>"
        }
    ];
    return ItemDigitalDelivery;
}());
exports.ItemDigitalDelivery = ItemDigitalDelivery;
var ItemDigitalItem = (function () {
    function ItemDigitalItem() {
    }
    ItemDigitalItem.getAttributeTypeMap = function () {
        return ItemDigitalItem.attributeTypeMap;
    };
    ItemDigitalItem.discriminator = undefined;
    ItemDigitalItem.attributeTypeMap = [
        {
            "name": "creationDts",
            "baseName": "creation_dts",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "fileSize",
            "baseName": "file_size",
            "type": "number"
        },
        {
            "name": "mimeType",
            "baseName": "mime_type",
            "type": "string"
        },
        {
            "name": "originalFilename",
            "baseName": "original_filename",
            "type": "string"
        }
    ];
    return ItemDigitalItem;
}());
exports.ItemDigitalItem = ItemDigitalItem;
var ItemEbay = (function () {
    function ItemEbay() {
    }
    ItemEbay.getAttributeTypeMap = function () {
        return ItemEbay.attributeTypeMap;
    };
    ItemEbay.discriminator = undefined;
    ItemEbay.attributeTypeMap = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "categoryId",
            "baseName": "category_id",
            "type": "number"
        },
        {
            "name": "categorySpecifics",
            "baseName": "category_specifics",
            "type": "Array<ItemEbayCategorySpecific>"
        },
        {
            "name": "conditionDescription",
            "baseName": "condition_description",
            "type": "string"
        },
        {
            "name": "conditionId",
            "baseName": "condition_id",
            "type": "number"
        },
        {
            "name": "consecutiveFailures",
            "baseName": "consecutive_failures",
            "type": "number"
        },
        {
            "name": "customCategory1",
            "baseName": "custom_category1",
            "type": "number"
        },
        {
            "name": "customCategory2",
            "baseName": "custom_category2",
            "type": "number"
        },
        {
            "name": "dispatchTimeMax",
            "baseName": "dispatch_time_max",
            "type": "number"
        },
        {
            "name": "domestic1AdditionalCost",
            "baseName": "domestic_1_additional_cost",
            "type": "number"
        },
        {
            "name": "domestic1FirstCost",
            "baseName": "domestic_1_first_cost",
            "type": "number"
        },
        {
            "name": "domestic2AdditionalCost",
            "baseName": "domestic_2_additional_cost",
            "type": "number"
        },
        {
            "name": "domestic2FirstCost",
            "baseName": "domestic_2_first_cost",
            "type": "number"
        },
        {
            "name": "domestic3AdditionalCost",
            "baseName": "domestic_3_additional_cost",
            "type": "number"
        },
        {
            "name": "domestic3FirstCost",
            "baseName": "domestic_3_first_cost",
            "type": "number"
        },
        {
            "name": "domestic4AdditionalCost",
            "baseName": "domestic_4_additional_cost",
            "type": "number"
        },
        {
            "name": "domestic4FirstCost",
            "baseName": "domestic_4_first_cost",
            "type": "number"
        },
        {
            "name": "ebayAuctionId",
            "baseName": "ebay_auction_id",
            "type": "string"
        },
        {
            "name": "ebaySpecificInventory",
            "baseName": "ebay_specific_inventory",
            "type": "number"
        },
        {
            "name": "ebayTemplateName",
            "baseName": "ebay_template_name",
            "type": "string"
        },
        {
            "name": "ebayTemplateOid",
            "baseName": "ebay_template_oid",
            "type": "number"
        },
        {
            "name": "endTime",
            "baseName": "end_time",
            "type": "string"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "freeShippingMethod",
            "baseName": "free_shipping_method",
            "type": "string"
        },
        {
            "name": "international1AdditionalCost",
            "baseName": "international_1_additional_cost",
            "type": "number"
        },
        {
            "name": "international1FirstCost",
            "baseName": "international_1_first_cost",
            "type": "number"
        },
        {
            "name": "international2AdditionalCost",
            "baseName": "international_2_additional_cost",
            "type": "number"
        },
        {
            "name": "international2FirstCost",
            "baseName": "international_2_first_cost",
            "type": "number"
        },
        {
            "name": "international3AdditionalCost",
            "baseName": "international_3_additional_cost",
            "type": "number"
        },
        {
            "name": "international3FirstCost",
            "baseName": "international_3_first_cost",
            "type": "number"
        },
        {
            "name": "international4AdditionalCost",
            "baseName": "international_4_additional_cost",
            "type": "number"
        },
        {
            "name": "international4FirstCost",
            "baseName": "international_4_first_cost",
            "type": "number"
        },
        {
            "name": "lastStatusDts",
            "baseName": "last_status_dts",
            "type": "string"
        },
        {
            "name": "listedDispatchTimeMax",
            "baseName": "listed_dispatch_time_max",
            "type": "number"
        },
        {
            "name": "listedEbayTemplateOid",
            "baseName": "listed_ebay_template_oid",
            "type": "number"
        },
        {
            "name": "listingDts",
            "baseName": "listing_dts",
            "type": "string"
        },
        {
            "name": "listingDuration",
            "baseName": "listing_duration",
            "type": "string"
        },
        {
            "name": "listingPrice",
            "baseName": "listing_price",
            "type": "number"
        },
        {
            "name": "listingPriceOverride",
            "baseName": "listing_price_override",
            "type": "number"
        },
        {
            "name": "listingType",
            "baseName": "listing_type",
            "type": "string"
        },
        {
            "name": "marketplaceAnalysis",
            "baseName": "marketplace_analysis",
            "type": "ItemEbayMarketPlaceAnalysis"
        },
        {
            "name": "marketplaceAnalysisPerform",
            "baseName": "marketplace_analysis_perform",
            "type": "boolean"
        },
        {
            "name": "marketplaceFinalValueFeePercentage",
            "baseName": "marketplace_final_value_fee_percentage",
            "type": "number"
        },
        {
            "name": "marketplaceLastCheckDts",
            "baseName": "marketplace_last_check_dts",
            "type": "string"
        },
        {
            "name": "marketplaceLowest",
            "baseName": "marketplace_lowest",
            "type": "boolean"
        },
        {
            "name": "marketplaceMapViolation",
            "baseName": "marketplace_map_violation",
            "type": "boolean"
        },
        {
            "name": "marketplaceMultiplier",
            "baseName": "marketplace_multiplier",
            "type": "number"
        },
        {
            "name": "marketplaceOtherPrice",
            "baseName": "marketplace_other_price",
            "type": "number"
        },
        {
            "name": "marketplaceOtherSeller",
            "baseName": "marketplace_other_seller",
            "type": "string"
        },
        {
            "name": "marketplaceOtherShipping",
            "baseName": "marketplace_other_shipping",
            "type": "number"
        },
        {
            "name": "marketplaceOtherTotal",
            "baseName": "marketplace_other_total",
            "type": "number"
        },
        {
            "name": "marketplaceOurAdditionalProfitPotential",
            "baseName": "marketplace_our_additional_profit_potential",
            "type": "number"
        },
        {
            "name": "marketplaceOurPrice",
            "baseName": "marketplace_our_price",
            "type": "number"
        },
        {
            "name": "marketplaceOurProfit",
            "baseName": "marketplace_our_profit",
            "type": "number"
        },
        {
            "name": "marketplaceOurShipping",
            "baseName": "marketplace_our_shipping",
            "type": "number"
        },
        {
            "name": "marketplaceOurTotal",
            "baseName": "marketplace_our_total",
            "type": "number"
        },
        {
            "name": "marketplaceOverhead",
            "baseName": "marketplace_overhead",
            "type": "number"
        },
        {
            "name": "marketplaceProfitable",
            "baseName": "marketplace_profitable",
            "type": "boolean"
        },
        {
            "name": "nextAttemptDts",
            "baseName": "next_attempt_dts",
            "type": "string"
        },
        {
            "name": "nextListingDuration",
            "baseName": "next_listing_duration",
            "type": "string"
        },
        {
            "name": "noPromotionalShipping",
            "baseName": "no_promotional_shipping",
            "type": "boolean"
        },
        {
            "name": "packagingHandlingCosts",
            "baseName": "packaging_handling_costs",
            "type": "number"
        },
        {
            "name": "previousEbayAuctionId",
            "baseName": "previous_ebay_auction_id",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "reservePrice",
            "baseName": "reserve_price",
            "type": "number"
        },
        {
            "name": "sendDimensionsAndWeight",
            "baseName": "send_dimensions_and_weight",
            "type": "string"
        },
        {
            "name": "startTime",
            "baseName": "start_time",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "targetDispatchTimeMax",
            "baseName": "target_dispatch_time_max",
            "type": "number"
        }
    ];
    return ItemEbay;
}());
exports.ItemEbay = ItemEbay;
var ItemEbayCategorySpecific = (function () {
    function ItemEbayCategorySpecific() {
    }
    ItemEbayCategorySpecific.getAttributeTypeMap = function () {
        return ItemEbayCategorySpecific.attributeTypeMap;
    };
    ItemEbayCategorySpecific.discriminator = undefined;
    ItemEbayCategorySpecific.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return ItemEbayCategorySpecific;
}());
exports.ItemEbayCategorySpecific = ItemEbayCategorySpecific;
var ItemEbayMarketListing = (function () {
    function ItemEbayMarketListing() {
    }
    ItemEbayMarketListing.getAttributeTypeMap = function () {
        return ItemEbayMarketListing.attributeTypeMap;
    };
    ItemEbayMarketListing.discriminator = undefined;
    ItemEbayMarketListing.attributeTypeMap = [
        {
            "name": "auctionId",
            "baseName": "auction_id",
            "type": "string"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "seller",
            "baseName": "seller",
            "type": "string"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }
    ];
    return ItemEbayMarketListing;
}());
exports.ItemEbayMarketListing = ItemEbayMarketListing;
var ItemEbayMarketPlaceAnalysis = (function () {
    function ItemEbayMarketPlaceAnalysis() {
    }
    ItemEbayMarketPlaceAnalysis.getAttributeTypeMap = function () {
        return ItemEbayMarketPlaceAnalysis.attributeTypeMap;
    };
    ItemEbayMarketPlaceAnalysis.discriminator = undefined;
    ItemEbayMarketPlaceAnalysis.attributeTypeMap = [
        {
            "name": "adjustedPrice",
            "baseName": "adjusted_price",
            "type": "number"
        },
        {
            "name": "adjustedShipping",
            "baseName": "adjusted_shipping",
            "type": "number"
        },
        {
            "name": "adjustedTotal",
            "baseName": "adjusted_total",
            "type": "number"
        },
        {
            "name": "cogs",
            "baseName": "cogs",
            "type": "number"
        },
        {
            "name": "finalValueFee",
            "baseName": "final_value_fee",
            "type": "number"
        },
        {
            "name": "minimumAdvertisedPrice",
            "baseName": "minimum_advertised_price",
            "type": "number"
        },
        {
            "name": "otherListings",
            "baseName": "other_listings",
            "type": "Array<ItemEbayMarketListing>"
        },
        {
            "name": "ourListing",
            "baseName": "our_listing",
            "type": "ItemEbayMarketListing"
        },
        {
            "name": "overhead",
            "baseName": "overhead",
            "type": "number"
        },
        {
            "name": "profitPotential",
            "baseName": "profit_potential",
            "type": "number"
        }
    ];
    return ItemEbayMarketPlaceAnalysis;
}());
exports.ItemEbayMarketPlaceAnalysis = ItemEbayMarketPlaceAnalysis;
var ItemEmailNotifications = (function () {
    function ItemEmailNotifications() {
    }
    ItemEmailNotifications.getAttributeTypeMap = function () {
        return ItemEmailNotifications.attributeTypeMap;
    };
    ItemEmailNotifications.discriminator = undefined;
    ItemEmailNotifications.attributeTypeMap = [
        {
            "name": "skipReceipt",
            "baseName": "skip_receipt",
            "type": "boolean"
        },
        {
            "name": "skipShipmentNotification",
            "baseName": "skip_shipment_notification",
            "type": "boolean"
        }
    ];
    return ItemEmailNotifications;
}());
exports.ItemEmailNotifications = ItemEmailNotifications;
var ItemEnrollment123 = (function () {
    function ItemEnrollment123() {
    }
    ItemEnrollment123.getAttributeTypeMap = function () {
        return ItemEnrollment123.attributeTypeMap;
    };
    ItemEnrollment123.discriminator = undefined;
    ItemEnrollment123.attributeTypeMap = [
        {
            "name": "enrollment123ProductCode",
            "baseName": "enrollment123_product_code",
            "type": "string"
        }
    ];
    return ItemEnrollment123;
}());
exports.ItemEnrollment123 = ItemEnrollment123;
var ItemGiftCertificate = (function () {
    function ItemGiftCertificate() {
    }
    ItemGiftCertificate.getAttributeTypeMap = function () {
        return ItemGiftCertificate.attributeTypeMap;
    };
    ItemGiftCertificate.discriminator = undefined;
    ItemGiftCertificate.attributeTypeMap = [
        {
            "name": "giftCertificate",
            "baseName": "gift_certificate",
            "type": "boolean"
        },
        {
            "name": "giftCertificateExpirationDays",
            "baseName": "gift_certificate_expiration_days",
            "type": "number"
        }
    ];
    return ItemGiftCertificate;
}());
exports.ItemGiftCertificate = ItemGiftCertificate;
var ItemGoogleProductSearch = (function () {
    function ItemGoogleProductSearch() {
    }
    ItemGoogleProductSearch.getAttributeTypeMap = function () {
        return ItemGoogleProductSearch.attributeTypeMap;
    };
    ItemGoogleProductSearch.discriminator = undefined;
    ItemGoogleProductSearch.attributeTypeMap = [
        {
            "name": "adwordsGrouping",
            "baseName": "adwords_grouping",
            "type": "string"
        },
        {
            "name": "adwordsLabel1",
            "baseName": "adwords_label1",
            "type": "string"
        },
        {
            "name": "adwordsLabel2",
            "baseName": "adwords_label2",
            "type": "string"
        },
        {
            "name": "adwordsLabel3",
            "baseName": "adwords_label3",
            "type": "string"
        },
        {
            "name": "adwordsLabel4",
            "baseName": "adwords_label4",
            "type": "string"
        },
        {
            "name": "adwordsLabel5",
            "baseName": "adwords_label5",
            "type": "string"
        },
        {
            "name": "ageGroup",
            "baseName": "age_group",
            "type": "string"
        },
        {
            "name": "availableAtPhysicalStore",
            "baseName": "available_at_physical_store",
            "type": "boolean"
        },
        {
            "name": "bookAuthor",
            "baseName": "book_author",
            "type": "string"
        },
        {
            "name": "bookFormat",
            "baseName": "book_format",
            "type": "string"
        },
        {
            "name": "bookIsbn",
            "baseName": "book_isbn",
            "type": "string"
        },
        {
            "name": "bookPublisher",
            "baseName": "book_publisher",
            "type": "string"
        },
        {
            "name": "categoryDescription",
            "baseName": "category_description",
            "type": "string"
        },
        {
            "name": "color",
            "baseName": "color",
            "type": "string"
        },
        {
            "name": "condition",
            "baseName": "condition",
            "type": "string"
        },
        {
            "name": "customLabel0",
            "baseName": "custom_label0",
            "type": "string"
        },
        {
            "name": "customLabel1",
            "baseName": "custom_label1",
            "type": "string"
        },
        {
            "name": "customLabel2",
            "baseName": "custom_label2",
            "type": "string"
        },
        {
            "name": "customLabel3",
            "baseName": "custom_label3",
            "type": "string"
        },
        {
            "name": "customLabel4",
            "baseName": "custom_label4",
            "type": "string"
        },
        {
            "name": "gender",
            "baseName": "gender",
            "type": "string"
        },
        {
            "name": "googleProductCategory",
            "baseName": "google_product_category",
            "type": "string"
        },
        {
            "name": "musicArtist",
            "baseName": "music_artist",
            "type": "string"
        },
        {
            "name": "musicFormat",
            "baseName": "music_format",
            "type": "string"
        },
        {
            "name": "musicReleaseDate",
            "baseName": "music_release_date",
            "type": "string"
        },
        {
            "name": "omitFromFeed",
            "baseName": "omit_from_feed",
            "type": "boolean"
        },
        {
            "name": "productType",
            "baseName": "product_type",
            "type": "string"
        },
        {
            "name": "promotionId1",
            "baseName": "promotion_id1",
            "type": "string"
        },
        {
            "name": "promotionId10",
            "baseName": "promotion_id10",
            "type": "string"
        },
        {
            "name": "promotionId2",
            "baseName": "promotion_id2",
            "type": "string"
        },
        {
            "name": "promotionId3",
            "baseName": "promotion_id3",
            "type": "string"
        },
        {
            "name": "promotionId4",
            "baseName": "promotion_id4",
            "type": "string"
        },
        {
            "name": "promotionId5",
            "baseName": "promotion_id5",
            "type": "string"
        },
        {
            "name": "promotionId6",
            "baseName": "promotion_id6",
            "type": "string"
        },
        {
            "name": "promotionId7",
            "baseName": "promotion_id7",
            "type": "string"
        },
        {
            "name": "promotionId8",
            "baseName": "promotion_id8",
            "type": "string"
        },
        {
            "name": "promotionId9",
            "baseName": "promotion_id9",
            "type": "string"
        },
        {
            "name": "searchDts",
            "baseName": "search_dts",
            "type": "string"
        },
        {
            "name": "searchLowestPrice",
            "baseName": "search_lowest_price",
            "type": "number"
        },
        {
            "name": "searchLowestUrl",
            "baseName": "search_lowest_url",
            "type": "string"
        },
        {
            "name": "searchPosition",
            "baseName": "search_position",
            "type": "number"
        },
        {
            "name": "shippingLabel",
            "baseName": "shippingLabel",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "string"
        },
        {
            "name": "videoDirector",
            "baseName": "video_director",
            "type": "string"
        },
        {
            "name": "videoFormat",
            "baseName": "video_format",
            "type": "string"
        },
        {
            "name": "videoRating",
            "baseName": "video_rating",
            "type": "string"
        },
        {
            "name": "videoReleaseDate",
            "baseName": "video_release_date",
            "type": "string"
        },
        {
            "name": "videoStarring",
            "baseName": "video_starring",
            "type": "string"
        }
    ];
    return ItemGoogleProductSearch;
}());
exports.ItemGoogleProductSearch = ItemGoogleProductSearch;
var ItemIdentifiers = (function () {
    function ItemIdentifiers() {
    }
    ItemIdentifiers.getAttributeTypeMap = function () {
        return ItemIdentifiers.attributeTypeMap;
    };
    ItemIdentifiers.discriminator = undefined;
    ItemIdentifiers.attributeTypeMap = [
        {
            "name": "barcode",
            "baseName": "barcode",
            "type": "string"
        },
        {
            "name": "manufacturerName",
            "baseName": "manufacturer_name",
            "type": "string"
        },
        {
            "name": "manufacturerSku",
            "baseName": "manufacturer_sku",
            "type": "string"
        },
        {
            "name": "unspsc",
            "baseName": "unspsc",
            "type": "string"
        }
    ];
    return ItemIdentifiers;
}());
exports.ItemIdentifiers = ItemIdentifiers;
var ItemInstantPaymentNotification = (function () {
    function ItemInstantPaymentNotification() {
    }
    ItemInstantPaymentNotification.getAttributeTypeMap = function () {
        return ItemInstantPaymentNotification.attributeTypeMap;
    };
    ItemInstantPaymentNotification.discriminator = undefined;
    ItemInstantPaymentNotification.attributeTypeMap = [
        {
            "name": "postOperation",
            "baseName": "post_operation",
            "type": "boolean"
        },
        {
            "name": "successfulResponseText",
            "baseName": "successful_response_text",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return ItemInstantPaymentNotification;
}());
exports.ItemInstantPaymentNotification = ItemInstantPaymentNotification;
var ItemInstantPaymentNotifications = (function () {
    function ItemInstantPaymentNotifications() {
    }
    ItemInstantPaymentNotifications.getAttributeTypeMap = function () {
        return ItemInstantPaymentNotifications.attributeTypeMap;
    };
    ItemInstantPaymentNotifications.discriminator = undefined;
    ItemInstantPaymentNotifications.attributeTypeMap = [
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<ItemInstantPaymentNotification>"
        }
    ];
    return ItemInstantPaymentNotifications;
}());
exports.ItemInstantPaymentNotifications = ItemInstantPaymentNotifications;
var ItemInternal = (function () {
    function ItemInternal() {
    }
    ItemInternal.getAttributeTypeMap = function () {
        return ItemInternal.attributeTypeMap;
    };
    ItemInternal.discriminator = undefined;
    ItemInternal.attributeTypeMap = [
        {
            "name": "memo",
            "baseName": "memo",
            "type": "string"
        }
    ];
    return ItemInternal;
}());
exports.ItemInternal = ItemInternal;
var ItemKitComponent = (function () {
    function ItemKitComponent() {
    }
    ItemKitComponent.getAttributeTypeMap = function () {
        return ItemKitComponent.attributeTypeMap;
    };
    ItemKitComponent.discriminator = undefined;
    ItemKitComponent.attributeTypeMap = [
        {
            "name": "componentCost",
            "baseName": "component_cost",
            "type": "number"
        },
        {
            "name": "componentDescription",
            "baseName": "component_description",
            "type": "string"
        },
        {
            "name": "componentMerchantItemId",
            "baseName": "component_merchant_item_id",
            "type": "string"
        },
        {
            "name": "componentMerchantItemOid",
            "baseName": "component_merchant_item_oid",
            "type": "number"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }
    ];
    return ItemKitComponent;
}());
exports.ItemKitComponent = ItemKitComponent;
var ItemKitDefinition = (function () {
    function ItemKitDefinition() {
    }
    ItemKitDefinition.getAttributeTypeMap = function () {
        return ItemKitDefinition.attributeTypeMap;
    };
    ItemKitDefinition.discriminator = undefined;
    ItemKitDefinition.attributeTypeMap = [
        {
            "name": "components",
            "baseName": "components",
            "type": "Array<ItemKitComponent>"
        }
    ];
    return ItemKitDefinition;
}());
exports.ItemKitDefinition = ItemKitDefinition;
var ItemOption = (function () {
    function ItemOption() {
    }
    ItemOption.getAttributeTypeMap = function () {
        return ItemOption.attributeTypeMap;
    };
    ItemOption.discriminator = undefined;
    ItemOption.attributeTypeMap = [
        {
            "name": "costIfSpecified",
            "baseName": "cost_if_specified",
            "type": "number"
        },
        {
            "name": "costPerLetter",
            "baseName": "cost_per_letter",
            "type": "number"
        },
        {
            "name": "costPerLine",
            "baseName": "cost_per_line",
            "type": "number"
        },
        {
            "name": "ignoreIfDefault",
            "baseName": "ignore_if_default",
            "type": "boolean"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "labelTranslatedTextInstanceOid",
            "baseName": "label_translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nameTranslatedTextInstanceOid",
            "baseName": "name_translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "oneTimeFee",
            "baseName": "one_time_fee",
            "type": "boolean"
        },
        {
            "name": "optionOid",
            "baseName": "option_oid",
            "type": "number"
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "boolean"
        },
        {
            "name": "systemOption",
            "baseName": "system_option",
            "type": "boolean"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ItemOption.TypeEnum"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<ItemOptionValue>"
        }
    ];
    return ItemOption;
}());
exports.ItemOption = ItemOption;
(function (ItemOption) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Dropdown"] = 'dropdown'] = "Dropdown";
        TypeEnum[TypeEnum["FileAttachment"] = 'file attachment'] = "FileAttachment";
        TypeEnum[TypeEnum["Fixed"] = 'fixed'] = "Fixed";
        TypeEnum[TypeEnum["Hidden"] = 'hidden'] = "Hidden";
        TypeEnum[TypeEnum["Multiline"] = 'multiline'] = "Multiline";
        TypeEnum[TypeEnum["Radio"] = 'radio'] = "Radio";
        TypeEnum[TypeEnum["Single"] = 'single'] = "Single";
    })(TypeEnum = ItemOption.TypeEnum || (ItemOption.TypeEnum = {}));
})(ItemOption = exports.ItemOption || (exports.ItemOption = {}));
exports.ItemOption = ItemOption;
var ItemOptionValue = (function () {
    function ItemOptionValue() {
    }
    ItemOptionValue.getAttributeTypeMap = function () {
        return ItemOptionValue.attributeTypeMap;
    };
    ItemOptionValue.discriminator = undefined;
    ItemOptionValue.attributeTypeMap = [
        {
            "name": "additionalDimensionApplication",
            "baseName": "additional_dimension_application",
            "type": "ItemOptionValue.AdditionalDimensionApplicationEnum"
        },
        {
            "name": "additionalItems",
            "baseName": "additional_items",
            "type": "Array<ItemOptionValueAdditionalItem>"
        },
        {
            "name": "costChange",
            "baseName": "cost_change",
            "type": "number"
        },
        {
            "name": "defaultValue",
            "baseName": "default_value",
            "type": "boolean"
        },
        {
            "name": "digitalItems",
            "baseName": "digital_items",
            "type": "Array<ItemOptionValueDigitalItem>"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "Distance"
        },
        {
            "name": "length",
            "baseName": "length",
            "type": "Distance"
        },
        {
            "name": "merchantItemMultimediaOid",
            "baseName": "merchant_item_multimedia_oid",
            "type": "number"
        },
        {
            "name": "optionValueOid",
            "baseName": "option_value_oid",
            "type": "number"
        },
        {
            "name": "percentCostChange",
            "baseName": "percent_cost_change",
            "type": "number"
        },
        {
            "name": "translatedTextInstanceOid",
            "baseName": "translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "weightChange",
            "baseName": "weight_change",
            "type": "Weight"
        },
        {
            "name": "weightChangePercent",
            "baseName": "weight_change_percent",
            "type": "number"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "Distance"
        }
    ];
    return ItemOptionValue;
}());
exports.ItemOptionValue = ItemOptionValue;
(function (ItemOptionValue) {
    var AdditionalDimensionApplicationEnum;
    (function (AdditionalDimensionApplicationEnum) {
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["None"] = 'none'] = "None";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["SetItemTo"] = 'set item to'] = "SetItemTo";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["AddItem"] = 'add item'] = "AddItem";
    })(AdditionalDimensionApplicationEnum = ItemOptionValue.AdditionalDimensionApplicationEnum || (ItemOptionValue.AdditionalDimensionApplicationEnum = {}));
})(ItemOptionValue = exports.ItemOptionValue || (exports.ItemOptionValue = {}));
exports.ItemOptionValue = ItemOptionValue;
var ItemOptionValueAdditionalItem = (function () {
    function ItemOptionValueAdditionalItem() {
    }
    ItemOptionValueAdditionalItem.getAttributeTypeMap = function () {
        return ItemOptionValueAdditionalItem.attributeTypeMap;
    };
    ItemOptionValueAdditionalItem.discriminator = undefined;
    ItemOptionValueAdditionalItem.attributeTypeMap = [
        {
            "name": "additionalMerchantItemId",
            "baseName": "additional_merchant_item_id",
            "type": "string"
        },
        {
            "name": "additionalMerchantItemOid",
            "baseName": "additional_merchant_item_oid",
            "type": "number"
        }
    ];
    return ItemOptionValueAdditionalItem;
}());
exports.ItemOptionValueAdditionalItem = ItemOptionValueAdditionalItem;
var ItemOptionValueDigitalItem = (function () {
    function ItemOptionValueDigitalItem() {
    }
    ItemOptionValueDigitalItem.getAttributeTypeMap = function () {
        return ItemOptionValueDigitalItem.attributeTypeMap;
    };
    ItemOptionValueDigitalItem.discriminator = undefined;
    ItemOptionValueDigitalItem.attributeTypeMap = [
        {
            "name": "digitalItemOid",
            "baseName": "digital_item_oid",
            "type": "number"
        },
        {
            "name": "originalFilename",
            "baseName": "original_filename",
            "type": "string"
        }
    ];
    return ItemOptionValueDigitalItem;
}());
exports.ItemOptionValueDigitalItem = ItemOptionValueDigitalItem;
var ItemPaymentProcessing = (function () {
    function ItemPaymentProcessing() {
    }
    ItemPaymentProcessing.getAttributeTypeMap = function () {
        return ItemPaymentProcessing.attributeTypeMap;
    };
    ItemPaymentProcessing.discriminator = undefined;
    ItemPaymentProcessing.attributeTypeMap = [
        {
            "name": "blockPrepaid",
            "baseName": "block_prepaid",
            "type": "boolean"
        },
        {
            "name": "creditCardTransactionType",
            "baseName": "credit_card_transaction_type",
            "type": "string"
        },
        {
            "name": "noRealtimeCharge",
            "baseName": "no_realtime_charge",
            "type": "boolean"
        },
        {
            "name": "paymentMethodValidity",
            "baseName": "payment_method_validity",
            "type": "Array<string>"
        },
        {
            "name": "rotatingTransactionGatewayCodes",
            "baseName": "rotating_transaction_gateway_codes",
            "type": "Array<string>"
        }
    ];
    return ItemPaymentProcessing;
}());
exports.ItemPaymentProcessing = ItemPaymentProcessing;
var ItemPhysical = (function () {
    function ItemPhysical() {
    }
    ItemPhysical.getAttributeTypeMap = function () {
        return ItemPhysical.attributeTypeMap;
    };
    ItemPhysical.discriminator = undefined;
    ItemPhysical.attributeTypeMap = [
        {
            "name": "height",
            "baseName": "height",
            "type": "Distance"
        },
        {
            "name": "length",
            "baseName": "length",
            "type": "Distance"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "Weight"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "Distance"
        }
    ];
    return ItemPhysical;
}());
exports.ItemPhysical = ItemPhysical;
var ItemPricing = (function () {
    function ItemPricing() {
    }
    ItemPricing.getAttributeTypeMap = function () {
        return ItemPricing.attributeTypeMap;
    };
    ItemPricing.discriminator = undefined;
    ItemPricing.attributeTypeMap = [
        {
            "name": "allowArbitraryCost",
            "baseName": "allow_arbitrary_cost",
            "type": "boolean"
        },
        {
            "name": "arbitraryCostVelocityCode",
            "baseName": "arbitrary_cost_velocity_code",
            "type": "string"
        },
        {
            "name": "autoOrderCost",
            "baseName": "auto_order_cost",
            "type": "number"
        },
        {
            "name": "automaticPricingTierName",
            "baseName": "automatic_pricing_tier_name",
            "type": "string"
        },
        {
            "name": "automaticPricingTierOid",
            "baseName": "automatic_pricing_tier_oid",
            "type": "number"
        },
        {
            "name": "cogs",
            "baseName": "cogs",
            "type": "number"
        },
        {
            "name": "cost",
            "baseName": "cost",
            "type": "number"
        },
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "manufacturerSuggestedRetailPrice",
            "baseName": "manufacturer_suggested_retail_price",
            "type": "number"
        },
        {
            "name": "maximumArbitraryCost",
            "baseName": "maximum_arbitrary_cost",
            "type": "number"
        },
        {
            "name": "minimumAdvertisedPrice",
            "baseName": "minimum_advertised_price",
            "type": "number"
        },
        {
            "name": "minimumArbitraryCost",
            "baseName": "minimum_arbitrary_cost",
            "type": "number"
        },
        {
            "name": "mixAndMatchGroup",
            "baseName": "mix_and_match_group",
            "type": "string"
        },
        {
            "name": "mixAndMatchGroupOid",
            "baseName": "mix_and_match_group_oid",
            "type": "number"
        },
        {
            "name": "saleCost",
            "baseName": "sale_cost",
            "type": "number"
        },
        {
            "name": "saleEnd",
            "baseName": "sale_end",
            "type": "string"
        },
        {
            "name": "saleStart",
            "baseName": "sale_start",
            "type": "string"
        },
        {
            "name": "tiers",
            "baseName": "tiers",
            "type": "Array<ItemPricingTier>"
        }
    ];
    return ItemPricing;
}());
exports.ItemPricing = ItemPricing;
var ItemPricingTier = (function () {
    function ItemPricingTier() {
    }
    ItemPricingTier.getAttributeTypeMap = function () {
        return ItemPricingTier.attributeTypeMap;
    };
    ItemPricingTier.discriminator = undefined;
    ItemPricingTier.attributeTypeMap = [
        {
            "name": "defaultTier",
            "baseName": "default_tier",
            "type": "boolean"
        },
        {
            "name": "discounts",
            "baseName": "discounts",
            "type": "Array<ItemPricingTierDiscount>"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "ItemPricingTierLimit"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "pricingTierOid",
            "baseName": "pricing_tier_oid",
            "type": "number"
        }
    ];
    return ItemPricingTier;
}());
exports.ItemPricingTier = ItemPricingTier;
var ItemPricingTierDiscount = (function () {
    function ItemPricingTierDiscount() {
    }
    ItemPricingTierDiscount.getAttributeTypeMap = function () {
        return ItemPricingTierDiscount.attributeTypeMap;
    };
    ItemPricingTierDiscount.discriminator = undefined;
    ItemPricingTierDiscount.attributeTypeMap = [
        {
            "name": "cost",
            "baseName": "cost",
            "type": "number"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }
    ];
    return ItemPricingTierDiscount;
}());
exports.ItemPricingTierDiscount = ItemPricingTierDiscount;
var ItemPricingTierLimit = (function () {
    function ItemPricingTierLimit() {
    }
    ItemPricingTierLimit.getAttributeTypeMap = function () {
        return ItemPricingTierLimit.attributeTypeMap;
    };
    ItemPricingTierLimit.discriminator = undefined;
    ItemPricingTierLimit.attributeTypeMap = [
        {
            "name": "cumulativeOrderLimit",
            "baseName": "cumulative_order_limit",
            "type": "number"
        },
        {
            "name": "individualOrderLimit",
            "baseName": "individual_order_limit",
            "type": "number"
        },
        {
            "name": "multipleQuantity",
            "baseName": "multiple_quantity",
            "type": "number"
        }
    ];
    return ItemPricingTierLimit;
}());
exports.ItemPricingTierLimit = ItemPricingTierLimit;
var ItemProperty = (function () {
    function ItemProperty() {
    }
    ItemProperty.getAttributeTypeMap = function () {
        return ItemProperty.attributeTypeMap;
    };
    ItemProperty.discriminator = undefined;
    ItemProperty.attributeTypeMap = [
        {
            "name": "expirationDts",
            "baseName": "expirationDts",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return ItemProperty;
}());
exports.ItemProperty = ItemProperty;
var ItemRealtimePricing = (function () {
    function ItemRealtimePricing() {
    }
    ItemRealtimePricing.getAttributeTypeMap = function () {
        return ItemRealtimePricing.attributeTypeMap;
    };
    ItemRealtimePricing.discriminator = undefined;
    ItemRealtimePricing.attributeTypeMap = [
        {
            "name": "realtimePricingParameter",
            "baseName": "realtime_pricing_parameter",
            "type": "string"
        },
        {
            "name": "realtimePricingProvider",
            "baseName": "realtime_pricing_provider",
            "type": "string"
        },
        {
            "name": "realtimePricingProviderOid",
            "baseName": "realtime_pricing_provider_oid",
            "type": "number"
        }
    ];
    return ItemRealtimePricing;
}());
exports.ItemRealtimePricing = ItemRealtimePricing;
var ItemRelated = (function () {
    function ItemRelated() {
    }
    ItemRelated.getAttributeTypeMap = function () {
        return ItemRelated.attributeTypeMap;
    };
    ItemRelated.discriminator = undefined;
    ItemRelated.attributeTypeMap = [
        {
            "name": "noSystemCalculatedRelatedItems",
            "baseName": "no_system_calculated_related_items",
            "type": "boolean"
        },
        {
            "name": "notRelatable",
            "baseName": "not_relatable",
            "type": "boolean"
        },
        {
            "name": "relatedItems",
            "baseName": "related_items",
            "type": "Array<ItemRelatedItem>"
        }
    ];
    return ItemRelated;
}());
exports.ItemRelated = ItemRelated;
var ItemRelatedItem = (function () {
    function ItemRelatedItem() {
    }
    ItemRelatedItem.getAttributeTypeMap = function () {
        return ItemRelatedItem.attributeTypeMap;
    };
    ItemRelatedItem.discriminator = undefined;
    ItemRelatedItem.attributeTypeMap = [
        {
            "name": "relatedMerchantItemId",
            "baseName": "related_merchant_item_id",
            "type": "string"
        },
        {
            "name": "relatedMerchantItemOid",
            "baseName": "related_merchant_item_oid",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ItemRelatedItem.TypeEnum"
        }
    ];
    return ItemRelatedItem;
}());
exports.ItemRelatedItem = ItemRelatedItem;
(function (ItemRelatedItem) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["System"] = 'System'] = "System";
        TypeEnum[TypeEnum["UserDefined"] = 'UserDefined'] = "UserDefined";
    })(TypeEnum = ItemRelatedItem.TypeEnum || (ItemRelatedItem.TypeEnum = {}));
})(ItemRelatedItem = exports.ItemRelatedItem || (exports.ItemRelatedItem = {}));
exports.ItemRelatedItem = ItemRelatedItem;
var ItemReporting = (function () {
    function ItemReporting() {
    }
    ItemReporting.getAttributeTypeMap = function () {
        return ItemReporting.attributeTypeMap;
    };
    ItemReporting.discriminator = undefined;
    ItemReporting.attributeTypeMap = [
        {
            "name": "reportAsUpsell",
            "baseName": "report_as_upsell",
            "type": "boolean"
        },
        {
            "name": "reportPickableQuantities",
            "baseName": "report_pickable_quantities",
            "type": "Array<number>"
        }
    ];
    return ItemReporting;
}());
exports.ItemReporting = ItemReporting;
var ItemResponse = (function () {
    function ItemResponse() {
    }
    ItemResponse.getAttributeTypeMap = function () {
        return ItemResponse.attributeTypeMap;
    };
    ItemResponse.discriminator = undefined;
    ItemResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "item",
            "baseName": "item",
            "type": "Item"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ItemResponse;
}());
exports.ItemResponse = ItemResponse;
var ItemRestriction = (function () {
    function ItemRestriction() {
    }
    ItemRestriction.getAttributeTypeMap = function () {
        return ItemRestriction.attributeTypeMap;
    };
    ItemRestriction.discriminator = undefined;
    ItemRestriction.attributeTypeMap = [
        {
            "name": "excludeCoupon",
            "baseName": "exclude_coupon",
            "type": "boolean"
        },
        {
            "name": "excludeFromFreePromotion",
            "baseName": "exclude_from_free_promotion",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<ItemRestrictionItem>"
        },
        {
            "name": "maximumQuantity",
            "baseName": "maximum_quantity",
            "type": "number"
        },
        {
            "name": "minimumQuantity",
            "baseName": "minimum_quantity",
            "type": "number"
        },
        {
            "name": "multipleQuantity",
            "baseName": "multiple_quantity",
            "type": "number"
        },
        {
            "name": "onePerCustomer",
            "baseName": "one_per_customer",
            "type": "boolean"
        },
        {
            "name": "purchaseSeparately",
            "baseName": "purchase_separately",
            "type": "boolean"
        }
    ];
    return ItemRestriction;
}());
exports.ItemRestriction = ItemRestriction;
var ItemRestrictionItem = (function () {
    function ItemRestrictionItem() {
    }
    ItemRestrictionItem.getAttributeTypeMap = function () {
        return ItemRestrictionItem.attributeTypeMap;
    };
    ItemRestrictionItem.discriminator = undefined;
    ItemRestrictionItem.attributeTypeMap = [
        {
            "name": "restrictMerchantItemId",
            "baseName": "restrict_merchant_item_id",
            "type": "string"
        },
        {
            "name": "restrictMerchantItemOid",
            "baseName": "restrict_merchant_item_oid",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "ItemRestrictionItem.TypeEnum"
        }
    ];
    return ItemRestrictionItem;
}());
exports.ItemRestrictionItem = ItemRestrictionItem;
(function (ItemRestrictionItem) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["CanNotBePurchasedWith"] = 'can not be purchased with'] = "CanNotBePurchasedWith";
        TypeEnum[TypeEnum["CanOnlyBePurchasedWith"] = 'can only be purchased with'] = "CanOnlyBePurchasedWith";
        TypeEnum[TypeEnum["MustBePurchasedWith"] = 'must be purchased with'] = "MustBePurchasedWith";
    })(TypeEnum = ItemRestrictionItem.TypeEnum || (ItemRestrictionItem.TypeEnum = {}));
})(ItemRestrictionItem = exports.ItemRestrictionItem || (exports.ItemRestrictionItem = {}));
exports.ItemRestrictionItem = ItemRestrictionItem;
var ItemRevguard = (function () {
    function ItemRevguard() {
    }
    ItemRevguard.getAttributeTypeMap = function () {
        return ItemRevguard.attributeTypeMap;
    };
    ItemRevguard.discriminator = undefined;
    ItemRevguard.attributeTypeMap = [
        {
            "name": "revguardCanceledCsrPromptGroup",
            "baseName": "revguard_canceled_csr_prompt_group",
            "type": "number"
        },
        {
            "name": "revguardCanceledIvrPromptGroup",
            "baseName": "revguard_canceled_ivr_prompt_group",
            "type": "number"
        },
        {
            "name": "revguardCanceledWebPromptGroup",
            "baseName": "revguard_canceled_web_prompt_group",
            "type": "number"
        },
        {
            "name": "revguardClientBrand",
            "baseName": "revguard_client_brand",
            "type": "number"
        },
        {
            "name": "revguardCsrPromptGroup",
            "baseName": "revguard_csr_prompt_group",
            "type": "number"
        },
        {
            "name": "revguardIvrPromptGroup",
            "baseName": "revguard_ivr_prompt_group",
            "type": "number"
        },
        {
            "name": "revguardWebPromptGroup",
            "baseName": "revguard_web_prompt_group",
            "type": "number"
        }
    ];
    return ItemRevguard;
}());
exports.ItemRevguard = ItemRevguard;
var ItemReviews = (function () {
    function ItemReviews() {
    }
    ItemReviews.getAttributeTypeMap = function () {
        return ItemReviews.attributeTypeMap;
    };
    ItemReviews.discriminator = undefined;
    ItemReviews.attributeTypeMap = [
        {
            "name": "hasApprovedReview",
            "baseName": "has_approved_review",
            "type": "boolean"
        },
        {
            "name": "hasReview",
            "baseName": "has_review",
            "type": "boolean"
        },
        {
            "name": "reviewCount",
            "baseName": "review_count",
            "type": "number"
        },
        {
            "name": "reviewOverall",
            "baseName": "review_overall",
            "type": "number"
        },
        {
            "name": "reviewTemplateName",
            "baseName": "review_template_name",
            "type": "string"
        },
        {
            "name": "reviewTemplateOid",
            "baseName": "review_template_oid",
            "type": "number"
        },
        {
            "name": "reviewable",
            "baseName": "reviewable",
            "type": "boolean"
        }
    ];
    return ItemReviews;
}());
exports.ItemReviews = ItemReviews;
var ItemSalesforce = (function () {
    function ItemSalesforce() {
    }
    ItemSalesforce.getAttributeTypeMap = function () {
        return ItemSalesforce.attributeTypeMap;
    };
    ItemSalesforce.discriminator = undefined;
    ItemSalesforce.attributeTypeMap = [
        {
            "name": "sfdcPricebookId",
            "baseName": "sfdc_pricebook_id",
            "type": "string"
        },
        {
            "name": "sfdcProductId",
            "baseName": "sfdc_product_id",
            "type": "string"
        }
    ];
    return ItemSalesforce;
}());
exports.ItemSalesforce = ItemSalesforce;
var ItemShipping = (function () {
    function ItemShipping() {
    }
    ItemShipping.getAttributeTypeMap = function () {
        return ItemShipping.attributeTypeMap;
    };
    ItemShipping.discriminator = undefined;
    ItemShipping.attributeTypeMap = [
        {
            "name": "allowBackOrder",
            "baseName": "allow_back_order",
            "type": "boolean"
        },
        {
            "name": "amazonFba",
            "baseName": "amazon_fba",
            "type": "boolean"
        },
        {
            "name": "caseInnerPacks",
            "baseName": "case_inner_packs",
            "type": "number"
        },
        {
            "name": "caseUnits",
            "baseName": "case_units",
            "type": "number"
        },
        {
            "name": "cases",
            "baseName": "cases",
            "type": "Array<ItemShippingCase>"
        },
        {
            "name": "collectSerialNumbers",
            "baseName": "collect_serial_numbers",
            "type": "boolean"
        },
        {
            "name": "countryCodeOfOrigin",
            "baseName": "country_code_of_origin",
            "type": "string"
        },
        {
            "name": "customsDescription",
            "baseName": "customs_description",
            "type": "string"
        },
        {
            "name": "customsValue",
            "baseName": "customs_value",
            "type": "number"
        },
        {
            "name": "deliveryOnFriday",
            "baseName": "delivery_on_friday",
            "type": "boolean"
        },
        {
            "name": "deliveryOnMonday",
            "baseName": "delivery_on_monday",
            "type": "boolean"
        },
        {
            "name": "deliveryOnSaturday",
            "baseName": "delivery_on_saturday",
            "type": "boolean"
        },
        {
            "name": "deliveryOnSunday",
            "baseName": "delivery_on_sunday",
            "type": "boolean"
        },
        {
            "name": "deliveryOnThursday",
            "baseName": "delivery_on_thursday",
            "type": "boolean"
        },
        {
            "name": "deliveryOnTuesday",
            "baseName": "delivery_on_tuesday",
            "type": "boolean"
        },
        {
            "name": "deliveryOnWednesday",
            "baseName": "delivery_on_wednesday",
            "type": "boolean"
        },
        {
            "name": "destinationMarkups",
            "baseName": "destination_markups",
            "type": "Array<ItemShippingDestinationMarkup>"
        },
        {
            "name": "destinationRestrictions",
            "baseName": "destination_restrictions",
            "type": "Array<ItemShippingDestinationRestriction>"
        },
        {
            "name": "distributionCenters",
            "baseName": "distribution_centers",
            "type": "Array<ItemShippingDistributionCenter>"
        },
        {
            "name": "eta",
            "baseName": "eta",
            "type": "string"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "freightClass",
            "baseName": "freight_class",
            "type": "string"
        },
        {
            "name": "hazmat",
            "baseName": "hazmat",
            "type": "boolean"
        },
        {
            "name": "madeToOrder",
            "baseName": "made_to_order",
            "type": "boolean"
        },
        {
            "name": "madeToOrderLeadTime",
            "baseName": "made_to_order_lead_time",
            "type": "number"
        },
        {
            "name": "maxDaysTimeInTransit",
            "baseName": "max_days_time_in_transit",
            "type": "number"
        },
        {
            "name": "methods",
            "baseName": "methods",
            "type": "Array<ItemShippingMethod>"
        },
        {
            "name": "noShippingDiscount",
            "baseName": "no_shipping_discount",
            "type": "boolean"
        },
        {
            "name": "packageRequirements",
            "baseName": "package_requirements",
            "type": "Array<ItemShippingPackageRequirement>"
        },
        {
            "name": "perishableClassName",
            "baseName": "perishable_class_name",
            "type": "string"
        },
        {
            "name": "perishableClassOid",
            "baseName": "perishable_class_oid",
            "type": "number"
        },
        {
            "name": "preorder",
            "baseName": "preorder",
            "type": "boolean"
        },
        {
            "name": "requireDeliveryDate",
            "baseName": "require_delivery_date",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnFriday",
            "baseName": "restrict_shipment_on_friday",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnMonday",
            "baseName": "restrict_shipment_on_monday",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnSaturday",
            "baseName": "restrict_shipment_on_saturday",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnSunday",
            "baseName": "restrict_shipment_on_sunday",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnThursday",
            "baseName": "restrict_shipment_on_thursday",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnTuesday",
            "baseName": "restrict_shipment_on_tuesday",
            "type": "boolean"
        },
        {
            "name": "restrictShipmentOnWednesday",
            "baseName": "restrict_shipment_on_wednesday",
            "type": "boolean"
        },
        {
            "name": "shipSeparately",
            "baseName": "ship_separately",
            "type": "boolean"
        },
        {
            "name": "shipSeparatelyAdditionalWeight",
            "baseName": "ship_separately_additional_weight",
            "type": "Weight"
        },
        {
            "name": "shipSeparatelyHeight",
            "baseName": "ship_separately_height",
            "type": "Distance"
        },
        {
            "name": "shipSeparatelyLength",
            "baseName": "ship_separately_length",
            "type": "Distance"
        },
        {
            "name": "shipSeparatelyPackageSpecialType",
            "baseName": "ship_separately_package_special_type",
            "type": "string"
        },
        {
            "name": "shipSeparatelyWidth",
            "baseName": "ship_separately_width",
            "type": "Distance"
        },
        {
            "name": "specialProductType",
            "baseName": "special_product_type",
            "type": "string"
        },
        {
            "name": "trackInventory",
            "baseName": "track_inventory",
            "type": "boolean"
        }
    ];
    return ItemShipping;
}());
exports.ItemShipping = ItemShipping;
var ItemShippingCase = (function () {
    function ItemShippingCase() {
    }
    ItemShippingCase.getAttributeTypeMap = function () {
        return ItemShippingCase.attributeTypeMap;
    };
    ItemShippingCase.discriminator = undefined;
    ItemShippingCase.attributeTypeMap = [
        {
            "name": "caseLabel",
            "baseName": "case_label",
            "type": "string"
        },
        {
            "name": "caseMerchantItemId",
            "baseName": "case_merchant_item_id",
            "type": "string"
        },
        {
            "name": "caseMerchantItemOid",
            "baseName": "case_merchant_item_oid",
            "type": "number"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }
    ];
    return ItemShippingCase;
}());
exports.ItemShippingCase = ItemShippingCase;
var ItemShippingDestinationMarkup = (function () {
    function ItemShippingDestinationMarkup() {
    }
    ItemShippingDestinationMarkup.getAttributeTypeMap = function () {
        return ItemShippingDestinationMarkup.attributeTypeMap;
    };
    ItemShippingDestinationMarkup.discriminator = undefined;
    ItemShippingDestinationMarkup.attributeTypeMap = [
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "flatFee",
            "baseName": "flat_fee",
            "type": "number"
        },
        {
            "name": "perItem",
            "baseName": "per_item",
            "type": "number"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "shippingMethod",
            "baseName": "shipping_method",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        }
    ];
    return ItemShippingDestinationMarkup;
}());
exports.ItemShippingDestinationMarkup = ItemShippingDestinationMarkup;
var ItemShippingDestinationRestriction = (function () {
    function ItemShippingDestinationRestriction() {
    }
    ItemShippingDestinationRestriction.getAttributeTypeMap = function () {
        return ItemShippingDestinationRestriction.attributeTypeMap;
    };
    ItemShippingDestinationRestriction.discriminator = undefined;
    ItemShippingDestinationRestriction.attributeTypeMap = [
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "validity",
            "baseName": "validity",
            "type": "ItemShippingDestinationRestriction.ValidityEnum"
        }
    ];
    return ItemShippingDestinationRestriction;
}());
exports.ItemShippingDestinationRestriction = ItemShippingDestinationRestriction;
(function (ItemShippingDestinationRestriction) {
    var ValidityEnum;
    (function (ValidityEnum) {
        ValidityEnum[ValidityEnum["ValidOnlyFor"] = 'valid only for'] = "ValidOnlyFor";
        ValidityEnum[ValidityEnum["InvalidFor"] = 'invalid for'] = "InvalidFor";
    })(ValidityEnum = ItemShippingDestinationRestriction.ValidityEnum || (ItemShippingDestinationRestriction.ValidityEnum = {}));
})(ItemShippingDestinationRestriction = exports.ItemShippingDestinationRestriction || (exports.ItemShippingDestinationRestriction = {}));
exports.ItemShippingDestinationRestriction = ItemShippingDestinationRestriction;
var ItemShippingDistributionCenter = (function () {
    function ItemShippingDistributionCenter() {
    }
    ItemShippingDistributionCenter.getAttributeTypeMap = function () {
        return ItemShippingDistributionCenter.attributeTypeMap;
    };
    ItemShippingDistributionCenter.discriminator = undefined;
    ItemShippingDistributionCenter.attributeTypeMap = [
        {
            "name": "allocatedToPlacedOrders",
            "baseName": "allocated_to_placed_orders",
            "type": "number"
        },
        {
            "name": "allocatedToShoppingCarts",
            "baseName": "allocated_to_shopping_carts",
            "type": "number"
        },
        {
            "name": "availableToAllocate",
            "baseName": "available_to_allocate",
            "type": "number"
        },
        {
            "name": "desiredInventoryLevel",
            "baseName": "desired_inventory_level",
            "type": "number"
        },
        {
            "name": "distributionCenterCode",
            "baseName": "distribution_center_code",
            "type": "string"
        },
        {
            "name": "distributionCenterOid",
            "baseName": "distribution_center_oid",
            "type": "number"
        },
        {
            "name": "eta",
            "baseName": "eta",
            "type": "string"
        },
        {
            "name": "handles",
            "baseName": "handles",
            "type": "boolean"
        },
        {
            "name": "inventoryLevel",
            "baseName": "inventory_level",
            "type": "number"
        },
        {
            "name": "maximumBackorder",
            "baseName": "maximum_backorder",
            "type": "number"
        },
        {
            "name": "reorderInventoryLevel",
            "baseName": "reorder_inventory_level",
            "type": "number"
        },
        {
            "name": "sku",
            "baseName": "sku",
            "type": "string"
        },
        {
            "name": "stockPickingLocation",
            "baseName": "stock_picking_location",
            "type": "string"
        }
    ];
    return ItemShippingDistributionCenter;
}());
exports.ItemShippingDistributionCenter = ItemShippingDistributionCenter;
var ItemShippingMethod = (function () {
    function ItemShippingMethod() {
    }
    ItemShippingMethod.getAttributeTypeMap = function () {
        return ItemShippingMethod.attributeTypeMap;
    };
    ItemShippingMethod.discriminator = undefined;
    ItemShippingMethod.attributeTypeMap = [
        {
            "name": "cost",
            "baseName": "cost",
            "type": "number"
        },
        {
            "name": "eachAdditionalItemMarkup",
            "baseName": "each_additional_item_markup",
            "type": "number"
        },
        {
            "name": "filterToIfAvailable",
            "baseName": "filter_to_if_available",
            "type": "boolean"
        },
        {
            "name": "firstItemMarkup",
            "baseName": "first_item_markup",
            "type": "number"
        },
        {
            "name": "fixedShippingCost",
            "baseName": "fixed_shipping_cost",
            "type": "number"
        },
        {
            "name": "flatFeeMarkup",
            "baseName": "flat_fee_markup",
            "type": "number"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "perItemFeeMarkup",
            "baseName": "per_item_fee_markup",
            "type": "number"
        },
        {
            "name": "percentageMarkup",
            "baseName": "percentage_markup",
            "type": "number"
        },
        {
            "name": "percentageOfItemMarkup",
            "baseName": "percentage_of_item_markup",
            "type": "number"
        },
        {
            "name": "relaxRestrictionsOnUpsell",
            "baseName": "relax_restrictions_on_upsell",
            "type": "boolean"
        },
        {
            "name": "shippingMethod",
            "baseName": "shipping_method",
            "type": "string"
        },
        {
            "name": "shippingMethodOid",
            "baseName": "shipping_method_oid",
            "type": "number"
        },
        {
            "name": "shippingMethodValidity",
            "baseName": "shipping_method_validity",
            "type": "ItemShippingMethod.ShippingMethodValidityEnum"
        },
        {
            "name": "signatureRequired",
            "baseName": "signature_required",
            "type": "boolean"
        }
    ];
    return ItemShippingMethod;
}());
exports.ItemShippingMethod = ItemShippingMethod;
(function (ItemShippingMethod) {
    var ShippingMethodValidityEnum;
    (function (ShippingMethodValidityEnum) {
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["InvalidFor"] = 'invalid for'] = "InvalidFor";
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["ValidFor"] = 'valid for'] = "ValidFor";
        ShippingMethodValidityEnum[ShippingMethodValidityEnum["ValidOnlyFor"] = 'valid only for'] = "ValidOnlyFor";
    })(ShippingMethodValidityEnum = ItemShippingMethod.ShippingMethodValidityEnum || (ItemShippingMethod.ShippingMethodValidityEnum = {}));
})(ItemShippingMethod = exports.ItemShippingMethod || (exports.ItemShippingMethod = {}));
exports.ItemShippingMethod = ItemShippingMethod;
var ItemShippingPackageRequirement = (function () {
    function ItemShippingPackageRequirement() {
    }
    ItemShippingPackageRequirement.getAttributeTypeMap = function () {
        return ItemShippingPackageRequirement.attributeTypeMap;
    };
    ItemShippingPackageRequirement.discriminator = undefined;
    ItemShippingPackageRequirement.attributeTypeMap = [
        {
            "name": "packageName",
            "baseName": "package_name",
            "type": "string"
        },
        {
            "name": "packageOid",
            "baseName": "package_oid",
            "type": "number"
        }
    ];
    return ItemShippingPackageRequirement;
}());
exports.ItemShippingPackageRequirement = ItemShippingPackageRequirement;
var ItemTag = (function () {
    function ItemTag() {
    }
    ItemTag.getAttributeTypeMap = function () {
        return ItemTag.attributeTypeMap;
    };
    ItemTag.discriminator = undefined;
    ItemTag.attributeTypeMap = [
        {
            "name": "tagType",
            "baseName": "tagType",
            "type": "ItemTag.TagTypeEnum"
        },
        {
            "name": "tagValue",
            "baseName": "tagValue",
            "type": "string"
        }
    ];
    return ItemTag;
}());
exports.ItemTag = ItemTag;
(function (ItemTag) {
    var TagTypeEnum;
    (function (TagTypeEnum) {
        TagTypeEnum[TagTypeEnum["Item"] = 'item'] = "Item";
        TagTypeEnum[TagTypeEnum["Order"] = 'order'] = "Order";
        TagTypeEnum[TagTypeEnum["Customer"] = 'customer'] = "Customer";
    })(TagTypeEnum = ItemTag.TagTypeEnum || (ItemTag.TagTypeEnum = {}));
})(ItemTag = exports.ItemTag || (exports.ItemTag = {}));
exports.ItemTag = ItemTag;
var ItemTags = (function () {
    function ItemTags() {
    }
    ItemTags.getAttributeTypeMap = function () {
        return ItemTags.attributeTypeMap;
    };
    ItemTags.discriminator = undefined;
    ItemTags.attributeTypeMap = [
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<ItemTag>"
        }
    ];
    return ItemTags;
}());
exports.ItemTags = ItemTags;
var ItemTax = (function () {
    function ItemTax() {
    }
    ItemTax.getAttributeTypeMap = function () {
        return ItemTax.attributeTypeMap;
    };
    ItemTax.discriminator = undefined;
    ItemTax.attributeTypeMap = [
        {
            "name": "exemptions",
            "baseName": "exemptions",
            "type": "Array<ItemTaxExemption>"
        },
        {
            "name": "taxFree",
            "baseName": "tax_free",
            "type": "boolean"
        },
        {
            "name": "taxableCost",
            "baseName": "taxable_cost",
            "type": "number"
        }
    ];
    return ItemTax;
}());
exports.ItemTax = ItemTax;
var ItemTaxExemption = (function () {
    function ItemTaxExemption() {
    }
    ItemTaxExemption.getAttributeTypeMap = function () {
        return ItemTaxExemption.attributeTypeMap;
    };
    ItemTaxExemption.discriminator = undefined;
    ItemTaxExemption.attributeTypeMap = [
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "county",
            "baseName": "county",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "stateCode",
            "baseName": "state_code",
            "type": "string"
        }
    ];
    return ItemTaxExemption;
}());
exports.ItemTaxExemption = ItemTaxExemption;
var ItemThirdPartyEmailMarketing = (function () {
    function ItemThirdPartyEmailMarketing() {
    }
    ItemThirdPartyEmailMarketing.getAttributeTypeMap = function () {
        return ItemThirdPartyEmailMarketing.attributeTypeMap;
    };
    ItemThirdPartyEmailMarketing.discriminator = undefined;
    ItemThirdPartyEmailMarketing.attributeTypeMap = [
        {
            "name": "addTags",
            "baseName": "add_tags",
            "type": "Array<string>"
        },
        {
            "name": "providerName",
            "baseName": "provider_name",
            "type": "ItemThirdPartyEmailMarketing.ProviderNameEnum"
        },
        {
            "name": "removeTags",
            "baseName": "remove_tags",
            "type": "Array<string>"
        },
        {
            "name": "subscribeLists",
            "baseName": "subscribe_lists",
            "type": "Array<string>"
        },
        {
            "name": "unsubscribeLists",
            "baseName": "unsubscribe_lists",
            "type": "Array<string>"
        }
    ];
    return ItemThirdPartyEmailMarketing;
}());
exports.ItemThirdPartyEmailMarketing = ItemThirdPartyEmailMarketing;
(function (ItemThirdPartyEmailMarketing) {
    var ProviderNameEnum;
    (function (ProviderNameEnum) {
        ProviderNameEnum[ProviderNameEnum["ActiveCampaign"] = 'ActiveCampaign'] = "ActiveCampaign";
        ProviderNameEnum[ProviderNameEnum["AWeber"] = 'AWeber'] = "AWeber";
        ProviderNameEnum[ProviderNameEnum["CampaignMonitor"] = 'Campaign Monitor'] = "CampaignMonitor";
        ProviderNameEnum[ProviderNameEnum["ConstantContact"] = 'ConstantContact'] = "ConstantContact";
        ProviderNameEnum[ProviderNameEnum["Emma"] = 'Emma'] = "Emma";
        ProviderNameEnum[ProviderNameEnum["GetResponse"] = 'GetResponse'] = "GetResponse";
        ProviderNameEnum[ProviderNameEnum["IContact"] = 'iContact'] = "IContact";
        ProviderNameEnum[ProviderNameEnum["Klaviyo"] = 'Klaviyo'] = "Klaviyo";
        ProviderNameEnum[ProviderNameEnum["Lyris"] = 'Lyris'] = "Lyris";
        ProviderNameEnum[ProviderNameEnum["LyrisHQ"] = 'LyrisHQ'] = "LyrisHQ";
        ProviderNameEnum[ProviderNameEnum["MailChimp"] = 'MailChimp'] = "MailChimp";
        ProviderNameEnum[ProviderNameEnum["SilverPop"] = 'SilverPop'] = "SilverPop";
    })(ProviderNameEnum = ItemThirdPartyEmailMarketing.ProviderNameEnum || (ItemThirdPartyEmailMarketing.ProviderNameEnum = {}));
})(ItemThirdPartyEmailMarketing = exports.ItemThirdPartyEmailMarketing || (exports.ItemThirdPartyEmailMarketing = {}));
exports.ItemThirdPartyEmailMarketing = ItemThirdPartyEmailMarketing;
var ItemVariantItem = (function () {
    function ItemVariantItem() {
    }
    ItemVariantItem.getAttributeTypeMap = function () {
        return ItemVariantItem.attributeTypeMap;
    };
    ItemVariantItem.discriminator = undefined;
    ItemVariantItem.attributeTypeMap = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "merchantItemMultimediaOid",
            "baseName": "merchant_item_multimedia_oid",
            "type": "number"
        },
        {
            "name": "variantMerchantItemId",
            "baseName": "variant_merchant_item_id",
            "type": "string"
        },
        {
            "name": "variantMerchantItemOid",
            "baseName": "variant_merchant_item_oid",
            "type": "number"
        },
        {
            "name": "variationOptions",
            "baseName": "variation_options",
            "type": "Array<string>"
        },
        {
            "name": "variations",
            "baseName": "variations",
            "type": "Array<string>"
        }
    ];
    return ItemVariantItem;
}());
exports.ItemVariantItem = ItemVariantItem;
var ItemVariation = (function () {
    function ItemVariation() {
    }
    ItemVariation.getAttributeTypeMap = function () {
        return ItemVariation.attributeTypeMap;
    };
    ItemVariation.discriminator = undefined;
    ItemVariation.attributeTypeMap = [
        {
            "name": "defaultText",
            "baseName": "default_text",
            "type": "string"
        },
        {
            "name": "defaultTextTranslatedTextInstanceOid",
            "baseName": "default_text_translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nameTranslatedTextInstanceOid",
            "baseName": "name_translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<ItemVariationOption>"
        }
    ];
    return ItemVariation;
}());
exports.ItemVariation = ItemVariation;
var ItemVariationOption = (function () {
    function ItemVariationOption() {
    }
    ItemVariationOption.getAttributeTypeMap = function () {
        return ItemVariationOption.attributeTypeMap;
    };
    ItemVariationOption.discriminator = undefined;
    ItemVariationOption.attributeTypeMap = [
        {
            "name": "defaultOption",
            "baseName": "default_option",
            "type": "boolean"
        },
        {
            "name": "merchantItemMultimediaOid",
            "baseName": "merchant_item_multimedia_oid",
            "type": "number"
        },
        {
            "name": "translatedTextInstanceOid",
            "baseName": "translated_text_instance_oid",
            "type": "number"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return ItemVariationOption;
}());
exports.ItemVariationOption = ItemVariationOption;
var ItemWishlistMember = (function () {
    function ItemWishlistMember() {
    }
    ItemWishlistMember.getAttributeTypeMap = function () {
        return ItemWishlistMember.attributeTypeMap;
    };
    ItemWishlistMember.discriminator = undefined;
    ItemWishlistMember.attributeTypeMap = [
        {
            "name": "wishlistMemberInstanceDescription",
            "baseName": "wishlist_member_instance_description",
            "type": "string"
        },
        {
            "name": "wishlistMemberInstanceOid",
            "baseName": "wishlist_member_instance_oid",
            "type": "number"
        },
        {
            "name": "wishlistMemberSku",
            "baseName": "wishlist_member_sku",
            "type": "string"
        }
    ];
    return ItemWishlistMember;
}());
exports.ItemWishlistMember = ItemWishlistMember;
var ItemsRequest = (function () {
    function ItemsRequest() {
    }
    ItemsRequest.getAttributeTypeMap = function () {
        return ItemsRequest.attributeTypeMap;
    };
    ItemsRequest.discriminator = undefined;
    ItemsRequest.attributeTypeMap = [
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<Item>"
        }
    ];
    return ItemsRequest;
}());
exports.ItemsRequest = ItemsRequest;
var ItemsResponse = (function () {
    function ItemsResponse() {
    }
    ItemsResponse.getAttributeTypeMap = function () {
        return ItemsResponse.attributeTypeMap;
    };
    ItemsResponse.discriminator = undefined;
    ItemsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<Item>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ItemsResponse;
}());
exports.ItemsResponse = ItemsResponse;
var KeyValue = (function () {
    function KeyValue() {
    }
    KeyValue.getAttributeTypeMap = function () {
        return KeyValue.attributeTypeMap;
    };
    KeyValue.discriminator = undefined;
    KeyValue.attributeTypeMap = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return KeyValue;
}());
exports.KeyValue = KeyValue;
var LibraryFilterValues = (function () {
    function LibraryFilterValues() {
    }
    LibraryFilterValues.getAttributeTypeMap = function () {
        return LibraryFilterValues.attributeTypeMap;
    };
    LibraryFilterValues.discriminator = undefined;
    LibraryFilterValues.attributeTypeMap = [
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<string>"
        },
        {
            "name": "industries",
            "baseName": "industries",
            "type": "Array<string>"
        },
        {
            "name": "styles",
            "baseName": "styles",
            "type": "Array<string>"
        },
        {
            "name": "types",
            "baseName": "types",
            "type": "Array<string>"
        }
    ];
    return LibraryFilterValues;
}());
exports.LibraryFilterValues = LibraryFilterValues;
var LibraryFilterValuesResponse = (function () {
    function LibraryFilterValuesResponse() {
    }
    LibraryFilterValuesResponse.getAttributeTypeMap = function () {
        return LibraryFilterValuesResponse.attributeTypeMap;
    };
    LibraryFilterValuesResponse.discriminator = undefined;
    LibraryFilterValuesResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "filterValues",
            "baseName": "filter_values",
            "type": "LibraryFilterValues"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return LibraryFilterValuesResponse;
}());
exports.LibraryFilterValuesResponse = LibraryFilterValuesResponse;
var LibraryItem = (function () {
    function LibraryItem() {
    }
    LibraryItem.getAttributeTypeMap = function () {
        return LibraryItem.attributeTypeMap;
    };
    LibraryItem.discriminator = undefined;
    LibraryItem.attributeTypeMap = [
        {
            "name": "assets",
            "baseName": "assets",
            "type": "Array<LibraryItemAsset>"
        },
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<string>"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "contentType",
            "baseName": "content_type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "industries",
            "baseName": "industries",
            "type": "Array<string>"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "myPurchasedVersion",
            "baseName": "my_purchased_version",
            "type": "number"
        },
        {
            "name": "originalObjectId",
            "baseName": "original_object_id",
            "type": "string"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "priceFormatted",
            "baseName": "price_formatted",
            "type": "string"
        },
        {
            "name": "published",
            "baseName": "published",
            "type": "boolean"
        },
        {
            "name": "publishedDts",
            "baseName": "published_dts",
            "type": "any"
        },
        {
            "name": "publishedFromLibraryItemOid",
            "baseName": "published_from_library_item_oid",
            "type": "number"
        },
        {
            "name": "publishedVersion",
            "baseName": "published_version",
            "type": "number"
        },
        {
            "name": "purchased",
            "baseName": "purchased",
            "type": "boolean"
        },
        {
            "name": "purchasedFromLibraryItemOid",
            "baseName": "purchased_from_library_item_oid",
            "type": "number"
        },
        {
            "name": "purchasedVersion",
            "baseName": "purchased_version",
            "type": "number"
        },
        {
            "name": "rejected",
            "baseName": "rejected",
            "type": "boolean"
        },
        {
            "name": "rejectedReason",
            "baseName": "rejected_reason",
            "type": "string"
        },
        {
            "name": "reviewed",
            "baseName": "reviewed",
            "type": "boolean"
        },
        {
            "name": "reviewedDts",
            "baseName": "reviewed_dts",
            "type": "any"
        },
        {
            "name": "screenshots",
            "baseName": "screenshots",
            "type": "Array<LibraryItemScreenshot>"
        },
        {
            "name": "shareWithAccounts",
            "baseName": "share_with_accounts",
            "type": "Array<LibraryItemAccount>"
        },
        {
            "name": "shareWithOtherEmails",
            "baseName": "share_with_other_emails",
            "type": "Array<LibraryItemEmail>"
        },
        {
            "name": "shared",
            "baseName": "shared",
            "type": "boolean"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "boolean"
        },
        {
            "name": "sourceToLibraryItemOid",
            "baseName": "source_to_library_item_oid",
            "type": "number"
        },
        {
            "name": "sourceVersion",
            "baseName": "source_version",
            "type": "number"
        },
        {
            "name": "style",
            "baseName": "style",
            "type": "string"
        },
        {
            "name": "timesPurchased",
            "baseName": "times_purchased",
            "type": "number"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }
    ];
    return LibraryItem;
}());
exports.LibraryItem = LibraryItem;
var LibraryItemAccount = (function () {
    function LibraryItemAccount() {
    }
    LibraryItemAccount.getAttributeTypeMap = function () {
        return LibraryItemAccount.attributeTypeMap;
    };
    LibraryItemAccount.discriminator = undefined;
    LibraryItemAccount.attributeTypeMap = [
        {
            "name": "libraryItemAccountOid",
            "baseName": "library_item_account_oid",
            "type": "number"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "otherMerchantId",
            "baseName": "other_merchant_id",
            "type": "string"
        }
    ];
    return LibraryItemAccount;
}());
exports.LibraryItemAccount = LibraryItemAccount;
var LibraryItemAsset = (function () {
    function LibraryItemAsset() {
    }
    LibraryItemAsset.getAttributeTypeMap = function () {
        return LibraryItemAsset.attributeTypeMap;
    };
    LibraryItemAsset.discriminator = undefined;
    LibraryItemAsset.attributeTypeMap = [
        {
            "name": "mimeType",
            "baseName": "mime_type",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return LibraryItemAsset;
}());
exports.LibraryItemAsset = LibraryItemAsset;
var LibraryItemEmail = (function () {
    function LibraryItemEmail() {
    }
    LibraryItemEmail.getAttributeTypeMap = function () {
        return LibraryItemEmail.attributeTypeMap;
    };
    LibraryItemEmail.discriminator = undefined;
    LibraryItemEmail.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "libraryItemEmailOid",
            "baseName": "library_item_email_oid",
            "type": "number"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        }
    ];
    return LibraryItemEmail;
}());
exports.LibraryItemEmail = LibraryItemEmail;
var LibraryItemQuery = (function () {
    function LibraryItemQuery() {
    }
    LibraryItemQuery.getAttributeTypeMap = function () {
        return LibraryItemQuery.attributeTypeMap;
    };
    LibraryItemQuery.discriminator = undefined;
    LibraryItemQuery.attributeTypeMap = [
        {
            "name": "category",
            "baseName": "category",
            "type": "string"
        },
        {
            "name": "contentType",
            "baseName": "content_type",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "industry",
            "baseName": "industry",
            "type": "string"
        },
        {
            "name": "priceHigh",
            "baseName": "price_high",
            "type": "number"
        },
        {
            "name": "priceLow",
            "baseName": "price_low",
            "type": "number"
        },
        {
            "name": "publishedDtsBegin",
            "baseName": "published_dts_begin",
            "type": "string"
        },
        {
            "name": "publishedDtsEnd",
            "baseName": "published_dts_end",
            "type": "string"
        },
        {
            "name": "sourceOfPublished",
            "baseName": "source_of_published",
            "type": "boolean"
        },
        {
            "name": "style",
            "baseName": "style",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }
    ];
    return LibraryItemQuery;
}());
exports.LibraryItemQuery = LibraryItemQuery;
var LibraryItemResponse = (function () {
    function LibraryItemResponse() {
    }
    LibraryItemResponse.getAttributeTypeMap = function () {
        return LibraryItemResponse.attributeTypeMap;
    };
    LibraryItemResponse.discriminator = undefined;
    LibraryItemResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "libraryItem",
            "baseName": "library_item",
            "type": "LibraryItem"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return LibraryItemResponse;
}());
exports.LibraryItemResponse = LibraryItemResponse;
var LibraryItemScreenshot = (function () {
    function LibraryItemScreenshot() {
    }
    LibraryItemScreenshot.getAttributeTypeMap = function () {
        return LibraryItemScreenshot.attributeTypeMap;
    };
    LibraryItemScreenshot.discriminator = undefined;
    LibraryItemScreenshot.attributeTypeMap = [
        {
            "name": "defaultUrl",
            "baseName": "default_url",
            "type": "boolean"
        },
        {
            "name": "screenshotUrl",
            "baseName": "screenshot_url",
            "type": "string"
        }
    ];
    return LibraryItemScreenshot;
}());
exports.LibraryItemScreenshot = LibraryItemScreenshot;
var LibraryItemsResponse = (function () {
    function LibraryItemsResponse() {
    }
    LibraryItemsResponse.getAttributeTypeMap = function () {
        return LibraryItemsResponse.attributeTypeMap;
    };
    LibraryItemsResponse.discriminator = undefined;
    LibraryItemsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<LibraryItem>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return LibraryItemsResponse;
}());
exports.LibraryItemsResponse = LibraryItemsResponse;
var LinkedAccount = (function () {
    function LinkedAccount() {
    }
    LinkedAccount.getAttributeTypeMap = function () {
        return LinkedAccount.attributeTypeMap;
    };
    LinkedAccount.discriminator = undefined;
    LinkedAccount.attributeTypeMap = [
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        }
    ];
    return LinkedAccount;
}());
exports.LinkedAccount = LinkedAccount;
var ListSegmentMembership = (function () {
    function ListSegmentMembership() {
    }
    ListSegmentMembership.getAttributeTypeMap = function () {
        return ListSegmentMembership.attributeTypeMap;
    };
    ListSegmentMembership.discriminator = undefined;
    ListSegmentMembership.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        }
    ];
    return ListSegmentMembership;
}());
exports.ListSegmentMembership = ListSegmentMembership;
var LookupRequest = (function () {
    function LookupRequest() {
    }
    LookupRequest.getAttributeTypeMap = function () {
        return LookupRequest.attributeTypeMap;
    };
    LookupRequest.discriminator = undefined;
    LookupRequest.attributeTypeMap = [
        {
            "name": "category",
            "baseName": "category",
            "type": "string"
        },
        {
            "name": "matches",
            "baseName": "matches",
            "type": "string"
        },
        {
            "name": "maxHits",
            "baseName": "max_hits",
            "type": "number"
        },
        {
            "name": "storefrontOid",
            "baseName": "storefront_oid",
            "type": "number"
        },
        {
            "name": "subcategory",
            "baseName": "subcategory",
            "type": "string"
        }
    ];
    return LookupRequest;
}());
exports.LookupRequest = LookupRequest;
var LookupResponse = (function () {
    function LookupResponse() {
    }
    LookupResponse.getAttributeTypeMap = function () {
        return LookupResponse.attributeTypeMap;
    };
    LookupResponse.discriminator = undefined;
    LookupResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "values",
            "baseName": "values",
            "type": "Array<KeyValue>"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return LookupResponse;
}());
exports.LookupResponse = LookupResponse;
var Metric = (function () {
    function Metric() {
    }
    Metric.getAttributeTypeMap = function () {
        return Metric.attributeTypeMap;
    };
    Metric.discriminator = undefined;
    Metric.attributeTypeMap = [
        {
            "name": "allTime",
            "baseName": "all_time",
            "type": "number"
        },
        {
            "name": "allTimeFormatted",
            "baseName": "all_time_formatted",
            "type": "string"
        },
        {
            "name": "last30",
            "baseName": "last_30",
            "type": "number"
        },
        {
            "name": "last30Formatted",
            "baseName": "last_30_formatted",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "prior30",
            "baseName": "prior_30",
            "type": "number"
        },
        {
            "name": "prior30Formatted",
            "baseName": "prior_30_formatted",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        }
    ];
    return Metric;
}());
exports.Metric = Metric;
var ModelError = (function () {
    function ModelError() {
    }
    ModelError.getAttributeTypeMap = function () {
        return ModelError.attributeTypeMap;
    };
    ModelError.discriminator = undefined;
    ModelError.attributeTypeMap = [
        {
            "name": "developerMessage",
            "baseName": "developer_message",
            "type": "string"
        },
        {
            "name": "errorCode",
            "baseName": "error_code",
            "type": "string"
        },
        {
            "name": "moreInfo",
            "baseName": "more_info",
            "type": "string"
        },
        {
            "name": "userMessage",
            "baseName": "user_message",
            "type": "string"
        }
    ];
    return ModelError;
}());
exports.ModelError = ModelError;
var Notification = (function () {
    function Notification() {
    }
    Notification.getAttributeTypeMap = function () {
        return Notification.attributeTypeMap;
    };
    Notification.discriminator = undefined;
    Notification.attributeTypeMap = [
        {
            "name": "canFilterByDistributionCenters",
            "baseName": "can_filter_by_distribution_centers",
            "type": "boolean"
        },
        {
            "name": "canIncludeAffiliate",
            "baseName": "can_include_affiliate",
            "type": "boolean"
        },
        {
            "name": "canIncludeOrder",
            "baseName": "can_include_order",
            "type": "boolean"
        },
        {
            "name": "canIncludeOrderPlainText",
            "baseName": "can_include_order_plain_text",
            "type": "boolean"
        },
        {
            "name": "distributionCenterFilters",
            "baseName": "distribution_center_filters",
            "type": "Array<string>"
        },
        {
            "name": "includeAffiliate",
            "baseName": "include_affiliate",
            "type": "boolean"
        },
        {
            "name": "includeOrder",
            "baseName": "include_order",
            "type": "boolean"
        },
        {
            "name": "includeOrderPlainText",
            "baseName": "include_order_plain_text",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "notificationGroup",
            "baseName": "notification_group",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        }
    ];
    return Notification;
}());
exports.Notification = Notification;
var OauthRevokeSuccessResponse = (function () {
    function OauthRevokeSuccessResponse() {
    }
    OauthRevokeSuccessResponse.getAttributeTypeMap = function () {
        return OauthRevokeSuccessResponse.attributeTypeMap;
    };
    OauthRevokeSuccessResponse.discriminator = undefined;
    OauthRevokeSuccessResponse.attributeTypeMap = [
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "successful",
            "baseName": "successful",
            "type": "boolean"
        }
    ];
    return OauthRevokeSuccessResponse;
}());
exports.OauthRevokeSuccessResponse = OauthRevokeSuccessResponse;
var OauthTokenResponse = (function () {
    function OauthTokenResponse() {
    }
    OauthTokenResponse.getAttributeTypeMap = function () {
        return OauthTokenResponse.attributeTypeMap;
    };
    OauthTokenResponse.discriminator = undefined;
    OauthTokenResponse.attributeTypeMap = [
        {
            "name": "accessToken",
            "baseName": "access_token",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        },
        {
            "name": "errorDescription",
            "baseName": "error_description",
            "type": "string"
        },
        {
            "name": "errorUri",
            "baseName": "error_uri",
            "type": "string"
        },
        {
            "name": "expiresIn",
            "baseName": "expires_in",
            "type": "string"
        },
        {
            "name": "refreshToken",
            "baseName": "refresh_token",
            "type": "string"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "tokenType",
            "baseName": "token_type",
            "type": "OauthTokenResponse.TokenTypeEnum"
        }
    ];
    return OauthTokenResponse;
}());
exports.OauthTokenResponse = OauthTokenResponse;
(function (OauthTokenResponse) {
    var TokenTypeEnum;
    (function (TokenTypeEnum) {
        TokenTypeEnum[TokenTypeEnum["Bearer"] = 'bearer'] = "Bearer";
    })(TokenTypeEnum = OauthTokenResponse.TokenTypeEnum || (OauthTokenResponse.TokenTypeEnum = {}));
})(OauthTokenResponse = exports.OauthTokenResponse || (exports.OauthTokenResponse = {}));
exports.OauthTokenResponse = OauthTokenResponse;
var Order = (function () {
    function Order() {
    }
    Order.getAttributeTypeMap = function () {
        return Order.attributeTypeMap;
    };
    Order.discriminator = undefined;
    Order.attributeTypeMap = [
        {
            "name": "affiliates",
            "baseName": "affiliates",
            "type": "Array<OrderAffiliate>"
        },
        {
            "name": "autoOrder",
            "baseName": "auto_order",
            "type": "OrderAutoOrder"
        },
        {
            "name": "billing",
            "baseName": "billing",
            "type": "OrderBilling"
        },
        {
            "name": "buysafe",
            "baseName": "buysafe",
            "type": "OrderBuysafe"
        },
        {
            "name": "channelPartner",
            "baseName": "channel_partner",
            "type": "OrderChannelPartner"
        },
        {
            "name": "checkout",
            "baseName": "checkout",
            "type": "OrderCheckout"
        },
        {
            "name": "coupons",
            "baseName": "coupons",
            "type": "Array<OrderCoupon>"
        },
        {
            "name": "creationDts",
            "baseName": "creation_dts",
            "type": "string"
        },
        {
            "name": "currencyCode",
            "baseName": "currency_code",
            "type": "string"
        },
        {
            "name": "currentStage",
            "baseName": "current_stage",
            "type": "Order.CurrentStageEnum"
        },
        {
            "name": "customerProfile",
            "baseName": "customer_profile",
            "type": "Customer"
        },
        {
            "name": "digitalOrder",
            "baseName": "digital_order",
            "type": "OrderDigitalOrder"
        },
        {
            "name": "edi",
            "baseName": "edi",
            "type": "OrderEdi"
        },
        {
            "name": "exchangeRate",
            "baseName": "exchange_rate",
            "type": "number"
        },
        {
            "name": "fraudScore",
            "baseName": "fraud_score",
            "type": "OrderFraudScore"
        },
        {
            "name": "gift",
            "baseName": "gift",
            "type": "OrderGift"
        },
        {
            "name": "giftCertificate",
            "baseName": "gift_certificate",
            "type": "OrderGiftCertificate"
        },
        {
            "name": "internal",
            "baseName": "internal",
            "type": "OrderInternal"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<OrderItem>"
        },
        {
            "name": "languageIsoCode",
            "baseName": "language_iso_code",
            "type": "string"
        },
        {
            "name": "linkedShipment",
            "baseName": "linked_shipment",
            "type": "OrderLinkedShipment"
        },
        {
            "name": "marketing",
            "baseName": "marketing",
            "type": "OrderMarketing"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "payment",
            "baseName": "payment",
            "type": "OrderPayment"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<OrderProperty>"
        },
        {
            "name": "quote",
            "baseName": "quote",
            "type": "OrderQuote"
        },
        {
            "name": "refundDts",
            "baseName": "refund_dts",
            "type": "string"
        },
        {
            "name": "rejectDts",
            "baseName": "reject_dts",
            "type": "string"
        },
        {
            "name": "salesforce",
            "baseName": "salesforce",
            "type": "OrderSalesforce"
        },
        {
            "name": "shipping",
            "baseName": "shipping",
            "type": "OrderShipping"
        },
        {
            "name": "summary",
            "baseName": "summary",
            "type": "OrderSummary"
        },
        {
            "name": "tags",
            "baseName": "Tags",
            "type": "Array<OrderTag>"
        },
        {
            "name": "taxes",
            "baseName": "taxes",
            "type": "OrderTaxes"
        }
    ];
    return Order;
}());
exports.Order = Order;
(function (Order) {
    var CurrentStageEnum;
    (function (CurrentStageEnum) {
        CurrentStageEnum[CurrentStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        CurrentStageEnum[CurrentStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        CurrentStageEnum[CurrentStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        CurrentStageEnum[CurrentStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        CurrentStageEnum[CurrentStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        CurrentStageEnum[CurrentStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        CurrentStageEnum[CurrentStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        CurrentStageEnum[CurrentStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        CurrentStageEnum[CurrentStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        CurrentStageEnum[CurrentStageEnum["Unknown"] = 'Unknown'] = "Unknown";
        CurrentStageEnum[CurrentStageEnum["PreOrdered"] = 'Pre-ordered'] = "PreOrdered";
    })(CurrentStageEnum = Order.CurrentStageEnum || (Order.CurrentStageEnum = {}));
})(Order = exports.Order || (exports.Order = {}));
exports.Order = Order;
var OrderAffiliate = (function () {
    function OrderAffiliate() {
    }
    OrderAffiliate.getAttributeTypeMap = function () {
        return OrderAffiliate.attributeTypeMap;
    };
    OrderAffiliate.discriminator = undefined;
    OrderAffiliate.attributeTypeMap = [
        {
            "name": "affiliateOid",
            "baseName": "affiliate_oid",
            "type": "number"
        },
        {
            "name": "ledgerEntries",
            "baseName": "ledger_entries",
            "type": "Array<OrderAffiliateLedger>"
        },
        {
            "name": "subId",
            "baseName": "sub_id",
            "type": "string"
        }
    ];
    return OrderAffiliate;
}());
exports.OrderAffiliate = OrderAffiliate;
var OrderAffiliateLedger = (function () {
    function OrderAffiliateLedger() {
    }
    OrderAffiliateLedger.getAttributeTypeMap = function () {
        return OrderAffiliateLedger.attributeTypeMap;
    };
    OrderAffiliateLedger.discriminator = undefined;
    OrderAffiliateLedger.attributeTypeMap = [
        {
            "name": "assignedByUser",
            "baseName": "assigned_by_user",
            "type": "string"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "tierNumber",
            "baseName": "tier_number",
            "type": "number"
        },
        {
            "name": "transactionAmount",
            "baseName": "transaction_amount",
            "type": "number"
        },
        {
            "name": "transactionAmountPaid",
            "baseName": "transaction_amount_paid",
            "type": "number"
        },
        {
            "name": "transactionDts",
            "baseName": "transaction_dts",
            "type": "string"
        },
        {
            "name": "transactionMemo",
            "baseName": "transaction_memo",
            "type": "string"
        },
        {
            "name": "transactionPercentage",
            "baseName": "transaction_percentage",
            "type": "number"
        },
        {
            "name": "transactionState",
            "baseName": "transaction_state",
            "type": "OrderAffiliateLedger.TransactionStateEnum"
        }
    ];
    return OrderAffiliateLedger;
}());
exports.OrderAffiliateLedger = OrderAffiliateLedger;
(function (OrderAffiliateLedger) {
    var TransactionStateEnum;
    (function (TransactionStateEnum) {
        TransactionStateEnum[TransactionStateEnum["Pending"] = 'Pending'] = "Pending";
        TransactionStateEnum[TransactionStateEnum["Posted"] = 'Posted'] = "Posted";
        TransactionStateEnum[TransactionStateEnum["Approved"] = 'Approved'] = "Approved";
        TransactionStateEnum[TransactionStateEnum["Paid"] = 'Paid'] = "Paid";
        TransactionStateEnum[TransactionStateEnum["Rejected"] = 'Rejected'] = "Rejected";
        TransactionStateEnum[TransactionStateEnum["PartiallyPaid"] = 'Partially Paid'] = "PartiallyPaid";
    })(TransactionStateEnum = OrderAffiliateLedger.TransactionStateEnum || (OrderAffiliateLedger.TransactionStateEnum = {}));
})(OrderAffiliateLedger = exports.OrderAffiliateLedger || (exports.OrderAffiliateLedger = {}));
exports.OrderAffiliateLedger = OrderAffiliateLedger;
var OrderAutoOrder = (function () {
    function OrderAutoOrder() {
    }
    OrderAutoOrder.getAttributeTypeMap = function () {
        return OrderAutoOrder.attributeTypeMap;
    };
    OrderAutoOrder.discriminator = undefined;
    OrderAutoOrder.attributeTypeMap = [
        {
            "name": "autoOrderCode",
            "baseName": "auto_order_code",
            "type": "string"
        },
        {
            "name": "autoOrderOid",
            "baseName": "auto_order_oid",
            "type": "number"
        },
        {
            "name": "cancelAfterNextXOrders",
            "baseName": "cancel_after_next_x_orders",
            "type": "number"
        },
        {
            "name": "cancelDowngrade",
            "baseName": "cancel_downgrade",
            "type": "boolean"
        },
        {
            "name": "cancelUpgrade",
            "baseName": "cancel_upgrade",
            "type": "boolean"
        },
        {
            "name": "canceledByUser",
            "baseName": "canceled_by_user",
            "type": "string"
        },
        {
            "name": "canceledDts",
            "baseName": "canceled_dts",
            "type": "string"
        },
        {
            "name": "completed",
            "baseName": "completed",
            "type": "boolean"
        },
        {
            "name": "creditCardAttempt",
            "baseName": "credit_card_attempt",
            "type": "number"
        },
        {
            "name": "disabledDts",
            "baseName": "disabled_dts",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "failureReason",
            "baseName": "failure_reason",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<AutoOrderItem>"
        },
        {
            "name": "nextAttempt",
            "baseName": "next_attempt",
            "type": "string"
        },
        {
            "name": "originalOrderId",
            "baseName": "original_order_id",
            "type": "string"
        },
        {
            "name": "overrideAffiliateId",
            "baseName": "override_affiliate_id",
            "type": "number"
        },
        {
            "name": "rebillOrders",
            "baseName": "rebill_orders",
            "type": "Array<Order>"
        },
        {
            "name": "rotatingTransactionGatewayCode",
            "baseName": "rotating_transaction_gateway_code",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "OrderAutoOrder.StatusEnum"
        }
    ];
    return OrderAutoOrder;
}());
exports.OrderAutoOrder = OrderAutoOrder;
(function (OrderAutoOrder) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Canceled"] = 'canceled'] = "Canceled";
        StatusEnum[StatusEnum["Disabled"] = 'disabled'] = "Disabled";
    })(StatusEnum = OrderAutoOrder.StatusEnum || (OrderAutoOrder.StatusEnum = {}));
})(OrderAutoOrder = exports.OrderAutoOrder || (exports.OrderAutoOrder = {}));
exports.OrderAutoOrder = OrderAutoOrder;
var OrderBilling = (function () {
    function OrderBilling() {
    }
    OrderBilling.getAttributeTypeMap = function () {
        return OrderBilling.attributeTypeMap;
    };
    OrderBilling.discriminator = undefined;
    OrderBilling.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "ccEmails",
            "baseName": "cc_emails",
            "type": "Array<string>"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "dayPhoneE164",
            "baseName": "day_phone_e164",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return OrderBilling;
}());
exports.OrderBilling = OrderBilling;
var OrderBuysafe = (function () {
    function OrderBuysafe() {
    }
    OrderBuysafe.getAttributeTypeMap = function () {
        return OrderBuysafe.attributeTypeMap;
    };
    OrderBuysafe.discriminator = undefined;
    OrderBuysafe.attributeTypeMap = [
        {
            "name": "buysafeBondAvailable",
            "baseName": "buysafe_bond_available",
            "type": "boolean"
        },
        {
            "name": "buysafeBondCost",
            "baseName": "buysafe_bond_cost",
            "type": "Currency"
        },
        {
            "name": "buysafeBondFree",
            "baseName": "buysafe_bond_free",
            "type": "boolean"
        },
        {
            "name": "buysafeBondRefunded",
            "baseName": "buysafe_bond_refunded",
            "type": "Currency"
        },
        {
            "name": "buysafeBondWanted",
            "baseName": "buysafe_bond_wanted",
            "type": "boolean"
        },
        {
            "name": "buysafeShoppingCartId",
            "baseName": "buysafe_shopping_cart_id",
            "type": "string"
        }
    ];
    return OrderBuysafe;
}());
exports.OrderBuysafe = OrderBuysafe;
var OrderByTokenQuery = (function () {
    function OrderByTokenQuery() {
    }
    OrderByTokenQuery.getAttributeTypeMap = function () {
        return OrderByTokenQuery.attributeTypeMap;
    };
    OrderByTokenQuery.discriminator = undefined;
    OrderByTokenQuery.attributeTypeMap = [
        {
            "name": "orderToken",
            "baseName": "order_token",
            "type": "string"
        }
    ];
    return OrderByTokenQuery;
}());
exports.OrderByTokenQuery = OrderByTokenQuery;
var OrderChannelPartner = (function () {
    function OrderChannelPartner() {
    }
    OrderChannelPartner.getAttributeTypeMap = function () {
        return OrderChannelPartner.attributeTypeMap;
    };
    OrderChannelPartner.discriminator = undefined;
    OrderChannelPartner.attributeTypeMap = [
        {
            "name": "autoApprovePurchaseOrder",
            "baseName": "auto_approve_purchase_order",
            "type": "boolean"
        },
        {
            "name": "channelPartnerCode",
            "baseName": "channel_partner_code",
            "type": "string"
        },
        {
            "name": "channelPartnerData",
            "baseName": "channel_partner_data",
            "type": "string"
        },
        {
            "name": "channelPartnerOid",
            "baseName": "channel_partner_oid",
            "type": "number"
        },
        {
            "name": "channelPartnerOrderId",
            "baseName": "channel_partner_order_id",
            "type": "string"
        },
        {
            "name": "noRealtimePaymentProcessing",
            "baseName": "no_realtime_payment_processing",
            "type": "boolean"
        },
        {
            "name": "skipPaymentProcessing",
            "baseName": "skip_payment_processing",
            "type": "boolean"
        },
        {
            "name": "storeCompleted",
            "baseName": "store_completed",
            "type": "boolean"
        },
        {
            "name": "storeIfPaymentDeclines",
            "baseName": "store_if_payment_declines",
            "type": "boolean"
        },
        {
            "name": "treatWarningsAsErrors",
            "baseName": "treat_warnings_as_errors",
            "type": "boolean"
        }
    ];
    return OrderChannelPartner;
}());
exports.OrderChannelPartner = OrderChannelPartner;
var OrderCheckout = (function () {
    function OrderCheckout() {
    }
    OrderCheckout.getAttributeTypeMap = function () {
        return OrderCheckout.attributeTypeMap;
    };
    OrderCheckout.discriminator = undefined;
    OrderCheckout.attributeTypeMap = [
        {
            "name": "comments",
            "baseName": "comments",
            "type": "string"
        },
        {
            "name": "customField1",
            "baseName": "custom_field1",
            "type": "string"
        },
        {
            "name": "customField2",
            "baseName": "custom_field2",
            "type": "string"
        },
        {
            "name": "customField3",
            "baseName": "custom_field3",
            "type": "string"
        },
        {
            "name": "customField4",
            "baseName": "custom_field4",
            "type": "string"
        },
        {
            "name": "customField5",
            "baseName": "custom_field5",
            "type": "string"
        },
        {
            "name": "customField6",
            "baseName": "custom_field6",
            "type": "string"
        },
        {
            "name": "customField7",
            "baseName": "custom_field7",
            "type": "string"
        },
        {
            "name": "customerIpAddress",
            "baseName": "customer_ip_address",
            "type": "string"
        },
        {
            "name": "screenBrandingThemeCode",
            "baseName": "screen_branding_theme_code",
            "type": "string"
        },
        {
            "name": "storefrontHostName",
            "baseName": "storefront_host_name",
            "type": "string"
        },
        {
            "name": "upsellPathCode",
            "baseName": "upsell_path_code",
            "type": "string"
        }
    ];
    return OrderCheckout;
}());
exports.OrderCheckout = OrderCheckout;
var OrderCoupon = (function () {
    function OrderCoupon() {
    }
    OrderCoupon.getAttributeTypeMap = function () {
        return OrderCoupon.attributeTypeMap;
    };
    OrderCoupon.discriminator = undefined;
    OrderCoupon.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "automaticallyApplied",
            "baseName": "automatically_applied",
            "type": "boolean"
        },
        {
            "name": "baseCouponCode",
            "baseName": "base_coupon_code",
            "type": "string"
        },
        {
            "name": "couponCode",
            "baseName": "coupon_code",
            "type": "string"
        }
    ];
    return OrderCoupon;
}());
exports.OrderCoupon = OrderCoupon;
var OrderDigitalItem = (function () {
    function OrderDigitalItem() {
    }
    OrderDigitalItem.getAttributeTypeMap = function () {
        return OrderDigitalItem.attributeTypeMap;
    };
    OrderDigitalItem.discriminator = undefined;
    OrderDigitalItem.attributeTypeMap = [
        {
            "name": "fileSize",
            "baseName": "file_size",
            "type": "number"
        },
        {
            "name": "lastDownload",
            "baseName": "last_download",
            "type": "string"
        },
        {
            "name": "lastDownloadIpAddress",
            "baseName": "last_download_ip_address",
            "type": "string"
        },
        {
            "name": "originalFilename",
            "baseName": "original_filename",
            "type": "string"
        },
        {
            "name": "productCode",
            "baseName": "product_code",
            "type": "string"
        },
        {
            "name": "productDescription",
            "baseName": "product_description",
            "type": "string"
        },
        {
            "name": "remainingDownloads",
            "baseName": "remaining_downloads",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return OrderDigitalItem;
}());
exports.OrderDigitalItem = OrderDigitalItem;
var OrderDigitalOrder = (function () {
    function OrderDigitalOrder() {
    }
    OrderDigitalOrder.getAttributeTypeMap = function () {
        return OrderDigitalOrder.attributeTypeMap;
    };
    OrderDigitalOrder.discriminator = undefined;
    OrderDigitalOrder.attributeTypeMap = [
        {
            "name": "creationDts",
            "baseName": "creation_dts",
            "type": "string"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<OrderDigitalItem>"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "urlId",
            "baseName": "url_id",
            "type": "string"
        }
    ];
    return OrderDigitalOrder;
}());
exports.OrderDigitalOrder = OrderDigitalOrder;
var OrderEdi = (function () {
    function OrderEdi() {
    }
    OrderEdi.getAttributeTypeMap = function () {
        return OrderEdi.attributeTypeMap;
    };
    OrderEdi.discriminator = undefined;
    OrderEdi.attributeTypeMap = [
        {
            "name": "billToEdiCode",
            "baseName": "bill_to_edi_code",
            "type": "string"
        },
        {
            "name": "ediDepartment",
            "baseName": "edi_department",
            "type": "string"
        },
        {
            "name": "ediInternalVendorNumber",
            "baseName": "edi_internal_vendor_number",
            "type": "string"
        },
        {
            "name": "shipToEdiCode",
            "baseName": "ship_to_edi_code",
            "type": "string"
        }
    ];
    return OrderEdi;
}());
exports.OrderEdi = OrderEdi;
var OrderFormat = (function () {
    function OrderFormat() {
    }
    OrderFormat.getAttributeTypeMap = function () {
        return OrderFormat.attributeTypeMap;
    };
    OrderFormat.discriminator = undefined;
    OrderFormat.attributeTypeMap = [
        {
            "name": "context",
            "baseName": "context",
            "type": "string"
        },
        {
            "name": "dontLinkEmailToSearch",
            "baseName": "dont_link_email_to_search",
            "type": "boolean"
        },
        {
            "name": "emailAsLink",
            "baseName": "email_as_link",
            "type": "boolean"
        },
        {
            "name": "filterDistributionCenterOid",
            "baseName": "filter_distribution_center_oid",
            "type": "number"
        },
        {
            "name": "filterToItemsInContactOid",
            "baseName": "filter_to_items_in_contact_oid",
            "type": "number"
        },
        {
            "name": "format",
            "baseName": "format",
            "type": "OrderFormat.FormatEnum"
        },
        {
            "name": "hideBillToAddress",
            "baseName": "hide_bill_to_address",
            "type": "boolean"
        },
        {
            "name": "hidePriceInformation",
            "baseName": "hide_price_information",
            "type": "boolean"
        },
        {
            "name": "linkFileAttachments",
            "baseName": "link_file_attachments",
            "type": "boolean"
        },
        {
            "name": "showContactInfo",
            "baseName": "show_contact_info",
            "type": "boolean"
        },
        {
            "name": "showInMerchantCurrency",
            "baseName": "show_in_merchant_currency",
            "type": "boolean"
        },
        {
            "name": "showInternalInformation",
            "baseName": "show_internal_information",
            "type": "boolean"
        },
        {
            "name": "showMerchantNotes",
            "baseName": "show_merchant_notes",
            "type": "boolean"
        },
        {
            "name": "showNonSensitivePaymentInfo",
            "baseName": "show_non_sensitive_payment_info",
            "type": "boolean"
        },
        {
            "name": "showPaymentInfo",
            "baseName": "show_payment_info",
            "type": "boolean"
        },
        {
            "name": "translate",
            "baseName": "translate",
            "type": "boolean"
        }
    ];
    return OrderFormat;
}());
exports.OrderFormat = OrderFormat;
(function (OrderFormat) {
    var FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["Text"] = 'text'] = "Text";
        FormatEnum[FormatEnum["Div"] = 'div'] = "Div";
        FormatEnum[FormatEnum["Table"] = 'table'] = "Table";
        FormatEnum[FormatEnum["Email"] = 'email'] = "Email";
    })(FormatEnum = OrderFormat.FormatEnum || (OrderFormat.FormatEnum = {}));
})(OrderFormat = exports.OrderFormat || (exports.OrderFormat = {}));
exports.OrderFormat = OrderFormat;
var OrderFormatResponse = (function () {
    function OrderFormatResponse() {
    }
    OrderFormatResponse.getAttributeTypeMap = function () {
        return OrderFormatResponse.attributeTypeMap;
    };
    OrderFormatResponse.discriminator = undefined;
    OrderFormatResponse.attributeTypeMap = [
        {
            "name": "cssLinks",
            "baseName": "css_links",
            "type": "Array<string>"
        },
        {
            "name": "formattedResult",
            "baseName": "formatted_result",
            "type": "string"
        }
    ];
    return OrderFormatResponse;
}());
exports.OrderFormatResponse = OrderFormatResponse;
var OrderFraudScore = (function () {
    function OrderFraudScore() {
    }
    OrderFraudScore.getAttributeTypeMap = function () {
        return OrderFraudScore.attributeTypeMap;
    };
    OrderFraudScore.discriminator = undefined;
    OrderFraudScore.attributeTypeMap = [
        {
            "name": "anonymousProxy",
            "baseName": "anonymous_proxy",
            "type": "boolean"
        },
        {
            "name": "binMatch",
            "baseName": "bin_match",
            "type": "OrderFraudScore.BinMatchEnum"
        },
        {
            "name": "carderEmail",
            "baseName": "carder_email",
            "type": "boolean"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "countryMatch",
            "baseName": "country_match",
            "type": "boolean"
        },
        {
            "name": "customerPhoneInBillingLocation",
            "baseName": "customer_phone_in_billing_location",
            "type": "string"
        },
        {
            "name": "distanceKm",
            "baseName": "distance_km",
            "type": "number"
        },
        {
            "name": "freeEmail",
            "baseName": "free_email",
            "type": "boolean"
        },
        {
            "name": "highRiskCountry",
            "baseName": "high_risk_country",
            "type": "boolean"
        },
        {
            "name": "ipCity",
            "baseName": "ip_city",
            "type": "string"
        },
        {
            "name": "ipIsp",
            "baseName": "ip_isp",
            "type": "string"
        },
        {
            "name": "ipLatitude",
            "baseName": "ip_latitude",
            "type": "string"
        },
        {
            "name": "ipLongitude",
            "baseName": "ip_longitude",
            "type": "string"
        },
        {
            "name": "ipOrg",
            "baseName": "ip_org",
            "type": "string"
        },
        {
            "name": "ipRegion",
            "baseName": "ip_region",
            "type": "string"
        },
        {
            "name": "proxyScore",
            "baseName": "proxy_score",
            "type": "number"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number"
        },
        {
            "name": "shipForwarder",
            "baseName": "ship_forwarder",
            "type": "boolean"
        },
        {
            "name": "spamScore",
            "baseName": "spam_score",
            "type": "number"
        },
        {
            "name": "transparentProxy",
            "baseName": "transparent_proxy",
            "type": "boolean"
        }
    ];
    return OrderFraudScore;
}());
exports.OrderFraudScore = OrderFraudScore;
(function (OrderFraudScore) {
    var BinMatchEnum;
    (function (BinMatchEnum) {
        BinMatchEnum[BinMatchEnum["NA"] = 'NA'] = "NA";
        BinMatchEnum[BinMatchEnum["No"] = 'No'] = "No";
        BinMatchEnum[BinMatchEnum["NotFound"] = 'NotFound'] = "NotFound";
        BinMatchEnum[BinMatchEnum["Yes"] = 'Yes'] = "Yes";
    })(BinMatchEnum = OrderFraudScore.BinMatchEnum || (OrderFraudScore.BinMatchEnum = {}));
})(OrderFraudScore = exports.OrderFraudScore || (exports.OrderFraudScore = {}));
exports.OrderFraudScore = OrderFraudScore;
var OrderGift = (function () {
    function OrderGift() {
    }
    OrderGift.getAttributeTypeMap = function () {
        return OrderGift.attributeTypeMap;
    };
    OrderGift.discriminator = undefined;
    OrderGift.attributeTypeMap = [
        {
            "name": "gift",
            "baseName": "gift",
            "type": "boolean"
        },
        {
            "name": "giftCharge",
            "baseName": "gift_charge",
            "type": "Currency"
        },
        {
            "name": "giftChargeAccountingCode",
            "baseName": "gift_charge_accounting_code",
            "type": "string"
        },
        {
            "name": "giftChargeRefunded",
            "baseName": "gift_charge_refunded",
            "type": "Currency"
        },
        {
            "name": "giftEmail",
            "baseName": "gift_email",
            "type": "string"
        },
        {
            "name": "giftMessage",
            "baseName": "gift_message",
            "type": "string"
        },
        {
            "name": "giftWrapAccountingCode",
            "baseName": "gift_wrap_accounting_code",
            "type": "string"
        },
        {
            "name": "giftWrapCost",
            "baseName": "gift_wrap_cost",
            "type": "Currency"
        },
        {
            "name": "giftWrapRefunded",
            "baseName": "gift_wrap_refunded",
            "type": "Currency"
        },
        {
            "name": "giftWrapTitle",
            "baseName": "gift_wrap_title",
            "type": "string"
        }
    ];
    return OrderGift;
}());
exports.OrderGift = OrderGift;
var OrderGiftCertificate = (function () {
    function OrderGiftCertificate() {
    }
    OrderGiftCertificate.getAttributeTypeMap = function () {
        return OrderGiftCertificate.attributeTypeMap;
    };
    OrderGiftCertificate.discriminator = undefined;
    OrderGiftCertificate.attributeTypeMap = [
        {
            "name": "giftCertificateAmount",
            "baseName": "gift_certificate_amount",
            "type": "Currency"
        },
        {
            "name": "giftCertificateCode",
            "baseName": "gift_certificate_code",
            "type": "string"
        },
        {
            "name": "giftCertificateOid",
            "baseName": "gift_certificate_oid",
            "type": "number"
        }
    ];
    return OrderGiftCertificate;
}());
exports.OrderGiftCertificate = OrderGiftCertificate;
var OrderInternal = (function () {
    function OrderInternal() {
    }
    OrderInternal.getAttributeTypeMap = function () {
        return OrderInternal.attributeTypeMap;
    };
    OrderInternal.discriminator = undefined;
    OrderInternal.attributeTypeMap = [
        {
            "name": "exportedToAccounting",
            "baseName": "exported_to_accounting",
            "type": "boolean"
        },
        {
            "name": "merchantNotes",
            "baseName": "merchant_notes",
            "type": "string"
        },
        {
            "name": "placedByUser",
            "baseName": "placed_by_user",
            "type": "string"
        },
        {
            "name": "refundByUser",
            "baseName": "refund_by_user",
            "type": "string"
        },
        {
            "name": "salesRepCode",
            "baseName": "sales_rep_code",
            "type": "string"
        }
    ];
    return OrderInternal;
}());
exports.OrderInternal = OrderInternal;
var OrderItem = (function () {
    function OrderItem() {
    }
    OrderItem.getAttributeTypeMap = function () {
        return OrderItem.attributeTypeMap;
    };
    OrderItem.discriminator = undefined;
    OrderItem.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "activationCodes",
            "baseName": "activation_codes",
            "type": "Array<string>"
        },
        {
            "name": "arbitraryUnitCost",
            "baseName": "arbitrary_unit_cost",
            "type": "Currency"
        },
        {
            "name": "autoOrderLastRebillDts",
            "baseName": "auto_order_last_rebill_dts",
            "type": "string"
        },
        {
            "name": "autoOrderSchedule",
            "baseName": "auto_order_schedule",
            "type": "string"
        },
        {
            "name": "barcode",
            "baseName": "barcode",
            "type": "string"
        },
        {
            "name": "channelPartnerItemId",
            "baseName": "channel_partner_item_id",
            "type": "string"
        },
        {
            "name": "cogs",
            "baseName": "cogs",
            "type": "number"
        },
        {
            "name": "componentUnitValue",
            "baseName": "component_unit_value",
            "type": "number"
        },
        {
            "name": "cost",
            "baseName": "cost",
            "type": "Currency"
        },
        {
            "name": "countryCodeOfOrigin",
            "baseName": "country_code_of_origin",
            "type": "string"
        },
        {
            "name": "customsDescription",
            "baseName": "customs_description",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "discount",
            "baseName": "discount",
            "type": "Currency"
        },
        {
            "name": "discountQuantity",
            "baseName": "discount_quantity",
            "type": "number"
        },
        {
            "name": "discountShippingWeight",
            "baseName": "discount_shipping_weight",
            "type": "Weight"
        },
        {
            "name": "distributionCenterCode",
            "baseName": "distribution_center_code",
            "type": "string"
        },
        {
            "name": "edi",
            "baseName": "edi",
            "type": "OrderItemEdi"
        },
        {
            "name": "excludeCoupon",
            "baseName": "exclude_coupon",
            "type": "boolean"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "hazmat",
            "baseName": "hazmat",
            "type": "boolean"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "Distance"
        },
        {
            "name": "itemReferenceOid",
            "baseName": "item_reference_oid",
            "type": "number"
        },
        {
            "name": "kit",
            "baseName": "kit",
            "type": "boolean"
        },
        {
            "name": "kitComponent",
            "baseName": "kit_component",
            "type": "boolean"
        },
        {
            "name": "length",
            "baseName": "length",
            "type": "Distance"
        },
        {
            "name": "manufacturerSku",
            "baseName": "manufacturer_sku",
            "type": "string"
        },
        {
            "name": "maxDaysTimeInTransit",
            "baseName": "max_days_time_in_transit",
            "type": "number"
        },
        {
            "name": "merchantItemId",
            "baseName": "merchant_item_id",
            "type": "string"
        },
        {
            "name": "mixAndMatchGroupName",
            "baseName": "mix_and_match_group_name",
            "type": "string"
        },
        {
            "name": "mixAndMatchGroupOid",
            "baseName": "mix_and_match_group_oid",
            "type": "number"
        },
        {
            "name": "noShippingDiscount",
            "baseName": "no_shipping_discount",
            "type": "boolean"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<OrderItemOption>"
        },
        {
            "name": "packedByUser",
            "baseName": "packed_by_user",
            "type": "string"
        },
        {
            "name": "perishableClass",
            "baseName": "perishable_class",
            "type": "string"
        },
        {
            "name": "pricingTierName",
            "baseName": "pricing_tier_name",
            "type": "string"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "Array<OrderItemProperty>"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "quantityRefunded",
            "baseName": "quantity_refunded",
            "type": "number"
        },
        {
            "name": "quickbooksClass",
            "baseName": "quickbooks_class",
            "type": "string"
        },
        {
            "name": "shipSeparately",
            "baseName": "ship_separately",
            "type": "boolean"
        },
        {
            "name": "shippedByUser",
            "baseName": "shipped_by_user",
            "type": "string"
        },
        {
            "name": "shippedDts",
            "baseName": "shipped_dts",
            "type": "string"
        },
        {
            "name": "specialProductType",
            "baseName": "special_product_type",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<OrderItemTag>"
        },
        {
            "name": "taxFree",
            "baseName": "tax_free",
            "type": "boolean"
        },
        {
            "name": "taxableCost",
            "baseName": "taxable_cost",
            "type": "Currency"
        },
        {
            "name": "totalCostWithDiscount",
            "baseName": "total_cost_with_discount",
            "type": "Currency"
        },
        {
            "name": "totalRefunded",
            "baseName": "total_refunded",
            "type": "Currency"
        },
        {
            "name": "transmittedToDistributionCenterDts",
            "baseName": "transmitted_to_distribution_center_dts",
            "type": "string"
        },
        {
            "name": "unitCostWithDiscount",
            "baseName": "unit_cost_with_discount",
            "type": "Currency"
        },
        {
            "name": "upsell",
            "baseName": "upsell",
            "type": "boolean"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "Weight"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "Distance"
        }
    ];
    return OrderItem;
}());
exports.OrderItem = OrderItem;
var OrderItemEdi = (function () {
    function OrderItemEdi() {
    }
    OrderItemEdi.getAttributeTypeMap = function () {
        return OrderItemEdi.attributeTypeMap;
    };
    OrderItemEdi.discriminator = undefined;
    OrderItemEdi.attributeTypeMap = [
        {
            "name": "identifications",
            "baseName": "identifications",
            "type": "Array<OrderItemEdiIdentification>"
        },
        {
            "name": "lots",
            "baseName": "lots",
            "type": "Array<OrderItemEdiLot>"
        }
    ];
    return OrderItemEdi;
}());
exports.OrderItemEdi = OrderItemEdi;
var OrderItemEdiIdentification = (function () {
    function OrderItemEdiIdentification() {
    }
    OrderItemEdiIdentification.getAttributeTypeMap = function () {
        return OrderItemEdiIdentification.attributeTypeMap;
    };
    OrderItemEdiIdentification.discriminator = undefined;
    OrderItemEdiIdentification.attributeTypeMap = [
        {
            "name": "identification",
            "baseName": "identification",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }
    ];
    return OrderItemEdiIdentification;
}());
exports.OrderItemEdiIdentification = OrderItemEdiIdentification;
var OrderItemEdiLot = (function () {
    function OrderItemEdiLot() {
    }
    OrderItemEdiLot.getAttributeTypeMap = function () {
        return OrderItemEdiLot.attributeTypeMap;
    };
    OrderItemEdiLot.discriminator = undefined;
    OrderItemEdiLot.attributeTypeMap = [
        {
            "name": "lotExpiration",
            "baseName": "lot_expiration",
            "type": "string"
        },
        {
            "name": "lotNumber",
            "baseName": "lot_number",
            "type": "string"
        },
        {
            "name": "lotQuantity",
            "baseName": "lot_quantity",
            "type": "number"
        }
    ];
    return OrderItemEdiLot;
}());
exports.OrderItemEdiLot = OrderItemEdiLot;
var OrderItemOption = (function () {
    function OrderItemOption() {
    }
    OrderItemOption.getAttributeTypeMap = function () {
        return OrderItemOption.attributeTypeMap;
    };
    OrderItemOption.discriminator = undefined;
    OrderItemOption.attributeTypeMap = [
        {
            "name": "additionalDimensionApplication",
            "baseName": "additional_dimension_application",
            "type": "OrderItemOption.AdditionalDimensionApplicationEnum"
        },
        {
            "name": "costChange",
            "baseName": "cost_change",
            "type": "Currency"
        },
        {
            "name": "fileAttachment",
            "baseName": "file_attachment",
            "type": "OrderItemOptionFileAttachment"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "Distance"
        },
        {
            "name": "hidden",
            "baseName": "hidden",
            "type": "boolean"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "length",
            "baseName": "length",
            "type": "Distance"
        },
        {
            "name": "oneTimeFee",
            "baseName": "one_time_fee",
            "type": "boolean"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "weightChange",
            "baseName": "weight_change",
            "type": "Weight"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "Distance"
        }
    ];
    return OrderItemOption;
}());
exports.OrderItemOption = OrderItemOption;
(function (OrderItemOption) {
    var AdditionalDimensionApplicationEnum;
    (function (AdditionalDimensionApplicationEnum) {
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["None"] = 'none'] = "None";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["SetItemTo"] = 'set item to'] = "SetItemTo";
        AdditionalDimensionApplicationEnum[AdditionalDimensionApplicationEnum["AddItem"] = 'add item'] = "AddItem";
    })(AdditionalDimensionApplicationEnum = OrderItemOption.AdditionalDimensionApplicationEnum || (OrderItemOption.AdditionalDimensionApplicationEnum = {}));
})(OrderItemOption = exports.OrderItemOption || (exports.OrderItemOption = {}));
exports.OrderItemOption = OrderItemOption;
var OrderItemOptionFileAttachment = (function () {
    function OrderItemOptionFileAttachment() {
    }
    OrderItemOptionFileAttachment.getAttributeTypeMap = function () {
        return OrderItemOptionFileAttachment.attributeTypeMap;
    };
    OrderItemOptionFileAttachment.discriminator = undefined;
    OrderItemOptionFileAttachment.attributeTypeMap = [
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "fileName",
            "baseName": "file_name",
            "type": "string"
        },
        {
            "name": "mimeType",
            "baseName": "mime_type",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        }
    ];
    return OrderItemOptionFileAttachment;
}());
exports.OrderItemOptionFileAttachment = OrderItemOptionFileAttachment;
var OrderItemProperty = (function () {
    function OrderItemProperty() {
    }
    OrderItemProperty.getAttributeTypeMap = function () {
        return OrderItemProperty.attributeTypeMap;
    };
    OrderItemProperty.discriminator = undefined;
    OrderItemProperty.attributeTypeMap = [
        {
            "name": "display",
            "baseName": "display",
            "type": "boolean"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return OrderItemProperty;
}());
exports.OrderItemProperty = OrderItemProperty;
var OrderItemTag = (function () {
    function OrderItemTag() {
    }
    OrderItemTag.getAttributeTypeMap = function () {
        return OrderItemTag.attributeTypeMap;
    };
    OrderItemTag.discriminator = undefined;
    OrderItemTag.attributeTypeMap = [
        {
            "name": "tagValue",
            "baseName": "tag_value",
            "type": "string"
        }
    ];
    return OrderItemTag;
}());
exports.OrderItemTag = OrderItemTag;
var OrderLinkedShipment = (function () {
    function OrderLinkedShipment() {
    }
    OrderLinkedShipment.getAttributeTypeMap = function () {
        return OrderLinkedShipment.attributeTypeMap;
    };
    OrderLinkedShipment.discriminator = undefined;
    OrderLinkedShipment.attributeTypeMap = [
        {
            "name": "hasLinkedShipment",
            "baseName": "has_linked_shipment",
            "type": "boolean"
        },
        {
            "name": "linkedShipment",
            "baseName": "linked_shipment",
            "type": "boolean"
        },
        {
            "name": "linkedShipmentChannelPartnerOrderIds",
            "baseName": "linked_shipment_channel_partner_order_ids",
            "type": "Array<string>"
        },
        {
            "name": "linkedShipmentOrderIds",
            "baseName": "linked_shipment_order_ids",
            "type": "Array<string>"
        },
        {
            "name": "linkedShipmentToOrderId",
            "baseName": "linked_shipment_to_order_id",
            "type": "string"
        }
    ];
    return OrderLinkedShipment;
}());
exports.OrderLinkedShipment = OrderLinkedShipment;
var OrderMarketing = (function () {
    function OrderMarketing() {
    }
    OrderMarketing.getAttributeTypeMap = function () {
        return OrderMarketing.attributeTypeMap;
    };
    OrderMarketing.discriminator = undefined;
    OrderMarketing.attributeTypeMap = [
        {
            "name": "advertisingSource",
            "baseName": "advertising_source",
            "type": "string"
        },
        {
            "name": "mailingList",
            "baseName": "mailing_list",
            "type": "boolean"
        },
        {
            "name": "referralCode",
            "baseName": "referral_code",
            "type": "string"
        }
    ];
    return OrderMarketing;
}());
exports.OrderMarketing = OrderMarketing;
var OrderPayment = (function () {
    function OrderPayment() {
    }
    OrderPayment.getAttributeTypeMap = function () {
        return OrderPayment.attributeTypeMap;
    };
    OrderPayment.discriminator = undefined;
    OrderPayment.attributeTypeMap = [
        {
            "name": "check",
            "baseName": "check",
            "type": "OrderPaymentCheck"
        },
        {
            "name": "creditCard",
            "baseName": "credit_card",
            "type": "OrderPaymentCreditCard"
        },
        {
            "name": "echeck",
            "baseName": "echeck",
            "type": "OrderPaymentECheck"
        },
        {
            "name": "holdForFraudReview",
            "baseName": "hold_for_fraud_review",
            "type": "boolean"
        },
        {
            "name": "paymentDts",
            "baseName": "payment_dts",
            "type": "string"
        },
        {
            "name": "paymentMethod",
            "baseName": "payment_method",
            "type": "OrderPayment.PaymentMethodEnum"
        },
        {
            "name": "paymentMethodAccountingCode",
            "baseName": "payment_method_accounting_code",
            "type": "string"
        },
        {
            "name": "paymentMethodDepositToAccount",
            "baseName": "payment_method_deposit_to_account",
            "type": "string"
        },
        {
            "name": "paymentStatus",
            "baseName": "payment_status",
            "type": "OrderPayment.PaymentStatusEnum"
        },
        {
            "name": "purchaseOrder",
            "baseName": "purchase_order",
            "type": "OrderPaymentPurchaseOrder"
        },
        {
            "name": "rotatingTransactionGatewayCode",
            "baseName": "rotating_transaction_gateway_code",
            "type": "string"
        },
        {
            "name": "surcharge",
            "baseName": "surcharge",
            "type": "Currency"
        },
        {
            "name": "surchargeAccountingCode",
            "baseName": "surcharge_accounting_code",
            "type": "string"
        },
        {
            "name": "surchargeTransactionFee",
            "baseName": "surcharge_transaction_fee",
            "type": "number"
        },
        {
            "name": "surchargeTransactionPercentage",
            "baseName": "surcharge_transaction_percentage",
            "type": "number"
        },
        {
            "name": "testOrder",
            "baseName": "test_order",
            "type": "boolean"
        },
        {
            "name": "transactions",
            "baseName": "transactions",
            "type": "Array<OrderPaymentTransaction>"
        }
    ];
    return OrderPayment;
}());
exports.OrderPayment = OrderPayment;
(function (OrderPayment) {
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["AmazonSC"] = 'Amazon SC'] = "AmazonSC";
        PaymentMethodEnum[PaymentMethodEnum["Cash"] = 'Cash'] = "Cash";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["EBay"] = 'eBay'] = "EBay";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["Unknown"] = 'Unknown'] = "Unknown";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
        PaymentMethodEnum[PaymentMethodEnum["Walmart"] = 'Walmart'] = "Walmart";
    })(PaymentMethodEnum = OrderPayment.PaymentMethodEnum || (OrderPayment.PaymentMethodEnum = {}));
    var PaymentStatusEnum;
    (function (PaymentStatusEnum) {
        PaymentStatusEnum[PaymentStatusEnum["Unprocessed"] = 'Unprocessed'] = "Unprocessed";
        PaymentStatusEnum[PaymentStatusEnum["Authorized"] = 'Authorized'] = "Authorized";
        PaymentStatusEnum[PaymentStatusEnum["CaptureFailed"] = 'Capture Failed'] = "CaptureFailed";
        PaymentStatusEnum[PaymentStatusEnum["Processed"] = 'Processed'] = "Processed";
        PaymentStatusEnum[PaymentStatusEnum["Declined"] = 'Declined'] = "Declined";
        PaymentStatusEnum[PaymentStatusEnum["Voided"] = 'Voided'] = "Voided";
        PaymentStatusEnum[PaymentStatusEnum["Refunded"] = 'Refunded'] = "Refunded";
        PaymentStatusEnum[PaymentStatusEnum["Skipped"] = 'Skipped'] = "Skipped";
    })(PaymentStatusEnum = OrderPayment.PaymentStatusEnum || (OrderPayment.PaymentStatusEnum = {}));
})(OrderPayment = exports.OrderPayment || (exports.OrderPayment = {}));
exports.OrderPayment = OrderPayment;
var OrderPaymentCheck = (function () {
    function OrderPaymentCheck() {
    }
    OrderPaymentCheck.getAttributeTypeMap = function () {
        return OrderPaymentCheck.attributeTypeMap;
    };
    OrderPaymentCheck.discriminator = undefined;
    OrderPaymentCheck.attributeTypeMap = [
        {
            "name": "checkNumber",
            "baseName": "check_number",
            "type": "string"
        }
    ];
    return OrderPaymentCheck;
}());
exports.OrderPaymentCheck = OrderPaymentCheck;
var OrderPaymentCreditCard = (function () {
    function OrderPaymentCreditCard() {
    }
    OrderPaymentCreditCard.getAttributeTypeMap = function () {
        return OrderPaymentCreditCard.attributeTypeMap;
    };
    OrderPaymentCreditCard.discriminator = undefined;
    OrderPaymentCreditCard.attributeTypeMap = [
        {
            "name": "cardAuthTicket",
            "baseName": "card_auth_ticket",
            "type": "string"
        },
        {
            "name": "cardAuthorizationAmount",
            "baseName": "card_authorization_amount",
            "type": "number"
        },
        {
            "name": "cardAuthorizationDts",
            "baseName": "card_authorization_dts",
            "type": "string"
        },
        {
            "name": "cardAuthorizationReferenceNumber",
            "baseName": "card_authorization_reference_number",
            "type": "string"
        },
        {
            "name": "cardExpirationMonth",
            "baseName": "card_expiration_month",
            "type": "number"
        },
        {
            "name": "cardExpirationYear",
            "baseName": "card_expiration_year",
            "type": "number"
        },
        {
            "name": "cardNumber",
            "baseName": "card_number",
            "type": "string"
        },
        {
            "name": "cardNumberToken",
            "baseName": "card_number_token",
            "type": "string"
        },
        {
            "name": "cardNumberTruncated",
            "baseName": "card_number_truncated",
            "type": "boolean"
        },
        {
            "name": "cardType",
            "baseName": "card_type",
            "type": "OrderPaymentCreditCard.CardTypeEnum"
        },
        {
            "name": "cardVerificationNumberToken",
            "baseName": "card_verification_number_token",
            "type": "string"
        }
    ];
    return OrderPaymentCreditCard;
}());
exports.OrderPaymentCreditCard = OrderPaymentCreditCard;
(function (OrderPaymentCreditCard) {
    var CardTypeEnum;
    (function (CardTypeEnum) {
        CardTypeEnum[CardTypeEnum["AMEX"] = 'AMEX'] = "AMEX";
        CardTypeEnum[CardTypeEnum["DinersClub"] = 'Diners Club'] = "DinersClub";
        CardTypeEnum[CardTypeEnum["Discover"] = 'Discover'] = "Discover";
        CardTypeEnum[CardTypeEnum["JCB"] = 'JCB'] = "JCB";
        CardTypeEnum[CardTypeEnum["MasterCard"] = 'MasterCard'] = "MasterCard";
        CardTypeEnum[CardTypeEnum["VISA"] = 'VISA'] = "VISA";
    })(CardTypeEnum = OrderPaymentCreditCard.CardTypeEnum || (OrderPaymentCreditCard.CardTypeEnum = {}));
})(OrderPaymentCreditCard = exports.OrderPaymentCreditCard || (exports.OrderPaymentCreditCard = {}));
exports.OrderPaymentCreditCard = OrderPaymentCreditCard;
var OrderPaymentECheck = (function () {
    function OrderPaymentECheck() {
    }
    OrderPaymentECheck.getAttributeTypeMap = function () {
        return OrderPaymentECheck.attributeTypeMap;
    };
    OrderPaymentECheck.discriminator = undefined;
    OrderPaymentECheck.attributeTypeMap = [
        {
            "name": "bankAbaCode",
            "baseName": "bank_aba_code",
            "type": "string"
        },
        {
            "name": "bankAccountName",
            "baseName": "bank_account_name",
            "type": "string"
        },
        {
            "name": "bankAccountNumber",
            "baseName": "bank_account_number",
            "type": "string"
        },
        {
            "name": "bankAccountType",
            "baseName": "bank_account_type",
            "type": "OrderPaymentECheck.BankAccountTypeEnum"
        },
        {
            "name": "bankName",
            "baseName": "bank_name",
            "type": "string"
        },
        {
            "name": "bankOwnerType",
            "baseName": "bank_owner_type",
            "type": "OrderPaymentECheck.BankOwnerTypeEnum"
        },
        {
            "name": "customerTaxId",
            "baseName": "customer_tax_id",
            "type": "string"
        },
        {
            "name": "driversLicenseDob",
            "baseName": "drivers_license_dob",
            "type": "string"
        },
        {
            "name": "driversLicenseNumber",
            "baseName": "drivers_license_number",
            "type": "string"
        },
        {
            "name": "driversLicenseState",
            "baseName": "drivers_license_state",
            "type": "string"
        }
    ];
    return OrderPaymentECheck;
}());
exports.OrderPaymentECheck = OrderPaymentECheck;
(function (OrderPaymentECheck) {
    var BankAccountTypeEnum;
    (function (BankAccountTypeEnum) {
        BankAccountTypeEnum[BankAccountTypeEnum["Checking"] = 'Checking'] = "Checking";
        BankAccountTypeEnum[BankAccountTypeEnum["Savings"] = 'Savings'] = "Savings";
    })(BankAccountTypeEnum = OrderPaymentECheck.BankAccountTypeEnum || (OrderPaymentECheck.BankAccountTypeEnum = {}));
    var BankOwnerTypeEnum;
    (function (BankOwnerTypeEnum) {
        BankOwnerTypeEnum[BankOwnerTypeEnum["Personal"] = 'Personal'] = "Personal";
        BankOwnerTypeEnum[BankOwnerTypeEnum["Business"] = 'Business'] = "Business";
    })(BankOwnerTypeEnum = OrderPaymentECheck.BankOwnerTypeEnum || (OrderPaymentECheck.BankOwnerTypeEnum = {}));
})(OrderPaymentECheck = exports.OrderPaymentECheck || (exports.OrderPaymentECheck = {}));
exports.OrderPaymentECheck = OrderPaymentECheck;
var OrderPaymentPurchaseOrder = (function () {
    function OrderPaymentPurchaseOrder() {
    }
    OrderPaymentPurchaseOrder.getAttributeTypeMap = function () {
        return OrderPaymentPurchaseOrder.attributeTypeMap;
    };
    OrderPaymentPurchaseOrder.discriminator = undefined;
    OrderPaymentPurchaseOrder.attributeTypeMap = [
        {
            "name": "purchaseOrderNumber",
            "baseName": "purchase_order_number",
            "type": "string"
        }
    ];
    return OrderPaymentPurchaseOrder;
}());
exports.OrderPaymentPurchaseOrder = OrderPaymentPurchaseOrder;
var OrderPaymentTransaction = (function () {
    function OrderPaymentTransaction() {
    }
    OrderPaymentTransaction.getAttributeTypeMap = function () {
        return OrderPaymentTransaction.attributeTypeMap;
    };
    OrderPaymentTransaction.discriminator = undefined;
    OrderPaymentTransaction.attributeTypeMap = [
        {
            "name": "details",
            "baseName": "details",
            "type": "Array<OrderPaymentTransactionDetail>"
        },
        {
            "name": "successful",
            "baseName": "successful",
            "type": "boolean"
        },
        {
            "name": "transactionGateway",
            "baseName": "transaction_gateway",
            "type": "string"
        },
        {
            "name": "transactionTimestamp",
            "baseName": "transaction_timestamp",
            "type": "string"
        }
    ];
    return OrderPaymentTransaction;
}());
exports.OrderPaymentTransaction = OrderPaymentTransaction;
var OrderPaymentTransactionDetail = (function () {
    function OrderPaymentTransactionDetail() {
    }
    OrderPaymentTransactionDetail.getAttributeTypeMap = function () {
        return OrderPaymentTransactionDetail.attributeTypeMap;
    };
    OrderPaymentTransactionDetail.discriminator = undefined;
    OrderPaymentTransactionDetail.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return OrderPaymentTransactionDetail;
}());
exports.OrderPaymentTransactionDetail = OrderPaymentTransactionDetail;
var OrderProcessPaymentRequest = (function () {
    function OrderProcessPaymentRequest() {
    }
    OrderProcessPaymentRequest.getAttributeTypeMap = function () {
        return OrderProcessPaymentRequest.attributeTypeMap;
    };
    OrderProcessPaymentRequest.discriminator = undefined;
    OrderProcessPaymentRequest.attributeTypeMap = [
        {
            "name": "cardVerificationNumberToken",
            "baseName": "card_verification_number_token",
            "type": "string"
        }
    ];
    return OrderProcessPaymentRequest;
}());
exports.OrderProcessPaymentRequest = OrderProcessPaymentRequest;
var OrderProcessPaymentResponse = (function () {
    function OrderProcessPaymentResponse() {
    }
    OrderProcessPaymentResponse.getAttributeTypeMap = function () {
        return OrderProcessPaymentResponse.attributeTypeMap;
    };
    OrderProcessPaymentResponse.discriminator = undefined;
    OrderProcessPaymentResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "paymentTransaction",
            "baseName": "payment_transaction",
            "type": "OrderPaymentTransaction"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return OrderProcessPaymentResponse;
}());
exports.OrderProcessPaymentResponse = OrderProcessPaymentResponse;
var OrderProperty = (function () {
    function OrderProperty() {
    }
    OrderProperty.getAttributeTypeMap = function () {
        return OrderProperty.attributeTypeMap;
    };
    OrderProperty.discriminator = undefined;
    OrderProperty.attributeTypeMap = [
        {
            "name": "display",
            "baseName": "display",
            "type": "boolean"
        },
        {
            "name": "expirationDts",
            "baseName": "expiration_dts",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return OrderProperty;
}());
exports.OrderProperty = OrderProperty;
var OrderQuery = (function () {
    function OrderQuery() {
    }
    OrderQuery.getAttributeTypeMap = function () {
        return OrderQuery.attributeTypeMap;
    };
    OrderQuery.discriminator = undefined;
    OrderQuery.attributeTypeMap = [
        {
            "name": "ccEmail",
            "baseName": "cc_email",
            "type": "string"
        },
        {
            "name": "channelPartnerCode",
            "baseName": "channel_partner_code",
            "type": "string"
        },
        {
            "name": "channelPartnerOrderId",
            "baseName": "channel_partner_order_id",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "creationDateBegin",
            "baseName": "creation_date_begin",
            "type": "string"
        },
        {
            "name": "creationDateEnd",
            "baseName": "creation_date_end",
            "type": "string"
        },
        {
            "name": "currentStage",
            "baseName": "current_stage",
            "type": "OrderQuery.CurrentStageEnum"
        },
        {
            "name": "customerProfileOid",
            "baseName": "customer_profile_oid",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "itemId",
            "baseName": "item_id",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "paymentDateBegin",
            "baseName": "payment_date_begin",
            "type": "string"
        },
        {
            "name": "paymentDateEnd",
            "baseName": "payment_date_end",
            "type": "string"
        },
        {
            "name": "paymentMethod",
            "baseName": "payment_method",
            "type": "OrderQuery.PaymentMethodEnum"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "purchaseOrderNumber",
            "baseName": "purchase_order_number",
            "type": "string"
        },
        {
            "name": "refundDateBegin",
            "baseName": "refund_date_begin",
            "type": "string"
        },
        {
            "name": "refundDateEnd",
            "baseName": "refund_date_end",
            "type": "string"
        },
        {
            "name": "rma",
            "baseName": "rma",
            "type": "string"
        },
        {
            "name": "screenBrandingThemeCode",
            "baseName": "screen_branding_theme_code",
            "type": "string"
        },
        {
            "name": "shipmentDateBegin",
            "baseName": "shipment_date_begin",
            "type": "string"
        },
        {
            "name": "shipmentDateEnd",
            "baseName": "shipment_date_end",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "storefrontHostName",
            "baseName": "storefront_host_name",
            "type": "string"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }
    ];
    return OrderQuery;
}());
exports.OrderQuery = OrderQuery;
(function (OrderQuery) {
    var CurrentStageEnum;
    (function (CurrentStageEnum) {
        CurrentStageEnum[CurrentStageEnum["AccountsReceivable"] = 'Accounts Receivable'] = "AccountsReceivable";
        CurrentStageEnum[CurrentStageEnum["PendingClearance"] = 'Pending Clearance'] = "PendingClearance";
        CurrentStageEnum[CurrentStageEnum["FraudReview"] = 'Fraud Review'] = "FraudReview";
        CurrentStageEnum[CurrentStageEnum["Rejected"] = 'Rejected'] = "Rejected";
        CurrentStageEnum[CurrentStageEnum["ShippingDepartment"] = 'Shipping Department'] = "ShippingDepartment";
        CurrentStageEnum[CurrentStageEnum["CompletedOrder"] = 'Completed Order'] = "CompletedOrder";
        CurrentStageEnum[CurrentStageEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        CurrentStageEnum[CurrentStageEnum["QuoteSent"] = 'Quote Sent'] = "QuoteSent";
        CurrentStageEnum[CurrentStageEnum["LeastCostRouting"] = 'Least Cost Routing'] = "LeastCostRouting";
        CurrentStageEnum[CurrentStageEnum["Unknown"] = 'Unknown'] = "Unknown";
    })(CurrentStageEnum = OrderQuery.CurrentStageEnum || (OrderQuery.CurrentStageEnum = {}));
    var PaymentMethodEnum;
    (function (PaymentMethodEnum) {
        PaymentMethodEnum[PaymentMethodEnum["Affirm"] = 'Affirm'] = "Affirm";
        PaymentMethodEnum[PaymentMethodEnum["Amazon"] = 'Amazon'] = "Amazon";
        PaymentMethodEnum[PaymentMethodEnum["AmazonSC"] = 'Amazon SC'] = "AmazonSC";
        PaymentMethodEnum[PaymentMethodEnum["Cash"] = 'Cash'] = "Cash";
        PaymentMethodEnum[PaymentMethodEnum["Check"] = 'Check'] = "Check";
        PaymentMethodEnum[PaymentMethodEnum["COD"] = 'COD'] = "COD";
        PaymentMethodEnum[PaymentMethodEnum["CreditCard"] = 'Credit Card'] = "CreditCard";
        PaymentMethodEnum[PaymentMethodEnum["ECheck"] = 'eCheck'] = "ECheck";
        PaymentMethodEnum[PaymentMethodEnum["LoanHero"] = 'LoanHero'] = "LoanHero";
        PaymentMethodEnum[PaymentMethodEnum["MoneyOrder"] = 'Money Order'] = "MoneyOrder";
        PaymentMethodEnum[PaymentMethodEnum["PayPal"] = 'PayPal'] = "PayPal";
        PaymentMethodEnum[PaymentMethodEnum["PurchaseOrder"] = 'Purchase Order'] = "PurchaseOrder";
        PaymentMethodEnum[PaymentMethodEnum["QuoteRequest"] = 'Quote Request'] = "QuoteRequest";
        PaymentMethodEnum[PaymentMethodEnum["Unknown"] = 'Unknown'] = "Unknown";
        PaymentMethodEnum[PaymentMethodEnum["WireTransfer"] = 'Wire Transfer'] = "WireTransfer";
    })(PaymentMethodEnum = OrderQuery.PaymentMethodEnum || (OrderQuery.PaymentMethodEnum = {}));
})(OrderQuery = exports.OrderQuery || (exports.OrderQuery = {}));
exports.OrderQuery = OrderQuery;
var OrderQueryBatch = (function () {
    function OrderQueryBatch() {
    }
    OrderQueryBatch.getAttributeTypeMap = function () {
        return OrderQueryBatch.attributeTypeMap;
    };
    OrderQueryBatch.discriminator = undefined;
    OrderQueryBatch.attributeTypeMap = [
        {
            "name": "orderIds",
            "baseName": "order_ids",
            "type": "Array<string>"
        }
    ];
    return OrderQueryBatch;
}());
exports.OrderQueryBatch = OrderQueryBatch;
var OrderQuote = (function () {
    function OrderQuote() {
    }
    OrderQuote.getAttributeTypeMap = function () {
        return OrderQuote.attributeTypeMap;
    };
    OrderQuote.discriminator = undefined;
    OrderQuote.attributeTypeMap = [
        {
            "name": "quoteExpirationDts",
            "baseName": "quote_expiration_dts",
            "type": "string"
        },
        {
            "name": "quotedBy",
            "baseName": "quoted_by",
            "type": "string"
        },
        {
            "name": "quotedDts",
            "baseName": "quoted_dts",
            "type": "string"
        }
    ];
    return OrderQuote;
}());
exports.OrderQuote = OrderQuote;
var OrderReplacement = (function () {
    function OrderReplacement() {
    }
    OrderReplacement.getAttributeTypeMap = function () {
        return OrderReplacement.attributeTypeMap;
    };
    OrderReplacement.discriminator = undefined;
    OrderReplacement.attributeTypeMap = [
        {
            "name": "additionalMerchantNotesNewOrder",
            "baseName": "additional_merchant_notes_new_order",
            "type": "string"
        },
        {
            "name": "additionalMerchantNotesOriginalOrder",
            "baseName": "additional_merchant_notes_original_order",
            "type": "string"
        },
        {
            "name": "customField1",
            "baseName": "custom_field1",
            "type": "string"
        },
        {
            "name": "customField2",
            "baseName": "custom_field2",
            "type": "string"
        },
        {
            "name": "customField3",
            "baseName": "custom_field3",
            "type": "string"
        },
        {
            "name": "customField4",
            "baseName": "custom_field4",
            "type": "string"
        },
        {
            "name": "customField5",
            "baseName": "custom_field5",
            "type": "string"
        },
        {
            "name": "customField6",
            "baseName": "custom_field6",
            "type": "string"
        },
        {
            "name": "customField7",
            "baseName": "custom_field7",
            "type": "string"
        },
        {
            "name": "free",
            "baseName": "free",
            "type": "boolean"
        },
        {
            "name": "immediateCharge",
            "baseName": "immediate_charge",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<OrderReplacementItem>"
        },
        {
            "name": "originalOrderId",
            "baseName": "original_order_id",
            "type": "string"
        },
        {
            "name": "shippingMethod",
            "baseName": "shipping_method",
            "type": "string"
        },
        {
            "name": "skipPayment",
            "baseName": "skip_payment",
            "type": "boolean"
        }
    ];
    return OrderReplacement;
}());
exports.OrderReplacement = OrderReplacement;
var OrderReplacementItem = (function () {
    function OrderReplacementItem() {
    }
    OrderReplacementItem.getAttributeTypeMap = function () {
        return OrderReplacementItem.attributeTypeMap;
    };
    OrderReplacementItem.discriminator = undefined;
    OrderReplacementItem.attributeTypeMap = [
        {
            "name": "arbitraryUnitCost",
            "baseName": "arbitrary_unit_cost",
            "type": "number"
        },
        {
            "name": "merchantItemId",
            "baseName": "merchant_item_id",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        }
    ];
    return OrderReplacementItem;
}());
exports.OrderReplacementItem = OrderReplacementItem;
var OrderReplacementResponse = (function () {
    function OrderReplacementResponse() {
    }
    OrderReplacementResponse.getAttributeTypeMap = function () {
        return OrderReplacementResponse.attributeTypeMap;
    };
    OrderReplacementResponse.discriminator = undefined;
    OrderReplacementResponse.attributeTypeMap = [
        {
            "name": "chargeSuccessful",
            "baseName": "chargeSuccessful",
            "type": "boolean"
        },
        {
            "name": "errorMessage",
            "baseName": "errorMessage",
            "type": "string"
        },
        {
            "name": "feedback",
            "baseName": "feedback",
            "type": "string"
        },
        {
            "name": "free",
            "baseName": "free",
            "type": "boolean"
        },
        {
            "name": "orderId",
            "baseName": "orderId",
            "type": "string"
        },
        {
            "name": "successful",
            "baseName": "successful",
            "type": "boolean"
        }
    ];
    return OrderReplacementResponse;
}());
exports.OrderReplacementResponse = OrderReplacementResponse;
var OrderResponse = (function () {
    function OrderResponse() {
    }
    OrderResponse.getAttributeTypeMap = function () {
        return OrderResponse.attributeTypeMap;
    };
    OrderResponse.discriminator = undefined;
    OrderResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "Order"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return OrderResponse;
}());
exports.OrderResponse = OrderResponse;
var OrderSalesforce = (function () {
    function OrderSalesforce() {
    }
    OrderSalesforce.getAttributeTypeMap = function () {
        return OrderSalesforce.attributeTypeMap;
    };
    OrderSalesforce.discriminator = undefined;
    OrderSalesforce.attributeTypeMap = [
        {
            "name": "salesforceOpportunityId",
            "baseName": "salesforce_opportunity_id",
            "type": "string"
        }
    ];
    return OrderSalesforce;
}());
exports.OrderSalesforce = OrderSalesforce;
var OrderShipping = (function () {
    function OrderShipping() {
    }
    OrderShipping.getAttributeTypeMap = function () {
        return OrderShipping.attributeTypeMap;
    };
    OrderShipping.discriminator = undefined;
    OrderShipping.attributeTypeMap = [
        {
            "name": "address1",
            "baseName": "address1",
            "type": "string"
        },
        {
            "name": "address2",
            "baseName": "address2",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "company",
            "baseName": "company",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "dayPhone",
            "baseName": "day_phone",
            "type": "string"
        },
        {
            "name": "dayPhoneE164",
            "baseName": "day_phone_e164",
            "type": "string"
        },
        {
            "name": "deliveryDate",
            "baseName": "delivery_date",
            "type": "string"
        },
        {
            "name": "eveningPhone",
            "baseName": "evening_phone",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "first_name",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "last_name",
            "type": "string"
        },
        {
            "name": "leastCostRoute",
            "baseName": "least_cost_route",
            "type": "boolean"
        },
        {
            "name": "leastCostRouteShippingMethods",
            "baseName": "least_cost_route_shipping_methods",
            "type": "Array<string>"
        },
        {
            "name": "liftGate",
            "baseName": "lift_gate",
            "type": "boolean"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "rma",
            "baseName": "rma",
            "type": "string"
        },
        {
            "name": "shipOnDate",
            "baseName": "ship_on_date",
            "type": "string"
        },
        {
            "name": "shipToResidential",
            "baseName": "ship_to_residential",
            "type": "boolean"
        },
        {
            "name": "shipping3rdPartyAccountNumber",
            "baseName": "shipping_3rd_party_account_number",
            "type": "string"
        },
        {
            "name": "shippingDate",
            "baseName": "shipping_date",
            "type": "string"
        },
        {
            "name": "shippingDepartmentStatus",
            "baseName": "shipping_department_status",
            "type": "string"
        },
        {
            "name": "shippingMethod",
            "baseName": "shipping_method",
            "type": "string"
        },
        {
            "name": "shippingMethodAccountingCode",
            "baseName": "shipping_method_accounting_code",
            "type": "string"
        },
        {
            "name": "specialInstructions",
            "baseName": "special_instructions",
            "type": "string"
        },
        {
            "name": "stateRegion",
            "baseName": "state_region",
            "type": "string"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        },
        {
            "name": "trackingNumberDetails",
            "baseName": "tracking_number_details",
            "type": "Array<OrderTrackingNumberDetails>"
        },
        {
            "name": "trackingNumbers",
            "baseName": "tracking_numbers",
            "type": "Array<string>"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "Weight"
        }
    ];
    return OrderShipping;
}());
exports.OrderShipping = OrderShipping;
var OrderSummary = (function () {
    function OrderSummary() {
    }
    OrderSummary.getAttributeTypeMap = function () {
        return OrderSummary.attributeTypeMap;
    };
    OrderSummary.discriminator = undefined;
    OrderSummary.attributeTypeMap = [
        {
            "name": "actualFulfillment",
            "baseName": "actual_fulfillment",
            "type": "Currency"
        },
        {
            "name": "actualShipping",
            "baseName": "actual_shipping",
            "type": "Currency"
        },
        {
            "name": "arbitraryShippingHandlingTotal",
            "baseName": "arbitrary_shipping_handling_total",
            "type": "Currency"
        },
        {
            "name": "otherRefunded",
            "baseName": "other_refunded",
            "type": "Currency"
        },
        {
            "name": "shippingHandlingRefunded",
            "baseName": "shipping_handling_refunded",
            "type": "Currency"
        },
        {
            "name": "shippingHandlingTotal",
            "baseName": "shipping_handling_total",
            "type": "Currency"
        },
        {
            "name": "shippingHandlingTotalDiscount",
            "baseName": "shipping_handling_total_discount",
            "type": "Currency"
        },
        {
            "name": "subtotal",
            "baseName": "subtotal",
            "type": "Currency"
        },
        {
            "name": "subtotalDiscount",
            "baseName": "subtotal_discount",
            "type": "Currency"
        },
        {
            "name": "subtotalDiscountRefunded",
            "baseName": "subtotal_discount_refunded",
            "type": "Currency"
        },
        {
            "name": "subtotalRefunded",
            "baseName": "subtotal_refunded",
            "type": "Currency"
        },
        {
            "name": "tax",
            "baseName": "tax",
            "type": "Currency"
        },
        {
            "name": "taxRefunded",
            "baseName": "tax_refunded",
            "type": "Currency"
        },
        {
            "name": "taxableSubtotal",
            "baseName": "taxable_subtotal",
            "type": "Currency"
        },
        {
            "name": "taxableSubtotalDiscount",
            "baseName": "taxable_subtotal_discount",
            "type": "Currency"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "Currency"
        },
        {
            "name": "totalRefunded",
            "baseName": "total_refunded",
            "type": "Currency"
        }
    ];
    return OrderSummary;
}());
exports.OrderSummary = OrderSummary;
var OrderTag = (function () {
    function OrderTag() {
    }
    OrderTag.getAttributeTypeMap = function () {
        return OrderTag.attributeTypeMap;
    };
    OrderTag.discriminator = undefined;
    OrderTag.attributeTypeMap = [
        {
            "name": "tagValue",
            "baseName": "tag_value",
            "type": "string"
        }
    ];
    return OrderTag;
}());
exports.OrderTag = OrderTag;
var OrderTaxes = (function () {
    function OrderTaxes() {
    }
    OrderTaxes.getAttributeTypeMap = function () {
        return OrderTaxes.attributeTypeMap;
    };
    OrderTaxes.discriminator = undefined;
    OrderTaxes.attributeTypeMap = [
        {
            "name": "arbitraryTax",
            "baseName": "arbitrary_tax",
            "type": "number"
        },
        {
            "name": "arbitraryTaxRate",
            "baseName": "arbitrary_tax_rate",
            "type": "number"
        },
        {
            "name": "arbitraryTaxableSubtotal",
            "baseName": "arbitrary_taxable_subtotal",
            "type": "number"
        },
        {
            "name": "taxCityAccountingCode",
            "baseName": "tax_city_accounting_code",
            "type": "string"
        },
        {
            "name": "taxCountryAccountingCode",
            "baseName": "tax_country_accounting_code",
            "type": "string"
        },
        {
            "name": "taxCounty",
            "baseName": "tax_county",
            "type": "string"
        },
        {
            "name": "taxCountyAccountingCode",
            "baseName": "tax_county_accounting_code",
            "type": "string"
        },
        {
            "name": "taxGiftCharge",
            "baseName": "tax_gift_charge",
            "type": "boolean"
        },
        {
            "name": "taxPostalCodeAccountingCode",
            "baseName": "tax_postal_code_accounting_code",
            "type": "string"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateCity",
            "baseName": "tax_rate_city",
            "type": "number"
        },
        {
            "name": "taxRateCountry",
            "baseName": "tax_rate_country",
            "type": "number"
        },
        {
            "name": "taxRateCounty",
            "baseName": "tax_rate_county",
            "type": "number"
        },
        {
            "name": "taxRatePostalCode",
            "baseName": "tax_rate_postal_code",
            "type": "number"
        },
        {
            "name": "taxRateState",
            "baseName": "tax_rate_state",
            "type": "number"
        },
        {
            "name": "taxShipping",
            "baseName": "tax_shipping",
            "type": "boolean"
        },
        {
            "name": "taxStateAccountingCode",
            "baseName": "tax_state_accounting_code",
            "type": "string"
        }
    ];
    return OrderTaxes;
}());
exports.OrderTaxes = OrderTaxes;
var OrderTokenResponse = (function () {
    function OrderTokenResponse() {
    }
    OrderTokenResponse.getAttributeTypeMap = function () {
        return OrderTokenResponse.attributeTypeMap;
    };
    OrderTokenResponse.discriminator = undefined;
    OrderTokenResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "orderToken",
            "baseName": "order_token",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return OrderTokenResponse;
}());
exports.OrderTokenResponse = OrderTokenResponse;
var OrderTrackingNumberDetail = (function () {
    function OrderTrackingNumberDetail() {
    }
    OrderTrackingNumberDetail.getAttributeTypeMap = function () {
        return OrderTrackingNumberDetail.attributeTypeMap;
    };
    OrderTrackingNumberDetail.discriminator = undefined;
    OrderTrackingNumberDetail.attributeTypeMap = [
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "eventLocalDate",
            "baseName": "event_local_date",
            "type": "string"
        },
        {
            "name": "eventLocalTime",
            "baseName": "event_local_time",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        },
        {
            "name": "subtag",
            "baseName": "subtag",
            "type": "string"
        },
        {
            "name": "subtagMessage",
            "baseName": "subtag_message",
            "type": "string"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "tagDescription",
            "baseName": "tag_description",
            "type": "string"
        },
        {
            "name": "tagIcon",
            "baseName": "tag_icon",
            "type": "string"
        },
        {
            "name": "zip",
            "baseName": "zip",
            "type": "string"
        }
    ];
    return OrderTrackingNumberDetail;
}());
exports.OrderTrackingNumberDetail = OrderTrackingNumberDetail;
var OrderTrackingNumberDetails = (function () {
    function OrderTrackingNumberDetails() {
    }
    OrderTrackingNumberDetails.getAttributeTypeMap = function () {
        return OrderTrackingNumberDetails.attributeTypeMap;
    };
    OrderTrackingNumberDetails.discriminator = undefined;
    OrderTrackingNumberDetails.attributeTypeMap = [
        {
            "name": "actualDeliveryDate",
            "baseName": "actual_delivery_date",
            "type": "string"
        },
        {
            "name": "actualDeliveryDateFormatted",
            "baseName": "actual_delivery_date_formatted",
            "type": "string"
        },
        {
            "name": "details",
            "baseName": "details",
            "type": "Array<OrderTrackingNumberDetail>"
        },
        {
            "name": "expectedDeliveryDate",
            "baseName": "expected_delivery_date",
            "type": "string"
        },
        {
            "name": "expectedDeliveryDateFormatted",
            "baseName": "expected_delivery_date_formatted",
            "type": "string"
        },
        {
            "name": "mapUrl",
            "baseName": "map_url",
            "type": "string"
        },
        {
            "name": "orderPlacedDate",
            "baseName": "order_placed_date",
            "type": "string"
        },
        {
            "name": "orderPlacedDateFormatted",
            "baseName": "order_placed_date_formatted",
            "type": "string"
        },
        {
            "name": "paymentProcessedDate",
            "baseName": "payment_processed_date",
            "type": "string"
        },
        {
            "name": "paymentProcessedDateFormatted",
            "baseName": "payment_processed_date_formatted",
            "type": "string"
        },
        {
            "name": "shippedDate",
            "baseName": "shipped_date",
            "type": "string"
        },
        {
            "name": "shippedDateFormatted",
            "baseName": "shipped_date_formatted",
            "type": "string"
        },
        {
            "name": "shippingMethod",
            "baseName": "shipping_method",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "statusDescription",
            "baseName": "status_description",
            "type": "string"
        },
        {
            "name": "trackingNumber",
            "baseName": "tracking_number",
            "type": "string"
        },
        {
            "name": "trackingUrl",
            "baseName": "tracking_url",
            "type": "string"
        }
    ];
    return OrderTrackingNumberDetails;
}());
exports.OrderTrackingNumberDetails = OrderTrackingNumberDetails;
var OrdersResponse = (function () {
    function OrdersResponse() {
    }
    OrdersResponse.getAttributeTypeMap = function () {
        return OrdersResponse.attributeTypeMap;
    };
    OrdersResponse.discriminator = undefined;
    OrdersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "orders",
            "baseName": "orders",
            "type": "Array<Order>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return OrdersResponse;
}());
exports.OrdersResponse = OrdersResponse;
var Permission = (function () {
    function Permission() {
    }
    Permission.getAttributeTypeMap = function () {
        return Permission.attributeTypeMap;
    };
    Permission.discriminator = undefined;
    Permission.attributeTypeMap = [
        {
            "name": "permissionGroup",
            "baseName": "permission_group",
            "type": "string"
        },
        {
            "name": "permissionName",
            "baseName": "permission_Name",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        }
    ];
    return Permission;
}());
exports.Permission = Permission;
var PricingTier = (function () {
    function PricingTier() {
    }
    PricingTier.getAttributeTypeMap = function () {
        return PricingTier.attributeTypeMap;
    };
    PricingTier.discriminator = undefined;
    PricingTier.attributeTypeMap = [
        {
            "name": "allow3rdPartyBilling",
            "baseName": "allow_3rd_party_billing",
            "type": "boolean"
        },
        {
            "name": "allowCod",
            "baseName": "allow_cod",
            "type": "boolean"
        },
        {
            "name": "allowPurchaseOrder",
            "baseName": "allow_purchase_order",
            "type": "boolean"
        },
        {
            "name": "allowQuoteRequest",
            "baseName": "allow_quote_request",
            "type": "boolean"
        },
        {
            "name": "approvalNotification",
            "baseName": "approval_notification",
            "type": "PricingTierNotification"
        },
        {
            "name": "autoApproveCod",
            "baseName": "auto_approve_cod",
            "type": "boolean"
        },
        {
            "name": "autoApprovePurchaseOrder",
            "baseName": "auto_approve_purchase_order",
            "type": "boolean"
        },
        {
            "name": "defaultOnWholesaleSignup",
            "baseName": "default_on_wholesale_signup",
            "type": "boolean"
        },
        {
            "name": "defaultPercentageDiscount",
            "baseName": "default_percentage_discount",
            "type": "number"
        },
        {
            "name": "defaultShippingMethodOid",
            "baseName": "default_shipping_method_oid",
            "type": "number"
        },
        {
            "name": "defaultTier",
            "baseName": "default_tier",
            "type": "boolean"
        },
        {
            "name": "displayOnWholesaleSignup",
            "baseName": "display_on_wholesale_signup",
            "type": "boolean"
        },
        {
            "name": "excludeFromFreePromotion",
            "baseName": "exclude_from_free_promotion",
            "type": "boolean"
        },
        {
            "name": "exemptShippingHandlingCharge",
            "baseName": "exempt_shipping_handling_charge",
            "type": "boolean"
        },
        {
            "name": "freeShipping",
            "baseName": "free_shipping",
            "type": "boolean"
        },
        {
            "name": "freeShippingMinimum",
            "baseName": "free_shipping_minimum",
            "type": "number"
        },
        {
            "name": "maximumItemCount",
            "baseName": "maximum_item_count",
            "type": "number"
        },
        {
            "name": "minimumItemCount",
            "baseName": "minimum_item_count",
            "type": "number"
        },
        {
            "name": "minimumSubtotal",
            "baseName": "minimum_subtotal",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "noCoupons",
            "baseName": "no_coupons",
            "type": "boolean"
        },
        {
            "name": "noFreeShipping",
            "baseName": "no_free_shipping",
            "type": "boolean"
        },
        {
            "name": "noRealtimeCharge",
            "baseName": "no_realtime_charge",
            "type": "boolean"
        },
        {
            "name": "notValidWhenCouponPresent",
            "baseName": "not_valid_when_coupon_present",
            "type": "boolean"
        },
        {
            "name": "pricingTierOid",
            "baseName": "pricing_tier_oid",
            "type": "number"
        },
        {
            "name": "realtimePercentageDiscount",
            "baseName": "realtime_percentage_discount",
            "type": "number"
        },
        {
            "name": "signupNotification",
            "baseName": "signup_notification",
            "type": "PricingTierNotification"
        },
        {
            "name": "suppressBuysafe",
            "baseName": "suppress_buysafe",
            "type": "boolean"
        },
        {
            "name": "suppressMailingList",
            "baseName": "suppress_mailing_list",
            "type": "boolean"
        },
        {
            "name": "taxExempt",
            "baseName": "tax_exempt",
            "type": "boolean"
        },
        {
            "name": "trackSeparately",
            "baseName": "track_separately",
            "type": "boolean"
        }
    ];
    return PricingTier;
}());
exports.PricingTier = PricingTier;
var PricingTierNotification = (function () {
    function PricingTierNotification() {
    }
    PricingTierNotification.getAttributeTypeMap = function () {
        return PricingTierNotification.attributeTypeMap;
    };
    PricingTierNotification.discriminator = undefined;
    PricingTierNotification.attributeTypeMap = [
        {
            "name": "format",
            "baseName": "format",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        }
    ];
    return PricingTierNotification;
}());
exports.PricingTierNotification = PricingTierNotification;
var PricingTiersResponse = (function () {
    function PricingTiersResponse() {
    }
    PricingTiersResponse.getAttributeTypeMap = function () {
        return PricingTiersResponse.attributeTypeMap;
    };
    PricingTiersResponse.discriminator = undefined;
    PricingTiersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "pricingTiers",
            "baseName": "pricingTiers",
            "type": "Array<PricingTier>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return PricingTiersResponse;
}());
exports.PricingTiersResponse = PricingTiersResponse;
var Property = (function () {
    function Property() {
    }
    Property.getAttributeTypeMap = function () {
        return Property.attributeTypeMap;
    };
    Property.discriminator = undefined;
    Property.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return Property;
}());
exports.Property = Property;
var RegisterAffiliateClickRequest = (function () {
    function RegisterAffiliateClickRequest() {
    }
    RegisterAffiliateClickRequest.getAttributeTypeMap = function () {
        return RegisterAffiliateClickRequest.attributeTypeMap;
    };
    RegisterAffiliateClickRequest.discriminator = undefined;
    RegisterAffiliateClickRequest.attributeTypeMap = [
        {
            "name": "affid",
            "baseName": "affid",
            "type": "number"
        },
        {
            "name": "ipAddress",
            "baseName": "ip_address",
            "type": "string"
        },
        {
            "name": "landingPageUrl",
            "baseName": "landing_page_url",
            "type": "string"
        },
        {
            "name": "referrerUrl",
            "baseName": "referrer_url",
            "type": "string"
        },
        {
            "name": "subid",
            "baseName": "subid",
            "type": "string"
        },
        {
            "name": "userAgent",
            "baseName": "user_agent",
            "type": "string"
        }
    ];
    return RegisterAffiliateClickRequest;
}());
exports.RegisterAffiliateClickRequest = RegisterAffiliateClickRequest;
var RegisterAffiliateClickResponse = (function () {
    function RegisterAffiliateClickResponse() {
    }
    RegisterAffiliateClickResponse.getAttributeTypeMap = function () {
        return RegisterAffiliateClickResponse.attributeTypeMap;
    };
    RegisterAffiliateClickResponse.discriminator = undefined;
    RegisterAffiliateClickResponse.attributeTypeMap = [
        {
            "name": "cookieMaxAge",
            "baseName": "cookie_max_age",
            "type": "number"
        },
        {
            "name": "cookieNames",
            "baseName": "cookie_names",
            "type": "Array<string>"
        },
        {
            "name": "cookieValues",
            "baseName": "cookie_values",
            "type": "Array<string>"
        },
        {
            "name": "registered",
            "baseName": "registered",
            "type": "boolean"
        }
    ];
    return RegisterAffiliateClickResponse;
}());
exports.RegisterAffiliateClickResponse = RegisterAffiliateClickResponse;
var ResponseMetadata = (function () {
    function ResponseMetadata() {
    }
    ResponseMetadata.getAttributeTypeMap = function () {
        return ResponseMetadata.attributeTypeMap;
    };
    ResponseMetadata.discriminator = undefined;
    ResponseMetadata.attributeTypeMap = [
        {
            "name": "payloadName",
            "baseName": "payload_name",
            "type": "string"
        },
        {
            "name": "resultSet",
            "baseName": "result_set",
            "type": "ResultSet"
        }
    ];
    return ResponseMetadata;
}());
exports.ResponseMetadata = ResponseMetadata;
var ResultSet = (function () {
    function ResultSet() {
    }
    ResultSet.getAttributeTypeMap = function () {
        return ResultSet.attributeTypeMap;
    };
    ResultSet.discriminator = undefined;
    ResultSet.attributeTypeMap = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "limit",
            "baseName": "limit",
            "type": "number"
        },
        {
            "name": "more",
            "baseName": "more",
            "type": "boolean"
        },
        {
            "name": "nextOffset",
            "baseName": "next_offset",
            "type": "number"
        },
        {
            "name": "offset",
            "baseName": "offset",
            "type": "number"
        },
        {
            "name": "totalRecords",
            "baseName": "total_records",
            "type": "number"
        }
    ];
    return ResultSet;
}());
exports.ResultSet = ResultSet;
var ScreenshotsResponse = (function () {
    function ScreenshotsResponse() {
    }
    ScreenshotsResponse.getAttributeTypeMap = function () {
        return ScreenshotsResponse.attributeTypeMap;
    };
    ScreenshotsResponse.discriminator = undefined;
    ScreenshotsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "screenshots",
            "baseName": "screenshots",
            "type": "Array<string>"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ScreenshotsResponse;
}());
exports.ScreenshotsResponse = ScreenshotsResponse;
var SelfConfig = (function () {
    function SelfConfig() {
    }
    SelfConfig.getAttributeTypeMap = function () {
        return SelfConfig.attributeTypeMap;
    };
    SelfConfig.discriminator = undefined;
    SelfConfig.attributeTypeMap = [
        {
            "name": "taxBilling",
            "baseName": "tax_billing",
            "type": "boolean"
        }
    ];
    return SelfConfig;
}());
exports.SelfConfig = SelfConfig;
var SovosConfig = (function () {
    function SovosConfig() {
    }
    SovosConfig.getAttributeTypeMap = function () {
        return SovosConfig.attributeTypeMap;
    };
    SovosConfig.discriminator = undefined;
    SovosConfig.attributeTypeMap = [
        {
            "name": "accessKey",
            "baseName": "access_key",
            "type": "string"
        },
        {
            "name": "estimateOnly",
            "baseName": "estimate_only",
            "type": "boolean"
        },
        {
            "name": "lastTestDts",
            "baseName": "last_test_dts",
            "type": "string"
        },
        {
            "name": "secretKey",
            "baseName": "secret_key",
            "type": "string"
        },
        {
            "name": "sendTestOrders",
            "baseName": "send_test_orders",
            "type": "boolean"
        },
        {
            "name": "testResults",
            "baseName": "test_results",
            "type": "string"
        },
        {
            "name": "uat",
            "baseName": "uat",
            "type": "boolean"
        }
    ];
    return SovosConfig;
}());
exports.SovosConfig = SovosConfig;
var StateProvince = (function () {
    function StateProvince() {
    }
    StateProvince.getAttributeTypeMap = function () {
        return StateProvince.attributeTypeMap;
    };
    StateProvince.discriminator = undefined;
    StateProvince.attributeTypeMap = [
        {
            "name": "abbreviation",
            "baseName": "abbreviation",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return StateProvince;
}());
exports.StateProvince = StateProvince;
var StepWaiting = (function () {
    function StepWaiting() {
    }
    StepWaiting.getAttributeTypeMap = function () {
        return StepWaiting.attributeTypeMap;
    };
    StepWaiting.discriminator = undefined;
    StepWaiting.attributeTypeMap = [
        {
            "name": "commseqStepUuid",
            "baseName": "commseq_step_uuid",
            "type": "string"
        },
        {
            "name": "numberWaiting",
            "baseName": "number_waiting",
            "type": "number"
        }
    ];
    return StepWaiting;
}());
exports.StepWaiting = StepWaiting;
var TaxCity = (function () {
    function TaxCity() {
    }
    TaxCity.getAttributeTypeMap = function () {
        return TaxCity.attributeTypeMap;
    };
    TaxCity.discriminator = undefined;
    TaxCity.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "cityOid",
            "baseName": "city_oid",
            "type": "number"
        },
        {
            "name": "countyOid",
            "baseName": "county_oid",
            "type": "number"
        },
        {
            "name": "dontCollectCity",
            "baseName": "dont_collect_city",
            "type": "boolean"
        },
        {
            "name": "dontCollectPostalCode",
            "baseName": "dont_collect_postal_code",
            "type": "boolean"
        },
        {
            "name": "postalCodes",
            "baseName": "postal_codes",
            "type": "Array<TaxPostalCode>"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        }
    ];
    return TaxCity;
}());
exports.TaxCity = TaxCity;
var TaxCountry = (function () {
    function TaxCountry() {
    }
    TaxCountry.getAttributeTypeMap = function () {
        return TaxCountry.attributeTypeMap;
    };
    TaxCountry.discriminator = undefined;
    TaxCountry.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "countryOid",
            "baseName": "country_oid",
            "type": "number"
        },
        {
            "name": "states",
            "baseName": "states",
            "type": "Array<TaxState>"
        },
        {
            "name": "taxGiftCharge",
            "baseName": "tax_gift_charge",
            "type": "boolean"
        },
        {
            "name": "taxGiftWrap",
            "baseName": "tax_gift_wrap",
            "type": "boolean"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        },
        {
            "name": "taxShipping",
            "baseName": "tax_shipping",
            "type": "boolean"
        }
    ];
    return TaxCountry;
}());
exports.TaxCountry = TaxCountry;
var TaxCountryCode = (function () {
    function TaxCountryCode() {
    }
    TaxCountryCode.getAttributeTypeMap = function () {
        return TaxCountryCode.attributeTypeMap;
    };
    TaxCountryCode.discriminator = undefined;
    TaxCountryCode.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "countryCode",
            "baseName": "country_code",
            "type": "string"
        },
        {
            "name": "countryName",
            "baseName": "country_name",
            "type": "string"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        }
    ];
    return TaxCountryCode;
}());
exports.TaxCountryCode = TaxCountryCode;
var TaxCounty = (function () {
    function TaxCounty() {
    }
    TaxCounty.getAttributeTypeMap = function () {
        return TaxCounty.attributeTypeMap;
    };
    TaxCounty.discriminator = undefined;
    TaxCounty.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "cities",
            "baseName": "cities",
            "type": "Array<TaxCity>"
        },
        {
            "name": "county",
            "baseName": "county",
            "type": "string"
        },
        {
            "name": "countyOid",
            "baseName": "county_oid",
            "type": "number"
        },
        {
            "name": "dontCollectCity",
            "baseName": "dont_collect_city",
            "type": "boolean"
        },
        {
            "name": "dontCollectCounty",
            "baseName": "dont_collect_county",
            "type": "boolean"
        },
        {
            "name": "dontCollectPostalCode",
            "baseName": "dont_collect_postal_code",
            "type": "boolean"
        },
        {
            "name": "stateOid",
            "baseName": "state_oid",
            "type": "number"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        }
    ];
    return TaxCounty;
}());
exports.TaxCounty = TaxCounty;
var TaxJarConfig = (function () {
    function TaxJarConfig() {
    }
    TaxJarConfig.getAttributeTypeMap = function () {
        return TaxJarConfig.attributeTypeMap;
    };
    TaxJarConfig.discriminator = undefined;
    TaxJarConfig.attributeTypeMap = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "apiKey",
            "baseName": "api_key",
            "type": "string"
        },
        {
            "name": "estimateOnly",
            "baseName": "estimate_only",
            "type": "boolean"
        },
        {
            "name": "sendOutsideNexus",
            "baseName": "send_outside_nexus",
            "type": "boolean"
        },
        {
            "name": "sendTestOrders",
            "baseName": "send_test_orders",
            "type": "boolean"
        },
        {
            "name": "useDistributionCenterFrom",
            "baseName": "use_distribution_center_from",
            "type": "boolean"
        }
    ];
    return TaxJarConfig;
}());
exports.TaxJarConfig = TaxJarConfig;
var TaxPostalCode = (function () {
    function TaxPostalCode() {
    }
    TaxPostalCode.getAttributeTypeMap = function () {
        return TaxPostalCode.attributeTypeMap;
    };
    TaxPostalCode.discriminator = undefined;
    TaxPostalCode.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "cityOid",
            "baseName": "city_oid",
            "type": "number"
        },
        {
            "name": "dontCollectPostalCode",
            "baseName": "dont_collect_postal_code",
            "type": "boolean"
        },
        {
            "name": "postalCode",
            "baseName": "postal_code",
            "type": "string"
        },
        {
            "name": "postalCodeOid",
            "baseName": "postal_code_oid",
            "type": "number"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        }
    ];
    return TaxPostalCode;
}());
exports.TaxPostalCode = TaxPostalCode;
var TaxProviderActivateResult = (function () {
    function TaxProviderActivateResult() {
    }
    TaxProviderActivateResult.getAttributeTypeMap = function () {
        return TaxProviderActivateResult.attributeTypeMap;
    };
    TaxProviderActivateResult.discriminator = undefined;
    TaxProviderActivateResult.attributeTypeMap = [
        {
            "name": "details",
            "baseName": "details",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        }
    ];
    return TaxProviderActivateResult;
}());
exports.TaxProviderActivateResult = TaxProviderActivateResult;
var TaxProviderAvalara = (function () {
    function TaxProviderAvalara() {
    }
    TaxProviderAvalara.getAttributeTypeMap = function () {
        return TaxProviderAvalara.attributeTypeMap;
    };
    TaxProviderAvalara.discriminator = undefined;
    TaxProviderAvalara.attributeTypeMap = [
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "AvalaraConfig"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return TaxProviderAvalara;
}());
exports.TaxProviderAvalara = TaxProviderAvalara;
var TaxProviderAvalaraCompaniesResult = (function () {
    function TaxProviderAvalaraCompaniesResult() {
    }
    TaxProviderAvalaraCompaniesResult.getAttributeTypeMap = function () {
        return TaxProviderAvalaraCompaniesResult.attributeTypeMap;
    };
    TaxProviderAvalaraCompaniesResult.discriminator = undefined;
    TaxProviderAvalaraCompaniesResult.attributeTypeMap = [
        {
            "name": "companies",
            "baseName": "companies",
            "type": "Array<TaxProviderAvalaraCompany>"
        }
    ];
    return TaxProviderAvalaraCompaniesResult;
}());
exports.TaxProviderAvalaraCompaniesResult = TaxProviderAvalaraCompaniesResult;
var TaxProviderAvalaraCompany = (function () {
    function TaxProviderAvalaraCompany() {
    }
    TaxProviderAvalaraCompany.getAttributeTypeMap = function () {
        return TaxProviderAvalaraCompany.attributeTypeMap;
    };
    TaxProviderAvalaraCompany.discriminator = undefined;
    TaxProviderAvalaraCompany.attributeTypeMap = [
        {
            "name": "companyCode",
            "baseName": "company_code",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "company_name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return TaxProviderAvalaraCompany;
}());
exports.TaxProviderAvalaraCompany = TaxProviderAvalaraCompany;
var TaxProviderSelf = (function () {
    function TaxProviderSelf() {
    }
    TaxProviderSelf.getAttributeTypeMap = function () {
        return TaxProviderSelf.attributeTypeMap;
    };
    TaxProviderSelf.discriminator = undefined;
    TaxProviderSelf.attributeTypeMap = [
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "SelfConfig"
        },
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<TaxCountry>"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return TaxProviderSelf;
}());
exports.TaxProviderSelf = TaxProviderSelf;
var TaxProviderSelfCountriesResponse = (function () {
    function TaxProviderSelfCountriesResponse() {
    }
    TaxProviderSelfCountriesResponse.getAttributeTypeMap = function () {
        return TaxProviderSelfCountriesResponse.attributeTypeMap;
    };
    TaxProviderSelfCountriesResponse.discriminator = undefined;
    TaxProviderSelfCountriesResponse.attributeTypeMap = [
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<TaxCountryCode>"
        }
    ];
    return TaxProviderSelfCountriesResponse;
}());
exports.TaxProviderSelfCountriesResponse = TaxProviderSelfCountriesResponse;
var TaxProviderSelfRegionsResponse = (function () {
    function TaxProviderSelfRegionsResponse() {
    }
    TaxProviderSelfRegionsResponse.getAttributeTypeMap = function () {
        return TaxProviderSelfRegionsResponse.attributeTypeMap;
    };
    TaxProviderSelfRegionsResponse.discriminator = undefined;
    TaxProviderSelfRegionsResponse.attributeTypeMap = [
        {
            "name": "regions",
            "baseName": "regions",
            "type": "Array<TaxStateCode>"
        }
    ];
    return TaxProviderSelfRegionsResponse;
}());
exports.TaxProviderSelfRegionsResponse = TaxProviderSelfRegionsResponse;
var TaxProviderSovos = (function () {
    function TaxProviderSovos() {
    }
    TaxProviderSovos.getAttributeTypeMap = function () {
        return TaxProviderSovos.attributeTypeMap;
    };
    TaxProviderSovos.discriminator = undefined;
    TaxProviderSovos.attributeTypeMap = [
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "SovosConfig"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return TaxProviderSovos;
}());
exports.TaxProviderSovos = TaxProviderSovos;
var TaxProviderTaxJar = (function () {
    function TaxProviderTaxJar() {
    }
    TaxProviderTaxJar.getAttributeTypeMap = function () {
        return TaxProviderTaxJar.attributeTypeMap;
    };
    TaxProviderTaxJar.discriminator = undefined;
    TaxProviderTaxJar.attributeTypeMap = [
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "TaxJarConfig"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return TaxProviderTaxJar;
}());
exports.TaxProviderTaxJar = TaxProviderTaxJar;
var TaxProviderTestResult = (function () {
    function TaxProviderTestResult() {
    }
    TaxProviderTestResult.getAttributeTypeMap = function () {
        return TaxProviderTestResult.attributeTypeMap;
    };
    TaxProviderTestResult.discriminator = undefined;
    TaxProviderTestResult.attributeTypeMap = [
        {
            "name": "details",
            "baseName": "details",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        }
    ];
    return TaxProviderTestResult;
}());
exports.TaxProviderTestResult = TaxProviderTestResult;
var TaxProviderUltraCart = (function () {
    function TaxProviderUltraCart() {
    }
    TaxProviderUltraCart.getAttributeTypeMap = function () {
        return TaxProviderUltraCart.attributeTypeMap;
    };
    TaxProviderUltraCart.discriminator = undefined;
    TaxProviderUltraCart.attributeTypeMap = [
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "UltraCartConfig"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "states",
            "baseName": "states",
            "type": "Array<TaxProviderUltraCartState>"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string"
        }
    ];
    return TaxProviderUltraCart;
}());
exports.TaxProviderUltraCart = TaxProviderUltraCart;
var TaxProviderUltraCartState = (function () {
    function TaxProviderUltraCartState() {
    }
    TaxProviderUltraCartState.getAttributeTypeMap = function () {
        return TaxProviderUltraCartState.attributeTypeMap;
    };
    TaxProviderUltraCartState.discriminator = undefined;
    TaxProviderUltraCartState.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "stateCode",
            "baseName": "state_code",
            "type": "string"
        },
        {
            "name": "stateName",
            "baseName": "state_name",
            "type": "string"
        },
        {
            "name": "taxGiftCharge",
            "baseName": "tax_gift_charge",
            "type": "boolean"
        },
        {
            "name": "taxGiftWrap",
            "baseName": "tax_gift_wrap",
            "type": "boolean"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        },
        {
            "name": "taxShipping",
            "baseName": "tax_shipping",
            "type": "boolean"
        }
    ];
    return TaxProviderUltraCartState;
}());
exports.TaxProviderUltraCartState = TaxProviderUltraCartState;
var TaxProvidersResponse = (function () {
    function TaxProvidersResponse() {
    }
    TaxProvidersResponse.getAttributeTypeMap = function () {
        return TaxProvidersResponse.attributeTypeMap;
    };
    TaxProvidersResponse.discriminator = undefined;
    TaxProvidersResponse.attributeTypeMap = [
        {
            "name": "avalara",
            "baseName": "avalara",
            "type": "TaxProviderAvalara"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "self",
            "baseName": "self",
            "type": "TaxProviderSelf"
        },
        {
            "name": "sovos",
            "baseName": "sovos",
            "type": "TaxProviderSovos"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "taxjar",
            "baseName": "taxjar",
            "type": "TaxProviderTaxJar"
        },
        {
            "name": "ultracart",
            "baseName": "ultracart",
            "type": "TaxProviderUltraCart"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return TaxProvidersResponse;
}());
exports.TaxProvidersResponse = TaxProvidersResponse;
var TaxState = (function () {
    function TaxState() {
    }
    TaxState.getAttributeTypeMap = function () {
        return TaxState.attributeTypeMap;
    };
    TaxState.discriminator = undefined;
    TaxState.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "counties",
            "baseName": "counties",
            "type": "Array<TaxCounty>"
        },
        {
            "name": "countryOid",
            "baseName": "country_oid",
            "type": "number"
        },
        {
            "name": "dontCollectCity",
            "baseName": "dont_collect_city",
            "type": "boolean"
        },
        {
            "name": "dontCollectCounty",
            "baseName": "dont_collect_county",
            "type": "boolean"
        },
        {
            "name": "dontCollectPostalCode",
            "baseName": "dont_collect_postal_code",
            "type": "boolean"
        },
        {
            "name": "dontCollectState",
            "baseName": "dont_collect_state",
            "type": "boolean"
        },
        {
            "name": "stateCode",
            "baseName": "state_code",
            "type": "string"
        },
        {
            "name": "stateOid",
            "baseName": "state_oid",
            "type": "number"
        },
        {
            "name": "taxGiftCharge",
            "baseName": "tax_gift_charge",
            "type": "boolean"
        },
        {
            "name": "taxGiftWrap",
            "baseName": "tax_gift_wrap",
            "type": "boolean"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        },
        {
            "name": "taxShipping",
            "baseName": "tax_shipping",
            "type": "boolean"
        },
        {
            "name": "useUltracartManagedRates",
            "baseName": "use_ultracart_managed_rates",
            "type": "boolean"
        }
    ];
    return TaxState;
}());
exports.TaxState = TaxState;
var TaxStateCode = (function () {
    function TaxStateCode() {
    }
    TaxStateCode.getAttributeTypeMap = function () {
        return TaxStateCode.attributeTypeMap;
    };
    TaxStateCode.discriminator = undefined;
    TaxStateCode.attributeTypeMap = [
        {
            "name": "accountingCode",
            "baseName": "accounting_code",
            "type": "string"
        },
        {
            "name": "stateCode",
            "baseName": "state_code",
            "type": "string"
        },
        {
            "name": "stateName",
            "baseName": "state_name",
            "type": "string"
        },
        {
            "name": "taxRate",
            "baseName": "tax_rate",
            "type": "number"
        },
        {
            "name": "taxRateFormatted",
            "baseName": "tax_rate_formatted",
            "type": "string"
        }
    ];
    return TaxStateCode;
}());
exports.TaxStateCode = TaxStateCode;
var TempMultimedia = (function () {
    function TempMultimedia() {
    }
    TempMultimedia.getAttributeTypeMap = function () {
        return TempMultimedia.attributeTypeMap;
    };
    TempMultimedia.discriminator = undefined;
    TempMultimedia.attributeTypeMap = [
        {
            "name": "filename",
            "baseName": "filename",
            "type": "string"
        },
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "multimediaType",
            "baseName": "multimedia_type",
            "type": "TempMultimedia.MultimediaTypeEnum"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "number"
        },
        {
            "name": "tempMultimediaOid",
            "baseName": "temp_multimedia_oid",
            "type": "number"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        }
    ];
    return TempMultimedia;
}());
exports.TempMultimedia = TempMultimedia;
(function (TempMultimedia) {
    var MultimediaTypeEnum;
    (function (MultimediaTypeEnum) {
        MultimediaTypeEnum[MultimediaTypeEnum["Image"] = 'Image'] = "Image";
        MultimediaTypeEnum[MultimediaTypeEnum["PDF"] = 'PDF'] = "PDF";
        MultimediaTypeEnum[MultimediaTypeEnum["Text"] = 'Text'] = "Text";
        MultimediaTypeEnum[MultimediaTypeEnum["Video"] = 'Video'] = "Video";
    })(MultimediaTypeEnum = TempMultimedia.MultimediaTypeEnum || (TempMultimedia.MultimediaTypeEnum = {}));
})(TempMultimedia = exports.TempMultimedia || (exports.TempMultimedia = {}));
exports.TempMultimedia = TempMultimedia;
var TempMultimediaResponse = (function () {
    function TempMultimediaResponse() {
    }
    TempMultimediaResponse.getAttributeTypeMap = function () {
        return TempMultimediaResponse.attributeTypeMap;
    };
    TempMultimediaResponse.discriminator = undefined;
    TempMultimediaResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "tempMultimedia",
            "baseName": "temp_multimedia",
            "type": "TempMultimedia"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return TempMultimediaResponse;
}());
exports.TempMultimediaResponse = TempMultimediaResponse;
var ThumbnailParametersRequest = (function () {
    function ThumbnailParametersRequest() {
    }
    ThumbnailParametersRequest.getAttributeTypeMap = function () {
        return ThumbnailParametersRequest.attributeTypeMap;
    };
    ThumbnailParametersRequest.discriminator = undefined;
    ThumbnailParametersRequest.attributeTypeMap = [
        {
            "name": "height",
            "baseName": "height",
            "type": "number"
        },
        {
            "name": "pngFormat",
            "baseName": "pngFormat",
            "type": "boolean"
        },
        {
            "name": "squareThumbnail",
            "baseName": "squareThumbnail",
            "type": "boolean"
        },
        {
            "name": "webp",
            "baseName": "webp",
            "type": "boolean"
        },
        {
            "name": "width",
            "baseName": "width",
            "type": "number"
        }
    ];
    return ThumbnailParametersRequest;
}());
exports.ThumbnailParametersRequest = ThumbnailParametersRequest;
var ThumbnailParametersResponse = (function () {
    function ThumbnailParametersResponse() {
    }
    ThumbnailParametersResponse.getAttributeTypeMap = function () {
        return ThumbnailParametersResponse.attributeTypeMap;
    };
    ThumbnailParametersResponse.discriminator = undefined;
    ThumbnailParametersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "thumbnailUrlSuffix",
            "baseName": "thumbnail_url_suffix",
            "type": "string"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return ThumbnailParametersResponse;
}());
exports.ThumbnailParametersResponse = ThumbnailParametersResponse;
var TransactionEmail = (function () {
    function TransactionEmail() {
    }
    TransactionEmail.getAttributeTypeMap = function () {
        return TransactionEmail.attributeTypeMap;
    };
    TransactionEmail.discriminator = undefined;
    TransactionEmail.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "espDomainUuid",
            "baseName": "esp_domain_uuid",
            "type": "string"
        },
        {
            "name": "espFriendlyName",
            "baseName": "esp_friendly_name",
            "type": "string"
        },
        {
            "name": "espUser",
            "baseName": "esp_user",
            "type": "string"
        },
        {
            "name": "fileExists",
            "baseName": "file_exists",
            "type": "boolean"
        },
        {
            "name": "fileName",
            "baseName": "file_name",
            "type": "string"
        },
        {
            "name": "group",
            "baseName": "group",
            "type": "string"
        },
        {
            "name": "handlebarVariables",
            "baseName": "handlebar_variables",
            "type": "Array<string>"
        },
        {
            "name": "invalid",
            "baseName": "invalid",
            "type": "boolean"
        },
        {
            "name": "lastModified",
            "baseName": "last_modified",
            "type": "string"
        },
        {
            "name": "libraryItemOid",
            "baseName": "library_item_oid",
            "type": "number"
        },
        {
            "name": "options",
            "baseName": "options",
            "type": "Array<TransactionEmailOption>"
        },
        {
            "name": "path",
            "baseName": "path",
            "type": "string"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "string"
        },
        {
            "name": "storeFrontFsDirectoryOid",
            "baseName": "store_front_fs_directory_oid",
            "type": "number"
        },
        {
            "name": "storeFrontFsFileOid",
            "baseName": "store_front_fs_file_oid",
            "type": "number"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "syntaxErrors",
            "baseName": "syntax_errors",
            "type": "string"
        },
        {
            "name": "templatePathRelativePath",
            "baseName": "template_path_relative_path",
            "type": "string"
        },
        {
            "name": "themeRelativePath",
            "baseName": "theme_relative_path",
            "type": "string"
        }
    ];
    return TransactionEmail;
}());
exports.TransactionEmail = TransactionEmail;
var TransactionEmailListResponse = (function () {
    function TransactionEmailListResponse() {
    }
    TransactionEmailListResponse.getAttributeTypeMap = function () {
        return TransactionEmailListResponse.attributeTypeMap;
    };
    TransactionEmailListResponse.discriminator = undefined;
    TransactionEmailListResponse.attributeTypeMap = [
        {
            "name": "emailNames",
            "baseName": "email_names",
            "type": "Array<string>"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return TransactionEmailListResponse;
}());
exports.TransactionEmailListResponse = TransactionEmailListResponse;
var TransactionEmailOption = (function () {
    function TransactionEmailOption() {
    }
    TransactionEmailOption.getAttributeTypeMap = function () {
        return TransactionEmailOption.attributeTypeMap;
    };
    TransactionEmailOption.discriminator = undefined;
    TransactionEmailOption.attributeTypeMap = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "merchantEmailDeliveryOptionOid",
            "baseName": "merchantEmailDeliveryOptionOid",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchantId",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "selected",
            "baseName": "selected",
            "type": "boolean"
        },
        {
            "name": "storeFrontOid",
            "baseName": "storeFrontOid",
            "type": "number"
        },
        {
            "name": "templateDisplay",
            "baseName": "templateDisplay",
            "type": "string"
        },
        {
            "name": "templateType",
            "baseName": "templateType",
            "type": "string"
        }
    ];
    return TransactionEmailOption;
}());
exports.TransactionEmailOption = TransactionEmailOption;
var TransactionEmailResponse = (function () {
    function TransactionEmailResponse() {
    }
    TransactionEmailResponse.getAttributeTypeMap = function () {
        return TransactionEmailResponse.attributeTypeMap;
    };
    TransactionEmailResponse.discriminator = undefined;
    TransactionEmailResponse.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "TransactionEmail"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return TransactionEmailResponse;
}());
exports.TransactionEmailResponse = TransactionEmailResponse;
var UltraCartConfig = (function () {
    function UltraCartConfig() {
    }
    UltraCartConfig.getAttributeTypeMap = function () {
        return UltraCartConfig.attributeTypeMap;
    };
    UltraCartConfig.discriminator = undefined;
    UltraCartConfig.attributeTypeMap = [
        {
            "name": "taxBilling",
            "baseName": "tax_billing",
            "type": "boolean"
        }
    ];
    return UltraCartConfig;
}());
exports.UltraCartConfig = UltraCartConfig;
var User = (function () {
    function User() {
    }
    User.getAttributeTypeMap = function () {
        return User.attributeTypeMap;
    };
    User.discriminator = undefined;
    User.attributeTypeMap = [
        {
            "name": "apiIpAddressMasks",
            "baseName": "api_ip_address_masks",
            "type": "Array<string>"
        },
        {
            "name": "changeFtpPasswordTo",
            "baseName": "change_ftp_password_to",
            "type": "string"
        },
        {
            "name": "changePasswordTo",
            "baseName": "change_password_to",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "fullName",
            "baseName": "full_name",
            "type": "string"
        },
        {
            "name": "groups",
            "baseName": "groups",
            "type": "Array<UserGroupMembership>"
        },
        {
            "name": "linkedAccounts",
            "baseName": "linked_accounts",
            "type": "Array<LinkedAccount>"
        },
        {
            "name": "login",
            "baseName": "login",
            "type": "string"
        },
        {
            "name": "loginHistories",
            "baseName": "login_histories",
            "type": "Array<UserLogin>"
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "Array<Notification>"
        },
        {
            "name": "otpSerialNumber",
            "baseName": "otp_serial_number",
            "type": "string"
        },
        {
            "name": "permissions",
            "baseName": "permissions",
            "type": "Array<Permission>"
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "string"
        },
        {
            "name": "userId",
            "baseName": "user_id",
            "type": "number"
        }
    ];
    return User;
}());
exports.User = User;
var UserGroupMembership = (function () {
    function UserGroupMembership() {
    }
    UserGroupMembership.getAttributeTypeMap = function () {
        return UserGroupMembership.attributeTypeMap;
    };
    UserGroupMembership.discriminator = undefined;
    UserGroupMembership.attributeTypeMap = [
        {
            "name": "groupOid",
            "baseName": "groupOid",
            "type": "number"
        },
        {
            "name": "member",
            "baseName": "member",
            "type": "boolean"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return UserGroupMembership;
}());
exports.UserGroupMembership = UserGroupMembership;
var UserLogin = (function () {
    function UserLogin() {
    }
    UserLogin.getAttributeTypeMap = function () {
        return UserLogin.attributeTypeMap;
    };
    UserLogin.discriminator = undefined;
    UserLogin.attributeTypeMap = [
        {
            "name": "ipAddress",
            "baseName": "ip_address",
            "type": "string"
        },
        {
            "name": "login",
            "baseName": "login",
            "type": "string"
        },
        {
            "name": "loginDts",
            "baseName": "login_dts",
            "type": "string"
        },
        {
            "name": "userAgent",
            "baseName": "user_agent",
            "type": "string"
        }
    ];
    return UserLogin;
}());
exports.UserLogin = UserLogin;
var UserLoginsResponse = (function () {
    function UserLoginsResponse() {
    }
    UserLoginsResponse.getAttributeTypeMap = function () {
        return UserLoginsResponse.attributeTypeMap;
    };
    UserLoginsResponse.discriminator = undefined;
    UserLoginsResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "logins",
            "baseName": "logins",
            "type": "Array<UserLogin>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return UserLoginsResponse;
}());
exports.UserLoginsResponse = UserLoginsResponse;
var UserResponse = (function () {
    function UserResponse() {
    }
    UserResponse.getAttributeTypeMap = function () {
        return UserResponse.attributeTypeMap;
    };
    UserResponse.discriminator = undefined;
    UserResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "user",
            "baseName": "user",
            "type": "User"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return UserResponse;
}());
exports.UserResponse = UserResponse;
var UsersResponse = (function () {
    function UsersResponse() {
    }
    UsersResponse.getAttributeTypeMap = function () {
        return UsersResponse.attributeTypeMap;
    };
    UsersResponse.discriminator = undefined;
    UsersResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "users",
            "baseName": "users",
            "type": "Array<User>"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        }
    ];
    return UsersResponse;
}());
exports.UsersResponse = UsersResponse;
var VerificationRecord = (function () {
    function VerificationRecord() {
    }
    VerificationRecord.getAttributeTypeMap = function () {
        return VerificationRecord.attributeTypeMap;
    };
    VerificationRecord.discriminator = undefined;
    VerificationRecord.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        }
    ];
    return VerificationRecord;
}());
exports.VerificationRecord = VerificationRecord;
var Warning = (function () {
    function Warning() {
    }
    Warning.getAttributeTypeMap = function () {
        return Warning.attributeTypeMap;
    };
    Warning.discriminator = undefined;
    Warning.attributeTypeMap = [
        {
            "name": "moreInfo",
            "baseName": "more_info",
            "type": "string"
        },
        {
            "name": "warningMessage",
            "baseName": "warning_message",
            "type": "string"
        }
    ];
    return Warning;
}());
exports.Warning = Warning;
var Webhook = (function () {
    function Webhook() {
    }
    Webhook.getAttributeTypeMap = function () {
        return Webhook.attributeTypeMap;
    };
    Webhook.discriminator = undefined;
    Webhook.attributeTypeMap = [
        {
            "name": "apiUserOid",
            "baseName": "api_user_oid",
            "type": "number"
        },
        {
            "name": "apiVersion",
            "baseName": "api_version",
            "type": "Webhook.ApiVersionEnum"
        },
        {
            "name": "applicationProfile",
            "baseName": "application_profile",
            "type": "ApiUserApplicationProfile"
        },
        {
            "name": "authenticationType",
            "baseName": "authentication_type",
            "type": "Webhook.AuthenticationTypeEnum"
        },
        {
            "name": "basicPassword",
            "baseName": "basic_password",
            "type": "string"
        },
        {
            "name": "basicUsername",
            "baseName": "basic_username",
            "type": "string"
        },
        {
            "name": "consecutiveFailures",
            "baseName": "consecutive_failures",
            "type": "number"
        },
        {
            "name": "disabled",
            "baseName": "disabled",
            "type": "boolean"
        },
        {
            "name": "eventCategories",
            "baseName": "event_categories",
            "type": "Array<WebhookEventCategory>"
        },
        {
            "name": "iamAccessKey",
            "baseName": "iam_access_key",
            "type": "string"
        },
        {
            "name": "iamSecretKey",
            "baseName": "iam_secret_key",
            "type": "string"
        },
        {
            "name": "maximumEvents",
            "baseName": "maximum_events",
            "type": "number"
        },
        {
            "name": "maximumSize",
            "baseName": "maximum_size",
            "type": "number"
        },
        {
            "name": "merchantId",
            "baseName": "merchant_id",
            "type": "string"
        },
        {
            "name": "nextRetryAfter",
            "baseName": "next_retry_after",
            "type": "string"
        },
        {
            "name": "pending",
            "baseName": "pending",
            "type": "number"
        },
        {
            "name": "webhookOid",
            "baseName": "webhook_oid",
            "type": "number"
        },
        {
            "name": "webhookUrl",
            "baseName": "webhook_url",
            "type": "string"
        }
    ];
    return Webhook;
}());
exports.Webhook = Webhook;
(function (Webhook) {
    var ApiVersionEnum;
    (function (ApiVersionEnum) {
        ApiVersionEnum[ApiVersionEnum["_20170301"] = '2017-03-01'] = "_20170301";
    })(ApiVersionEnum = Webhook.ApiVersionEnum || (Webhook.ApiVersionEnum = {}));
    var AuthenticationTypeEnum;
    (function (AuthenticationTypeEnum) {
        AuthenticationTypeEnum[AuthenticationTypeEnum["None"] = 'none'] = "None";
        AuthenticationTypeEnum[AuthenticationTypeEnum["Basic"] = 'basic'] = "Basic";
    })(AuthenticationTypeEnum = Webhook.AuthenticationTypeEnum || (Webhook.AuthenticationTypeEnum = {}));
})(Webhook = exports.Webhook || (exports.Webhook = {}));
exports.Webhook = Webhook;
var WebhookEventCategory = (function () {
    function WebhookEventCategory() {
    }
    WebhookEventCategory.getAttributeTypeMap = function () {
        return WebhookEventCategory.attributeTypeMap;
    };
    WebhookEventCategory.discriminator = undefined;
    WebhookEventCategory.attributeTypeMap = [
        {
            "name": "anySubscribed",
            "baseName": "any_subscribed",
            "type": "boolean"
        },
        {
            "name": "availableExpansions",
            "baseName": "available_expansions",
            "type": "Array<string>"
        },
        {
            "name": "eventCategory",
            "baseName": "event_category",
            "type": "string"
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<WebhookEventSubscription>"
        },
        {
            "name": "subscribed",
            "baseName": "subscribed",
            "type": "boolean"
        }
    ];
    return WebhookEventCategory;
}());
exports.WebhookEventCategory = WebhookEventCategory;
var WebhookEventSubscription = (function () {
    function WebhookEventSubscription() {
    }
    WebhookEventSubscription.getAttributeTypeMap = function () {
        return WebhookEventSubscription.attributeTypeMap;
    };
    WebhookEventSubscription.discriminator = undefined;
    WebhookEventSubscription.attributeTypeMap = [
        {
            "name": "comments",
            "baseName": "comments",
            "type": "string"
        },
        {
            "name": "deprecatedFlag",
            "baseName": "deprecated_flag",
            "type": "boolean"
        },
        {
            "name": "discontinuedFlag",
            "baseName": "discontinued_flag",
            "type": "boolean"
        },
        {
            "name": "eventDescription",
            "baseName": "event_description",
            "type": "string"
        },
        {
            "name": "eventName",
            "baseName": "event_name",
            "type": "string"
        },
        {
            "name": "expansion",
            "baseName": "expansion",
            "type": "string"
        },
        {
            "name": "subscribed",
            "baseName": "subscribed",
            "type": "boolean"
        },
        {
            "name": "supportsReflow",
            "baseName": "supports_reflow",
            "type": "boolean"
        },
        {
            "name": "webhookEventOid",
            "baseName": "webhook_event_oid",
            "type": "number"
        }
    ];
    return WebhookEventSubscription;
}());
exports.WebhookEventSubscription = WebhookEventSubscription;
var WebhookLog = (function () {
    function WebhookLog() {
    }
    WebhookLog.getAttributeTypeMap = function () {
        return WebhookLog.attributeTypeMap;
    };
    WebhookLog.discriminator = undefined;
    WebhookLog.attributeTypeMap = [
        {
            "name": "deliveryDts",
            "baseName": "delivery_dts",
            "type": "string"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "number"
        },
        {
            "name": "request",
            "baseName": "request",
            "type": "string"
        },
        {
            "name": "requestHeaders",
            "baseName": "request_headers",
            "type": "Array<HTTPHeader>"
        },
        {
            "name": "requestId",
            "baseName": "request_id",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "string"
        },
        {
            "name": "responseHeaders",
            "baseName": "response_headers",
            "type": "Array<HTTPHeader>"
        },
        {
            "name": "statusCode",
            "baseName": "status_code",
            "type": "number"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string"
        }
    ];
    return WebhookLog;
}());
exports.WebhookLog = WebhookLog;
var WebhookLogResponse = (function () {
    function WebhookLogResponse() {
    }
    WebhookLogResponse.getAttributeTypeMap = function () {
        return WebhookLogResponse.attributeTypeMap;
    };
    WebhookLogResponse.discriminator = undefined;
    WebhookLogResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        },
        {
            "name": "webhookLog",
            "baseName": "webhook_log",
            "type": "WebhookLog"
        }
    ];
    return WebhookLogResponse;
}());
exports.WebhookLogResponse = WebhookLogResponse;
var WebhookLogSummariesResponse = (function () {
    function WebhookLogSummariesResponse() {
    }
    WebhookLogSummariesResponse.getAttributeTypeMap = function () {
        return WebhookLogSummariesResponse.attributeTypeMap;
    };
    WebhookLogSummariesResponse.discriminator = undefined;
    WebhookLogSummariesResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        },
        {
            "name": "webhookLogSummaries",
            "baseName": "webhook_log_summaries",
            "type": "Array<WebhookLogSummary>"
        }
    ];
    return WebhookLogSummariesResponse;
}());
exports.WebhookLogSummariesResponse = WebhookLogSummariesResponse;
var WebhookLogSummary = (function () {
    function WebhookLogSummary() {
    }
    WebhookLogSummary.getAttributeTypeMap = function () {
        return WebhookLogSummary.attributeTypeMap;
    };
    WebhookLogSummary.discriminator = undefined;
    WebhookLogSummary.attributeTypeMap = [
        {
            "name": "deliveryDts",
            "baseName": "delivery_dts",
            "type": "string"
        },
        {
            "name": "requestId",
            "baseName": "request_id",
            "type": "string"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        }
    ];
    return WebhookLogSummary;
}());
exports.WebhookLogSummary = WebhookLogSummary;
var WebhookResponse = (function () {
    function WebhookResponse() {
    }
    WebhookResponse.getAttributeTypeMap = function () {
        return WebhookResponse.attributeTypeMap;
    };
    WebhookResponse.discriminator = undefined;
    WebhookResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        },
        {
            "name": "webhook",
            "baseName": "webhook",
            "type": "Webhook"
        }
    ];
    return WebhookResponse;
}());
exports.WebhookResponse = WebhookResponse;
var WebhookSampleRequest = (function () {
    function WebhookSampleRequest() {
    }
    WebhookSampleRequest.getAttributeTypeMap = function () {
        return WebhookSampleRequest.attributeTypeMap;
    };
    WebhookSampleRequest.discriminator = undefined;
    WebhookSampleRequest.attributeTypeMap = [
        {
            "name": "request",
            "baseName": "request",
            "type": "string"
        },
        {
            "name": "requestHeaders",
            "baseName": "request_headers",
            "type": "Array<HTTPHeader>"
        },
        {
            "name": "requestId",
            "baseName": "request_id",
            "type": "string"
        },
        {
            "name": "uri",
            "baseName": "uri",
            "type": "string"
        }
    ];
    return WebhookSampleRequest;
}());
exports.WebhookSampleRequest = WebhookSampleRequest;
var WebhookSampleRequestResponse = (function () {
    function WebhookSampleRequestResponse() {
    }
    WebhookSampleRequestResponse.getAttributeTypeMap = function () {
        return WebhookSampleRequestResponse.attributeTypeMap;
    };
    WebhookSampleRequestResponse.discriminator = undefined;
    WebhookSampleRequestResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        },
        {
            "name": "webhookSampleRequest",
            "baseName": "webhook_sample_request",
            "type": "WebhookSampleRequest"
        }
    ];
    return WebhookSampleRequestResponse;
}());
exports.WebhookSampleRequestResponse = WebhookSampleRequestResponse;
var WebhooksResponse = (function () {
    function WebhooksResponse() {
    }
    WebhooksResponse.getAttributeTypeMap = function () {
        return WebhooksResponse.attributeTypeMap;
    };
    WebhooksResponse.discriminator = undefined;
    WebhooksResponse.attributeTypeMap = [
        {
            "name": "error",
            "baseName": "error",
            "type": "Error"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "ResponseMetadata"
        },
        {
            "name": "success",
            "baseName": "success",
            "type": "boolean"
        },
        {
            "name": "warning",
            "baseName": "warning",
            "type": "Warning"
        },
        {
            "name": "webhooks",
            "baseName": "webhooks",
            "type": "Array<Webhook>"
        }
    ];
    return WebhooksResponse;
}());
exports.WebhooksResponse = WebhooksResponse;
var Weight = (function () {
    function Weight() {
    }
    Weight.getAttributeTypeMap = function () {
        return Weight.attributeTypeMap;
    };
    Weight.discriminator = undefined;
    Weight.attributeTypeMap = [
        {
            "name": "uom",
            "baseName": "uom",
            "type": "Weight.UomEnum"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        }
    ];
    return Weight;
}());
exports.Weight = Weight;
(function (Weight) {
    var UomEnum;
    (function (UomEnum) {
        UomEnum[UomEnum["KG"] = 'KG'] = "KG";
        UomEnum[UomEnum["LB"] = 'LB'] = "LB";
        UomEnum[UomEnum["OZ"] = 'OZ'] = "OZ";
    })(UomEnum = Weight.UomEnum || (Weight.UomEnum = {}));
})(Weight = exports.Weight || (exports.Weight = {}));
exports.Weight = Weight;
var enumsMap = {
    "AffiliateLedger.TransactionStateEnum": AffiliateLedger.TransactionStateEnum,
    "AffiliateLink.CustomHtmlApprovalStatusEnum": AffiliateLink.CustomHtmlApprovalStatusEnum,
    "AffiliateLink.InvisibleLinkApprovalStatusEnum": AffiliateLink.InvisibleLinkApprovalStatusEnum,
    "AffiliateLink.TypeEnum": AffiliateLink.TypeEnum,
    "AutoOrder.StatusEnum": AutoOrder.StatusEnum,
    "AutoOrderItem.FrequencyEnum": AutoOrderItem.FrequencyEnum,
    "AutoOrderItemSimpleSchedule.FrequencyEnum": AutoOrderItemSimpleSchedule.FrequencyEnum,
    "CartCustomerProfileCreditCard.CardTypeEnum": CartCustomerProfileCreditCard.CardTypeEnum,
    "CartItemMultimedia.TypeEnum": CartItemMultimedia.TypeEnum,
    "CartItemOption.TypeEnum": CartItemOption.TypeEnum,
    "CartKitComponentOption.TypeEnum": CartKitComponentOption.TypeEnum,
    "CheckoutHandoffRequest.OperationEnum": CheckoutHandoffRequest.OperationEnum,
    "Distance.UomEnum": Distance.UomEnum,
    "EmailCommseqStep.TypeEnum": EmailCommseqStep.TypeEnum,
    "Experiment.StatusEnum": Experiment.StatusEnum,
    "ItemAutoOrderStep.TypeEnum": ItemAutoOrderStep.TypeEnum,
    "ItemContentMultimedia.TypeEnum": ItemContentMultimedia.TypeEnum,
    "ItemOption.TypeEnum": ItemOption.TypeEnum,
    "ItemOptionValue.AdditionalDimensionApplicationEnum": ItemOptionValue.AdditionalDimensionApplicationEnum,
    "ItemRelatedItem.TypeEnum": ItemRelatedItem.TypeEnum,
    "ItemRestrictionItem.TypeEnum": ItemRestrictionItem.TypeEnum,
    "ItemShippingDestinationRestriction.ValidityEnum": ItemShippingDestinationRestriction.ValidityEnum,
    "ItemShippingMethod.ShippingMethodValidityEnum": ItemShippingMethod.ShippingMethodValidityEnum,
    "ItemTag.TagTypeEnum": ItemTag.TagTypeEnum,
    "ItemThirdPartyEmailMarketing.ProviderNameEnum": ItemThirdPartyEmailMarketing.ProviderNameEnum,
    "OauthTokenResponse.TokenTypeEnum": OauthTokenResponse.TokenTypeEnum,
    "Order.CurrentStageEnum": Order.CurrentStageEnum,
    "OrderAffiliateLedger.TransactionStateEnum": OrderAffiliateLedger.TransactionStateEnum,
    "OrderAutoOrder.StatusEnum": OrderAutoOrder.StatusEnum,
    "OrderFormat.FormatEnum": OrderFormat.FormatEnum,
    "OrderFraudScore.BinMatchEnum": OrderFraudScore.BinMatchEnum,
    "OrderItemOption.AdditionalDimensionApplicationEnum": OrderItemOption.AdditionalDimensionApplicationEnum,
    "OrderPayment.PaymentMethodEnum": OrderPayment.PaymentMethodEnum,
    "OrderPayment.PaymentStatusEnum": OrderPayment.PaymentStatusEnum,
    "OrderPaymentCreditCard.CardTypeEnum": OrderPaymentCreditCard.CardTypeEnum,
    "OrderPaymentECheck.BankAccountTypeEnum": OrderPaymentECheck.BankAccountTypeEnum,
    "OrderPaymentECheck.BankOwnerTypeEnum": OrderPaymentECheck.BankOwnerTypeEnum,
    "OrderQuery.CurrentStageEnum": OrderQuery.CurrentStageEnum,
    "OrderQuery.PaymentMethodEnum": OrderQuery.PaymentMethodEnum,
    "TempMultimedia.MultimediaTypeEnum": TempMultimedia.MultimediaTypeEnum,
    "Webhook.ApiVersionEnum": Webhook.ApiVersionEnum,
    "Webhook.AuthenticationTypeEnum": Webhook.AuthenticationTypeEnum,
    "Weight.UomEnum": Weight.UomEnum,
};
var typeMap = {
    "AccountsReceivableRetryConfig": AccountsReceivableRetryConfig,
    "AccountsReceivableRetryConfigResponse": AccountsReceivableRetryConfigResponse,
    "AccountsReceivableRetryDayActivity": AccountsReceivableRetryDayActivity,
    "AccountsReceivableRetryStatAccount": AccountsReceivableRetryStatAccount,
    "AccountsReceivableRetryStatMetrics": AccountsReceivableRetryStatMetrics,
    "AccountsReceivableRetryStatRevenue": AccountsReceivableRetryStatRevenue,
    "AccountsReceivableRetryStatsResponse": AccountsReceivableRetryStatsResponse,
    "Activity": Activity,
    "AddLibraryItemRequest": AddLibraryItemRequest,
    "AffiliateClick": AffiliateClick,
    "AffiliateClickQuery": AffiliateClickQuery,
    "AffiliateClicksResponse": AffiliateClicksResponse,
    "AffiliateLedger": AffiliateLedger,
    "AffiliateLedgerQuery": AffiliateLedgerQuery,
    "AffiliateLedgersResponse": AffiliateLedgersResponse,
    "AffiliateLink": AffiliateLink,
    "ApiUserApplicationProfile": ApiUserApplicationProfile,
    "ApplyLibraryItemRequest": ApplyLibraryItemRequest,
    "ApplyLibraryItemResponse": ApplyLibraryItemResponse,
    "AutoOrder": AutoOrder,
    "AutoOrderItem": AutoOrderItem,
    "AutoOrderItemFutureSchedule": AutoOrderItemFutureSchedule,
    "AutoOrderItemOption": AutoOrderItemOption,
    "AutoOrderItemSimpleSchedule": AutoOrderItemSimpleSchedule,
    "AutoOrderQuery": AutoOrderQuery,
    "AutoOrderQueryBatch": AutoOrderQueryBatch,
    "AutoOrderResponse": AutoOrderResponse,
    "AutoOrdersRequest": AutoOrdersRequest,
    "AutoOrdersResponse": AutoOrdersResponse,
    "AvalaraConfig": AvalaraConfig,
    "BaseResponse": BaseResponse,
    "Cart": Cart,
    "CartAffiliate": CartAffiliate,
    "CartAffirmCheckoutResponse": CartAffirmCheckoutResponse,
    "CartBilling": CartBilling,
    "CartBuysafe": CartBuysafe,
    "CartCheckout": CartCheckout,
    "CartCoupon": CartCoupon,
    "CartCurrencyConversion": CartCurrencyConversion,
    "CartCustomerProfile": CartCustomerProfile,
    "CartCustomerProfileAddress": CartCustomerProfileAddress,
    "CartCustomerProfileCreditCard": CartCustomerProfileCreditCard,
    "CartFinalizeOrderRequest": CartFinalizeOrderRequest,
    "CartFinalizeOrderRequestOptions": CartFinalizeOrderRequestOptions,
    "CartFinalizeOrderResponse": CartFinalizeOrderResponse,
    "CartGift": CartGift,
    "CartGiftCertificate": CartGiftCertificate,
    "CartItem": CartItem,
    "CartItemAttribute": CartItemAttribute,
    "CartItemMultimedia": CartItemMultimedia,
    "CartItemMultimediaThumbnail": CartItemMultimediaThumbnail,
    "CartItemOption": CartItemOption,
    "CartItemOptionValue": CartItemOptionValue,
    "CartItemPhysical": CartItemPhysical,
    "CartItemVariationSelection": CartItemVariationSelection,
    "CartKitComponentOption": CartKitComponentOption,
    "CartMarketing": CartMarketing,
    "CartPayment": CartPayment,
    "CartPaymentAffirm": CartPaymentAffirm,
    "CartPaymentAmazon": CartPaymentAmazon,
    "CartPaymentCheck": CartPaymentCheck,
    "CartPaymentCreditCard": CartPaymentCreditCard,
    "CartPaymentPurchaseOrder": CartPaymentPurchaseOrder,
    "CartProfileLoginRequest": CartProfileLoginRequest,
    "CartProfileLoginResponse": CartProfileLoginResponse,
    "CartProfileRegisterRequest": CartProfileRegisterRequest,
    "CartProfileRegisterResponse": CartProfileRegisterResponse,
    "CartProperty": CartProperty,
    "CartResponse": CartResponse,
    "CartSettings": CartSettings,
    "CartSettingsBilling": CartSettingsBilling,
    "CartSettingsGift": CartSettingsGift,
    "CartSettingsGiftWrap": CartSettingsGiftWrap,
    "CartSettingsPayment": CartSettingsPayment,
    "CartSettingsPaymentAmazon": CartSettingsPaymentAmazon,
    "CartSettingsPaymentCreditCard": CartSettingsPaymentCreditCard,
    "CartSettingsPaymentPayPal": CartSettingsPaymentPayPal,
    "CartSettingsProvince": CartSettingsProvince,
    "CartSettingsShipping": CartSettingsShipping,
    "CartSettingsShippingCalendar": CartSettingsShippingCalendar,
    "CartSettingsShippingEstimate": CartSettingsShippingEstimate,
    "CartSettingsTaxes": CartSettingsTaxes,
    "CartSettingsTerms": CartSettingsTerms,
    "CartShipping": CartShipping,
    "CartSummary": CartSummary,
    "CartTaxes": CartTaxes,
    "CartUpsellAfter": CartUpsellAfter,
    "CartValidationRequest": CartValidationRequest,
    "CartValidationResponse": CartValidationResponse,
    "ChargebackDispute": ChargebackDispute,
    "ChargebackDisputeResponse": ChargebackDisputeResponse,
    "ChargebackDisputesResponse": ChargebackDisputesResponse,
    "CheckoutAllowedCountriesResponse": CheckoutAllowedCountriesResponse,
    "CheckoutHandoffRequest": CheckoutHandoffRequest,
    "CheckoutHandoffResponse": CheckoutHandoffResponse,
    "CheckoutSetupBrowserKeyRequest": CheckoutSetupBrowserKeyRequest,
    "CheckoutSetupBrowserKeyResponse": CheckoutSetupBrowserKeyResponse,
    "CheckoutStateProvinceResponse": CheckoutStateProvinceResponse,
    "CityStateZip": CityStateZip,
    "CountriesResponse": CountriesResponse,
    "Country": Country,
    "Coupon": Coupon,
    "CouponAmountOffItems": CouponAmountOffItems,
    "CouponAmountOffShipping": CouponAmountOffShipping,
    "CouponAmountOffShippingWithItemsPurchase": CouponAmountOffShippingWithItemsPurchase,
    "CouponAmountOffSubtotal": CouponAmountOffSubtotal,
    "CouponAmountOffSubtotalAndShipping": CouponAmountOffSubtotalAndShipping,
    "CouponAmountOffSubtotalFreeShippingWithPurchase": CouponAmountOffSubtotalFreeShippingWithPurchase,
    "CouponAmountOffSubtotalWithBlockPurchase": CouponAmountOffSubtotalWithBlockPurchase,
    "CouponAmountOffSubtotalWithItemsPurchase": CouponAmountOffSubtotalWithItemsPurchase,
    "CouponAutomaticallyApplyCouponCodes": CouponAutomaticallyApplyCouponCodes,
    "CouponCodesRequest": CouponCodesRequest,
    "CouponCodesResponse": CouponCodesResponse,
    "CouponDiscountItemWithItemPurchase": CouponDiscountItemWithItemPurchase,
    "CouponDiscountItems": CouponDiscountItems,
    "CouponEditorValues": CouponEditorValues,
    "CouponFreeItemAndShippingWithSubtotal": CouponFreeItemAndShippingWithSubtotal,
    "CouponFreeItemWithItemPurchase": CouponFreeItemWithItemPurchase,
    "CouponFreeItemWithSubtotal": CouponFreeItemWithSubtotal,
    "CouponFreeItemsWithItemPurchase": CouponFreeItemsWithItemPurchase,
    "CouponFreeItemsWithMixMatchPurchase": CouponFreeItemsWithMixMatchPurchase,
    "CouponFreeShipping": CouponFreeShipping,
    "CouponFreeShippingSpecificItems": CouponFreeShippingSpecificItems,
    "CouponFreeShippingWithItemsPurchase": CouponFreeShippingWithItemsPurchase,
    "CouponFreeShippingWithSubtotal": CouponFreeShippingWithSubtotal,
    "CouponMultipleAmountsOffItems": CouponMultipleAmountsOffItems,
    "CouponNoDiscount": CouponNoDiscount,
    "CouponPercentOffItemWithItemsQuantityPurchase": CouponPercentOffItemWithItemsQuantityPurchase,
    "CouponPercentOffItems": CouponPercentOffItems,
    "CouponPercentOffItemsAndFreeShipping": CouponPercentOffItemsAndFreeShipping,
    "CouponPercentOffItemsWithItemsPurchase": CouponPercentOffItemsWithItemsPurchase,
    "CouponPercentOffRetailPriceItems": CouponPercentOffRetailPriceItems,
    "CouponPercentOffShipping": CouponPercentOffShipping,
    "CouponPercentOffSubtotal": CouponPercentOffSubtotal,
    "CouponPercentOffSubtotalAndFreeShipping": CouponPercentOffSubtotalAndFreeShipping,
    "CouponPercentOffSubtotalLimit": CouponPercentOffSubtotalLimit,
    "CouponPercentOffSubtotalWithItemsPurchase": CouponPercentOffSubtotalWithItemsPurchase,
    "CouponPercentOffSubtotalWithSubtotal": CouponPercentOffSubtotalWithSubtotal,
    "CouponQuery": CouponQuery,
    "CouponResponse": CouponResponse,
    "CouponRestriction": CouponRestriction,
    "CouponTierAmount": CouponTierAmount,
    "CouponTierItemDiscount": CouponTierItemDiscount,
    "CouponTierPercent": CouponTierPercent,
    "CouponTierQuantityAmount": CouponTierQuantityAmount,
    "CouponTierQuantityPercent": CouponTierQuantityPercent,
    "CouponTieredAmountOffItem": CouponTieredAmountOffItem,
    "CouponTieredAmountOffSubtotal": CouponTieredAmountOffSubtotal,
    "CouponTieredPercentOffItems": CouponTieredPercentOffItems,
    "CouponTieredPercentOffShipping": CouponTieredPercentOffShipping,
    "CouponTieredPercentOffSubtotal": CouponTieredPercentOffSubtotal,
    "CouponsResponse": CouponsResponse,
    "Currency": Currency,
    "Customer": Customer,
    "CustomerActivity": CustomerActivity,
    "CustomerAffiliate": CustomerAffiliate,
    "CustomerAttachment": CustomerAttachment,
    "CustomerBilling": CustomerBilling,
    "CustomerCard": CustomerCard,
    "CustomerEditorValues": CustomerEditorValues,
    "CustomerEmail": CustomerEmail,
    "CustomerEmailListChanges": CustomerEmailListChanges,
    "CustomerLoyalty": CustomerLoyalty,
    "CustomerLoyaltyLedger": CustomerLoyaltyLedger,
    "CustomerLoyaltyRedemption": CustomerLoyaltyRedemption,
    "CustomerOrdersSummary": CustomerOrdersSummary,
    "CustomerPricingTier": CustomerPricingTier,
    "CustomerPrivacy": CustomerPrivacy,
    "CustomerQuery": CustomerQuery,
    "CustomerQuotesSummary": CustomerQuotesSummary,
    "CustomerResponse": CustomerResponse,
    "CustomerReviewer": CustomerReviewer,
    "CustomerShipping": CustomerShipping,
    "CustomerSoftwareEntitlement": CustomerSoftwareEntitlement,
    "CustomerTag": CustomerTag,
    "CustomerTaxCodes": CustomerTaxCodes,
    "CustomersResponse": CustomersResponse,
    "DataTablesServerSideResponse": DataTablesServerSideResponse,
    "Distance": Distance,
    "DistributionCenter": DistributionCenter,
    "DistributionCentersResponse": DistributionCentersResponse,
    "EmailBaseTemplateListResponse": EmailBaseTemplateListResponse,
    "EmailCampaign": EmailCampaign,
    "EmailCampaignResponse": EmailCampaignResponse,
    "EmailCampaignsResponse": EmailCampaignsResponse,
    "EmailClick": EmailClick,
    "EmailClicksResponse": EmailClicksResponse,
    "EmailCommseq": EmailCommseq,
    "EmailCommseqEmail": EmailCommseqEmail,
    "EmailCommseqEmailResponse": EmailCommseqEmailResponse,
    "EmailCommseqEmailSendTestRequest": EmailCommseqEmailSendTestRequest,
    "EmailCommseqEmailSendTestResponse": EmailCommseqEmailSendTestResponse,
    "EmailCommseqEmailsRequest": EmailCommseqEmailsRequest,
    "EmailCommseqEmailsResponse": EmailCommseqEmailsResponse,
    "EmailCommseqPostcard": EmailCommseqPostcard,
    "EmailCommseqPostcardResponse": EmailCommseqPostcardResponse,
    "EmailCommseqPostcardSendTestRequest": EmailCommseqPostcardSendTestRequest,
    "EmailCommseqPostcardSendTestResponse": EmailCommseqPostcardSendTestResponse,
    "EmailCommseqPostcardsRequest": EmailCommseqPostcardsRequest,
    "EmailCommseqPostcardsResponse": EmailCommseqPostcardsResponse,
    "EmailCommseqResponse": EmailCommseqResponse,
    "EmailCommseqStat": EmailCommseqStat,
    "EmailCommseqStatResponse": EmailCommseqStatResponse,
    "EmailCommseqStep": EmailCommseqStep,
    "EmailCommseqsResponse": EmailCommseqsResponse,
    "EmailCustomer": EmailCustomer,
    "EmailCustomerEditorUrlResponse": EmailCustomerEditorUrlResponse,
    "EmailCustomersResponse": EmailCustomersResponse,
    "EmailDashboardActivity": EmailDashboardActivity,
    "EmailDashboardActivityResponse": EmailDashboardActivityResponse,
    "EmailDashboardStatsResponse": EmailDashboardStatsResponse,
    "EmailDomain": EmailDomain,
    "EmailEditorTokenResponse": EmailEditorTokenResponse,
    "EmailFlow": EmailFlow,
    "EmailFlowBackPopulateRequest": EmailFlowBackPopulateRequest,
    "EmailFlowBackPopulateResponse": EmailFlowBackPopulateResponse,
    "EmailFlowResponse": EmailFlowResponse,
    "EmailFlowsResponse": EmailFlowsResponse,
    "EmailGlobalSettings": EmailGlobalSettings,
    "EmailGlobalSettingsResponse": EmailGlobalSettingsResponse,
    "EmailGlobalUnsubscribeRequest": EmailGlobalUnsubscribeRequest,
    "EmailGlobalUnsubscribeResponse": EmailGlobalUnsubscribeResponse,
    "EmailHistogramPropertyNamesResponse": EmailHistogramPropertyNamesResponse,
    "EmailHistogramPropertyValuesResponse": EmailHistogramPropertyValuesResponse,
    "EmailList": EmailList,
    "EmailListArchiveResponse": EmailListArchiveResponse,
    "EmailListCustomer": EmailListCustomer,
    "EmailListCustomersResponse": EmailListCustomersResponse,
    "EmailListResponse": EmailListResponse,
    "EmailListSegmentMembership": EmailListSegmentMembership,
    "EmailListSegmentUsedBy": EmailListSegmentUsedBy,
    "EmailListSubscribeResponse": EmailListSubscribeResponse,
    "EmailListsResponse": EmailListsResponse,
    "EmailOrder": EmailOrder,
    "EmailOrdersResponse": EmailOrdersResponse,
    "EmailPerformance": EmailPerformance,
    "EmailPerformanceCustomerHistogram": EmailPerformanceCustomerHistogram,
    "EmailPerformanceCustomerHistogramPeriod": EmailPerformanceCustomerHistogramPeriod,
    "EmailPerformanceDaily": EmailPerformanceDaily,
    "EmailPerformanceResponse": EmailPerformanceResponse,
    "EmailPlan": EmailPlan,
    "EmailPlanAdditional": EmailPlanAdditional,
    "EmailPlanResponse": EmailPlanResponse,
    "EmailPostcardStat": EmailPostcardStat,
    "EmailSegment": EmailSegment,
    "EmailSegmentArchiveResponse": EmailSegmentArchiveResponse,
    "EmailSegmentCustomer": EmailSegmentCustomer,
    "EmailSegmentCustomersResponse": EmailSegmentCustomersResponse,
    "EmailSegmentDownloadPrepareResponse": EmailSegmentDownloadPrepareResponse,
    "EmailSegmentResponse": EmailSegmentResponse,
    "EmailSegmentsResponse": EmailSegmentsResponse,
    "EmailSendingDomainResponse": EmailSendingDomainResponse,
    "EmailSendingDomainsResponse": EmailSendingDomainsResponse,
    "EmailSettings": EmailSettings,
    "EmailSettingsResponse": EmailSettingsResponse,
    "EmailStat": EmailStat,
    "EmailStatPostcardSummaryRequest": EmailStatPostcardSummaryRequest,
    "EmailStatPostcardSummaryResponse": EmailStatPostcardSummaryResponse,
    "EmailStatSummaryRequest": EmailStatSummaryRequest,
    "EmailStatSummaryResponse": EmailStatSummaryResponse,
    "EmailStepStat": EmailStepStat,
    "EmailStepStatRequest": EmailStepStatRequest,
    "EmailStepStatResponse": EmailStepStatResponse,
    "EmailStepWaitingRequest": EmailStepWaitingRequest,
    "EmailStepWaitingResponse": EmailStepWaitingResponse,
    "EmailTemplate": EmailTemplate,
    "EmailTemplatesResponse": EmailTemplatesResponse,
    "EmailThirdPartyList": EmailThirdPartyList,
    "EmailThirdPartyListImportRequest": EmailThirdPartyListImportRequest,
    "EmailThirdPartyProvider": EmailThirdPartyProvider,
    "EmailThirdPartyProvidersResponse": EmailThirdPartyProvidersResponse,
    "ErrorResponse": ErrorResponse,
    "Experiment": Experiment,
    "ExperimentResponse": ExperimentResponse,
    "ExperimentVariation": ExperimentVariation,
    "ExperimentsResponse": ExperimentsResponse,
    "FulfillmentInventory": FulfillmentInventory,
    "FulfillmentShipment": FulfillmentShipment,
    "GeocodeRequest": GeocodeRequest,
    "GeocodeResponse": GeocodeResponse,
    "Group": Group,
    "GroupResponse": GroupResponse,
    "GroupUserMembership": GroupUserMembership,
    "GroupsResponse": GroupsResponse,
    "HTTPHeader": HTTPHeader,
    "Item": Item,
    "ItemAccounting": ItemAccounting,
    "ItemAmember": ItemAmember,
    "ItemAutoOrder": ItemAutoOrder,
    "ItemAutoOrderStep": ItemAutoOrderStep,
    "ItemAutoOrderStepArbitraryUnitCostSchedule": ItemAutoOrderStepArbitraryUnitCostSchedule,
    "ItemAutoOrderStepGrandfatherPricing": ItemAutoOrderStepGrandfatherPricing,
    "ItemCCBill": ItemCCBill,
    "ItemChannelPartnerMapping": ItemChannelPartnerMapping,
    "ItemChargeback": ItemChargeback,
    "ItemChargebackAddendum": ItemChargebackAddendum,
    "ItemChargebackAdjustmentRequest": ItemChargebackAdjustmentRequest,
    "ItemCheckout": ItemCheckout,
    "ItemContent": ItemContent,
    "ItemContentAssignment": ItemContentAssignment,
    "ItemContentAttribute": ItemContentAttribute,
    "ItemContentMultimedia": ItemContentMultimedia,
    "ItemContentMultimediaThumbnail": ItemContentMultimediaThumbnail,
    "ItemDigitalDelivery": ItemDigitalDelivery,
    "ItemDigitalItem": ItemDigitalItem,
    "ItemEbay": ItemEbay,
    "ItemEbayCategorySpecific": ItemEbayCategorySpecific,
    "ItemEbayMarketListing": ItemEbayMarketListing,
    "ItemEbayMarketPlaceAnalysis": ItemEbayMarketPlaceAnalysis,
    "ItemEmailNotifications": ItemEmailNotifications,
    "ItemEnrollment123": ItemEnrollment123,
    "ItemGiftCertificate": ItemGiftCertificate,
    "ItemGoogleProductSearch": ItemGoogleProductSearch,
    "ItemIdentifiers": ItemIdentifiers,
    "ItemInstantPaymentNotification": ItemInstantPaymentNotification,
    "ItemInstantPaymentNotifications": ItemInstantPaymentNotifications,
    "ItemInternal": ItemInternal,
    "ItemKitComponent": ItemKitComponent,
    "ItemKitDefinition": ItemKitDefinition,
    "ItemOption": ItemOption,
    "ItemOptionValue": ItemOptionValue,
    "ItemOptionValueAdditionalItem": ItemOptionValueAdditionalItem,
    "ItemOptionValueDigitalItem": ItemOptionValueDigitalItem,
    "ItemPaymentProcessing": ItemPaymentProcessing,
    "ItemPhysical": ItemPhysical,
    "ItemPricing": ItemPricing,
    "ItemPricingTier": ItemPricingTier,
    "ItemPricingTierDiscount": ItemPricingTierDiscount,
    "ItemPricingTierLimit": ItemPricingTierLimit,
    "ItemProperty": ItemProperty,
    "ItemRealtimePricing": ItemRealtimePricing,
    "ItemRelated": ItemRelated,
    "ItemRelatedItem": ItemRelatedItem,
    "ItemReporting": ItemReporting,
    "ItemResponse": ItemResponse,
    "ItemRestriction": ItemRestriction,
    "ItemRestrictionItem": ItemRestrictionItem,
    "ItemRevguard": ItemRevguard,
    "ItemReviews": ItemReviews,
    "ItemSalesforce": ItemSalesforce,
    "ItemShipping": ItemShipping,
    "ItemShippingCase": ItemShippingCase,
    "ItemShippingDestinationMarkup": ItemShippingDestinationMarkup,
    "ItemShippingDestinationRestriction": ItemShippingDestinationRestriction,
    "ItemShippingDistributionCenter": ItemShippingDistributionCenter,
    "ItemShippingMethod": ItemShippingMethod,
    "ItemShippingPackageRequirement": ItemShippingPackageRequirement,
    "ItemTag": ItemTag,
    "ItemTags": ItemTags,
    "ItemTax": ItemTax,
    "ItemTaxExemption": ItemTaxExemption,
    "ItemThirdPartyEmailMarketing": ItemThirdPartyEmailMarketing,
    "ItemVariantItem": ItemVariantItem,
    "ItemVariation": ItemVariation,
    "ItemVariationOption": ItemVariationOption,
    "ItemWishlistMember": ItemWishlistMember,
    "ItemsRequest": ItemsRequest,
    "ItemsResponse": ItemsResponse,
    "KeyValue": KeyValue,
    "LibraryFilterValues": LibraryFilterValues,
    "LibraryFilterValuesResponse": LibraryFilterValuesResponse,
    "LibraryItem": LibraryItem,
    "LibraryItemAccount": LibraryItemAccount,
    "LibraryItemAsset": LibraryItemAsset,
    "LibraryItemEmail": LibraryItemEmail,
    "LibraryItemQuery": LibraryItemQuery,
    "LibraryItemResponse": LibraryItemResponse,
    "LibraryItemScreenshot": LibraryItemScreenshot,
    "LibraryItemsResponse": LibraryItemsResponse,
    "LinkedAccount": LinkedAccount,
    "ListSegmentMembership": ListSegmentMembership,
    "LookupRequest": LookupRequest,
    "LookupResponse": LookupResponse,
    "Metric": Metric,
    "ModelError": ModelError,
    "Notification": Notification,
    "OauthRevokeSuccessResponse": OauthRevokeSuccessResponse,
    "OauthTokenResponse": OauthTokenResponse,
    "Order": Order,
    "OrderAffiliate": OrderAffiliate,
    "OrderAffiliateLedger": OrderAffiliateLedger,
    "OrderAutoOrder": OrderAutoOrder,
    "OrderBilling": OrderBilling,
    "OrderBuysafe": OrderBuysafe,
    "OrderByTokenQuery": OrderByTokenQuery,
    "OrderChannelPartner": OrderChannelPartner,
    "OrderCheckout": OrderCheckout,
    "OrderCoupon": OrderCoupon,
    "OrderDigitalItem": OrderDigitalItem,
    "OrderDigitalOrder": OrderDigitalOrder,
    "OrderEdi": OrderEdi,
    "OrderFormat": OrderFormat,
    "OrderFormatResponse": OrderFormatResponse,
    "OrderFraudScore": OrderFraudScore,
    "OrderGift": OrderGift,
    "OrderGiftCertificate": OrderGiftCertificate,
    "OrderInternal": OrderInternal,
    "OrderItem": OrderItem,
    "OrderItemEdi": OrderItemEdi,
    "OrderItemEdiIdentification": OrderItemEdiIdentification,
    "OrderItemEdiLot": OrderItemEdiLot,
    "OrderItemOption": OrderItemOption,
    "OrderItemOptionFileAttachment": OrderItemOptionFileAttachment,
    "OrderItemProperty": OrderItemProperty,
    "OrderItemTag": OrderItemTag,
    "OrderLinkedShipment": OrderLinkedShipment,
    "OrderMarketing": OrderMarketing,
    "OrderPayment": OrderPayment,
    "OrderPaymentCheck": OrderPaymentCheck,
    "OrderPaymentCreditCard": OrderPaymentCreditCard,
    "OrderPaymentECheck": OrderPaymentECheck,
    "OrderPaymentPurchaseOrder": OrderPaymentPurchaseOrder,
    "OrderPaymentTransaction": OrderPaymentTransaction,
    "OrderPaymentTransactionDetail": OrderPaymentTransactionDetail,
    "OrderProcessPaymentRequest": OrderProcessPaymentRequest,
    "OrderProcessPaymentResponse": OrderProcessPaymentResponse,
    "OrderProperty": OrderProperty,
    "OrderQuery": OrderQuery,
    "OrderQueryBatch": OrderQueryBatch,
    "OrderQuote": OrderQuote,
    "OrderReplacement": OrderReplacement,
    "OrderReplacementItem": OrderReplacementItem,
    "OrderReplacementResponse": OrderReplacementResponse,
    "OrderResponse": OrderResponse,
    "OrderSalesforce": OrderSalesforce,
    "OrderShipping": OrderShipping,
    "OrderSummary": OrderSummary,
    "OrderTag": OrderTag,
    "OrderTaxes": OrderTaxes,
    "OrderTokenResponse": OrderTokenResponse,
    "OrderTrackingNumberDetail": OrderTrackingNumberDetail,
    "OrderTrackingNumberDetails": OrderTrackingNumberDetails,
    "OrdersResponse": OrdersResponse,
    "Permission": Permission,
    "PricingTier": PricingTier,
    "PricingTierNotification": PricingTierNotification,
    "PricingTiersResponse": PricingTiersResponse,
    "Property": Property,
    "RegisterAffiliateClickRequest": RegisterAffiliateClickRequest,
    "RegisterAffiliateClickResponse": RegisterAffiliateClickResponse,
    "ResponseMetadata": ResponseMetadata,
    "ResultSet": ResultSet,
    "ScreenshotsResponse": ScreenshotsResponse,
    "SelfConfig": SelfConfig,
    "SovosConfig": SovosConfig,
    "StateProvince": StateProvince,
    "StepWaiting": StepWaiting,
    "TaxCity": TaxCity,
    "TaxCountry": TaxCountry,
    "TaxCountryCode": TaxCountryCode,
    "TaxCounty": TaxCounty,
    "TaxJarConfig": TaxJarConfig,
    "TaxPostalCode": TaxPostalCode,
    "TaxProviderActivateResult": TaxProviderActivateResult,
    "TaxProviderAvalara": TaxProviderAvalara,
    "TaxProviderAvalaraCompaniesResult": TaxProviderAvalaraCompaniesResult,
    "TaxProviderAvalaraCompany": TaxProviderAvalaraCompany,
    "TaxProviderSelf": TaxProviderSelf,
    "TaxProviderSelfCountriesResponse": TaxProviderSelfCountriesResponse,
    "TaxProviderSelfRegionsResponse": TaxProviderSelfRegionsResponse,
    "TaxProviderSovos": TaxProviderSovos,
    "TaxProviderTaxJar": TaxProviderTaxJar,
    "TaxProviderTestResult": TaxProviderTestResult,
    "TaxProviderUltraCart": TaxProviderUltraCart,
    "TaxProviderUltraCartState": TaxProviderUltraCartState,
    "TaxProvidersResponse": TaxProvidersResponse,
    "TaxState": TaxState,
    "TaxStateCode": TaxStateCode,
    "TempMultimedia": TempMultimedia,
    "TempMultimediaResponse": TempMultimediaResponse,
    "ThumbnailParametersRequest": ThumbnailParametersRequest,
    "ThumbnailParametersResponse": ThumbnailParametersResponse,
    "TransactionEmail": TransactionEmail,
    "TransactionEmailListResponse": TransactionEmailListResponse,
    "TransactionEmailOption": TransactionEmailOption,
    "TransactionEmailResponse": TransactionEmailResponse,
    "UltraCartConfig": UltraCartConfig,
    "User": User,
    "UserGroupMembership": UserGroupMembership,
    "UserLogin": UserLogin,
    "UserLoginsResponse": UserLoginsResponse,
    "UserResponse": UserResponse,
    "UsersResponse": UsersResponse,
    "VerificationRecord": VerificationRecord,
    "Warning": Warning,
    "Webhook": Webhook,
    "WebhookEventCategory": WebhookEventCategory,
    "WebhookEventSubscription": WebhookEventSubscription,
    "WebhookLog": WebhookLog,
    "WebhookLogResponse": WebhookLogResponse,
    "WebhookLogSummariesResponse": WebhookLogSummariesResponse,
    "WebhookLogSummary": WebhookLogSummary,
    "WebhookResponse": WebhookResponse,
    "WebhookSampleRequest": WebhookSampleRequest,
    "WebhookSampleRequestResponse": WebhookSampleRequestResponse,
    "WebhooksResponse": WebhooksResponse,
    "Weight": Weight,
};
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
        this.username = '';
        this.password = '';
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = (function () {
    function OAuth() {
        this.accessToken = '';
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = (function () {
    function VoidAuth() {
        this.username = '';
        this.password = '';
    }
    VoidAuth.prototype.applyToRequest = function (_) {
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var AffiliateApiApiKeys;
(function (AffiliateApiApiKeys) {
    AffiliateApiApiKeys[AffiliateApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    AffiliateApiApiKeys[AffiliateApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(AffiliateApiApiKeys = exports.AffiliateApiApiKeys || (exports.AffiliateApiApiKeys = {}));
var AffiliateApi = (function () {
    function AffiliateApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AffiliateApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AffiliateApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AffiliateApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AffiliateApi.prototype.setApiKey = function (key, value) {
        this.authentications[AffiliateApiApiKeys[key]].apiKey = value;
    };
    AffiliateApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(AffiliateApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AffiliateApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    AffiliateApi.prototype.getClicksByQuery = function (clickQuery, limit, offset, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/affiliate/clicks/query';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (clickQuery === null || clickQuery === undefined) {
            throw new Error('Required parameter clickQuery was null or undefined when calling getClicksByQuery.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(clickQuery, "AffiliateClickQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AffiliateClicksResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AffiliateApi.prototype.getLedgersByQuery = function (ledgerQuery, limit, offset, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/affiliate/ledgers/query';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (ledgerQuery === null || ledgerQuery === undefined) {
            throw new Error('Required parameter ledgerQuery was null or undefined when calling getLedgersByQuery.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(ledgerQuery, "AffiliateLedgerQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AffiliateLedgersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AffiliateApi;
}());
exports.AffiliateApi = AffiliateApi;
var AutoOrderApiApiKeys;
(function (AutoOrderApiApiKeys) {
    AutoOrderApiApiKeys[AutoOrderApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    AutoOrderApiApiKeys[AutoOrderApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(AutoOrderApiApiKeys = exports.AutoOrderApiApiKeys || (exports.AutoOrderApiApiKeys = {}));
var AutoOrderApi = (function () {
    function AutoOrderApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AutoOrderApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoOrderApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    AutoOrderApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AutoOrderApi.prototype.setApiKey = function (key, value) {
        this.authentications[AutoOrderApiApiKeys[key]].apiKey = value;
    };
    AutoOrderApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(AutoOrderApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AutoOrderApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    AutoOrderApi.prototype.getAutoOrder = function (autoOrderOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/{auto_order_oid}'
            .replace('{' + 'auto_order_oid' + '}', encodeURIComponent(String(autoOrderOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrderOid === null || autoOrderOid === undefined) {
            throw new Error('Required parameter autoOrderOid was null or undefined when calling getAutoOrder.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.getAutoOrderByCode = function (autoOrderCode, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/code/{auto_order_code}'
            .replace('{' + 'auto_order_code' + '}', encodeURIComponent(String(autoOrderCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrderCode === null || autoOrderCode === undefined) {
            throw new Error('Required parameter autoOrderCode was null or undefined when calling getAutoOrderByCode.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.getAutoOrderByReferenceOrderId = function (referenceOrderId, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/reference_order_id/{reference_order_id}'
            .replace('{' + 'reference_order_id' + '}', encodeURIComponent(String(referenceOrderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (referenceOrderId === null || referenceOrderId === undefined) {
            throw new Error('Required parameter referenceOrderId was null or undefined when calling getAutoOrderByReferenceOrderId.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.getAutoOrders = function (autoOrderCode, originalOrderId, firstName, lastName, company, city, state, postalCode, countryCode, phone, email, originalOrderDateBegin, originalOrderDateEnd, nextShipmentDateBegin, nextShipmentDateEnd, cardType, itemId, status, limit, offset, since, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrderCode !== undefined) {
            localVarQueryParameters['auto_order_code'] = ObjectSerializer.serialize(autoOrderCode, "string");
        }
        if (originalOrderId !== undefined) {
            localVarQueryParameters['original_order_id'] = ObjectSerializer.serialize(originalOrderId, "string");
        }
        if (firstName !== undefined) {
            localVarQueryParameters['first_name'] = ObjectSerializer.serialize(firstName, "string");
        }
        if (lastName !== undefined) {
            localVarQueryParameters['last_name'] = ObjectSerializer.serialize(lastName, "string");
        }
        if (company !== undefined) {
            localVarQueryParameters['company'] = ObjectSerializer.serialize(company, "string");
        }
        if (city !== undefined) {
            localVarQueryParameters['city'] = ObjectSerializer.serialize(city, "string");
        }
        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "string");
        }
        if (postalCode !== undefined) {
            localVarQueryParameters['postal_code'] = ObjectSerializer.serialize(postalCode, "string");
        }
        if (countryCode !== undefined) {
            localVarQueryParameters['country_code'] = ObjectSerializer.serialize(countryCode, "string");
        }
        if (phone !== undefined) {
            localVarQueryParameters['phone'] = ObjectSerializer.serialize(phone, "string");
        }
        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }
        if (originalOrderDateBegin !== undefined) {
            localVarQueryParameters['original_order_date_begin'] = ObjectSerializer.serialize(originalOrderDateBegin, "string");
        }
        if (originalOrderDateEnd !== undefined) {
            localVarQueryParameters['original_order_date_end'] = ObjectSerializer.serialize(originalOrderDateEnd, "string");
        }
        if (nextShipmentDateBegin !== undefined) {
            localVarQueryParameters['next_shipment_date_begin'] = ObjectSerializer.serialize(nextShipmentDateBegin, "string");
        }
        if (nextShipmentDateEnd !== undefined) {
            localVarQueryParameters['next_shipment_date_end'] = ObjectSerializer.serialize(nextShipmentDateEnd, "string");
        }
        if (cardType !== undefined) {
            localVarQueryParameters['card_type'] = ObjectSerializer.serialize(cardType, "string");
        }
        if (itemId !== undefined) {
            localVarQueryParameters['item_id'] = ObjectSerializer.serialize(itemId, "string");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (since !== undefined) {
            localVarQueryParameters['_since'] = ObjectSerializer.serialize(since, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.getAutoOrdersBatch = function (autoOrderBatch, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/batch';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrderBatch === null || autoOrderBatch === undefined) {
            throw new Error('Required parameter autoOrderBatch was null or undefined when calling getAutoOrdersBatch.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(autoOrderBatch, "AutoOrderQueryBatch")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.getAutoOrdersByQuery = function (autoOrderQuery, limit, offset, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/query';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrderQuery === null || autoOrderQuery === undefined) {
            throw new Error('Required parameter autoOrderQuery was null or undefined when calling getAutoOrdersByQuery.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(autoOrderQuery, "AutoOrderQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.updateAutoOrder = function (autoOrder, autoOrderOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/{auto_order_oid}'
            .replace('{' + 'auto_order_oid' + '}', encodeURIComponent(String(autoOrderOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrder === null || autoOrder === undefined) {
            throw new Error('Required parameter autoOrder was null or undefined when calling updateAutoOrder.');
        }
        if (autoOrderOid === null || autoOrderOid === undefined) {
            throw new Error('Required parameter autoOrderOid was null or undefined when calling updateAutoOrder.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(autoOrder, "AutoOrder")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    AutoOrderApi.prototype.updateAutoOrdersBatch = function (autoOrdersRequest, expand, placeholders, async, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/auto_order/auto_orders/batch';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (autoOrdersRequest === null || autoOrdersRequest === undefined) {
            throw new Error('Required parameter autoOrdersRequest was null or undefined when calling updateAutoOrdersBatch.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        if (async !== undefined) {
            localVarQueryParameters['_async'] = ObjectSerializer.serialize(async, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(autoOrdersRequest, "AutoOrdersRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AutoOrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AutoOrderApi;
}());
exports.AutoOrderApi = AutoOrderApi;
var ChargebackApiApiKeys;
(function (ChargebackApiApiKeys) {
    ChargebackApiApiKeys[ChargebackApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    ChargebackApiApiKeys[ChargebackApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(ChargebackApiApiKeys = exports.ChargebackApiApiKeys || (exports.ChargebackApiApiKeys = {}));
var ChargebackApi = (function () {
    function ChargebackApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ChargebackApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChargebackApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ChargebackApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ChargebackApi.prototype.setApiKey = function (key, value) {
        this.authentications[ChargebackApiApiKeys[key]].apiKey = value;
    };
    ChargebackApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(ChargebackApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChargebackApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    ChargebackApi.prototype.deleteChargeback = function (chargebackDisputeOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/chargeback/chargebacks/{chargeback_dispute_oid}'
            .replace('{' + 'chargeback_dispute_oid' + '}', encodeURIComponent(String(chargebackDisputeOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (chargebackDisputeOid === null || chargebackDisputeOid === undefined) {
            throw new Error('Required parameter chargebackDisputeOid was null or undefined when calling deleteChargeback.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ChargebackDisputeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ChargebackApi.prototype.getChargebackDispute = function (chargebackDisputeOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/chargeback/chargebacks/{chargeback_dispute_oid}'
            .replace('{' + 'chargeback_dispute_oid' + '}', encodeURIComponent(String(chargebackDisputeOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (chargebackDisputeOid === null || chargebackDisputeOid === undefined) {
            throw new Error('Required parameter chargebackDisputeOid was null or undefined when calling getChargebackDispute.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ChargebackDisputeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ChargebackApi.prototype.getChargebackDisputes = function (orderId, caseNumber, status, expirationDtsStart, expirationDtsEnd, chargebackDtsStart, chargebackDtsEnd, limit, offset, since, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/chargeback/chargebacks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId !== undefined) {
            localVarQueryParameters['order_id'] = ObjectSerializer.serialize(orderId, "string");
        }
        if (caseNumber !== undefined) {
            localVarQueryParameters['case_number'] = ObjectSerializer.serialize(caseNumber, "string");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }
        if (expirationDtsStart !== undefined) {
            localVarQueryParameters['expiration_dts_start'] = ObjectSerializer.serialize(expirationDtsStart, "string");
        }
        if (expirationDtsEnd !== undefined) {
            localVarQueryParameters['expiration_dts_end'] = ObjectSerializer.serialize(expirationDtsEnd, "string");
        }
        if (chargebackDtsStart !== undefined) {
            localVarQueryParameters['chargeback_dts_start'] = ObjectSerializer.serialize(chargebackDtsStart, "string");
        }
        if (chargebackDtsEnd !== undefined) {
            localVarQueryParameters['chargeback_dts_end'] = ObjectSerializer.serialize(chargebackDtsEnd, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (since !== undefined) {
            localVarQueryParameters['_since'] = ObjectSerializer.serialize(since, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ChargebackDisputesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ChargebackApi.prototype.insertChargeback = function (chargeback, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/chargeback/chargebacks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (chargeback === null || chargeback === undefined) {
            throw new Error('Required parameter chargeback was null or undefined when calling insertChargeback.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(chargeback, "ChargebackDispute")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ChargebackDisputeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ChargebackApi.prototype.updateChargeback = function (chargeback, chargebackDisputeOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/chargeback/chargebacks/{chargeback_dispute_oid}'
            .replace('{' + 'chargeback_dispute_oid' + '}', encodeURIComponent(String(chargebackDisputeOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (chargeback === null || chargeback === undefined) {
            throw new Error('Required parameter chargeback was null or undefined when calling updateChargeback.');
        }
        if (chargebackDisputeOid === null || chargebackDisputeOid === undefined) {
            throw new Error('Required parameter chargebackDisputeOid was null or undefined when calling updateChargeback.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(chargeback, "ChargebackDispute")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ChargebackDisputeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ChargebackApi;
}());
exports.ChargebackApi = ChargebackApi;
var CheckoutApiApiKeys;
(function (CheckoutApiApiKeys) {
    CheckoutApiApiKeys[CheckoutApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    CheckoutApiApiKeys[CheckoutApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(CheckoutApiApiKeys = exports.CheckoutApiApiKeys || (exports.CheckoutApiApiKeys = {}));
var CheckoutApi = (function () {
    function CheckoutApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CheckoutApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckoutApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CheckoutApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CheckoutApi.prototype.setApiKey = function (key, value) {
        this.authentications[CheckoutApiApiKeys[key]].apiKey = value;
    };
    CheckoutApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(CheckoutApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckoutApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    CheckoutApi.prototype.cityState = function (cart, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/city_state';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (cart === null || cart === undefined) {
            throw new Error('Required parameter cart was null or undefined when calling cityState.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(cart, "Cart")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CityStateZip");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.finalizeOrder = function (finalizeRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/finalizeOrder';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (finalizeRequest === null || finalizeRequest === undefined) {
            throw new Error('Required parameter finalizeRequest was null or undefined when calling finalizeOrder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(finalizeRequest, "CartFinalizeOrderRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartFinalizeOrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.getAffirmCheckout = function (cartId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/{cart_id}/affirmCheckout'
            .replace('{' + 'cart_id' + '}', encodeURIComponent(String(cartId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling getAffirmCheckout.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartAffirmCheckoutResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.getAllowedCountries = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/allowedCountries';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CheckoutAllowedCountriesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.getCart = function (expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.getCartByCartId = function (cartId, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/{cart_id}'
            .replace('{' + 'cart_id' + '}', encodeURIComponent(String(cartId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling getCartByCartId.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.getCartByReturnCode = function (returnCode, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/return/{return_code}'
            .replace('{' + 'return_code' + '}', encodeURIComponent(String(returnCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (returnCode === null || returnCode === undefined) {
            throw new Error('Required parameter returnCode was null or undefined when calling getCartByReturnCode.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.getStateProvincesForCountry = function (countryCode, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/stateProvincesForCountry/{country_code}'
            .replace('{' + 'country_code' + '}', encodeURIComponent(String(countryCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (countryCode === null || countryCode === undefined) {
            throw new Error('Required parameter countryCode was null or undefined when calling getStateProvincesForCountry.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CheckoutStateProvinceResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.handoffCart = function (handoffRequest, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/handoff';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (handoffRequest === null || handoffRequest === undefined) {
            throw new Error('Required parameter handoffRequest was null or undefined when calling handoffCart.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(handoffRequest, "CheckoutHandoffRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CheckoutHandoffResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.login = function (loginRequest, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/profile/login';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (loginRequest === null || loginRequest === undefined) {
            throw new Error('Required parameter loginRequest was null or undefined when calling login.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(loginRequest, "CartProfileLoginRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartProfileLoginResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.logout = function (cart, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/profile/logout';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (cart === null || cart === undefined) {
            throw new Error('Required parameter cart was null or undefined when calling logout.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(cart, "Cart")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.register = function (registerRequest, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/profile/register';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (registerRequest === null || registerRequest === undefined) {
            throw new Error('Required parameter registerRequest was null or undefined when calling register.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(registerRequest, "CartProfileRegisterRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartProfileRegisterResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.registerAffiliateClick = function (registerAffiliateClickRequest, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/affiliateClick/register';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (registerAffiliateClickRequest === null || registerAffiliateClickRequest === undefined) {
            throw new Error('Required parameter registerAffiliateClickRequest was null or undefined when calling registerAffiliateClick.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(registerAffiliateClickRequest, "RegisterAffiliateClickRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RegisterAffiliateClickResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.relatedItemsForCart = function (cart, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/related_items';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (cart === null || cart === undefined) {
            throw new Error('Required parameter cart was null or undefined when calling relatedItemsForCart.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(cart, "Cart")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.relatedItemsForItem = function (itemId, cart, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/relatedItems/{item_id}'
            .replace('{' + 'item_id' + '}', encodeURIComponent(String(itemId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling relatedItemsForItem.');
        }
        if (cart === null || cart === undefined) {
            throw new Error('Required parameter cart was null or undefined when calling relatedItemsForItem.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(cart, "Cart")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.setupBrowserKey = function (browserKeyRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/browser_key';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (browserKeyRequest === null || browserKeyRequest === undefined) {
            throw new Error('Required parameter browserKeyRequest was null or undefined when calling setupBrowserKey.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(browserKeyRequest, "CheckoutSetupBrowserKeyRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CheckoutSetupBrowserKeyResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.updateCart = function (cart, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (cart === null || cart === undefined) {
            throw new Error('Required parameter cart was null or undefined when calling updateCart.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(cart, "Cart")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CheckoutApi.prototype.validateCart = function (validationRequest, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/checkout/cart/validate';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (validationRequest === null || validationRequest === undefined) {
            throw new Error('Required parameter validationRequest was null or undefined when calling validateCart.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(validationRequest, "CartValidationRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CartValidationResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CheckoutApi;
}());
exports.CheckoutApi = CheckoutApi;
var CouponApiApiKeys;
(function (CouponApiApiKeys) {
    CouponApiApiKeys[CouponApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    CouponApiApiKeys[CouponApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(CouponApiApiKeys = exports.CouponApiApiKeys || (exports.CouponApiApiKeys = {}));
var CouponApi = (function () {
    function CouponApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CouponApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouponApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CouponApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CouponApi.prototype.setApiKey = function (key, value) {
        this.authentications[CouponApiApiKeys[key]].apiKey = value;
    };
    CouponApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(CouponApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CouponApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    CouponApi.prototype.deleteCoupon = function (couponOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/{coupon_oid}'
            .replace('{' + 'coupon_oid' + '}', encodeURIComponent(String(couponOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (couponOid === null || couponOid === undefined) {
            throw new Error('Required parameter couponOid was null or undefined when calling deleteCoupon.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.generateCouponCodes = function (couponOid, couponCodesRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/{coupon_oid}/generate_codes'
            .replace('{' + 'coupon_oid' + '}', encodeURIComponent(String(couponOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (couponOid === null || couponOid === undefined) {
            throw new Error('Required parameter couponOid was null or undefined when calling generateCouponCodes.');
        }
        if (couponCodesRequest === null || couponCodesRequest === undefined) {
            throw new Error('Required parameter couponCodesRequest was null or undefined when calling generateCouponCodes.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(couponCodesRequest, "CouponCodesRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponCodesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.generateOneTimeCodesByMerchantCode = function (merchantCode, couponCodesRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/merchant_code/{merchant_code}/generate_codes'
            .replace('{' + 'merchant_code' + '}', encodeURIComponent(String(merchantCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (merchantCode === null || merchantCode === undefined) {
            throw new Error('Required parameter merchantCode was null or undefined when calling generateOneTimeCodesByMerchantCode.');
        }
        if (couponCodesRequest === null || couponCodesRequest === undefined) {
            throw new Error('Required parameter couponCodesRequest was null or undefined when calling generateOneTimeCodesByMerchantCode.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(couponCodesRequest, "CouponCodesRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponCodesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.getCoupon = function (couponOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/{coupon_oid}'
            .replace('{' + 'coupon_oid' + '}', encodeURIComponent(String(couponOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (couponOid === null || couponOid === undefined) {
            throw new Error('Required parameter couponOid was null or undefined when calling getCoupon.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.getCouponByMerchantCode = function (merchantCode, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/merchant_code/{merchant_code}'
            .replace('{' + 'merchant_code' + '}', encodeURIComponent(String(merchantCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (merchantCode === null || merchantCode === undefined) {
            throw new Error('Required parameter merchantCode was null or undefined when calling getCouponByMerchantCode.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.getCoupons = function (merchantCode, description, couponType, startDateBegin, startDateEnd, expirationDateBegin, expirationDateEnd, affiliateOid, excludeExpired, limit, offset, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (merchantCode !== undefined) {
            localVarQueryParameters['merchant_code'] = ObjectSerializer.serialize(merchantCode, "string");
        }
        if (description !== undefined) {
            localVarQueryParameters['description'] = ObjectSerializer.serialize(description, "string");
        }
        if (couponType !== undefined) {
            localVarQueryParameters['coupon_type'] = ObjectSerializer.serialize(couponType, "string");
        }
        if (startDateBegin !== undefined) {
            localVarQueryParameters['start_date_begin'] = ObjectSerializer.serialize(startDateBegin, "string");
        }
        if (startDateEnd !== undefined) {
            localVarQueryParameters['start_date_end'] = ObjectSerializer.serialize(startDateEnd, "string");
        }
        if (expirationDateBegin !== undefined) {
            localVarQueryParameters['expiration_date_begin'] = ObjectSerializer.serialize(expirationDateBegin, "string");
        }
        if (expirationDateEnd !== undefined) {
            localVarQueryParameters['expiration_date_end'] = ObjectSerializer.serialize(expirationDateEnd, "string");
        }
        if (affiliateOid !== undefined) {
            localVarQueryParameters['affiliate_oid'] = ObjectSerializer.serialize(affiliateOid, "number");
        }
        if (excludeExpired !== undefined) {
            localVarQueryParameters['exclude_expired'] = ObjectSerializer.serialize(excludeExpired, "boolean");
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.getCouponsByQuery = function (couponQuery, limit, offset, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/query';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (couponQuery === null || couponQuery === undefined) {
            throw new Error('Required parameter couponQuery was null or undefined when calling getCouponsByQuery.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(couponQuery, "CouponQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.getEditorValues = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/editor_values';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponEditorValues");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.insertCoupon = function (coupon, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (coupon === null || coupon === undefined) {
            throw new Error('Required parameter coupon was null or undefined when calling insertCoupon.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(coupon, "Coupon")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CouponApi.prototype.updateCoupon = function (coupon, couponOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/coupon/coupons/{coupon_oid}'
            .replace('{' + 'coupon_oid' + '}', encodeURIComponent(String(couponOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (coupon === null || coupon === undefined) {
            throw new Error('Required parameter coupon was null or undefined when calling updateCoupon.');
        }
        if (couponOid === null || couponOid === undefined) {
            throw new Error('Required parameter couponOid was null or undefined when calling updateCoupon.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(coupon, "Coupon")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CouponResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CouponApi;
}());
exports.CouponApi = CouponApi;
var CustomerApiApiKeys;
(function (CustomerApiApiKeys) {
    CustomerApiApiKeys[CustomerApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    CustomerApiApiKeys[CustomerApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(CustomerApiApiKeys = exports.CustomerApiApiKeys || (exports.CustomerApiApiKeys = {}));
var CustomerApi = (function () {
    function CustomerApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CustomerApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomerApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    CustomerApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    CustomerApi.prototype.setApiKey = function (key, value) {
        this.authentications[CustomerApiApiKeys[key]].apiKey = value;
    };
    CustomerApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(CustomerApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomerApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    CustomerApi.prototype.deleteCustomer = function (customerProfileOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers/{customer_profile_oid}'
            .replace('{' + 'customer_profile_oid' + '}', encodeURIComponent(String(customerProfileOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (customerProfileOid === null || customerProfileOid === undefined) {
            throw new Error('Required parameter customerProfileOid was null or undefined when calling deleteCustomer.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomerResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.getCustomer = function (customerProfileOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers/{customer_profile_oid}'
            .replace('{' + 'customer_profile_oid' + '}', encodeURIComponent(String(customerProfileOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (customerProfileOid === null || customerProfileOid === undefined) {
            throw new Error('Required parameter customerProfileOid was null or undefined when calling getCustomer.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomerResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.getCustomers = function (email, qbClass, quickbooksCode, lastModifiedDtsStart, lastModifiedDtsEnd, signupDtsStart, signupDtsEnd, billingFirstName, billingLastName, billingCompany, billingCity, billingState, billingPostalCode, billingCountryCode, billingDayPhone, billingEveningPhone, shippingFirstName, shippingLastName, shippingCompany, shippingCity, shippingState, shippingPostalCode, shippingCountryCode, shippingDayPhone, shippingEveningPhone, pricingTierOid, pricingTierName, limit, offset, since, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }
        if (qbClass !== undefined) {
            localVarQueryParameters['qb_class'] = ObjectSerializer.serialize(qbClass, "string");
        }
        if (quickbooksCode !== undefined) {
            localVarQueryParameters['quickbooks_code'] = ObjectSerializer.serialize(quickbooksCode, "string");
        }
        if (lastModifiedDtsStart !== undefined) {
            localVarQueryParameters['last_modified_dts_start'] = ObjectSerializer.serialize(lastModifiedDtsStart, "string");
        }
        if (lastModifiedDtsEnd !== undefined) {
            localVarQueryParameters['last_modified_dts_end'] = ObjectSerializer.serialize(lastModifiedDtsEnd, "string");
        }
        if (signupDtsStart !== undefined) {
            localVarQueryParameters['signup_dts_start'] = ObjectSerializer.serialize(signupDtsStart, "string");
        }
        if (signupDtsEnd !== undefined) {
            localVarQueryParameters['signup_dts_end'] = ObjectSerializer.serialize(signupDtsEnd, "string");
        }
        if (billingFirstName !== undefined) {
            localVarQueryParameters['billing_first_name'] = ObjectSerializer.serialize(billingFirstName, "string");
        }
        if (billingLastName !== undefined) {
            localVarQueryParameters['billing_last_name'] = ObjectSerializer.serialize(billingLastName, "string");
        }
        if (billingCompany !== undefined) {
            localVarQueryParameters['billing_company'] = ObjectSerializer.serialize(billingCompany, "string");
        }
        if (billingCity !== undefined) {
            localVarQueryParameters['billing_city'] = ObjectSerializer.serialize(billingCity, "string");
        }
        if (billingState !== undefined) {
            localVarQueryParameters['billing_state'] = ObjectSerializer.serialize(billingState, "string");
        }
        if (billingPostalCode !== undefined) {
            localVarQueryParameters['billing_postal_code'] = ObjectSerializer.serialize(billingPostalCode, "string");
        }
        if (billingCountryCode !== undefined) {
            localVarQueryParameters['billing_country_code'] = ObjectSerializer.serialize(billingCountryCode, "string");
        }
        if (billingDayPhone !== undefined) {
            localVarQueryParameters['billing_day_phone'] = ObjectSerializer.serialize(billingDayPhone, "string");
        }
        if (billingEveningPhone !== undefined) {
            localVarQueryParameters['billing_evening_phone'] = ObjectSerializer.serialize(billingEveningPhone, "string");
        }
        if (shippingFirstName !== undefined) {
            localVarQueryParameters['shipping_first_name'] = ObjectSerializer.serialize(shippingFirstName, "string");
        }
        if (shippingLastName !== undefined) {
            localVarQueryParameters['shipping_last_name'] = ObjectSerializer.serialize(shippingLastName, "string");
        }
        if (shippingCompany !== undefined) {
            localVarQueryParameters['shipping_company'] = ObjectSerializer.serialize(shippingCompany, "string");
        }
        if (shippingCity !== undefined) {
            localVarQueryParameters['shipping_city'] = ObjectSerializer.serialize(shippingCity, "string");
        }
        if (shippingState !== undefined) {
            localVarQueryParameters['shipping_state'] = ObjectSerializer.serialize(shippingState, "string");
        }
        if (shippingPostalCode !== undefined) {
            localVarQueryParameters['shipping_postal_code'] = ObjectSerializer.serialize(shippingPostalCode, "string");
        }
        if (shippingCountryCode !== undefined) {
            localVarQueryParameters['shipping_country_code'] = ObjectSerializer.serialize(shippingCountryCode, "string");
        }
        if (shippingDayPhone !== undefined) {
            localVarQueryParameters['shipping_day_phone'] = ObjectSerializer.serialize(shippingDayPhone, "string");
        }
        if (shippingEveningPhone !== undefined) {
            localVarQueryParameters['shipping_evening_phone'] = ObjectSerializer.serialize(shippingEveningPhone, "string");
        }
        if (pricingTierOid !== undefined) {
            localVarQueryParameters['pricing_tier_oid'] = ObjectSerializer.serialize(pricingTierOid, "number");
        }
        if (pricingTierName !== undefined) {
            localVarQueryParameters['pricing_tier_name'] = ObjectSerializer.serialize(pricingTierName, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (since !== undefined) {
            localVarQueryParameters['_since'] = ObjectSerializer.serialize(since, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.getCustomersByQuery = function (customerQuery, limit, offset, since, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers/query';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (customerQuery === null || customerQuery === undefined) {
            throw new Error('Required parameter customerQuery was null or undefined when calling getCustomersByQuery.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (since !== undefined) {
            localVarQueryParameters['_since'] = ObjectSerializer.serialize(since, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(customerQuery, "CustomerQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.getCustomersForDataTables = function (expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers/dataTables';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DataTablesServerSideResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.getEditorValues = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/editor_values';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomerEditorValues");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.getEmailLists = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/email_lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.insertCustomer = function (customer, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (customer === null || customer === undefined) {
            throw new Error('Required parameter customer was null or undefined when calling insertCustomer.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(customer, "Customer")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomerResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.updateCustomer = function (customer, customerProfileOid, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers/{customer_profile_oid}'
            .replace('{' + 'customer_profile_oid' + '}', encodeURIComponent(String(customerProfileOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (customer === null || customer === undefined) {
            throw new Error('Required parameter customer was null or undefined when calling updateCustomer.');
        }
        if (customerProfileOid === null || customerProfileOid === undefined) {
            throw new Error('Required parameter customerProfileOid was null or undefined when calling updateCustomer.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(customer, "Customer")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomerResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    CustomerApi.prototype.updateCustomerEmailLists = function (customerProfileOid, listChanges, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/customer/customers/{customer_profile_oid}/email_lists'
            .replace('{' + 'customer_profile_oid' + '}', encodeURIComponent(String(customerProfileOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (customerProfileOid === null || customerProfileOid === undefined) {
            throw new Error('Required parameter customerProfileOid was null or undefined when calling updateCustomerEmailLists.');
        }
        if (listChanges === null || listChanges === undefined) {
            throw new Error('Required parameter listChanges was null or undefined when calling updateCustomerEmailLists.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(listChanges, "CustomerEmailListChanges")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CustomerEmailListChanges");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CustomerApi;
}());
exports.CustomerApi = CustomerApi;
var FulfillmentApiApiKeys;
(function (FulfillmentApiApiKeys) {
    FulfillmentApiApiKeys[FulfillmentApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    FulfillmentApiApiKeys[FulfillmentApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(FulfillmentApiApiKeys = exports.FulfillmentApiApiKeys || (exports.FulfillmentApiApiKeys = {}));
var FulfillmentApi = (function () {
    function FulfillmentApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(FulfillmentApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FulfillmentApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    FulfillmentApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    FulfillmentApi.prototype.setApiKey = function (key, value) {
        this.authentications[FulfillmentApiApiKeys[key]].apiKey = value;
    };
    FulfillmentApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(FulfillmentApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FulfillmentApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    FulfillmentApi.prototype.acknowledgeOrders = function (distributionCenterCode, orderIds, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements'
            .replace('{' + 'distribution_center_code' + '}', encodeURIComponent(String(distributionCenterCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (distributionCenterCode === null || distributionCenterCode === undefined) {
            throw new Error('Required parameter distributionCenterCode was null or undefined when calling acknowledgeOrders.');
        }
        if (orderIds === null || orderIds === undefined) {
            throw new Error('Required parameter orderIds was null or undefined when calling acknowledgeOrders.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(orderIds, "Array<string>")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    FulfillmentApi.prototype.getDistributionCenterOrders = function (distributionCenterCode, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fulfillment/distribution_centers/{distribution_center_code}/orders'
            .replace('{' + 'distribution_center_code' + '}', encodeURIComponent(String(distributionCenterCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (distributionCenterCode === null || distributionCenterCode === undefined) {
            throw new Error('Required parameter distributionCenterCode was null or undefined when calling getDistributionCenterOrders.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    FulfillmentApi.prototype.getDistributionCenters = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fulfillment/distribution_centers';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "DistributionCentersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    FulfillmentApi.prototype.shipOrders = function (distributionCenterCode, shipments, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fulfillment/distribution_centers/{distribution_center_code}/shipments'
            .replace('{' + 'distribution_center_code' + '}', encodeURIComponent(String(distributionCenterCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (distributionCenterCode === null || distributionCenterCode === undefined) {
            throw new Error('Required parameter distributionCenterCode was null or undefined when calling shipOrders.');
        }
        if (shipments === null || shipments === undefined) {
            throw new Error('Required parameter shipments was null or undefined when calling shipOrders.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(shipments, "Array<FulfillmentShipment>")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    FulfillmentApi.prototype.updateInventory = function (distributionCenterCode, inventories, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/fulfillment/distribution_centers/{distribution_center_code}/inventory'
            .replace('{' + 'distribution_center_code' + '}', encodeURIComponent(String(distributionCenterCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (distributionCenterCode === null || distributionCenterCode === undefined) {
            throw new Error('Required parameter distributionCenterCode was null or undefined when calling updateInventory.');
        }
        if (inventories === null || inventories === undefined) {
            throw new Error('Required parameter inventories was null or undefined when calling updateInventory.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(inventories, "Array<FulfillmentInventory>")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return FulfillmentApi;
}());
exports.FulfillmentApi = FulfillmentApi;
var ItemApiApiKeys;
(function (ItemApiApiKeys) {
    ItemApiApiKeys[ItemApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    ItemApiApiKeys[ItemApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(ItemApiApiKeys = exports.ItemApiApiKeys || (exports.ItemApiApiKeys = {}));
var ItemApi = (function () {
    function ItemApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ItemApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ItemApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    ItemApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ItemApi.prototype.setApiKey = function (key, value) {
        this.authentications[ItemApiApiKeys[key]].apiKey = value;
    };
    ItemApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(ItemApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ItemApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    ItemApi.prototype.deleteItem = function (merchantItemOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items/{merchant_item_oid}'
            .replace('{' + 'merchant_item_oid' + '}', encodeURIComponent(String(merchantItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (merchantItemOid === null || merchantItemOid === undefined) {
            throw new Error('Required parameter merchantItemOid was null or undefined when calling deleteItem.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.getItem = function (merchantItemOid, expand, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items/{merchant_item_oid}'
            .replace('{' + 'merchant_item_oid' + '}', encodeURIComponent(String(merchantItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (merchantItemOid === null || merchantItemOid === undefined) {
            throw new Error('Required parameter merchantItemOid was null or undefined when calling getItem.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.getItemByMerchantItemId = function (merchantItemId, expand, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items/merchant_item_id/{merchant_item_id}'
            .replace('{' + 'merchant_item_id' + '}', encodeURIComponent(String(merchantItemId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (merchantItemId === null || merchantItemId === undefined) {
            throw new Error('Required parameter merchantItemId was null or undefined when calling getItemByMerchantItemId.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.getItems = function (parentCategoryId, parentCategoryPath, limit, offset, since, sort, expand, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (parentCategoryId !== undefined) {
            localVarQueryParameters['parent_category_id'] = ObjectSerializer.serialize(parentCategoryId, "number");
        }
        if (parentCategoryPath !== undefined) {
            localVarQueryParameters['parent_category_path'] = ObjectSerializer.serialize(parentCategoryPath, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (since !== undefined) {
            localVarQueryParameters['_since'] = ObjectSerializer.serialize(since, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.getPricingTiers = function (expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/pricing_tiers';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PricingTiersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.insertItem = function (item, expand, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling insertItem.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(item, "Item")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.updateItem = function (item, merchantItemOid, expand, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items/{merchant_item_oid}'
            .replace('{' + 'merchant_item_oid' + '}', encodeURIComponent(String(merchantItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (item === null || item === undefined) {
            throw new Error('Required parameter item was null or undefined when calling updateItem.');
        }
        if (merchantItemOid === null || merchantItemOid === undefined) {
            throw new Error('Required parameter merchantItemOid was null or undefined when calling updateItem.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(item, "Item")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.updateItems = function (itemsRequest, expand, placeholders, async, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/items/batch';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (itemsRequest === null || itemsRequest === undefined) {
            throw new Error('Required parameter itemsRequest was null or undefined when calling updateItems.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        if (async !== undefined) {
            localVarQueryParameters['_async'] = ObjectSerializer.serialize(async, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemsRequest, "ItemsRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    ItemApi.prototype.uploadTemporaryMultimedia = function (file, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/item/temp_multimedia';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling uploadTemporaryMultimedia.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TempMultimediaResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ItemApi;
}());
exports.ItemApi = ItemApi;
var OauthApiApiKeys;
(function (OauthApiApiKeys) {
    OauthApiApiKeys[OauthApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    OauthApiApiKeys[OauthApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(OauthApiApiKeys = exports.OauthApiApiKeys || (exports.OauthApiApiKeys = {}));
var OauthApi = (function () {
    function OauthApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(OauthApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OauthApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    OauthApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    OauthApi.prototype.setApiKey = function (key, value) {
        this.authentications[OauthApiApiKeys[key]].apiKey = value;
    };
    OauthApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(OauthApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OauthApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    OauthApi.prototype.oauthAccessToken = function (clientId, grantType, code, redirectUri, refreshToken, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/oauth/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling oauthAccessToken.');
        }
        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling oauthAccessToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        if (clientId !== undefined) {
            localVarFormParams['client_id'] = ObjectSerializer.serialize(clientId, "string");
        }
        if (grantType !== undefined) {
            localVarFormParams['grant_type'] = ObjectSerializer.serialize(grantType, "string");
        }
        if (code !== undefined) {
            localVarFormParams['code'] = ObjectSerializer.serialize(code, "string");
        }
        if (redirectUri !== undefined) {
            localVarFormParams['redirect_uri'] = ObjectSerializer.serialize(redirectUri, "string");
        }
        if (refreshToken !== undefined) {
            localVarFormParams['refresh_token'] = ObjectSerializer.serialize(refreshToken, "string");
        }
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OauthTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OauthApi.prototype.oauthRevoke = function (clientId, token, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/oauth/revoke';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling oauthRevoke.');
        }
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling oauthRevoke.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        if (clientId !== undefined) {
            localVarFormParams['client_id'] = ObjectSerializer.serialize(clientId, "string");
        }
        if (token !== undefined) {
            localVarFormParams['token'] = ObjectSerializer.serialize(token, "string");
        }
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OauthRevokeSuccessResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return OauthApi;
}());
exports.OauthApi = OauthApi;
var OrderApiApiKeys;
(function (OrderApiApiKeys) {
    OrderApiApiKeys[OrderApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    OrderApiApiKeys[OrderApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(OrderApiApiKeys = exports.OrderApiApiKeys || (exports.OrderApiApiKeys = {}));
var OrderApi = (function () {
    function OrderApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(OrderApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrderApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    OrderApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    OrderApi.prototype.setApiKey = function (key, value) {
        this.authentications[OrderApiApiKeys[key]].apiKey = value;
    };
    OrderApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(OrderApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OrderApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    OrderApi.prototype.adjustOrderTotal = function (orderId, desiredTotal, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/adjust_order_total/{desired_total}'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)))
            .replace('{' + 'desired_total' + '}', encodeURIComponent(String(desiredTotal)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling adjustOrderTotal.');
        }
        if (desiredTotal === null || desiredTotal === undefined) {
            throw new Error('Required parameter desiredTotal was null or undefined when calling adjustOrderTotal.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.cancelOrder = function (orderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/cancel'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling cancelOrder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.deleteOrder = function (orderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.format = function (orderId, formatOptions, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/format'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling format.');
        }
        if (formatOptions === null || formatOptions === undefined) {
            throw new Error('Required parameter formatOptions was null or undefined when calling format.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(formatOptions, "OrderFormat")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderFormatResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.generateOrderToken = function (orderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/token/{order_id}'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling generateOrderToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getAccountsReceivableRetryConfig = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/accountsReceivableRetryConfig';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountsReceivableRetryConfigResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getAccountsReceivableRetryStats = function (from, to, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/accountsReceivableRetryConfig/stats';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(from, "string");
        }
        if (to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(to, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AccountsReceivableRetryStatsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getOrder = function (orderId, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOrder.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getOrderByToken = function (orderByTokenQuery, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/token';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderByTokenQuery === null || orderByTokenQuery === undefined) {
            throw new Error('Required parameter orderByTokenQuery was null or undefined when calling getOrderByToken.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(orderByTokenQuery, "OrderByTokenQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getOrders = function (orderId, paymentMethod, company, firstName, lastName, city, stateRegion, postalCode, countryCode, phone, email, ccEmail, total, screenBrandingThemeCode, storefrontHostName, creationDateBegin, creationDateEnd, paymentDateBegin, paymentDateEnd, shipmentDateBegin, shipmentDateEnd, rma, purchaseOrderNumber, itemId, currentStage, channelPartnerCode, channelPartnerOrderId, customerProfileOid, refundDateBegin, refundDateEnd, limit, offset, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId !== undefined) {
            localVarQueryParameters['order_id'] = ObjectSerializer.serialize(orderId, "string");
        }
        if (paymentMethod !== undefined) {
            localVarQueryParameters['payment_method'] = ObjectSerializer.serialize(paymentMethod, "string");
        }
        if (company !== undefined) {
            localVarQueryParameters['company'] = ObjectSerializer.serialize(company, "string");
        }
        if (firstName !== undefined) {
            localVarQueryParameters['first_name'] = ObjectSerializer.serialize(firstName, "string");
        }
        if (lastName !== undefined) {
            localVarQueryParameters['last_name'] = ObjectSerializer.serialize(lastName, "string");
        }
        if (city !== undefined) {
            localVarQueryParameters['city'] = ObjectSerializer.serialize(city, "string");
        }
        if (stateRegion !== undefined) {
            localVarQueryParameters['state_region'] = ObjectSerializer.serialize(stateRegion, "string");
        }
        if (postalCode !== undefined) {
            localVarQueryParameters['postal_code'] = ObjectSerializer.serialize(postalCode, "string");
        }
        if (countryCode !== undefined) {
            localVarQueryParameters['country_code'] = ObjectSerializer.serialize(countryCode, "string");
        }
        if (phone !== undefined) {
            localVarQueryParameters['phone'] = ObjectSerializer.serialize(phone, "string");
        }
        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }
        if (ccEmail !== undefined) {
            localVarQueryParameters['cc_email'] = ObjectSerializer.serialize(ccEmail, "string");
        }
        if (total !== undefined) {
            localVarQueryParameters['total'] = ObjectSerializer.serialize(total, "number");
        }
        if (screenBrandingThemeCode !== undefined) {
            localVarQueryParameters['screen_branding_theme_code'] = ObjectSerializer.serialize(screenBrandingThemeCode, "string");
        }
        if (storefrontHostName !== undefined) {
            localVarQueryParameters['storefront_host_name'] = ObjectSerializer.serialize(storefrontHostName, "string");
        }
        if (creationDateBegin !== undefined) {
            localVarQueryParameters['creation_date_begin'] = ObjectSerializer.serialize(creationDateBegin, "string");
        }
        if (creationDateEnd !== undefined) {
            localVarQueryParameters['creation_date_end'] = ObjectSerializer.serialize(creationDateEnd, "string");
        }
        if (paymentDateBegin !== undefined) {
            localVarQueryParameters['payment_date_begin'] = ObjectSerializer.serialize(paymentDateBegin, "string");
        }
        if (paymentDateEnd !== undefined) {
            localVarQueryParameters['payment_date_end'] = ObjectSerializer.serialize(paymentDateEnd, "string");
        }
        if (shipmentDateBegin !== undefined) {
            localVarQueryParameters['shipment_date_begin'] = ObjectSerializer.serialize(shipmentDateBegin, "string");
        }
        if (shipmentDateEnd !== undefined) {
            localVarQueryParameters['shipment_date_end'] = ObjectSerializer.serialize(shipmentDateEnd, "string");
        }
        if (rma !== undefined) {
            localVarQueryParameters['rma'] = ObjectSerializer.serialize(rma, "string");
        }
        if (purchaseOrderNumber !== undefined) {
            localVarQueryParameters['purchase_order_number'] = ObjectSerializer.serialize(purchaseOrderNumber, "string");
        }
        if (itemId !== undefined) {
            localVarQueryParameters['item_id'] = ObjectSerializer.serialize(itemId, "string");
        }
        if (currentStage !== undefined) {
            localVarQueryParameters['current_stage'] = ObjectSerializer.serialize(currentStage, "string");
        }
        if (channelPartnerCode !== undefined) {
            localVarQueryParameters['channel_partner_code'] = ObjectSerializer.serialize(channelPartnerCode, "string");
        }
        if (channelPartnerOrderId !== undefined) {
            localVarQueryParameters['channel_partner_order_id'] = ObjectSerializer.serialize(channelPartnerOrderId, "string");
        }
        if (customerProfileOid !== undefined) {
            localVarQueryParameters['customer_profile_oid'] = ObjectSerializer.serialize(customerProfileOid, "number");
        }
        if (refundDateBegin !== undefined) {
            localVarQueryParameters['Refund Date Begin'] = ObjectSerializer.serialize(refundDateBegin, "string");
        }
        if (refundDateEnd !== undefined) {
            localVarQueryParameters['Refund Date End'] = ObjectSerializer.serialize(refundDateEnd, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getOrdersBatch = function (orderBatch, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/batch';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderBatch === null || orderBatch === undefined) {
            throw new Error('Required parameter orderBatch was null or undefined when calling getOrdersBatch.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(orderBatch, "OrderQueryBatch")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.getOrdersByQuery = function (orderQuery, limit, offset, sort, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/query';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderQuery === null || orderQuery === undefined) {
            throw new Error('Required parameter orderQuery was null or undefined when calling getOrdersByQuery.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(orderQuery, "OrderQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.insertOrder = function (order, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling insertOrder.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(order, "Order")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.processPayment = function (orderId, processPaymentRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/process_payment'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling processPayment.');
        }
        if (processPaymentRequest === null || processPaymentRequest === undefined) {
            throw new Error('Required parameter processPaymentRequest was null or undefined when calling processPayment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processPaymentRequest, "OrderProcessPaymentRequest")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderProcessPaymentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.refundOrder = function (order, orderId, rejectAfterRefund, skipCustomerNotification, autoOrderCancel, manualRefund, reverseAffiliateTransactions, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/refund'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling refundOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling refundOrder.');
        }
        if (rejectAfterRefund !== undefined) {
            localVarQueryParameters['reject_after_refund'] = ObjectSerializer.serialize(rejectAfterRefund, "boolean");
        }
        if (skipCustomerNotification !== undefined) {
            localVarQueryParameters['skip_customer_notification'] = ObjectSerializer.serialize(skipCustomerNotification, "boolean");
        }
        if (autoOrderCancel !== undefined) {
            localVarQueryParameters['auto_order_cancel'] = ObjectSerializer.serialize(autoOrderCancel, "boolean");
        }
        if (manualRefund !== undefined) {
            localVarQueryParameters['manual_refund'] = ObjectSerializer.serialize(manualRefund, "boolean");
        }
        if (reverseAffiliateTransactions !== undefined) {
            localVarQueryParameters['reverse_affiliate_transactions'] = ObjectSerializer.serialize(reverseAffiliateTransactions, "boolean");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(order, "Order")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.replacement = function (orderId, replacement, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/replacement'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling replacement.');
        }
        if (replacement === null || replacement === undefined) {
            throw new Error('Required parameter replacement was null or undefined when calling replacement.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(replacement, "OrderReplacement")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderReplacementResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.resendReceipt = function (orderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/resend_receipt'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling resendReceipt.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.resendShipmentConfirmation = function (orderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}/resend_shipment_confirmation'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling resendShipmentConfirmation.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.updateAccountsReceivableRetryConfig = function (retryConfig, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/accountsReceivableRetryConfig';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (retryConfig === null || retryConfig === undefined) {
            throw new Error('Required parameter retryConfig was null or undefined when calling updateAccountsReceivableRetryConfig.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(retryConfig, "AccountsReceivableRetryConfig")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    OrderApi.prototype.updateOrder = function (order, orderId, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/order/orders/{order_id}'
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (order === null || order === undefined) {
            throw new Error('Required parameter order was null or undefined when calling updateOrder.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling updateOrder.');
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(order, "Order")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "OrderResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return OrderApi;
}());
exports.OrderApi = OrderApi;
var StorefrontApiApiKeys;
(function (StorefrontApiApiKeys) {
    StorefrontApiApiKeys[StorefrontApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    StorefrontApiApiKeys[StorefrontApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(StorefrontApiApiKeys = exports.StorefrontApiApiKeys || (exports.StorefrontApiApiKeys = {}));
var StorefrontApi = (function () {
    function StorefrontApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(StorefrontApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StorefrontApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    StorefrontApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    StorefrontApi.prototype.setApiKey = function (key, value) {
        this.authentications[StorefrontApiApiKeys[key]].apiKey = value;
    };
    StorefrontApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(StorefrontApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StorefrontApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    StorefrontApi.prototype.addToLibrary = function (addLibraryRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (addLibraryRequest === null || addLibraryRequest === undefined) {
            throw new Error('Required parameter addLibraryRequest was null or undefined when calling addToLibrary.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addLibraryRequest, "AddLibraryItemRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.applyToStoreFront = function (applyLibraryRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/apply';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (applyLibraryRequest === null || applyLibraryRequest === undefined) {
            throw new Error('Required parameter applyLibraryRequest was null or undefined when calling applyToStoreFront.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(applyLibraryRequest, "ApplyLibraryItemRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ApplyLibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.archiveEmailList = function (storefrontOid, emailListUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling archiveEmailList.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling archiveEmailList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListArchiveResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.archiveEmailSegment = function (storefrontOid, emailSegmentUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling archiveEmailSegment.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling archiveEmailSegment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentArchiveResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.backPopulateEmailFlow = function (storefrontOid, emailFlowUuid, backPopulateRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_flow_uuid' + '}', encodeURIComponent(String(emailFlowUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling backPopulateEmailFlow.');
        }
        if (emailFlowUuid === null || emailFlowUuid === undefined) {
            throw new Error('Required parameter emailFlowUuid was null or undefined when calling backPopulateEmailFlow.');
        }
        if (backPopulateRequest === null || backPopulateRequest === undefined) {
            throw new Error('Required parameter backPopulateRequest was null or undefined when calling backPopulateEmailFlow.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(backPopulateRequest, "EmailFlowBackPopulateRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailFlowBackPopulateResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.checkDownloadEmailSegment = function (storefrontOid, emailSegmentUuid, emailSegmentRebuildUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)))
            .replace('{' + 'email_segment_rebuild_uuid' + '}', encodeURIComponent(String(emailSegmentRebuildUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling checkDownloadEmailSegment.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling checkDownloadEmailSegment.');
        }
        if (emailSegmentRebuildUuid === null || emailSegmentRebuildUuid === undefined) {
            throw new Error('Required parameter emailSegmentRebuildUuid was null or undefined when calling checkDownloadEmailSegment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentDownloadPrepareResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.cloneEmailCampaign = function (storefrontOid, emailCampaignUuid, targetStorefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_campaign_uuid' + '}', encodeURIComponent(String(emailCampaignUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling cloneEmailCampaign.');
        }
        if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
            throw new Error('Required parameter emailCampaignUuid was null or undefined when calling cloneEmailCampaign.');
        }
        if (targetStorefrontOid !== undefined) {
            localVarQueryParameters['target_storefront_oid'] = ObjectSerializer.serialize(targetStorefrontOid, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCampaignResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.cloneEmailFlow = function (storefrontOid, emailFlowUuid, targetStorefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_flow_uuid' + '}', encodeURIComponent(String(emailFlowUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling cloneEmailFlow.');
        }
        if (emailFlowUuid === null || emailFlowUuid === undefined) {
            throw new Error('Required parameter emailFlowUuid was null or undefined when calling cloneEmailFlow.');
        }
        if (targetStorefrontOid !== undefined) {
            localVarQueryParameters['target_storefront_oid'] = ObjectSerializer.serialize(targetStorefrontOid, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailFlowResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.createEmailSendingDomain = function (domain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/sending_domains/{domain}/create'
            .replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling createEmailSendingDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSendingDomainResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteEmailCommseqStat = function (storefrontOid, commseqUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling deleteEmailCommseqStat.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling deleteEmailCommseqStat.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteEmailEmail = function (storefrontOid, commseqEmailUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling deleteEmailEmail.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling deleteEmailEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteEmailListCustomer = function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)))
            .replace('{' + 'email_customer_uuid' + '}', encodeURIComponent(String(emailCustomerUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling deleteEmailListCustomer.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling deleteEmailListCustomer.');
        }
        if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
            throw new Error('Required parameter emailCustomerUuid was null or undefined when calling deleteEmailListCustomer.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteEmailPostcard = function (storefrontOid, commseqPostcardUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_postcard_uuid' + '}', encodeURIComponent(String(commseqPostcardUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling deleteEmailPostcard.');
        }
        if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
            throw new Error('Required parameter commseqPostcardUuid was null or undefined when calling deleteEmailPostcard.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteEmailSendingDomain = function (domain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/sending_domains/{domain}'
            .replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling deleteEmailSendingDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteExperiment = function (storefrontOid, storefrontExperimentOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'storefront_experiment_oid' + '}', encodeURIComponent(String(storefrontExperimentOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling deleteExperiment.');
        }
        if (storefrontExperimentOid === null || storefrontExperimentOid === undefined) {
            throw new Error('Required parameter storefrontExperimentOid was null or undefined when calling deleteExperiment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.deleteLibraryItem = function (libraryItemOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/{library_item_oid}'
            .replace('{' + 'library_item_oid' + '}', encodeURIComponent(String(libraryItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (libraryItemOid === null || libraryItemOid === undefined) {
            throw new Error('Required parameter libraryItemOid was null or undefined when calling deleteLibraryItem.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.duplicateLibraryItem = function (libraryItemOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/{library_item_oid}/duplicate'
            .replace('{' + 'library_item_oid' + '}', encodeURIComponent(String(libraryItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (libraryItemOid === null || libraryItemOid === undefined) {
            throw new Error('Required parameter libraryItemOid was null or undefined when calling duplicateLibraryItem.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.geocodeAddress = function (storefrontOid, geocodeRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/geocode'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling geocodeAddress.');
        }
        if (geocodeRequest === null || geocodeRequest === undefined) {
            throw new Error('Required parameter geocodeRequest was null or undefined when calling geocodeAddress.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(geocodeRequest, "GeocodeRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GeocodeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getCountries = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/countries'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getCountries.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CountriesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEditorToken = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/editor_token'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEditorToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailEditorTokenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailBaseTemplates = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/baseTemplates'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailBaseTemplates.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailBaseTemplateListResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCampaign = function (storefrontOid, emailCampaignUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_campaign_uuid' + '}', encodeURIComponent(String(emailCampaignUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCampaign.');
        }
        if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
            throw new Error('Required parameter emailCampaignUuid was null or undefined when calling getEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCampaignResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCampaignScreenshots = function (storefrontOid, emailCampaignUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_campaign_uuid' + '}', encodeURIComponent(String(emailCampaignUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCampaignScreenshots.');
        }
        if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
            throw new Error('Required parameter emailCampaignUuid was null or undefined when calling getEmailCampaignScreenshots.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ScreenshotsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCampaigns = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCampaigns.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCampaignsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCampaignsWithStats = function (storefrontOid, statDays, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'stat_days' + '}', encodeURIComponent(String(statDays)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCampaignsWithStats.');
        }
        if (statDays === null || statDays === undefined) {
            throw new Error('Required parameter statDays was null or undefined when calling getEmailCampaignsWithStats.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCampaignsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseq = function (storefrontOid, commseqUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseq.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailCommseq.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseqEmailStats = function (storefrontOid, commseqUuid, statsRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseqEmailStats.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailCommseqEmailStats.');
        }
        if (statsRequest === null || statsRequest === undefined) {
            throw new Error('Required parameter statsRequest was null or undefined when calling getEmailCommseqEmailStats.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(statsRequest, "EmailStatSummaryRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailStatSummaryResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseqPostcardStats = function (storefrontOid, commseqUuid, statsRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseqPostcardStats.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailCommseqPostcardStats.');
        }
        if (statsRequest === null || statsRequest === undefined) {
            throw new Error('Required parameter statsRequest was null or undefined when calling getEmailCommseqPostcardStats.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(statsRequest, "EmailStatPostcardSummaryRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailStatPostcardSummaryResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseqStatOverall = function (storefrontOid, commseqUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseqStatOverall.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailCommseqStatOverall.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqStatResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseqStepStats = function (storefrontOid, commseqUuid, statsRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseqStepStats.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailCommseqStepStats.');
        }
        if (statsRequest === null || statsRequest === undefined) {
            throw new Error('Required parameter statsRequest was null or undefined when calling getEmailCommseqStepStats.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(statsRequest, "EmailStepStatRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailStepStatResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseqStepWaiting = function (storefrontOid, commseqUuid, waitingRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseqStepWaiting.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailCommseqStepWaiting.');
        }
        if (waitingRequest === null || waitingRequest === undefined) {
            throw new Error('Required parameter waitingRequest was null or undefined when calling getEmailCommseqStepWaiting.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(waitingRequest, "EmailStepWaitingRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailStepWaitingResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCommseqs = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCommseqs.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCustomerEditorUrl = function (storefrontOid, emailCustomerUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_customer_uuid' + '}', encodeURIComponent(String(emailCustomerUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCustomerEditorUrl.');
        }
        if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
            throw new Error('Required parameter emailCustomerUuid was null or undefined when calling getEmailCustomerEditorUrl.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCustomerEditorUrlResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailCustomers = function (storefrontOid, pageNumber, pageSize, searchEmailPrefix, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/customers'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailCustomers.');
        }
        if (pageNumber !== undefined) {
            localVarQueryParameters['pageNumber'] = ObjectSerializer.serialize(pageNumber, "number");
        }
        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number");
        }
        if (searchEmailPrefix !== undefined) {
            localVarQueryParameters['searchEmailPrefix'] = ObjectSerializer.serialize(searchEmailPrefix, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailDashboardActivity = function (storefrontOid, lastRecords, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/dashboard_activity'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailDashboardActivity.');
        }
        if (lastRecords !== undefined) {
            localVarQueryParameters['last_records'] = ObjectSerializer.serialize(lastRecords, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailDashboardActivityResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailDashboardStats = function (storefrontOid, days, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/dashboard_stats'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailDashboardStats.');
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailDashboardStatsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailEmail = function (storefrontOid, commseqEmailUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailEmail.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling getEmailEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailEmailClicks = function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)))
            .replace('{' + 'commseq_step_uuid' + '}', encodeURIComponent(String(commseqStepUuid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailEmailClicks.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailEmailClicks.');
        }
        if (commseqStepUuid === null || commseqStepUuid === undefined) {
            throw new Error('Required parameter commseqStepUuid was null or undefined when calling getEmailEmailClicks.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling getEmailEmailClicks.');
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailClicksResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailEmailCustomerEditorUrl = function (storefrontOid, commseqEmailUuid, orderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)))
            .replace('{' + 'order_id' + '}', encodeURIComponent(String(orderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
        }
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getEmailEmailCustomerEditorUrl.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCustomerEditorUrlResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailEmailOrders = function (storefrontOid, commseqUuid, commseqStepUuid, commseqEmailUuid, days, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)))
            .replace('{' + 'commseq_step_uuid' + '}', encodeURIComponent(String(commseqStepUuid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailEmailOrders.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling getEmailEmailOrders.');
        }
        if (commseqStepUuid === null || commseqStepUuid === undefined) {
            throw new Error('Required parameter commseqStepUuid was null or undefined when calling getEmailEmailOrders.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling getEmailEmailOrders.');
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailOrdersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailEmails = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailEmails.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailEmailsMultiple = function (storefrontOid, emailCommseqEmailsRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/multiple'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailEmailsMultiple.');
        }
        if (emailCommseqEmailsRequest === null || emailCommseqEmailsRequest === undefined) {
            throw new Error('Required parameter emailCommseqEmailsRequest was null or undefined when calling getEmailEmailsMultiple.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqEmailsRequest, "EmailCommseqEmailsRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailFlow = function (storefrontOid, emailFlowUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_flow_uuid' + '}', encodeURIComponent(String(emailFlowUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailFlow.');
        }
        if (emailFlowUuid === null || emailFlowUuid === undefined) {
            throw new Error('Required parameter emailFlowUuid was null or undefined when calling getEmailFlow.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailFlowResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailFlowScreenshots = function (storefrontOid, emailFlowUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_flow_uuid' + '}', encodeURIComponent(String(emailFlowUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailFlowScreenshots.');
        }
        if (emailFlowUuid === null || emailFlowUuid === undefined) {
            throw new Error('Required parameter emailFlowUuid was null or undefined when calling getEmailFlowScreenshots.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ScreenshotsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailFlows = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailFlows.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailFlowsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailGlobalSettings = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/global_settings';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailGlobalSettingsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailList = function (storefrontOid, emailListUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailList.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling getEmailList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailListCustomerEditorUrl = function (storefrontOid, emailListUuid, emailCustomerUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)))
            .replace('{' + 'email_customer_uuid' + '}', encodeURIComponent(String(emailCustomerUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailListCustomerEditorUrl.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling getEmailListCustomerEditorUrl.');
        }
        if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
            throw new Error('Required parameter emailCustomerUuid was null or undefined when calling getEmailListCustomerEditorUrl.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCustomerEditorUrlResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailListCustomers = function (storefrontOid, emailListUuid, pageNumber, pageSize, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailListCustomers.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling getEmailListCustomers.');
        }
        if (pageNumber !== undefined) {
            localVarQueryParameters['pageNumber'] = ObjectSerializer.serialize(pageNumber, "number");
        }
        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListCustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailLists = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailLists.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailPerformance = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/performance'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailPerformance.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailPerformanceResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailPlan = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/plan'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailPlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailPlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailPostcard = function (storefrontOid, commseqPostcardUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_postcard_uuid' + '}', encodeURIComponent(String(commseqPostcardUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailPostcard.');
        }
        if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
            throw new Error('Required parameter commseqPostcardUuid was null or undefined when calling getEmailPostcard.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqPostcardResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailPostcards = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailPostcards.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqPostcardsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailPostcardsMultiple = function (storefrontOid, emailCommseqPostcardsRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards/multiple'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailPostcardsMultiple.');
        }
        if (emailCommseqPostcardsRequest === null || emailCommseqPostcardsRequest === undefined) {
            throw new Error('Required parameter emailCommseqPostcardsRequest was null or undefined when calling getEmailPostcardsMultiple.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqPostcardsRequest, "EmailCommseqPostcardsRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqPostcardsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSegment = function (storefrontOid, emailSegmentUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailSegment.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling getEmailSegment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSegmentCustomerEditorUrl = function (storefrontOid, emailSegmentUuid, emailCustomerUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)))
            .replace('{' + 'email_customer_uuid' + '}', encodeURIComponent(String(emailCustomerUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
        }
        if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
            throw new Error('Required parameter emailCustomerUuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCustomerEditorUrlResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSegmentCustomers = function (storefrontOid, emailSegmentUuid, pageNumber, pageSize, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailSegmentCustomers.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling getEmailSegmentCustomers.');
        }
        if (pageNumber !== undefined) {
            localVarQueryParameters['pageNumber'] = ObjectSerializer.serialize(pageNumber, "number");
        }
        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentCustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSegments = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailSegments.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSendingDomain = function (domain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/sending_domain/{domain}'
            .replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getEmailSendingDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSendingDomainResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSendingDomainStatus = function (domain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/sending_domains/{domain}/status'
            .replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling getEmailSendingDomainStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSendingDomainResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSendingDomains = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/sending_domains';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSendingDomainsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailSettings = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/settings'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailSettings.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSettingsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailTemplate = function (storefrontOid, emailTemplateOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/templates/{email_template_oid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_template_oid' + '}', encodeURIComponent(String(emailTemplateOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailTemplate.');
        }
        if (emailTemplateOid === null || emailTemplateOid === undefined) {
            throw new Error('Required parameter emailTemplateOid was null or undefined when calling getEmailTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailTemplate");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailTemplates = function (storefrontOid, triggerType, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/templates'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailTemplates.');
        }
        if (triggerType !== undefined) {
            localVarQueryParameters['trigger_type'] = ObjectSerializer.serialize(triggerType, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailTemplatesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getEmailThirdPartyProviders = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/third_party_providers'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getEmailThirdPartyProviders.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailThirdPartyProvidersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getExperiments = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/experiments'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getExperiments.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ExperimentsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getHistogramPropertyNames = function (storefrontOid, propertyType, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/histogram/property_names'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getHistogramPropertyNames.');
        }
        if (propertyType !== undefined) {
            localVarQueryParameters['property_type'] = ObjectSerializer.serialize(propertyType, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailHistogramPropertyNamesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getHistogramPropertyValues = function (storefrontOid, propertyName, propertyType, limit, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/histogram/property_values'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getHistogramPropertyValues.');
        }
        if (propertyName !== undefined) {
            localVarQueryParameters['property_name'] = ObjectSerializer.serialize(propertyName, "string");
        }
        if (propertyType !== undefined) {
            localVarQueryParameters['property_type'] = ObjectSerializer.serialize(propertyType, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailHistogramPropertyValuesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getLibraryFilterValues = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/filter_values';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryFilterValuesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getLibraryItem = function (libraryItemOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/{library_item_oid}'
            .replace('{' + 'library_item_oid' + '}', encodeURIComponent(String(libraryItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (libraryItemOid === null || libraryItemOid === undefined) {
            throw new Error('Required parameter libraryItemOid was null or undefined when calling getLibraryItem.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getThumbnailParameters = function (thumbnailParameters, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/thumbnailParameters';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (thumbnailParameters === null || thumbnailParameters === undefined) {
            throw new Error('Required parameter thumbnailParameters was null or undefined when calling getThumbnailParameters.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(thumbnailParameters, "ThumbnailParametersRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ThumbnailParametersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getTransactionEmail = function (storefrontOid, emailId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/transaction_email/list/{email_id}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_id' + '}', encodeURIComponent(String(emailId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getTransactionEmail.');
        }
        if (emailId === null || emailId === undefined) {
            throw new Error('Required parameter emailId was null or undefined when calling getTransactionEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TransactionEmailResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getTransactionEmailList = function (storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/transaction_email/list'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getTransactionEmailList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TransactionEmailListResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.getTransactionEmailScreenshots = function (storefrontOid, emailId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_id' + '}', encodeURIComponent(String(emailId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling getTransactionEmailScreenshots.');
        }
        if (emailId === null || emailId === undefined) {
            throw new Error('Required parameter emailId was null or undefined when calling getTransactionEmailScreenshots.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ScreenshotsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.globalUnsubscribe = function (storefrontOid, unsubscribe, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/globalUnsubscribe'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling globalUnsubscribe.');
        }
        if (unsubscribe === null || unsubscribe === undefined) {
            throw new Error('Required parameter unsubscribe was null or undefined when calling globalUnsubscribe.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(unsubscribe, "EmailGlobalUnsubscribeRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailGlobalUnsubscribeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.importEmailThirdPartyProviderList = function (storefrontOid, importRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/third_party_providers/import'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling importEmailThirdPartyProviderList.');
        }
        if (importRequest === null || importRequest === undefined) {
            throw new Error('Required parameter importRequest was null or undefined when calling importEmailThirdPartyProviderList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(importRequest, "EmailThirdPartyListImportRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailCampaign = function (storefrontOid, emailCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailCampaign.');
        }
        if (emailCampaign === null || emailCampaign === undefined) {
            throw new Error('Required parameter emailCampaign was null or undefined when calling insertEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaign, "EmailCampaign")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCampaignResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailCommseq = function (storefrontOid, emailCommseq, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailCommseq.');
        }
        if (emailCommseq === null || emailCommseq === undefined) {
            throw new Error('Required parameter emailCommseq was null or undefined when calling insertEmailCommseq.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseq, "EmailCommseq")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailEmail = function (storefrontOid, emailCommseqEmail, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailEmail.');
        }
        if (emailCommseqEmail === null || emailCommseqEmail === undefined) {
            throw new Error('Required parameter emailCommseqEmail was null or undefined when calling insertEmailEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqEmail, "EmailCommseqEmail")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailFlow = function (storefrontOid, emailFlow, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailFlow.');
        }
        if (emailFlow === null || emailFlow === undefined) {
            throw new Error('Required parameter emailFlow was null or undefined when calling insertEmailFlow.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailFlow, "EmailFlow")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailFlowResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailList = function (storefrontOid, emailList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailList.');
        }
        if (emailList === null || emailList === undefined) {
            throw new Error('Required parameter emailList was null or undefined when calling insertEmailList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailList, "EmailList")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailPostcard = function (storefrontOid, emailCommseqPostcard, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailPostcard.');
        }
        if (emailCommseqPostcard === null || emailCommseqPostcard === undefined) {
            throw new Error('Required parameter emailCommseqPostcard was null or undefined when calling insertEmailPostcard.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqPostcard, "EmailCommseqPostcard")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqPostcardResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.insertEmailSegment = function (storefrontOid, emailSegment, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling insertEmailSegment.');
        }
        if (emailSegment === null || emailSegment === undefined) {
            throw new Error('Required parameter emailSegment was null or undefined when calling insertEmailSegment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailSegment, "EmailSegment")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.prepareDownloadEmailSegment = function (storefrontOid, emailSegmentUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling prepareDownloadEmailSegment.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling prepareDownloadEmailSegment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentDownloadPrepareResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.publishLibraryItem = function (libraryItemOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/{library_item_oid}/publish'
            .replace('{' + 'library_item_oid' + '}', encodeURIComponent(String(libraryItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (libraryItemOid === null || libraryItemOid === undefined) {
            throw new Error('Required parameter libraryItemOid was null or undefined when calling publishLibraryItem.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.purchaseLibraryItem = function (libraryItemOid, storefrontOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/{library_item_oid}/purchase'
            .replace('{' + 'library_item_oid' + '}', encodeURIComponent(String(libraryItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (libraryItemOid === null || libraryItemOid === undefined) {
            throw new Error('Required parameter libraryItemOid was null or undefined when calling purchaseLibraryItem.');
        }
        if (storefrontOid !== undefined) {
            localVarQueryParameters['storefront_oid'] = ObjectSerializer.serialize(storefrontOid, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.releaseEmailCommseqStepWaiting = function (storefrontOid, commseqUuid, commseqStepUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)))
            .replace('{' + 'commseq_step_uuid' + '}', encodeURIComponent(String(commseqStepUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling releaseEmailCommseqStepWaiting.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
        }
        if (commseqStepUuid === null || commseqStepUuid === undefined) {
            throw new Error('Required parameter commseqStepUuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.review = function (storefrontOid, commseqEmailUuid, emailCommseqEmailReviewRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling review.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling review.');
        }
        if (emailCommseqEmailReviewRequest === null || emailCommseqEmailReviewRequest === undefined) {
            throw new Error('Required parameter emailCommseqEmailReviewRequest was null or undefined when calling review.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqEmailReviewRequest, "EmailCommseqEmailSendTestRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailSendTestResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.search = function (category, matches, storefrontOid, maxHits, subcategory, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/search';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (category !== undefined) {
            localVarQueryParameters['category'] = ObjectSerializer.serialize(category, "string");
        }
        if (matches !== undefined) {
            localVarQueryParameters['matches'] = ObjectSerializer.serialize(matches, "string");
        }
        if (storefrontOid !== undefined) {
            localVarQueryParameters['storefront_oid'] = ObjectSerializer.serialize(storefrontOid, "string");
        }
        if (maxHits !== undefined) {
            localVarQueryParameters['max_hits'] = ObjectSerializer.serialize(maxHits, "number");
        }
        if (subcategory !== undefined) {
            localVarQueryParameters['subcategory'] = ObjectSerializer.serialize(subcategory, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LookupResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.search2 = function (lookupRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/search';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (lookupRequest === null || lookupRequest === undefined) {
            throw new Error('Required parameter lookupRequest was null or undefined when calling search2.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(lookupRequest, "LookupRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LookupResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.searchEmailListCustomers = function (storefrontOid, emailListUuid, startsWith, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling searchEmailListCustomers.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling searchEmailListCustomers.');
        }
        if (startsWith !== undefined) {
            localVarQueryParameters['startsWith'] = ObjectSerializer.serialize(startsWith, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListCustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.searchEmailSegmentCustomers = function (storefrontOid, emailSegmentUuid, startsWith, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling searchEmailSegmentCustomers.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling searchEmailSegmentCustomers.');
        }
        if (startsWith !== undefined) {
            localVarQueryParameters['startsWith'] = ObjectSerializer.serialize(startsWith, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentCustomersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.searchLibraryItems = function (itemQuery, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/search';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (itemQuery === null || itemQuery === undefined) {
            throw new Error('Required parameter itemQuery was null or undefined when calling searchLibraryItems.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemQuery, "LibraryItemQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.searchPublishedItems = function (itemQuery, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/search_published';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (itemQuery === null || itemQuery === undefined) {
            throw new Error('Required parameter itemQuery was null or undefined when calling searchPublishedItems.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemQuery, "LibraryItemQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.searchReviewItems = function (itemQuery, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/search_review';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (itemQuery === null || itemQuery === undefined) {
            throw new Error('Required parameter itemQuery was null or undefined when calling searchReviewItems.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemQuery, "LibraryItemQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.searchSharedItems = function (itemQuery, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/search_shared';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (itemQuery === null || itemQuery === undefined) {
            throw new Error('Required parameter itemQuery was null or undefined when calling searchSharedItems.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemQuery, "LibraryItemQuery")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.sendEmailTest = function (storefrontOid, commseqEmailUuid, emailCommseqEmailTestRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling sendEmailTest.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling sendEmailTest.');
        }
        if (emailCommseqEmailTestRequest === null || emailCommseqEmailTestRequest === undefined) {
            throw new Error('Required parameter emailCommseqEmailTestRequest was null or undefined when calling sendEmailTest.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqEmailTestRequest, "EmailCommseqEmailSendTestRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailSendTestResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.sendPostcardTest = function (storefrontOid, commseqPostcardUuid, emailCommseqPostcardTestRequest, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_postcard_uuid' + '}', encodeURIComponent(String(commseqPostcardUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling sendPostcardTest.');
        }
        if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
            throw new Error('Required parameter commseqPostcardUuid was null or undefined when calling sendPostcardTest.');
        }
        if (emailCommseqPostcardTestRequest === null || emailCommseqPostcardTestRequest === undefined) {
            throw new Error('Required parameter emailCommseqPostcardTestRequest was null or undefined when calling sendPostcardTest.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqPostcardTestRequest, "EmailCommseqPostcardSendTestRequest")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqPostcardSendTestResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.startEmailCampaign = function (storefrontOid, emailCampaignUuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_campaign_uuid' + '}', encodeURIComponent(String(emailCampaignUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling startEmailCampaign.');
        }
        if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
            throw new Error('Required parameter emailCampaignUuid was null or undefined when calling startEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "BaseResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.subscribeToEmailList = function (storefrontOid, emailListUuid, customers, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling subscribeToEmailList.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling subscribeToEmailList.');
        }
        if (customers === null || customers === undefined) {
            throw new Error('Required parameter customers was null or undefined when calling subscribeToEmailList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(customers, "Array<EmailCustomer>")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListSubscribeResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailCampaign = function (storefrontOid, emailCampaignUuid, emailCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_campaign_uuid' + '}', encodeURIComponent(String(emailCampaignUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailCampaign.');
        }
        if (emailCampaignUuid === null || emailCampaignUuid === undefined) {
            throw new Error('Required parameter emailCampaignUuid was null or undefined when calling updateEmailCampaign.');
        }
        if (emailCampaign === null || emailCampaign === undefined) {
            throw new Error('Required parameter emailCampaign was null or undefined when calling updateEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaign, "EmailCampaign")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCampaignResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailCommseq = function (storefrontOid, commseqUuid, emailCommseq, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_uuid' + '}', encodeURIComponent(String(commseqUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailCommseq.');
        }
        if (commseqUuid === null || commseqUuid === undefined) {
            throw new Error('Required parameter commseqUuid was null or undefined when calling updateEmailCommseq.');
        }
        if (emailCommseq === null || emailCommseq === undefined) {
            throw new Error('Required parameter emailCommseq was null or undefined when calling updateEmailCommseq.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseq, "EmailCommseq")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailCustomer = function (storefrontOid, emailCustomerUuid, emailCustomer, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_customer_uuid' + '}', encodeURIComponent(String(emailCustomerUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailCustomer.');
        }
        if (emailCustomerUuid === null || emailCustomerUuid === undefined) {
            throw new Error('Required parameter emailCustomerUuid was null or undefined when calling updateEmailCustomer.');
        }
        if (emailCustomer === null || emailCustomer === undefined) {
            throw new Error('Required parameter emailCustomer was null or undefined when calling updateEmailCustomer.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCustomer, "EmailCustomer")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailEmail = function (storefrontOid, commseqEmailUuid, emailCommseqEmail, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_email_uuid' + '}', encodeURIComponent(String(commseqEmailUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailEmail.');
        }
        if (commseqEmailUuid === null || commseqEmailUuid === undefined) {
            throw new Error('Required parameter commseqEmailUuid was null or undefined when calling updateEmailEmail.');
        }
        if (emailCommseqEmail === null || emailCommseqEmail === undefined) {
            throw new Error('Required parameter emailCommseqEmail was null or undefined when calling updateEmailEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqEmail, "EmailCommseqEmail")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqEmailResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailFlow = function (storefrontOid, emailFlowUuid, emailFlow, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_flow_uuid' + '}', encodeURIComponent(String(emailFlowUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailFlow.');
        }
        if (emailFlowUuid === null || emailFlowUuid === undefined) {
            throw new Error('Required parameter emailFlowUuid was null or undefined when calling updateEmailFlow.');
        }
        if (emailFlow === null || emailFlow === undefined) {
            throw new Error('Required parameter emailFlow was null or undefined when calling updateEmailFlow.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailFlow, "EmailFlow")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailFlowResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailGlobalSettings = function (globalSettings, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/email/global_settings';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (globalSettings === null || globalSettings === undefined) {
            throw new Error('Required parameter globalSettings was null or undefined when calling updateEmailGlobalSettings.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(globalSettings, "EmailGlobalSettings")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailGlobalSettingsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailList = function (storefrontOid, emailListUuid, emailList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/lists/{email_list_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_list_uuid' + '}', encodeURIComponent(String(emailListUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailList.');
        }
        if (emailListUuid === null || emailListUuid === undefined) {
            throw new Error('Required parameter emailListUuid was null or undefined when calling updateEmailList.');
        }
        if (emailList === null || emailList === undefined) {
            throw new Error('Required parameter emailList was null or undefined when calling updateEmailList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailList, "EmailList")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailListResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailPlan = function (storefrontOid, settings, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/plan'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailPlan.');
        }
        if (settings === null || settings === undefined) {
            throw new Error('Required parameter settings was null or undefined when calling updateEmailPlan.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(settings, "EmailPlan")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailPlanResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailPostcard = function (storefrontOid, commseqPostcardUuid, emailCommseqPostcard, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'commseq_postcard_uuid' + '}', encodeURIComponent(String(commseqPostcardUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailPostcard.');
        }
        if (commseqPostcardUuid === null || commseqPostcardUuid === undefined) {
            throw new Error('Required parameter commseqPostcardUuid was null or undefined when calling updateEmailPostcard.');
        }
        if (emailCommseqPostcard === null || emailCommseqPostcard === undefined) {
            throw new Error('Required parameter emailCommseqPostcard was null or undefined when calling updateEmailPostcard.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCommseqPostcard, "EmailCommseqPostcard")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailCommseqPostcardResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailSegment = function (storefrontOid, emailSegmentUuid, emailSegment, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_segment_uuid' + '}', encodeURIComponent(String(emailSegmentUuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailSegment.');
        }
        if (emailSegmentUuid === null || emailSegmentUuid === undefined) {
            throw new Error('Required parameter emailSegmentUuid was null or undefined when calling updateEmailSegment.');
        }
        if (emailSegment === null || emailSegment === undefined) {
            throw new Error('Required parameter emailSegment was null or undefined when calling updateEmailSegment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailSegment, "EmailSegment")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSegmentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateEmailSettings = function (storefrontOid, settings, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/email/settings'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateEmailSettings.');
        }
        if (settings === null || settings === undefined) {
            throw new Error('Required parameter settings was null or undefined when calling updateEmailSettings.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(settings, "EmailSettings")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "EmailSettingsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateExperiment = function (storefrontOid, storefrontExperimentOid, experiment, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'storefront_experiment_oid' + '}', encodeURIComponent(String(storefrontExperimentOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateExperiment.');
        }
        if (storefrontExperimentOid === null || storefrontExperimentOid === undefined) {
            throw new Error('Required parameter storefrontExperimentOid was null or undefined when calling updateExperiment.');
        }
        if (experiment === null || experiment === undefined) {
            throw new Error('Required parameter experiment was null or undefined when calling updateExperiment.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(experiment, "Experiment")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "ExperimentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateLibraryItem = function (libraryItemOid, libraryItem, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/code_library/{library_item_oid}'
            .replace('{' + 'library_item_oid' + '}', encodeURIComponent(String(libraryItemOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (libraryItemOid === null || libraryItemOid === undefined) {
            throw new Error('Required parameter libraryItemOid was null or undefined when calling updateLibraryItem.');
        }
        if (libraryItem === null || libraryItem === undefined) {
            throw new Error('Required parameter libraryItem was null or undefined when calling updateLibraryItem.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(libraryItem, "LibraryItem")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "LibraryItemResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    StorefrontApi.prototype.updateTransactionEmail = function (storefrontOid, emailId, transactionEmail, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/storefront/{storefront_oid}/transaction_email/list/{email_id}'
            .replace('{' + 'storefront_oid' + '}', encodeURIComponent(String(storefrontOid)))
            .replace('{' + 'email_id' + '}', encodeURIComponent(String(emailId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (storefrontOid === null || storefrontOid === undefined) {
            throw new Error('Required parameter storefrontOid was null or undefined when calling updateTransactionEmail.');
        }
        if (emailId === null || emailId === undefined) {
            throw new Error('Required parameter emailId was null or undefined when calling updateTransactionEmail.');
        }
        if (transactionEmail === null || transactionEmail === undefined) {
            throw new Error('Required parameter transactionEmail was null or undefined when calling updateTransactionEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transactionEmail, "TransactionEmail")
        };
        this.authentications.ultraCartBrowserApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TransactionEmailResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return StorefrontApi;
}());
exports.StorefrontApi = StorefrontApi;
var TaxApiApiKeys;
(function (TaxApiApiKeys) {
    TaxApiApiKeys[TaxApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    TaxApiApiKeys[TaxApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(TaxApiApiKeys = exports.TaxApiApiKeys || (exports.TaxApiApiKeys = {}));
var TaxApi = (function () {
    function TaxApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TaxApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaxApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    TaxApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TaxApi.prototype.setApiKey = function (key, value) {
        this.authentications[TaxApiApiKeys[key]].apiKey = value;
    };
    TaxApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(TaxApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TaxApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    TaxApi.prototype.deleteTaxProviderSelfCity = function (city, taxCity, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/city/{city}'
            .replace('{' + 'city' + '}', encodeURIComponent(String(city)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling deleteTaxProviderSelfCity.');
        }
        if (taxCity === null || taxCity === undefined) {
            throw new Error('Required parameter taxCity was null or undefined when calling deleteTaxProviderSelfCity.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxCity, "TaxCity")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.deleteTaxProviderSelfCountry = function (countryCode, taxCountry, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/country/{countryCode}'
            .replace('{' + 'countryCode' + '}', encodeURIComponent(String(countryCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (countryCode === null || countryCode === undefined) {
            throw new Error('Required parameter countryCode was null or undefined when calling deleteTaxProviderSelfCountry.');
        }
        if (taxCountry === null || taxCountry === undefined) {
            throw new Error('Required parameter taxCountry was null or undefined when calling deleteTaxProviderSelfCountry.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxCountry, "TaxCountry")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.deleteTaxProviderSelfCounty = function (county, taxCounty, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/county/{county}'
            .replace('{' + 'county' + '}', encodeURIComponent(String(county)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (county === null || county === undefined) {
            throw new Error('Required parameter county was null or undefined when calling deleteTaxProviderSelfCounty.');
        }
        if (taxCounty === null || taxCounty === undefined) {
            throw new Error('Required parameter taxCounty was null or undefined when calling deleteTaxProviderSelfCounty.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxCounty, "TaxCounty")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.deleteTaxProviderSelfPostalCode = function (postalCode, taxPostalCode, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/postalCode/{postal_code}'
            .replace('{' + 'postal_code' + '}', encodeURIComponent(String(postalCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (postalCode === null || postalCode === undefined) {
            throw new Error('Required parameter postalCode was null or undefined when calling deleteTaxProviderSelfPostalCode.');
        }
        if (taxPostalCode === null || taxPostalCode === undefined) {
            throw new Error('Required parameter taxPostalCode was null or undefined when calling deleteTaxProviderSelfPostalCode.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxPostalCode, "TaxPostalCode")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.deleteTaxProviderSelfState = function (stateCode, taxState, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/state/{stateCode}'
            .replace('{' + 'stateCode' + '}', encodeURIComponent(String(stateCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (stateCode === null || stateCode === undefined) {
            throw new Error('Required parameter stateCode was null or undefined when calling deleteTaxProviderSelfState.');
        }
        if (taxState === null || taxState === undefined) {
            throw new Error('Required parameter taxState was null or undefined when calling deleteTaxProviderSelfState.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxState, "TaxState")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderAvalara = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/avalara';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderAvalara");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderAvalaraCompanies = function (taxProviderAvalara, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/avalara/companies';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (taxProviderAvalara === null || taxProviderAvalara === undefined) {
            throw new Error('Required parameter taxProviderAvalara was null or undefined when calling getTaxProviderAvalaraCompanies.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxProviderAvalara, "TaxProviderAvalara")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderAvalaraCompaniesResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderAvalaraTest = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/avalara/test';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderTestResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderSelf = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderSelf");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderSelfCountries = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/countries';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderSelfCountriesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderSelfRegionsByCountryCode = function (countryCode, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/regions/{countryCode}'
            .replace('{' + 'countryCode' + '}', encodeURIComponent(String(countryCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (countryCode === null || countryCode === undefined) {
            throw new Error('Required parameter countryCode was null or undefined when calling getTaxProviderSelfRegionsByCountryCode.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderSelfRegionsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderSovos = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/sovos';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderSovos");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderSovosTest = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/sovos/test';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderTestResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderTaxJar = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/taxjar';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderTaxJar");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderTaxJarTest = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/taxjar/test';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderTestResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviderUltraCart = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/ultracart';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderUltraCart");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.getTaxProviders = function (limit, offset, expand, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (expand !== undefined) {
            localVarQueryParameters['_expand'] = ObjectSerializer.serialize(expand, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProvidersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.setActiveTaxProvider = function (providerName, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/setActive/{providerName}'
            .replace('{' + 'providerName' + '}', encodeURIComponent(String(providerName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (providerName === null || providerName === undefined) {
            throw new Error('Required parameter providerName was null or undefined when calling setActiveTaxProvider.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderActivateResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderAvalara = function (taxProviderAvalara, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/avalara';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (taxProviderAvalara === null || taxProviderAvalara === undefined) {
            throw new Error('Required parameter taxProviderAvalara was null or undefined when calling updateTaxProviderAvalara.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxProviderAvalara, "TaxProviderAvalara")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderAvalara");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSelf = function (taxProviderSelf, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (taxProviderSelf === null || taxProviderSelf === undefined) {
            throw new Error('Required parameter taxProviderSelf was null or undefined when calling updateTaxProviderSelf.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxProviderSelf, "TaxProviderSelf")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderSelf");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSelfCity = function (city, taxCity, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/city/{city}'
            .replace('{' + 'city' + '}', encodeURIComponent(String(city)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (city === null || city === undefined) {
            throw new Error('Required parameter city was null or undefined when calling updateTaxProviderSelfCity.');
        }
        if (taxCity === null || taxCity === undefined) {
            throw new Error('Required parameter taxCity was null or undefined when calling updateTaxProviderSelfCity.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxCity, "TaxCity")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxCity");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSelfCountry = function (countryCode, taxCountry, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/country/{countryCode}'
            .replace('{' + 'countryCode' + '}', encodeURIComponent(String(countryCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (countryCode === null || countryCode === undefined) {
            throw new Error('Required parameter countryCode was null or undefined when calling updateTaxProviderSelfCountry.');
        }
        if (taxCountry === null || taxCountry === undefined) {
            throw new Error('Required parameter taxCountry was null or undefined when calling updateTaxProviderSelfCountry.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxCountry, "TaxCountry")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxCountry");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSelfCounty = function (county, taxCounty, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/county/{county}'
            .replace('{' + 'county' + '}', encodeURIComponent(String(county)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (county === null || county === undefined) {
            throw new Error('Required parameter county was null or undefined when calling updateTaxProviderSelfCounty.');
        }
        if (taxCounty === null || taxCounty === undefined) {
            throw new Error('Required parameter taxCounty was null or undefined when calling updateTaxProviderSelfCounty.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxCounty, "TaxCounty")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxCounty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSelfPostalCode = function (postalCode, taxPostalCode, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/postalCode/{postal_code}'
            .replace('{' + 'postal_code' + '}', encodeURIComponent(String(postalCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (postalCode === null || postalCode === undefined) {
            throw new Error('Required parameter postalCode was null or undefined when calling updateTaxProviderSelfPostalCode.');
        }
        if (taxPostalCode === null || taxPostalCode === undefined) {
            throw new Error('Required parameter taxPostalCode was null or undefined when calling updateTaxProviderSelfPostalCode.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxPostalCode, "TaxPostalCode")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxPostalCode");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSelfState = function (stateCode, taxState, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/self/state/{stateCode}'
            .replace('{' + 'stateCode' + '}', encodeURIComponent(String(stateCode)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (stateCode === null || stateCode === undefined) {
            throw new Error('Required parameter stateCode was null or undefined when calling updateTaxProviderSelfState.');
        }
        if (taxState === null || taxState === undefined) {
            throw new Error('Required parameter taxState was null or undefined when calling updateTaxProviderSelfState.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxState, "TaxState")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxState");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderSovos = function (taxProviderSovos, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/sovos';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (taxProviderSovos === null || taxProviderSovos === undefined) {
            throw new Error('Required parameter taxProviderSovos was null or undefined when calling updateTaxProviderSovos.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxProviderSovos, "TaxProviderSovos")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderSovos");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderTaxJar = function (taxProviderTaxJar, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/taxjar';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (taxProviderTaxJar === null || taxProviderTaxJar === undefined) {
            throw new Error('Required parameter taxProviderTaxJar was null or undefined when calling updateTaxProviderTaxJar.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxProviderTaxJar, "TaxProviderTaxJar")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderTaxJar");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    TaxApi.prototype.updateTaxProviderUltraCart = function (taxProviderUltracart, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/tax/providers/ultracart';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (taxProviderUltracart === null || taxProviderUltracart === undefined) {
            throw new Error('Required parameter taxProviderUltracart was null or undefined when calling updateTaxProviderUltraCart.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(taxProviderUltracart, "TaxProviderUltraCart")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "TaxProviderUltraCart");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TaxApi;
}());
exports.TaxApi = TaxApi;
var UserApiApiKeys;
(function (UserApiApiKeys) {
    UserApiApiKeys[UserApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    UserApiApiKeys[UserApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(UserApiApiKeys = exports.UserApiApiKeys || (exports.UserApiApiKeys = {}));
var UserApi = (function () {
    function UserApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(UserApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    UserApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    UserApi.prototype.setApiKey = function (key, value) {
        this.authentications[UserApiApiKeys[key]].apiKey = value;
    };
    UserApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(UserApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    UserApi.prototype.deleteGroup = function (groupOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/groups/{group_oid}'
            .replace('{' + 'group_oid' + '}', encodeURIComponent(String(groupOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (groupOid === null || groupOid === undefined) {
            throw new Error('Required parameter groupOid was null or undefined when calling deleteGroup.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.deleteUser = function (userId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/users/{user_id}'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUser.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.getGroup = function (groupOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/groups/{group_oid}'
            .replace('{' + 'group_oid' + '}', encodeURIComponent(String(groupOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (groupOid === null || groupOid === undefined) {
            throw new Error('Required parameter groupOid was null or undefined when calling getGroup.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.getGroups = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/groups';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GroupsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.getUser = function (userId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/users/{user_id}'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUser.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.getUserLogins = function (userId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/users/{user_id}/logins'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserLogins.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserLoginsResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.getUsers = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/users';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UsersResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.insertGroup = function (group, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/groups';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling insertGroup.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(group, "Group")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GroupResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.insertUser = function (user, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/users';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling insertUser.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(user, "User")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.updateGroup = function (group, groupOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/groups/{group_oid}'
            .replace('{' + 'group_oid' + '}', encodeURIComponent(String(groupOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (group === null || group === undefined) {
            throw new Error('Required parameter group was null or undefined when calling updateGroup.');
        }
        if (groupOid === null || groupOid === undefined) {
            throw new Error('Required parameter groupOid was null or undefined when calling updateGroup.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(group, "Group")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GroupResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    UserApi.prototype.updateUser = function (user, userId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/user/users/{user_id}'
            .replace('{' + 'user_id' + '}', encodeURIComponent(String(userId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling updateUser.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateUser.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(user, "User")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "UserResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return UserApi;
}());
exports.UserApi = UserApi;
var WebhookApiApiKeys;
(function (WebhookApiApiKeys) {
    WebhookApiApiKeys[WebhookApiApiKeys["ultraCartBrowserApiKey"] = 0] = "ultraCartBrowserApiKey";
    WebhookApiApiKeys[WebhookApiApiKeys["ultraCartSimpleApiKey"] = 1] = "ultraCartSimpleApiKey";
})(WebhookApiApiKeys = exports.WebhookApiApiKeys || (exports.WebhookApiApiKeys = {}));
var WebhookApi = (function () {
    function WebhookApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = { 'X-UltraCart-Api-Version': '' };
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'ultraCartBrowserApiKey': new ApiKeyAuth('header', 'x-ultracart-browser-key'),
            'ultraCartOauth': new OAuth(),
            'ultraCartSimpleApiKey': new ApiKeyAuth('header', 'x-ultracart-simple-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(WebhookApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebhookApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    WebhookApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    WebhookApi.prototype.setApiKey = function (key, value) {
        this.authentications[WebhookApiApiKeys[key]].apiKey = value;
    };
    WebhookApi.prototype.setApiVersion = function (value) {
        this._defaultHeaders['X-UltraCart-Api-Version'] = value;
    };
    Object.defineProperty(WebhookApi.prototype, "defaultHeaders", {
        get: function () {
            return this._defaultHeaders;
        },
        set: function (defaultHeaders) {
            this._defaultHeaders = defaultHeaders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebhookApi.prototype, "accessToken", {
        set: function (token) {
            this.authentications.ultraCartOauth.accessToken = token;
        },
        enumerable: true,
        configurable: true
    });
    WebhookApi.prototype.deleteWebhook = function (webhookOid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks/{webhookOid}'
            .replace('{' + 'webhookOid' + '}', encodeURIComponent(String(webhookOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhookOid === null || webhookOid === undefined) {
            throw new Error('Required parameter webhookOid was null or undefined when calling deleteWebhook.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.deleteWebhookByUrl = function (webhook, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhook === null || webhook === undefined) {
            throw new Error('Required parameter webhook was null or undefined when calling deleteWebhookByUrl.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(webhook, "Webhook")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhookResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.getWebhookLog = function (webhookOid, requestId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks/{webhookOid}/logs/{requestId}'
            .replace('{' + 'webhookOid' + '}', encodeURIComponent(String(webhookOid)))
            .replace('{' + 'requestId' + '}', encodeURIComponent(String(requestId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhookOid === null || webhookOid === undefined) {
            throw new Error('Required parameter webhookOid was null or undefined when calling getWebhookLog.');
        }
        if (requestId === null || requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling getWebhookLog.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhookLogResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.getWebhookLogSummaries = function (webhookOid, limit, offset, since, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks/{webhookOid}/logs'
            .replace('{' + 'webhookOid' + '}', encodeURIComponent(String(webhookOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhookOid === null || webhookOid === undefined) {
            throw new Error('Required parameter webhookOid was null or undefined when calling getWebhookLogSummaries.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (since !== undefined) {
            localVarQueryParameters['_since'] = ObjectSerializer.serialize(since, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhookLogSummariesResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.getWebhooks = function (limit, offset, sort, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['_limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['_offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['_sort'] = ObjectSerializer.serialize(sort, "string");
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhooksResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.insertWebhook = function (webhook, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhook === null || webhook === undefined) {
            throw new Error('Required parameter webhook was null or undefined when calling insertWebhook.');
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(webhook, "Webhook")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhookResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.resendEvent = function (webhookOid, eventName, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks/{webhookOid}/reflow/{eventName}'
            .replace('{' + 'webhookOid' + '}', encodeURIComponent(String(webhookOid)))
            .replace('{' + 'eventName' + '}', encodeURIComponent(String(eventName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhookOid === null || webhookOid === undefined) {
            throw new Error('Required parameter webhookOid was null or undefined when calling resendEvent.');
        }
        if (eventName === null || eventName === undefined) {
            throw new Error('Required parameter eventName was null or undefined when calling resendEvent.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhookSampleRequestResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    WebhookApi.prototype.updateWebhook = function (webhook, webhookOid, placeholders, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhook/webhooks/{webhookOid}'
            .replace('{' + 'webhookOid' + '}', encodeURIComponent(String(webhookOid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this._defaultHeaders);
        var localVarFormParams = {};
        if (webhook === null || webhook === undefined) {
            throw new Error('Required parameter webhook was null or undefined when calling updateWebhook.');
        }
        if (webhookOid === null || webhookOid === undefined) {
            throw new Error('Required parameter webhookOid was null or undefined when calling updateWebhook.');
        }
        if (placeholders !== undefined) {
            localVarQueryParameters['_placeholders'] = ObjectSerializer.serialize(placeholders, "boolean");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(webhook, "Webhook")
        };
        this.authentications.ultraCartOauth.applyToRequest(localVarRequestOptions);
        this.authentications.ultraCartSimpleApiKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "WebhookResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return WebhookApi;
}());
exports.WebhookApi = WebhookApi;
//# sourceMappingURL=api.js.map
/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdjustInternalCertificateRequest,
    AdjustInternalCertificateRequestFromJSON,
    AdjustInternalCertificateRequestToJSON,
    AdjustInternalCertificateResponse,
    AdjustInternalCertificateResponseFromJSON,
    AdjustInternalCertificateResponseToJSON,
    BaseResponse,
    BaseResponseFromJSON,
    BaseResponseToJSON,
    Customer,
    CustomerFromJSON,
    CustomerToJSON,
    CustomerEditorValues,
    CustomerEditorValuesFromJSON,
    CustomerEditorValuesToJSON,
    CustomerEmailListChanges,
    CustomerEmailListChangesFromJSON,
    CustomerEmailListChangesToJSON,
    CustomerQuery,
    CustomerQueryFromJSON,
    CustomerQueryToJSON,
    CustomerResponse,
    CustomerResponseFromJSON,
    CustomerResponseToJSON,
    CustomerStoreCreditAddRequest,
    CustomerStoreCreditAddRequestFromJSON,
    CustomerStoreCreditAddRequestToJSON,
    CustomerStoreCreditResponse,
    CustomerStoreCreditResponseFromJSON,
    CustomerStoreCreditResponseToJSON,
    CustomersResponse,
    CustomersResponseFromJSON,
    CustomersResponseToJSON,
    DataTablesServerSideResponse,
    DataTablesServerSideResponseFromJSON,
    DataTablesServerSideResponseToJSON,
    EmailListsResponse,
    EmailListsResponseFromJSON,
    EmailListsResponseToJSON,
    EmailVerifyTokenRequest,
    EmailVerifyTokenRequestFromJSON,
    EmailVerifyTokenRequestToJSON,
    EmailVerifyTokenResponse,
    EmailVerifyTokenResponseFromJSON,
    EmailVerifyTokenResponseToJSON,
    EmailVerifyTokenValidateRequest,
    EmailVerifyTokenValidateRequestFromJSON,
    EmailVerifyTokenValidateRequestToJSON,
    EmailVerifyTokenValidateResponse,
    EmailVerifyTokenValidateResponseFromJSON,
    EmailVerifyTokenValidateResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LookupRequest,
    LookupRequestFromJSON,
    LookupRequestToJSON,
    LookupResponse,
    LookupResponseFromJSON,
    LookupResponseToJSON,
} from '../models';

export interface AddCustomerStoreCreditRequest {
    customerProfileOid: number;
    storeCreditRequest: CustomerStoreCreditAddRequest;
}

export interface AdjustInternalCertificateOperationRequest {
    customerProfileOid: number;
    adjustInternalCertificateRequest: AdjustInternalCertificateRequest;
}

export interface DeleteCustomerRequest {
    customerProfileOid: number;
}

export interface GetCustomerRequest {
    customerProfileOid: number;
    expand?: string;
}

export interface GetCustomerByEmailRequest {
    email: string;
    expand?: string;
}

export interface GetCustomerStoreCreditRequest {
    customerProfileOid: number;
}

export interface GetCustomersRequest {
    email?: string;
    qbClass?: string;
    quickbooksCode?: string;
    lastModifiedDtsStart?: string;
    lastModifiedDtsEnd?: string;
    signupDtsStart?: string;
    signupDtsEnd?: string;
    billingFirstName?: string;
    billingLastName?: string;
    billingCompany?: string;
    billingCity?: string;
    billingState?: string;
    billingPostalCode?: string;
    billingCountryCode?: string;
    billingDayPhone?: string;
    billingEveningPhone?: string;
    shippingFirstName?: string;
    shippingLastName?: string;
    shippingCompany?: string;
    shippingCity?: string;
    shippingState?: string;
    shippingPostalCode?: string;
    shippingCountryCode?: string;
    shippingDayPhone?: string;
    shippingEveningPhone?: string;
    pricingTierOid?: number;
    pricingTierName?: string;
    limit?: number;
    offset?: number;
    since?: string;
    sort?: string;
    expand?: string;
}

export interface GetCustomersByQueryRequest {
    customerQuery: CustomerQuery;
    limit?: number;
    offset?: number;
    since?: string;
    sort?: string;
    expand?: string;
}

export interface GetCustomersForDataTablesRequest {
    expand?: string;
}

export interface GetEmailVerificationTokenRequest {
    tokenRequest: EmailVerifyTokenRequest;
}

export interface InsertCustomerRequest {
    customer: Customer;
    expand?: string;
}

export interface SearchCustomerProfileValuesRequest {
    lookupRequest: LookupRequest;
}

export interface UpdateCustomerRequest {
    customerProfileOid: number;
    customer: Customer;
    expand?: string;
}

export interface UpdateCustomerEmailListsRequest {
    customerProfileOid: number;
    listChanges: CustomerEmailListChanges;
}

export interface ValidateEmailVerificationTokenRequest {
    validationRequest: EmailVerifyTokenValidateRequest;
}

/**
 * CustomerApi - interface
 * 
 * @export
 * @interface CustomerApiInterface
 */
export interface CustomerApiInterface {
    /**
     * Adds store credit to a customer 
     * @summary Adds store credit to a customer
     * @param {number} customerProfileOid The customer oid to credit.
     * @param {CustomerStoreCreditAddRequest} storeCreditRequest Store credit to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    addCustomerStoreCreditRaw(requestParameters: AddCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Adds store credit to a customer 
     * Adds store credit to a customer
     */
    addCustomerStoreCredit(requestParameters: AddCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
     * @summary Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     * @param {number} customerProfileOid The customer profile oid
     * @param {AdjustInternalCertificateRequest} adjustInternalCertificateRequest adjustInternalCertificateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    adjustInternalCertificateRaw(requestParameters: AdjustInternalCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustInternalCertificateResponse>>;

    /**
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     */
    adjustInternalCertificate(requestParameters: AdjustInternalCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustInternalCertificateResponse>;

    /**
     * Delete a customer on the UltraCart account. 
     * @summary Delete a customer
     * @param {number} customerProfileOid The customer_profile_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    deleteCustomerRaw(requestParameters: DeleteCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a customer on the UltraCart account. 
     * Delete a customer
     */
    deleteCustomer(requestParameters: DeleteCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a single customer using the specified customer profile oid. 
     * @summary Retrieve a customer
     * @param {number} customerProfileOid The customer oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomerRaw(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>>;

    /**
     * Retrieves a single customer using the specified customer profile oid. 
     * Retrieve a customer
     */
    getCustomer(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse>;

    /**
     * Retrieves a single customer using the specified customer email address. 
     * @summary Retrieve a customer by Email
     * @param {string} email The email address of the customer to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomerByEmailRaw(requestParameters: GetCustomerByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>>;

    /**
     * Retrieves a single customer using the specified customer email address. 
     * Retrieve a customer by Email
     */
    getCustomerByEmail(requestParameters: GetCustomerByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse>;

    /**
     * Retrieve values needed for a customer profile editor. 
     * @summary Retrieve values needed for a customer profile editor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomerEditorValuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerEditorValues>>;

    /**
     * Retrieve values needed for a customer profile editor. 
     * Retrieve values needed for a customer profile editor
     */
    getCustomerEditorValues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerEditorValues>;

    /**
     * Retrieve all email lists across all storefronts 
     * @summary Retrieve all email lists across all storefronts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomerEmailListsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListsResponse>>;

    /**
     * Retrieve all email lists across all storefronts 
     * Retrieve all email lists across all storefronts
     */
    getCustomerEmailLists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListsResponse>;

    /**
     * Retrieve the customer store credit accumulated through loyalty programs 
     * @summary Retrieve the customer store credit accumulated through loyalty programs
     * @param {number} customerProfileOid The customer oid to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomerStoreCreditRaw(requestParameters: GetCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerStoreCreditResponse>>;

    /**
     * Retrieve the customer store credit accumulated through loyalty programs 
     * Retrieve the customer store credit accumulated through loyalty programs
     */
    getCustomerStoreCredit(requestParameters: GetCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerStoreCreditResponse>;

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve customers
     * @param {string} [email] Email
     * @param {string} [qbClass] Quickbooks class
     * @param {string} [quickbooksCode] Quickbooks code
     * @param {string} [lastModifiedDtsStart] Last modified date start
     * @param {string} [lastModifiedDtsEnd] Last modified date end
     * @param {string} [signupDtsStart] Signup date start
     * @param {string} [signupDtsEnd] Signup date end
     * @param {string} [billingFirstName] Billing first name
     * @param {string} [billingLastName] Billing last name
     * @param {string} [billingCompany] Billing company
     * @param {string} [billingCity] Billing city
     * @param {string} [billingState] Billing state
     * @param {string} [billingPostalCode] Billing postal code
     * @param {string} [billingCountryCode] Billing country code
     * @param {string} [billingDayPhone] Billing day phone
     * @param {string} [billingEveningPhone] Billing evening phone
     * @param {string} [shippingFirstName] Shipping first name
     * @param {string} [shippingLastName] Shipping last name
     * @param {string} [shippingCompany] Shipping company
     * @param {string} [shippingCity] Shipping city
     * @param {string} [shippingState] Shipping state
     * @param {string} [shippingPostalCode] Shipping postal code
     * @param {string} [shippingCountryCode] Shipping country code
     * @param {string} [shippingDayPhone] Shipping day phone
     * @param {string} [shippingEveningPhone] Shipping evening phone
     * @param {number} [pricingTierOid] Pricing tier oid
     * @param {string} [pricingTierName] Pricing tier name
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomersRaw(requestParameters: GetCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersResponse>>;

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve customers
     */
    getCustomers(requestParameters: GetCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersResponse>;

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve customers by query
     * @param {CustomerQuery} customerQuery Customer query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomersByQueryRaw(requestParameters: GetCustomersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersResponse>>;

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve customers by query
     */
    getCustomersByQuery(requestParameters: GetCustomersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersResponse>;

    /**
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * @summary Retrieve customers for DataTables plugin
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomersForDataTablesRaw(requestParameters: GetCustomersForDataTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataTablesServerSideResponse>>;

    /**
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * Retrieve customers for DataTables plugin
     */
    getCustomersForDataTables(requestParameters: GetCustomersForDataTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataTablesServerSideResponse>;

    /**
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @summary Create a token that can be used to verify a customer email address
     * @param {EmailVerifyTokenRequest} tokenRequest Token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getEmailVerificationTokenRaw(requestParameters: GetEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailVerifyTokenResponse>>;

    /**
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * Create a token that can be used to verify a customer email address
     */
    getEmailVerificationToken(requestParameters: GetEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailVerifyTokenResponse>;

    /**
     * Insert a customer on the UltraCart account. 
     * @summary Insert a customer
     * @param {Customer} customer Customer to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    insertCustomerRaw(requestParameters: InsertCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>>;

    /**
     * Insert a customer on the UltraCart account. 
     * Insert a customer
     */
    insertCustomer(requestParameters: InsertCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse>;

    /**
     * 
     * @summary Searches for all matching values (using POST)
     * @param {LookupRequest} lookupRequest LookupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    searchCustomerProfileValuesRaw(requestParameters: SearchCustomerProfileValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupResponse>>;

    /**
     * Searches for all matching values (using POST)
     */
    searchCustomerProfileValues(requestParameters: SearchCustomerProfileValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupResponse>;

    /**
     * Update a customer on the UltraCart account. 
     * @summary Update a customer
     * @param {number} customerProfileOid The customer_profile_oid to update.
     * @param {Customer} customer Customer to update
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    updateCustomerRaw(requestParameters: UpdateCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>>;

    /**
     * Update a customer on the UltraCart account. 
     * Update a customer
     */
    updateCustomer(requestParameters: UpdateCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse>;

    /**
     * Update email list subscriptions for a customer 
     * @summary Update email list subscriptions for a customer
     * @param {number} customerProfileOid The customer profile oid
     * @param {CustomerEmailListChanges} listChanges List changes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    updateCustomerEmailListsRaw(requestParameters: UpdateCustomerEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerEmailListChanges>>;

    /**
     * Update email list subscriptions for a customer 
     * Update email list subscriptions for a customer
     */
    updateCustomerEmailLists(requestParameters: UpdateCustomerEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerEmailListChanges>;

    /**
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * @summary Validate a token that can be used to verify a customer email address
     * @param {EmailVerifyTokenValidateRequest} validationRequest Token validation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    validateEmailVerificationTokenRaw(requestParameters: ValidateEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailVerifyTokenValidateResponse>>;

    /**
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * Validate a token that can be used to verify a customer email address
     */
    validateEmailVerificationToken(requestParameters: ValidateEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailVerifyTokenValidateResponse>;

}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI implements CustomerApiInterface {

    /**
     * Adds store credit to a customer 
     * Adds store credit to a customer
     */
    async addCustomerStoreCreditRaw(requestParameters: AddCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling addCustomerStoreCredit.');
        }

        if (requestParameters.storeCreditRequest === null || requestParameters.storeCreditRequest === undefined) {
            throw new runtime.RequiredError('storeCreditRequest','Required parameter requestParameters.storeCreditRequest was null or undefined when calling addCustomerStoreCredit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}/store_credit`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerStoreCreditAddRequestToJSON(requestParameters.storeCreditRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Adds store credit to a customer 
     * Adds store credit to a customer
     */
    async addCustomerStoreCredit(requestParameters: AddCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.addCustomerStoreCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     */
    async adjustInternalCertificateRaw(requestParameters: AdjustInternalCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustInternalCertificateResponse>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling adjustInternalCertificate.');
        }

        if (requestParameters.adjustInternalCertificateRequest === null || requestParameters.adjustInternalCertificateRequest === undefined) {
            throw new runtime.RequiredError('adjustInternalCertificateRequest','Required parameter requestParameters.adjustInternalCertificateRequest was null or undefined when calling adjustInternalCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}/adjust_cashback_balance`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustInternalCertificateRequestToJSON(requestParameters.adjustInternalCertificateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustInternalCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed. 
     * Updates the cashback balance for a customer by updating the internal gift certificate used, creating the gift certificate if needed.
     */
    async adjustInternalCertificate(requestParameters: AdjustInternalCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustInternalCertificateResponse> {
        const response = await this.adjustInternalCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a customer on the UltraCart account. 
     * Delete a customer
     */
    async deleteCustomerRaw(requestParameters: DeleteCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling deleteCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a customer on the UltraCart account. 
     * Delete a customer
     */
    async deleteCustomer(requestParameters: DeleteCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomerRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a single customer using the specified customer profile oid. 
     * Retrieve a customer
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling getCustomer.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single customer using the specified customer profile oid. 
     * Retrieve a customer
     */
    async getCustomer(requestParameters: GetCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse> {
        const response = await this.getCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single customer using the specified customer email address. 
     * Retrieve a customer by Email
     */
    async getCustomerByEmailRaw(requestParameters: GetCustomerByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getCustomerByEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/by_email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single customer using the specified customer email address. 
     * Retrieve a customer by Email
     */
    async getCustomerByEmail(requestParameters: GetCustomerByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse> {
        const response = await this.getCustomerByEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve values needed for a customer profile editor. 
     * Retrieve values needed for a customer profile editor
     */
    async getCustomerEditorValuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerEditorValues>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/editor_values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerEditorValuesFromJSON(jsonValue));
    }

    /**
     * Retrieve values needed for a customer profile editor. 
     * Retrieve values needed for a customer profile editor
     */
    async getCustomerEditorValues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerEditorValues> {
        const response = await this.getCustomerEditorValuesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all email lists across all storefronts 
     * Retrieve all email lists across all storefronts
     */
    async getCustomerEmailListsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/email_lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all email lists across all storefronts 
     * Retrieve all email lists across all storefronts
     */
    async getCustomerEmailLists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListsResponse> {
        const response = await this.getCustomerEmailListsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the customer store credit accumulated through loyalty programs 
     * Retrieve the customer store credit accumulated through loyalty programs
     */
    async getCustomerStoreCreditRaw(requestParameters: GetCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerStoreCreditResponse>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling getCustomerStoreCredit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}/store_credit`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerStoreCreditResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the customer store credit accumulated through loyalty programs 
     * Retrieve the customer store credit accumulated through loyalty programs
     */
    async getCustomerStoreCredit(requestParameters: GetCustomerStoreCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerStoreCreditResponse> {
        const response = await this.getCustomerStoreCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve customers
     */
    async getCustomersRaw(requestParameters: GetCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.qbClass !== undefined) {
            queryParameters['qb_class'] = requestParameters.qbClass;
        }

        if (requestParameters.quickbooksCode !== undefined) {
            queryParameters['quickbooks_code'] = requestParameters.quickbooksCode;
        }

        if (requestParameters.lastModifiedDtsStart !== undefined) {
            queryParameters['last_modified_dts_start'] = requestParameters.lastModifiedDtsStart;
        }

        if (requestParameters.lastModifiedDtsEnd !== undefined) {
            queryParameters['last_modified_dts_end'] = requestParameters.lastModifiedDtsEnd;
        }

        if (requestParameters.signupDtsStart !== undefined) {
            queryParameters['signup_dts_start'] = requestParameters.signupDtsStart;
        }

        if (requestParameters.signupDtsEnd !== undefined) {
            queryParameters['signup_dts_end'] = requestParameters.signupDtsEnd;
        }

        if (requestParameters.billingFirstName !== undefined) {
            queryParameters['billing_first_name'] = requestParameters.billingFirstName;
        }

        if (requestParameters.billingLastName !== undefined) {
            queryParameters['billing_last_name'] = requestParameters.billingLastName;
        }

        if (requestParameters.billingCompany !== undefined) {
            queryParameters['billing_company'] = requestParameters.billingCompany;
        }

        if (requestParameters.billingCity !== undefined) {
            queryParameters['billing_city'] = requestParameters.billingCity;
        }

        if (requestParameters.billingState !== undefined) {
            queryParameters['billing_state'] = requestParameters.billingState;
        }

        if (requestParameters.billingPostalCode !== undefined) {
            queryParameters['billing_postal_code'] = requestParameters.billingPostalCode;
        }

        if (requestParameters.billingCountryCode !== undefined) {
            queryParameters['billing_country_code'] = requestParameters.billingCountryCode;
        }

        if (requestParameters.billingDayPhone !== undefined) {
            queryParameters['billing_day_phone'] = requestParameters.billingDayPhone;
        }

        if (requestParameters.billingEveningPhone !== undefined) {
            queryParameters['billing_evening_phone'] = requestParameters.billingEveningPhone;
        }

        if (requestParameters.shippingFirstName !== undefined) {
            queryParameters['shipping_first_name'] = requestParameters.shippingFirstName;
        }

        if (requestParameters.shippingLastName !== undefined) {
            queryParameters['shipping_last_name'] = requestParameters.shippingLastName;
        }

        if (requestParameters.shippingCompany !== undefined) {
            queryParameters['shipping_company'] = requestParameters.shippingCompany;
        }

        if (requestParameters.shippingCity !== undefined) {
            queryParameters['shipping_city'] = requestParameters.shippingCity;
        }

        if (requestParameters.shippingState !== undefined) {
            queryParameters['shipping_state'] = requestParameters.shippingState;
        }

        if (requestParameters.shippingPostalCode !== undefined) {
            queryParameters['shipping_postal_code'] = requestParameters.shippingPostalCode;
        }

        if (requestParameters.shippingCountryCode !== undefined) {
            queryParameters['shipping_country_code'] = requestParameters.shippingCountryCode;
        }

        if (requestParameters.shippingDayPhone !== undefined) {
            queryParameters['shipping_day_phone'] = requestParameters.shippingDayPhone;
        }

        if (requestParameters.shippingEveningPhone !== undefined) {
            queryParameters['shipping_evening_phone'] = requestParameters.shippingEveningPhone;
        }

        if (requestParameters.pricingTierOid !== undefined) {
            queryParameters['pricing_tier_oid'] = requestParameters.pricingTierOid;
        }

        if (requestParameters.pricingTierName !== undefined) {
            queryParameters['pricing_tier_name'] = requestParameters.pricingTierName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve customers
     */
    async getCustomers(requestParameters: GetCustomersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersResponse> {
        const response = await this.getCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve customers by query
     */
    async getCustomersByQueryRaw(requestParameters: GetCustomersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomersResponse>> {
        if (requestParameters.customerQuery === null || requestParameters.customerQuery === undefined) {
            throw new runtime.RequiredError('customerQuery','Required parameter requestParameters.customerQuery was null or undefined when calling getCustomersByQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerQueryToJSON(requestParameters.customerQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves customers from the account.  If no parameters are specified, all customers will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve customers by query
     */
    async getCustomersByQuery(requestParameters: GetCustomersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomersResponse> {
        const response = await this.getCustomersByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * Retrieve customers for DataTables plugin
     */
    async getCustomersForDataTablesRaw(requestParameters: GetCustomersForDataTablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataTablesServerSideResponse>> {
        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/dataTables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataTablesServerSideResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves customers from the account.  If no searches are specified, all customers will be returned. 
     * Retrieve customers for DataTables plugin
     */
    async getCustomersForDataTables(requestParameters: GetCustomersForDataTablesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataTablesServerSideResponse> {
        const response = await this.getCustomersForDataTablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * Create a token that can be used to verify a customer email address
     */
    async getEmailVerificationTokenRaw(requestParameters: GetEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailVerifyTokenResponse>> {
        if (requestParameters.tokenRequest === null || requestParameters.tokenRequest === undefined) {
            throw new runtime.RequiredError('tokenRequest','Required parameter requestParameters.tokenRequest was null or undefined when calling getEmailVerificationToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/email_verify/get_token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailVerifyTokenRequestToJSON(requestParameters.tokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailVerifyTokenResponseFromJSON(jsonValue));
    }

    /**
     * Create a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * Create a token that can be used to verify a customer email address
     */
    async getEmailVerificationToken(requestParameters: GetEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailVerifyTokenResponse> {
        const response = await this.getEmailVerificationTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert a customer on the UltraCart account. 
     * Insert a customer
     */
    async insertCustomerRaw(requestParameters: InsertCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling insertCustomer.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerToJSON(requestParameters.customer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Insert a customer on the UltraCart account. 
     * Insert a customer
     */
    async insertCustomer(requestParameters: InsertCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse> {
        const response = await this.insertCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for all matching values (using POST)
     */
    async searchCustomerProfileValuesRaw(requestParameters: SearchCustomerProfileValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupResponse>> {
        if (requestParameters.lookupRequest === null || requestParameters.lookupRequest === undefined) {
            throw new runtime.RequiredError('lookupRequest','Required parameter requestParameters.lookupRequest was null or undefined when calling searchCustomerProfileValues.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupRequestToJSON(requestParameters.lookupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LookupResponseFromJSON(jsonValue));
    }

    /**
     * Searches for all matching values (using POST)
     */
    async searchCustomerProfileValues(requestParameters: SearchCustomerProfileValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupResponse> {
        const response = await this.searchCustomerProfileValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a customer on the UltraCart account. 
     * Update a customer
     */
    async updateCustomerRaw(requestParameters: UpdateCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling updateCustomer.');
        }

        if (requestParameters.customer === null || requestParameters.customer === undefined) {
            throw new runtime.RequiredError('customer','Required parameter requestParameters.customer was null or undefined when calling updateCustomer.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerToJSON(requestParameters.customer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Update a customer on the UltraCart account. 
     * Update a customer
     */
    async updateCustomer(requestParameters: UpdateCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerResponse> {
        const response = await this.updateCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email list subscriptions for a customer 
     * Update email list subscriptions for a customer
     */
    async updateCustomerEmailListsRaw(requestParameters: UpdateCustomerEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerEmailListChanges>> {
        if (requestParameters.customerProfileOid === null || requestParameters.customerProfileOid === undefined) {
            throw new runtime.RequiredError('customerProfileOid','Required parameter requestParameters.customerProfileOid was null or undefined when calling updateCustomerEmailLists.');
        }

        if (requestParameters.listChanges === null || requestParameters.listChanges === undefined) {
            throw new runtime.RequiredError('listChanges','Required parameter requestParameters.listChanges was null or undefined when calling updateCustomerEmailLists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/{customer_profile_oid}/email_lists`.replace(`{${"customer_profile_oid"}}`, encodeURIComponent(String(requestParameters.customerProfileOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerEmailListChangesToJSON(requestParameters.listChanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerEmailListChangesFromJSON(jsonValue));
    }

    /**
     * Update email list subscriptions for a customer 
     * Update email list subscriptions for a customer
     */
    async updateCustomerEmailLists(requestParameters: UpdateCustomerEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerEmailListChanges> {
        const response = await this.updateCustomerEmailListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * Validate a token that can be used to verify a customer email address
     */
    async validateEmailVerificationTokenRaw(requestParameters: ValidateEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailVerifyTokenValidateResponse>> {
        if (requestParameters.validationRequest === null || requestParameters.validationRequest === undefined) {
            throw new runtime.RequiredError('validationRequest','Required parameter requestParameters.validationRequest was null or undefined when calling validateEmailVerificationToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["customer_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/customer/customers/email_verify/validate_token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailVerifyTokenValidateRequestToJSON(requestParameters.validationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailVerifyTokenValidateResponseFromJSON(jsonValue));
    }

    /**
     * Validate a token that can be used to verify a customer email address.  The implementation of how a customer interacts with this token is left to the merchant. 
     * Validate a token that can be used to verify a customer email address
     */
    async validateEmailVerificationToken(requestParameters: ValidateEmailVerificationTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailVerifyTokenValidateResponse> {
        const response = await this.validateEmailVerificationTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

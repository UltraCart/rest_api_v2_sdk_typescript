/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConversationAgentAuthResponse,
    ConversationAgentAuthResponseFromJSON,
    ConversationAgentAuthResponseToJSON,
    ConversationAgentProfile,
    ConversationAgentProfileFromJSON,
    ConversationAgentProfileToJSON,
    ConversationAgentProfileResponse,
    ConversationAgentProfileResponseFromJSON,
    ConversationAgentProfileResponseToJSON,
    ConversationAutocompleteRequest,
    ConversationAutocompleteRequestFromJSON,
    ConversationAutocompleteRequestToJSON,
    ConversationAutocompleteResponse,
    ConversationAutocompleteResponseFromJSON,
    ConversationAutocompleteResponseToJSON,
    ConversationCannedMessage,
    ConversationCannedMessageFromJSON,
    ConversationCannedMessageToJSON,
    ConversationCannedMessageResponse,
    ConversationCannedMessageResponseFromJSON,
    ConversationCannedMessageResponseToJSON,
    ConversationCannedMessagesResponse,
    ConversationCannedMessagesResponseFromJSON,
    ConversationCannedMessagesResponseToJSON,
    ConversationCannedMessagesSearch,
    ConversationCannedMessagesSearchFromJSON,
    ConversationCannedMessagesSearchToJSON,
    ConversationDepartment,
    ConversationDepartmentFromJSON,
    ConversationDepartmentToJSON,
    ConversationDepartmentMembersResponse,
    ConversationDepartmentMembersResponseFromJSON,
    ConversationDepartmentMembersResponseToJSON,
    ConversationDepartmentResponse,
    ConversationDepartmentResponseFromJSON,
    ConversationDepartmentResponseToJSON,
    ConversationDepartmentsResponse,
    ConversationDepartmentsResponseFromJSON,
    ConversationDepartmentsResponseToJSON,
    ConversationEngagement,
    ConversationEngagementFromJSON,
    ConversationEngagementToJSON,
    ConversationEngagementResponse,
    ConversationEngagementResponseFromJSON,
    ConversationEngagementResponseToJSON,
    ConversationEngagementsResponse,
    ConversationEngagementsResponseFromJSON,
    ConversationEngagementsResponseToJSON,
    ConversationJoinRequest,
    ConversationJoinRequestFromJSON,
    ConversationJoinRequestToJSON,
    ConversationLocationsResponse,
    ConversationLocationsResponseFromJSON,
    ConversationLocationsResponseToJSON,
    ConversationMessagesResponse,
    ConversationMessagesResponseFromJSON,
    ConversationMessagesResponseToJSON,
    ConversationMultimediaUploadUrlResponse,
    ConversationMultimediaUploadUrlResponseFromJSON,
    ConversationMultimediaUploadUrlResponseToJSON,
    ConversationPermissionsResponse,
    ConversationPermissionsResponseFromJSON,
    ConversationPermissionsResponseToJSON,
    ConversationResponse,
    ConversationResponseFromJSON,
    ConversationResponseToJSON,
    ConversationSearchRequest,
    ConversationSearchRequestFromJSON,
    ConversationSearchRequestToJSON,
    ConversationSearchResponse,
    ConversationSearchResponseFromJSON,
    ConversationSearchResponseToJSON,
    ConversationStartRequest,
    ConversationStartRequestFromJSON,
    ConversationStartRequestToJSON,
    ConversationStartResponse,
    ConversationStartResponseFromJSON,
    ConversationStartResponseToJSON,
    ConversationWebchatContext,
    ConversationWebchatContextFromJSON,
    ConversationWebchatContextToJSON,
    ConversationWebchatQueueStatusUpdateRequest,
    ConversationWebchatQueueStatusUpdateRequestFromJSON,
    ConversationWebchatQueueStatusUpdateRequestToJSON,
    ConversationWebchatQueueStatusesResponse,
    ConversationWebchatQueueStatusesResponseFromJSON,
    ConversationWebchatQueueStatusesResponseToJSON,
    ConversationsResponse,
    ConversationsResponseFromJSON,
    ConversationsResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface DeleteConversationCannedMessageRequest {
    conversationCannedMessageOid: number;
}

export interface DeleteDepartmentRequest {
    conversationDepartmentOid: number;
}

export interface DeleteEngagementRequest {
    conversationEngagementOid: number;
}

export interface GetConversationRequest {
    conversationUuid: string;
    limit?: number;
}

export interface GetConversationContextRequest {
    conversationUuid: string;
}

export interface GetConversationEngagementRequest {
    conversationEngagementOid: number;
}

export interface GetConversationMessagesRequest {
    conversationUuid: string;
    since: number;
    limit?: number;
}

export interface GetConversationMultimediaUploadUrlRequest {
    extension: string;
}

export interface GetConversationsRequest {
    medium?: string;
    before?: string;
    limit?: number;
    offset?: number;
}

export interface GetConversationsAutocompleteRequest {
    autocompleteRequest: ConversationAutocompleteRequest;
}

export interface GetConversationsSearchRequest {
    searchRequest: ConversationSearchRequest;
}

export interface InsertConversationCannedMessageRequest {
    cannedMessage: ConversationCannedMessage;
}

export interface InsertConversationDepartmentRequest {
    department: ConversationDepartment;
}

export interface InsertConversationEngagementRequest {
    engagement: ConversationEngagement;
}

export interface JoinConversationRequest {
    conversationUuid: string;
    joinRequest?: ConversationJoinRequest;
}

export interface LeaveConversationRequest {
    conversationUuid: string;
}

export interface MarkReadConversationRequest {
    conversationUuid: string;
}

export interface SearchConversationCannedMessagesRequest {
    searchRequest: ConversationCannedMessagesSearch;
}

export interface SmsUnsubscribeConversationRequest {
    conversationUuid: string;
}

export interface StartConversationRequest {
    startRequest: ConversationStartRequest;
}

export interface UpdateAgentProfileRequest {
    profileRequest: ConversationAgentProfile;
}

export interface UpdateConversationCannedMessageRequest {
    conversationCannedMessageOid: number;
    cannedMessage: ConversationCannedMessage;
}

export interface UpdateConversationDepartmentRequest {
    conversationDepartmentOid: number;
    department: ConversationDepartment;
}

export interface UpdateConversationEngagementRequest {
    conversationEngagementOid: number;
    engagement: ConversationEngagement;
}

export interface UpdateConversationWebchatQueueStatusRequest {
    queueName: string;
    statusRequest: ConversationWebchatQueueStatusUpdateRequest;
}

/**
 * ConversationApi - interface
 * 
 * @export
 * @interface ConversationApiInterface
 */
export interface ConversationApiInterface {
    /**
     * Delete a conversation canned message 
     * @summary Delete a conversation canned message
     * @param {number} conversationCannedMessageOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    deleteConversationCannedMessageRaw(requestParameters: DeleteConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a conversation canned message 
     * Delete a conversation canned message
     */
    deleteConversationCannedMessage(requestParameters: DeleteConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete a conversation department 
     * @summary Delete a conversation department
     * @param {number} conversationDepartmentOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a conversation department 
     * Delete a conversation department
     */
    deleteDepartment(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete a conversation engagement 
     * @summary Delete a conversation engagement
     * @param {number} conversationEngagementOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    deleteEngagementRaw(requestParameters: DeleteEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a conversation engagement 
     * Delete a conversation engagement
     */
    deleteEngagement(requestParameters: DeleteEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Called periodically by the conversation API to keep the session alive. 
     * @summary Agent keep alive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getAgentKeepAliveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Called periodically by the conversation API to keep the session alive. 
     * Agent keep alive
     */
    getAgentKeepAlive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve the agents profile 
     * @summary Get agent profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getAgentProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAgentProfileResponse>>;

    /**
     * Retrieve the agents profile 
     * Get agent profile
     */
    getAgentProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAgentProfileResponse>;

    /**
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * @summary Get agent websocket authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getAgentWebsocketAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAgentAuthResponse>>;

    /**
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * Get agent websocket authorization
     */
    getAgentWebsocketAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAgentAuthResponse>;

    /**
     * Retrieve a conversation including the participants and messages 
     * @summary Retrieve a conversation
     * @param {string} conversationUuid 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationResponse>>;

    /**
     * Retrieve a conversation including the participants and messages 
     * Retrieve a conversation
     */
    getConversation(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationResponse>;

    /**
     * Retrieve a list of canned messages ordered by short_code 
     * @summary Retrieve a list of canned messages ordered by short_code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationCannedMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessagesResponse>>;

    /**
     * Retrieve a list of canned messages ordered by short_code 
     * Retrieve a list of canned messages ordered by short_code
     */
    getConversationCannedMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessagesResponse>;

    /**
     * Get a webchat conversation context 
     * @summary Get a webchat conversation context
     * @param {string} conversationUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationContextRaw(requestParameters: GetConversationContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationWebchatContext>>;

    /**
     * Get a webchat conversation context 
     * Get a webchat conversation context
     */
    getConversationContext(requestParameters: GetConversationContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationWebchatContext>;

    /**
     * Retrieve a list of possible department members 
     * @summary Retrieve a list of possible department members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationDepartmentMemberListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentMembersResponse>>;

    /**
     * Retrieve a list of possible department members 
     * Retrieve a list of possible department members
     */
    getConversationDepartmentMemberList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentMembersResponse>;

    /**
     * Retrieve a list of departments ordered by name 
     * @summary Retrieve a list of departments ordered by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationDepartmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentsResponse>>;

    /**
     * Retrieve a list of departments ordered by name 
     * Retrieve a list of departments ordered by name
     */
    getConversationDepartments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentsResponse>;

    /**
     * Retrieve an engagement 
     * @summary Retrieve an engagement
     * @param {number} conversationEngagementOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationEngagementRaw(requestParameters: GetConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementResponse>>;

    /**
     * Retrieve an engagement 
     * Retrieve an engagement
     */
    getConversationEngagement(requestParameters: GetConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementResponse>;

    /**
     * Retrieve a list of engagements ordered by name 
     * @summary Retrieve a list of engagements ordered by name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationEngagementsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementsResponse>>;

    /**
     * Retrieve a list of engagements ordered by name 
     * Retrieve a list of engagements ordered by name
     */
    getConversationEngagements(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementsResponse>;

    /**
     * Retrieve conversation messages since a particular time 
     * @summary Retrieve conversation messages
     * @param {string} conversationUuid 
     * @param {number} since 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationMessagesRaw(requestParameters: GetConversationMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationMessagesResponse>>;

    /**
     * Retrieve conversation messages since a particular time 
     * Retrieve conversation messages
     */
    getConversationMessages(requestParameters: GetConversationMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationMessagesResponse>;

    /**
     * Get a presigned conversation multimedia upload URL 
     * @summary Get a presigned conversation multimedia upload URL
     * @param {string} extension 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationMultimediaUploadUrlRaw(requestParameters: GetConversationMultimediaUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationMultimediaUploadUrlResponse>>;

    /**
     * Get a presigned conversation multimedia upload URL 
     * Get a presigned conversation multimedia upload URL
     */
    getConversationMultimediaUploadUrl(requestParameters: GetConversationMultimediaUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationMultimediaUploadUrlResponse>;

    /**
     * Retrieve conversation permissions 
     * @summary Retrieve conversation permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationPermissionsResponse>>;

    /**
     * Retrieve conversation permissions 
     * Retrieve conversation permissions
     */
    getConversationPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationPermissionsResponse>;

    /**
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * @summary Retrieve a conversation webchat queue statuses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationWebchatQueueStatusesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationWebchatQueueStatusesResponse>>;

    /**
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * Retrieve a conversation webchat queue statuses
     */
    getConversationWebchatQueueStatuses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationWebchatQueueStatusesResponse>;

    /**
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * @summary Retrieve a list of conversation summaries newest to oldest
     * @param {string} [medium] 
     * @param {string} [before] 
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationsRaw(requestParameters: GetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationsResponse>>;

    /**
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * Retrieve a list of conversation summaries newest to oldest
     */
    getConversations(requestParameters: GetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationsResponse>;

    /**
     * Retrieve a list of matching terms for a search field 
     * @summary Retrieve a list of matching terms for a search field
     * @param {ConversationAutocompleteRequest} autocompleteRequest Autocomplete Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationsAutocompleteRaw(requestParameters: GetConversationsAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAutocompleteResponse>>;

    /**
     * Retrieve a list of matching terms for a search field 
     * Retrieve a list of matching terms for a search field
     */
    getConversationsAutocomplete(requestParameters: GetConversationsAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAutocompleteResponse>;

    /**
     * Search conversations 
     * @summary Search conversations
     * @param {ConversationSearchRequest} searchRequest Search Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getConversationsSearchRaw(requestParameters: GetConversationsSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationSearchResponse>>;

    /**
     * Search conversations 
     * Search conversations
     */
    getConversationsSearch(requestParameters: GetConversationsSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationSearchResponse>;

    /**
     * Get location data for engagement configuration 
     * @summary Get location data for engagement configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    getLocationsForEngagementRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationLocationsResponse>>;

    /**
     * Get location data for engagement configuration 
     * Get location data for engagement configuration
     */
    getLocationsForEngagement(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationLocationsResponse>;

    /**
     * Insert a canned message 
     * @summary Insert a canned message
     * @param {ConversationCannedMessage} cannedMessage Canned message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    insertConversationCannedMessageRaw(requestParameters: InsertConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessageResponse>>;

    /**
     * Insert a canned message 
     * Insert a canned message
     */
    insertConversationCannedMessage(requestParameters: InsertConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessageResponse>;

    /**
     * Insert a department 
     * @summary Insert a department
     * @param {ConversationDepartment} department Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    insertConversationDepartmentRaw(requestParameters: InsertConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentResponse>>;

    /**
     * Insert a department 
     * Insert a department
     */
    insertConversationDepartment(requestParameters: InsertConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentResponse>;

    /**
     * Insert a engagement 
     * @summary Insert a engagement
     * @param {ConversationEngagement} engagement Engagement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    insertConversationEngagementRaw(requestParameters: InsertConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementResponse>>;

    /**
     * Insert a engagement 
     * Insert a engagement
     */
    insertConversationEngagement(requestParameters: InsertConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementResponse>;

    /**
     * Join a conversation 
     * @summary Join a conversation
     * @param {string} conversationUuid 
     * @param {ConversationJoinRequest} [joinRequest] Join request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    joinConversationRaw(requestParameters: JoinConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Join a conversation 
     * Join a conversation
     */
    joinConversation(requestParameters: JoinConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Leave a conversation 
     * @summary Leave a conversation
     * @param {string} conversationUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    leaveConversationRaw(requestParameters: LeaveConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Leave a conversation 
     * Leave a conversation
     */
    leaveConversation(requestParameters: LeaveConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Mark a conversation as read 
     * @summary Mark a conversation as read
     * @param {string} conversationUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    markReadConversationRaw(requestParameters: MarkReadConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Mark a conversation as read 
     * Mark a conversation as read
     */
    markReadConversation(requestParameters: MarkReadConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Search for canned messages by short_code 
     * @summary Search for canned messages by short_code
     * @param {ConversationCannedMessagesSearch} searchRequest Search request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    searchConversationCannedMessagesRaw(requestParameters: SearchConversationCannedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessagesResponse>>;

    /**
     * Search for canned messages by short_code 
     * Search for canned messages by short_code
     */
    searchConversationCannedMessages(requestParameters: SearchConversationCannedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessagesResponse>;

    /**
     * Unsubscribe any SMS participants in this conversation 
     * @summary Unsubscribe any SMS participants in this conversation
     * @param {string} conversationUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    smsUnsubscribeConversationRaw(requestParameters: SmsUnsubscribeConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Unsubscribe any SMS participants in this conversation 
     * Unsubscribe any SMS participants in this conversation
     */
    smsUnsubscribeConversation(requestParameters: SmsUnsubscribeConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Start a new conversation 
     * @summary Start a conversation
     * @param {ConversationStartRequest} startRequest Start request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    startConversationRaw(requestParameters: StartConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationStartResponse>>;

    /**
     * Start a new conversation 
     * Start a conversation
     */
    startConversation(requestParameters: StartConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationStartResponse>;

    /**
     * Update agent profile 
     * @summary Update agent profile
     * @param {ConversationAgentProfile} profileRequest Profile request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    updateAgentProfileRaw(requestParameters: UpdateAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAgentProfileResponse>>;

    /**
     * Update agent profile 
     * Update agent profile
     */
    updateAgentProfile(requestParameters: UpdateAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAgentProfileResponse>;

    /**
     * Update a canned message 
     * @summary Update a canned message
     * @param {number} conversationCannedMessageOid 
     * @param {ConversationCannedMessage} cannedMessage Canned message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    updateConversationCannedMessageRaw(requestParameters: UpdateConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessageResponse>>;

    /**
     * Update a canned message 
     * Update a canned message
     */
    updateConversationCannedMessage(requestParameters: UpdateConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessageResponse>;

    /**
     * Update a department 
     * @summary Update a department
     * @param {number} conversationDepartmentOid 
     * @param {ConversationDepartment} department Department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    updateConversationDepartmentRaw(requestParameters: UpdateConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentResponse>>;

    /**
     * Update a department 
     * Update a department
     */
    updateConversationDepartment(requestParameters: UpdateConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentResponse>;

    /**
     * Update a engagement 
     * @summary Update a engagement
     * @param {number} conversationEngagementOid 
     * @param {ConversationEngagement} engagement Engagement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    updateConversationEngagementRaw(requestParameters: UpdateConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementResponse>>;

    /**
     * Update a engagement 
     * Update a engagement
     */
    updateConversationEngagement(requestParameters: UpdateConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementResponse>;

    /**
     * Update status within the queue 
     * @summary Update status within the queue
     * @param {string} queueName 
     * @param {ConversationWebchatQueueStatusUpdateRequest} statusRequest Status request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationApiInterface
     */
    updateConversationWebchatQueueStatusRaw(requestParameters: UpdateConversationWebchatQueueStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update status within the queue 
     * Update status within the queue
     */
    updateConversationWebchatQueueStatus(requestParameters: UpdateConversationWebchatQueueStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI implements ConversationApiInterface {

    /**
     * Delete a conversation canned message 
     * Delete a conversation canned message
     */
    async deleteConversationCannedMessageRaw(requestParameters: DeleteConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationCannedMessageOid === null || requestParameters.conversationCannedMessageOid === undefined) {
            throw new runtime.RequiredError('conversationCannedMessageOid','Required parameter requestParameters.conversationCannedMessageOid was null or undefined when calling deleteConversationCannedMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/canned_messages/{conversation_canned_message_oid}`.replace(`{${"conversation_canned_message_oid"}}`, encodeURIComponent(String(requestParameters.conversationCannedMessageOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a conversation canned message 
     * Delete a conversation canned message
     */
    async deleteConversationCannedMessage(requestParameters: DeleteConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConversationCannedMessageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a conversation department 
     * Delete a conversation department
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationDepartmentOid === null || requestParameters.conversationDepartmentOid === undefined) {
            throw new runtime.RequiredError('conversationDepartmentOid','Required parameter requestParameters.conversationDepartmentOid was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/departments/{conversation_department_oid}`.replace(`{${"conversation_department_oid"}}`, encodeURIComponent(String(requestParameters.conversationDepartmentOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a conversation department 
     * Delete a conversation department
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDepartmentRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a conversation engagement 
     * Delete a conversation engagement
     */
    async deleteEngagementRaw(requestParameters: DeleteEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationEngagementOid === null || requestParameters.conversationEngagementOid === undefined) {
            throw new runtime.RequiredError('conversationEngagementOid','Required parameter requestParameters.conversationEngagementOid was null or undefined when calling deleteEngagement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/engagements/{conversation_engagement_oid}`.replace(`{${"conversation_engagement_oid"}}`, encodeURIComponent(String(requestParameters.conversationEngagementOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a conversation engagement 
     * Delete a conversation engagement
     */
    async deleteEngagement(requestParameters: DeleteEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEngagementRaw(requestParameters, initOverrides);
    }

    /**
     * Called periodically by the conversation API to keep the session alive. 
     * Agent keep alive
     */
    async getAgentKeepAliveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/agent/keepalive`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Called periodically by the conversation API to keep the session alive. 
     * Agent keep alive
     */
    async getAgentKeepAlive(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAgentKeepAliveRaw(initOverrides);
    }

    /**
     * Retrieve the agents profile 
     * Get agent profile
     */
    async getAgentProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAgentProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/agent/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationAgentProfileResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the agents profile 
     * Get agent profile
     */
    async getAgentProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAgentProfileResponse> {
        const response = await this.getAgentProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * Get agent websocket authorization
     */
    async getAgentWebsocketAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAgentAuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/agent/auth`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationAgentAuthResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * Get agent websocket authorization
     */
    async getAgentWebsocketAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAgentAuthResponse> {
        const response = await this.getAgentWebsocketAuthorizationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a conversation including the participants and messages 
     * Retrieve a conversation
     */
    async getConversationRaw(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationResponse>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling getConversation.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a conversation including the participants and messages 
     * Retrieve a conversation
     */
    async getConversation(requestParameters: GetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationResponse> {
        const response = await this.getConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of canned messages ordered by short_code 
     * Retrieve a list of canned messages ordered by short_code
     */
    async getConversationCannedMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/canned_messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationCannedMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of canned messages ordered by short_code 
     * Retrieve a list of canned messages ordered by short_code
     */
    async getConversationCannedMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessagesResponse> {
        const response = await this.getConversationCannedMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a webchat conversation context 
     * Get a webchat conversation context
     */
    async getConversationContextRaw(requestParameters: GetConversationContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationWebchatContext>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling getConversationContext.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}/context`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationWebchatContextFromJSON(jsonValue));
    }

    /**
     * Get a webchat conversation context 
     * Get a webchat conversation context
     */
    async getConversationContext(requestParameters: GetConversationContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationWebchatContext> {
        const response = await this.getConversationContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of possible department members 
     * Retrieve a list of possible department members
     */
    async getConversationDepartmentMemberListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentMembersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/department_members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDepartmentMembersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of possible department members 
     * Retrieve a list of possible department members
     */
    async getConversationDepartmentMemberList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentMembersResponse> {
        const response = await this.getConversationDepartmentMemberListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of departments ordered by name 
     * Retrieve a list of departments ordered by name
     */
    async getConversationDepartmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDepartmentsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of departments ordered by name 
     * Retrieve a list of departments ordered by name
     */
    async getConversationDepartments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentsResponse> {
        const response = await this.getConversationDepartmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an engagement 
     * Retrieve an engagement
     */
    async getConversationEngagementRaw(requestParameters: GetConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementResponse>> {
        if (requestParameters.conversationEngagementOid === null || requestParameters.conversationEngagementOid === undefined) {
            throw new runtime.RequiredError('conversationEngagementOid','Required parameter requestParameters.conversationEngagementOid was null or undefined when calling getConversationEngagement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/engagements/{conversation_engagement_oid}`.replace(`{${"conversation_engagement_oid"}}`, encodeURIComponent(String(requestParameters.conversationEngagementOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationEngagementResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an engagement 
     * Retrieve an engagement
     */
    async getConversationEngagement(requestParameters: GetConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementResponse> {
        const response = await this.getConversationEngagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of engagements ordered by name 
     * Retrieve a list of engagements ordered by name
     */
    async getConversationEngagementsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/engagements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationEngagementsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of engagements ordered by name 
     * Retrieve a list of engagements ordered by name
     */
    async getConversationEngagements(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementsResponse> {
        const response = await this.getConversationEngagementsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve conversation messages since a particular time 
     * Retrieve conversation messages
     */
    async getConversationMessagesRaw(requestParameters: GetConversationMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationMessagesResponse>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling getConversationMessages.');
        }

        if (requestParameters.since === null || requestParameters.since === undefined) {
            throw new runtime.RequiredError('since','Required parameter requestParameters.since was null or undefined when calling getConversationMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}/messages/{since}`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))).replace(`{${"since"}}`, encodeURIComponent(String(requestParameters.since))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve conversation messages since a particular time 
     * Retrieve conversation messages
     */
    async getConversationMessages(requestParameters: GetConversationMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationMessagesResponse> {
        const response = await this.getConversationMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a presigned conversation multimedia upload URL 
     * Get a presigned conversation multimedia upload URL
     */
    async getConversationMultimediaUploadUrlRaw(requestParameters: GetConversationMultimediaUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationMultimediaUploadUrlResponse>> {
        if (requestParameters.extension === null || requestParameters.extension === undefined) {
            throw new runtime.RequiredError('extension','Required parameter requestParameters.extension was null or undefined when calling getConversationMultimediaUploadUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/upload_url/{extension}`.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters.extension))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationMultimediaUploadUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get a presigned conversation multimedia upload URL 
     * Get a presigned conversation multimedia upload URL
     */
    async getConversationMultimediaUploadUrl(requestParameters: GetConversationMultimediaUploadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationMultimediaUploadUrlResponse> {
        const response = await this.getConversationMultimediaUploadUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve conversation permissions 
     * Retrieve conversation permissions
     */
    async getConversationPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationPermissionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationPermissionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve conversation permissions 
     * Retrieve conversation permissions
     */
    async getConversationPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationPermissionsResponse> {
        const response = await this.getConversationPermissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * Retrieve a conversation webchat queue statuses
     */
    async getConversationWebchatQueueStatusesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationWebchatQueueStatusesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/queues/statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationWebchatQueueStatusesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * Retrieve a conversation webchat queue statuses
     */
    async getConversationWebchatQueueStatuses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationWebchatQueueStatusesResponse> {
        const response = await this.getConversationWebchatQueueStatusesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * Retrieve a list of conversation summaries newest to oldest
     */
    async getConversationsRaw(requestParameters: GetConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.medium !== undefined) {
            queryParameters['medium'] = requestParameters.medium;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * Retrieve a list of conversation summaries newest to oldest
     */
    async getConversations(requestParameters: GetConversationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationsResponse> {
        const response = await this.getConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of matching terms for a search field 
     * Retrieve a list of matching terms for a search field
     */
    async getConversationsAutocompleteRaw(requestParameters: GetConversationsAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAutocompleteResponse>> {
        if (requestParameters.autocompleteRequest === null || requestParameters.autocompleteRequest === undefined) {
            throw new runtime.RequiredError('autocompleteRequest','Required parameter requestParameters.autocompleteRequest was null or undefined when calling getConversationsAutocomplete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/autocomplete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationAutocompleteRequestToJSON(requestParameters.autocompleteRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationAutocompleteResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of matching terms for a search field 
     * Retrieve a list of matching terms for a search field
     */
    async getConversationsAutocomplete(requestParameters: GetConversationsAutocompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAutocompleteResponse> {
        const response = await this.getConversationsAutocompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search conversations 
     * Search conversations
     */
    async getConversationsSearchRaw(requestParameters: GetConversationsSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationSearchResponse>> {
        if (requestParameters.searchRequest === null || requestParameters.searchRequest === undefined) {
            throw new runtime.RequiredError('searchRequest','Required parameter requestParameters.searchRequest was null or undefined when calling getConversationsSearch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationSearchRequestToJSON(requestParameters.searchRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search conversations 
     * Search conversations
     */
    async getConversationsSearch(requestParameters: GetConversationsSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationSearchResponse> {
        const response = await this.getConversationsSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get location data for engagement configuration 
     * Get location data for engagement configuration
     */
    async getLocationsForEngagementRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationLocationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationLocationsResponseFromJSON(jsonValue));
    }

    /**
     * Get location data for engagement configuration 
     * Get location data for engagement configuration
     */
    async getLocationsForEngagement(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationLocationsResponse> {
        const response = await this.getLocationsForEngagementRaw(initOverrides);
        return await response.value();
    }

    /**
     * Insert a canned message 
     * Insert a canned message
     */
    async insertConversationCannedMessageRaw(requestParameters: InsertConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessageResponse>> {
        if (requestParameters.cannedMessage === null || requestParameters.cannedMessage === undefined) {
            throw new runtime.RequiredError('cannedMessage','Required parameter requestParameters.cannedMessage was null or undefined when calling insertConversationCannedMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/canned_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationCannedMessageToJSON(requestParameters.cannedMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationCannedMessageResponseFromJSON(jsonValue));
    }

    /**
     * Insert a canned message 
     * Insert a canned message
     */
    async insertConversationCannedMessage(requestParameters: InsertConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessageResponse> {
        const response = await this.insertConversationCannedMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert a department 
     * Insert a department
     */
    async insertConversationDepartmentRaw(requestParameters: InsertConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentResponse>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling insertConversationDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationDepartmentToJSON(requestParameters.department),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDepartmentResponseFromJSON(jsonValue));
    }

    /**
     * Insert a department 
     * Insert a department
     */
    async insertConversationDepartment(requestParameters: InsertConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentResponse> {
        const response = await this.insertConversationDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert a engagement 
     * Insert a engagement
     */
    async insertConversationEngagementRaw(requestParameters: InsertConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementResponse>> {
        if (requestParameters.engagement === null || requestParameters.engagement === undefined) {
            throw new runtime.RequiredError('engagement','Required parameter requestParameters.engagement was null or undefined when calling insertConversationEngagement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/engagements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationEngagementToJSON(requestParameters.engagement),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationEngagementResponseFromJSON(jsonValue));
    }

    /**
     * Insert a engagement 
     * Insert a engagement
     */
    async insertConversationEngagement(requestParameters: InsertConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementResponse> {
        const response = await this.insertConversationEngagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Join a conversation 
     * Join a conversation
     */
    async joinConversationRaw(requestParameters: JoinConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling joinConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}/join`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationJoinRequestToJSON(requestParameters.joinRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Join a conversation 
     * Join a conversation
     */
    async joinConversation(requestParameters: JoinConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.joinConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Leave a conversation 
     * Leave a conversation
     */
    async leaveConversationRaw(requestParameters: LeaveConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling leaveConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}/leave`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Leave a conversation 
     * Leave a conversation
     */
    async leaveConversation(requestParameters: LeaveConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.leaveConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Mark a conversation as read 
     * Mark a conversation as read
     */
    async markReadConversationRaw(requestParameters: MarkReadConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling markReadConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}/markread`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark a conversation as read 
     * Mark a conversation as read
     */
    async markReadConversation(requestParameters: MarkReadConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.markReadConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Search for canned messages by short_code 
     * Search for canned messages by short_code
     */
    async searchConversationCannedMessagesRaw(requestParameters: SearchConversationCannedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessagesResponse>> {
        if (requestParameters.searchRequest === null || requestParameters.searchRequest === undefined) {
            throw new runtime.RequiredError('searchRequest','Required parameter requestParameters.searchRequest was null or undefined when calling searchConversationCannedMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/canned_messages/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationCannedMessagesSearchToJSON(requestParameters.searchRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationCannedMessagesResponseFromJSON(jsonValue));
    }

    /**
     * Search for canned messages by short_code 
     * Search for canned messages by short_code
     */
    async searchConversationCannedMessages(requestParameters: SearchConversationCannedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessagesResponse> {
        const response = await this.searchConversationCannedMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unsubscribe any SMS participants in this conversation 
     * Unsubscribe any SMS participants in this conversation
     */
    async smsUnsubscribeConversationRaw(requestParameters: SmsUnsubscribeConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conversationUuid === null || requestParameters.conversationUuid === undefined) {
            throw new runtime.RequiredError('conversationUuid','Required parameter requestParameters.conversationUuid was null or undefined when calling smsUnsubscribeConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/{conversation_uuid}/sms_unsubscribe`.replace(`{${"conversation_uuid"}}`, encodeURIComponent(String(requestParameters.conversationUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unsubscribe any SMS participants in this conversation 
     * Unsubscribe any SMS participants in this conversation
     */
    async smsUnsubscribeConversation(requestParameters: SmsUnsubscribeConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.smsUnsubscribeConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Start a new conversation 
     * Start a conversation
     */
    async startConversationRaw(requestParameters: StartConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationStartResponse>> {
        if (requestParameters.startRequest === null || requestParameters.startRequest === undefined) {
            throw new runtime.RequiredError('startRequest','Required parameter requestParameters.startRequest was null or undefined when calling startConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationStartRequestToJSON(requestParameters.startRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationStartResponseFromJSON(jsonValue));
    }

    /**
     * Start a new conversation 
     * Start a conversation
     */
    async startConversation(requestParameters: StartConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationStartResponse> {
        const response = await this.startConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update agent profile 
     * Update agent profile
     */
    async updateAgentProfileRaw(requestParameters: UpdateAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationAgentProfileResponse>> {
        if (requestParameters.profileRequest === null || requestParameters.profileRequest === undefined) {
            throw new runtime.RequiredError('profileRequest','Required parameter requestParameters.profileRequest was null or undefined when calling updateAgentProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/agent/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationAgentProfileToJSON(requestParameters.profileRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationAgentProfileResponseFromJSON(jsonValue));
    }

    /**
     * Update agent profile 
     * Update agent profile
     */
    async updateAgentProfile(requestParameters: UpdateAgentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationAgentProfileResponse> {
        const response = await this.updateAgentProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a canned message 
     * Update a canned message
     */
    async updateConversationCannedMessageRaw(requestParameters: UpdateConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationCannedMessageResponse>> {
        if (requestParameters.conversationCannedMessageOid === null || requestParameters.conversationCannedMessageOid === undefined) {
            throw new runtime.RequiredError('conversationCannedMessageOid','Required parameter requestParameters.conversationCannedMessageOid was null or undefined when calling updateConversationCannedMessage.');
        }

        if (requestParameters.cannedMessage === null || requestParameters.cannedMessage === undefined) {
            throw new runtime.RequiredError('cannedMessage','Required parameter requestParameters.cannedMessage was null or undefined when calling updateConversationCannedMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/canned_messages/{conversation_canned_message_oid}`.replace(`{${"conversation_canned_message_oid"}}`, encodeURIComponent(String(requestParameters.conversationCannedMessageOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationCannedMessageToJSON(requestParameters.cannedMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationCannedMessageResponseFromJSON(jsonValue));
    }

    /**
     * Update a canned message 
     * Update a canned message
     */
    async updateConversationCannedMessage(requestParameters: UpdateConversationCannedMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationCannedMessageResponse> {
        const response = await this.updateConversationCannedMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a department 
     * Update a department
     */
    async updateConversationDepartmentRaw(requestParameters: UpdateConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationDepartmentResponse>> {
        if (requestParameters.conversationDepartmentOid === null || requestParameters.conversationDepartmentOid === undefined) {
            throw new runtime.RequiredError('conversationDepartmentOid','Required parameter requestParameters.conversationDepartmentOid was null or undefined when calling updateConversationDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateConversationDepartment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/departments/{conversation_department_oid}`.replace(`{${"conversation_department_oid"}}`, encodeURIComponent(String(requestParameters.conversationDepartmentOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationDepartmentToJSON(requestParameters.department),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationDepartmentResponseFromJSON(jsonValue));
    }

    /**
     * Update a department 
     * Update a department
     */
    async updateConversationDepartment(requestParameters: UpdateConversationDepartmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationDepartmentResponse> {
        const response = await this.updateConversationDepartmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a engagement 
     * Update a engagement
     */
    async updateConversationEngagementRaw(requestParameters: UpdateConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationEngagementResponse>> {
        if (requestParameters.conversationEngagementOid === null || requestParameters.conversationEngagementOid === undefined) {
            throw new runtime.RequiredError('conversationEngagementOid','Required parameter requestParameters.conversationEngagementOid was null or undefined when calling updateConversationEngagement.');
        }

        if (requestParameters.engagement === null || requestParameters.engagement === undefined) {
            throw new runtime.RequiredError('engagement','Required parameter requestParameters.engagement was null or undefined when calling updateConversationEngagement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/engagements/{conversation_engagement_oid}`.replace(`{${"conversation_engagement_oid"}}`, encodeURIComponent(String(requestParameters.conversationEngagementOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationEngagementToJSON(requestParameters.engagement),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationEngagementResponseFromJSON(jsonValue));
    }

    /**
     * Update a engagement 
     * Update a engagement
     */
    async updateConversationEngagement(requestParameters: UpdateConversationEngagementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationEngagementResponse> {
        const response = await this.updateConversationEngagementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update status within the queue 
     * Update status within the queue
     */
    async updateConversationWebchatQueueStatusRaw(requestParameters: UpdateConversationWebchatQueueStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.queueName === null || requestParameters.queueName === undefined) {
            throw new runtime.RequiredError('queueName','Required parameter requestParameters.queueName was null or undefined when calling updateConversationWebchatQueueStatus.');
        }

        if (requestParameters.statusRequest === null || requestParameters.statusRequest === undefined) {
            throw new runtime.RequiredError('statusRequest','Required parameter requestParameters.statusRequest was null or undefined when calling updateConversationWebchatQueueStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["conversation_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/conversation/conversations/queues/{queue_name}/status`.replace(`{${"queue_name"}}`, encodeURIComponent(String(requestParameters.queueName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationWebchatQueueStatusUpdateRequestToJSON(requestParameters.statusRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update status within the queue 
     * Update status within the queue
     */
    async updateConversationWebchatQueueStatus(requestParameters: UpdateConversationWebchatQueueStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateConversationWebchatQueueStatusRaw(requestParameters, initOverrides);
    }

}

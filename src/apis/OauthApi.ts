/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OauthRevokeSuccessResponse,
    OauthRevokeSuccessResponseFromJSON,
    OauthRevokeSuccessResponseToJSON,
    OauthTokenResponse,
    OauthTokenResponseFromJSON,
    OauthTokenResponseToJSON,
} from '../models';

export interface OauthAccessTokenRequest {
    clientId: string;
    grantType: string;
    code?: string;
    redirectUri?: string;
    refreshToken?: string;
}

export interface OauthRevokeRequest {
    clientId: string;
    token: string;
}

/**
 * OauthApi - interface
 * 
 * @export
 * @interface OauthApiInterface
 */
export interface OauthApiInterface {
    /**
     * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls. 
     * @summary Exchange authorization code for access token.
     * @param {string} clientId The OAuth application client_id.
     * @param {string} grantType Type of grant
     * @param {string} [code] Authorization code received back from the browser redirect
     * @param {string} [redirectUri] The URI that you redirect the browser to to start the authorization process
     * @param {string} [refreshToken] The refresh token received during the original grant_type&#x3D;authorization_code that can be used to return a new access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApiInterface
     */
    oauthAccessTokenRaw(requestParameters: OauthAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthTokenResponse>>;

    /**
     * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls. 
     * Exchange authorization code for access token.
     */
    oauthAccessToken(requestParameters: OauthAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthTokenResponse>;

    /**
     * Revokes the OAuth application associated with the specified client_id and token. 
     * @summary Revoke this OAuth application.
     * @param {string} clientId The OAuth application client_id.
     * @param {string} token The OAuth access token that is to be revoked..
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApiInterface
     */
    oauthRevokeRaw(requestParameters: OauthRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthRevokeSuccessResponse>>;

    /**
     * Revokes the OAuth application associated with the specified client_id and token. 
     * Revoke this OAuth application.
     */
    oauthRevoke(requestParameters: OauthRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthRevokeSuccessResponse>;

}

/**
 * 
 */
export class OauthApi extends runtime.BaseAPI implements OauthApiInterface {

    /**
     * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls. 
     * Exchange authorization code for access token.
     */
    async oauthAccessTokenRaw(requestParameters: OauthAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthTokenResponse>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling oauthAccessToken.');
        }

        if (requestParameters.grantType === null || requestParameters.grantType === undefined) {
            throw new runtime.RequiredError('grantType','Required parameter requestParameters.grantType was null or undefined when calling oauthAccessToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read", "affiliate_write", "auto_order_read", "auto_order_write", "channel_partner_read", "channel_partner_write", "chargeback_read", "chargeback_write", "checkout_read", "checkout_write", "configuration_read", "configuration_write", "conversation_read", "conversation_write", "coupon_read", "coupon_write", "customer_read", "customer_write", "fulfillment_read", "fulfillment_write", "gift_certificate_read", "gift_certificate_write", "integration_log_read", "integration_log_write", "order_read", "order_write", "item_read", "item_write", "storefront_read", "storefront_write", "tax_read", "tax_write", "webhook_read", "webhook_write", "ultrabooks_read", "ultrabooks_write", "user_read", "user_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.code !== undefined) {
            formParams.append('code', requestParameters.code as any);
        }

        if (requestParameters.redirectUri !== undefined) {
            formParams.append('redirect_uri', requestParameters.redirectUri as any);
        }

        if (requestParameters.refreshToken !== undefined) {
            formParams.append('refresh_token', requestParameters.refreshToken as any);
        }

        const response = await this.request({
            path: `/oauth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OauthTokenResponseFromJSON(jsonValue));
    }

    /**
     * The final leg in the OAuth process which exchanges the specified access token for the access code needed to make API calls. 
     * Exchange authorization code for access token.
     */
    async oauthAccessToken(requestParameters: OauthAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthTokenResponse> {
        const response = await this.oauthAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revokes the OAuth application associated with the specified client_id and token. 
     * Revoke this OAuth application.
     */
    async oauthRevokeRaw(requestParameters: OauthRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OauthRevokeSuccessResponse>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling oauthRevoke.');
        }

        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling oauthRevoke.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read", "affiliate_write", "auto_order_read", "auto_order_write", "channel_partner_read", "channel_partner_write", "chargeback_read", "chargeback_write", "checkout_read", "checkout_write", "configuration_read", "configuration_write", "conversation_read", "conversation_write", "coupon_read", "coupon_write", "customer_read", "customer_write", "fulfillment_read", "fulfillment_write", "gift_certificate_read", "gift_certificate_write", "integration_log_read", "integration_log_write", "order_read", "order_write", "item_read", "item_write", "storefront_read", "storefront_write", "tax_read", "tax_write", "webhook_read", "webhook_write", "ultrabooks_read", "ultrabooks_write", "user_read", "user_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.token !== undefined) {
            formParams.append('token', requestParameters.token as any);
        }

        const response = await this.request({
            path: `/oauth/revoke`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OauthRevokeSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Revokes the OAuth application associated with the specified client_id and token. 
     * Revoke this OAuth application.
     */
    async oauthRevoke(requestParameters: OauthRevokeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OauthRevokeSuccessResponse> {
        const response = await this.oauthRevokeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Report,
    ReportFromJSON,
    ReportToJSON,
    ReportAuthResponse,
    ReportAuthResponseFromJSON,
    ReportAuthResponseToJSON,
    ReportDataSetPageResponse,
    ReportDataSetPageResponseFromJSON,
    ReportDataSetPageResponseToJSON,
    ReportDataSetResponse,
    ReportDataSetResponseFromJSON,
    ReportDataSetResponseToJSON,
    ReportExecuteQueriesRequest,
    ReportExecuteQueriesRequestFromJSON,
    ReportExecuteQueriesRequestToJSON,
    ReportResponse,
    ReportResponseFromJSON,
    ReportResponseToJSON,
    ReportsResponse,
    ReportsResponseFromJSON,
    ReportsResponseToJSON,
} from '../models';

export interface DeleteReportRequest {
    reportOid: number;
}

export interface ExecuteReportQueriesRequest {
    queryRequest: ReportExecuteQueriesRequest;
}

export interface GetReportRequest {
    reportOid: number;
}

export interface GetReportDataSetRequest {
    datasetUuid: string;
}

export interface GetReportDataSetPageRequest {
    datasetUuid: string;
    pageNumber: number;
}

export interface InsertReportRequest {
    report: Report;
}

export interface UpdateReportRequest {
    reportOid: number;
    report: Report;
}

/**
 * DatawarehouseApi - interface
 * 
 * @export
 * @interface DatawarehouseApiInterface
 */
export interface DatawarehouseApiInterface {
    /**
     * Delete a report on the UltraCart account. 
     * @summary Delete a report
     * @param {number} reportOid The report oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    deleteReportRaw(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a report on the UltraCart account. 
     * Delete a report
     */
    deleteReport(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Execute the report queries 
     * @summary Execute the report queries
     * @param {ReportExecuteQueriesRequest} queryRequest Query request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    executeReportQueriesRaw(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Execute the report queries 
     * Execute the report queries
     */
    executeReportQueries(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve a report 
     * @summary Get a report
     * @param {number} reportOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportRaw(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>>;

    /**
     * Retrieve a report 
     * Get a report
     */
    getReport(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse>;

    /**
     * Retrieve a report data set 
     * @summary Get a report data set
     * @param {string} datasetUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportDataSetRaw(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetResponse>>;

    /**
     * Retrieve a report data set 
     * Get a report data set
     */
    getReportDataSet(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetResponse>;

    /**
     * Retrieve a report data set page 
     * @summary Get a report data set page
     * @param {string} datasetUuid 
     * @param {number} pageNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportDataSetPageRaw(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetPageResponse>>;

    /**
     * Retrieve a report data set page 
     * Get a report data set page
     */
    getReportDataSetPage(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetPageResponse>;

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @summary Get report websocket authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportWebsocketAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportAuthResponse>>;

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * Get report websocket authorization
     */
    getReportWebsocketAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportAuthResponse>;

    /**
     * Retrieve a list of reports available 
     * @summary Get list of reports available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportsResponse>>;

    /**
     * Retrieve a list of reports available 
     * Get list of reports available
     */
    getReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportsResponse>;

    /**
     * Create a new report on the UltraCart account. 
     * @summary Create a report
     * @param {Report} report Report to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    insertReportRaw(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>>;

    /**
     * Create a new report on the UltraCart account. 
     * Create a report
     */
    insertReport(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse>;

    /**
     * Update a report on the UltraCart account. 
     * @summary Update a report
     * @param {number} reportOid The report oid to update.
     * @param {Report} report Report to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    updateReportRaw(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>>;

    /**
     * Update a report on the UltraCart account. 
     * Update a report
     */
    updateReport(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse>;

}

/**
 * 
 */
export class DatawarehouseApi extends runtime.BaseAPI implements DatawarehouseApiInterface {

    /**
     * Delete a report on the UltraCart account. 
     * Delete a report
     */
    async deleteReportRaw(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reportOid === null || requestParameters.reportOid === undefined) {
            throw new runtime.RequiredError('reportOid','Required parameter requestParameters.reportOid was null or undefined when calling deleteReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/{report_oid}`.replace(`{${"report_oid"}}`, encodeURIComponent(String(requestParameters.reportOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a report on the UltraCart account. 
     * Delete a report
     */
    async deleteReport(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReportRaw(requestParameters, initOverrides);
    }

    /**
     * Execute the report queries 
     * Execute the report queries
     */
    async executeReportQueriesRaw(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
            throw new runtime.RequiredError('queryRequest','Required parameter requestParameters.queryRequest was null or undefined when calling executeReportQueries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/execute`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportExecuteQueriesRequestToJSON(requestParameters.queryRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Execute the report queries 
     * Execute the report queries
     */
    async executeReportQueries(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.executeReportQueriesRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a report 
     * Get a report
     */
    async getReportRaw(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>> {
        if (requestParameters.reportOid === null || requestParameters.reportOid === undefined) {
            throw new runtime.RequiredError('reportOid','Required parameter requestParameters.reportOid was null or undefined when calling getReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/{report_oid}`.replace(`{${"report_oid"}}`, encodeURIComponent(String(requestParameters.reportOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a report 
     * Get a report
     */
    async getReport(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse> {
        const response = await this.getReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a report data set 
     * Get a report data set
     */
    async getReportDataSetRaw(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetResponse>> {
        if (requestParameters.datasetUuid === null || requestParameters.datasetUuid === undefined) {
            throw new runtime.RequiredError('datasetUuid','Required parameter requestParameters.datasetUuid was null or undefined when calling getReportDataSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/dataset/{dataset_uuid}`.replace(`{${"dataset_uuid"}}`, encodeURIComponent(String(requestParameters.datasetUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDataSetResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a report data set 
     * Get a report data set
     */
    async getReportDataSet(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetResponse> {
        const response = await this.getReportDataSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a report data set page 
     * Get a report data set page
     */
    async getReportDataSetPageRaw(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetPageResponse>> {
        if (requestParameters.datasetUuid === null || requestParameters.datasetUuid === undefined) {
            throw new runtime.RequiredError('datasetUuid','Required parameter requestParameters.datasetUuid was null or undefined when calling getReportDataSetPage.');
        }

        if (requestParameters.pageNumber === null || requestParameters.pageNumber === undefined) {
            throw new runtime.RequiredError('pageNumber','Required parameter requestParameters.pageNumber was null or undefined when calling getReportDataSetPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}`.replace(`{${"dataset_uuid"}}`, encodeURIComponent(String(requestParameters.datasetUuid))).replace(`{${"page_number"}}`, encodeURIComponent(String(requestParameters.pageNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDataSetPageResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a report data set page 
     * Get a report data set page
     */
    async getReportDataSetPage(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetPageResponse> {
        const response = await this.getReportDataSetPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * Get report websocket authorization
     */
    async getReportWebsocketAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportAuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/auth`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportAuthResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * Get report websocket authorization
     */
    async getReportWebsocketAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportAuthResponse> {
        const response = await this.getReportWebsocketAuthorizationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of reports available 
     * Get list of reports available
     */
    async getReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of reports available 
     * Get list of reports available
     */
    async getReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportsResponse> {
        const response = await this.getReportsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new report on the UltraCart account. 
     * Create a report
     */
    async insertReportRaw(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>> {
        if (requestParameters.report === null || requestParameters.report === undefined) {
            throw new runtime.RequiredError('report','Required parameter requestParameters.report was null or undefined when calling insertReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportToJSON(requestParameters.report),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportResponseFromJSON(jsonValue));
    }

    /**
     * Create a new report on the UltraCart account. 
     * Create a report
     */
    async insertReport(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse> {
        const response = await this.insertReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a report on the UltraCart account. 
     * Update a report
     */
    async updateReportRaw(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>> {
        if (requestParameters.reportOid === null || requestParameters.reportOid === undefined) {
            throw new runtime.RequiredError('reportOid','Required parameter requestParameters.reportOid was null or undefined when calling updateReport.');
        }

        if (requestParameters.report === null || requestParameters.report === undefined) {
            throw new runtime.RequiredError('report','Required parameter requestParameters.report was null or undefined when calling updateReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/{report_oid}`.replace(`{${"report_oid"}}`, encodeURIComponent(String(requestParameters.reportOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportToJSON(requestParameters.report),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportResponseFromJSON(jsonValue));
    }

    /**
     * Update a report on the UltraCart account. 
     * Update a report
     */
    async updateReport(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse> {
        const response = await this.updateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

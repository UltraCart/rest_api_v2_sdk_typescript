/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomDashboard,
    CustomDashboardFromJSON,
    CustomDashboardToJSON,
    CustomDashboardResponse,
    CustomDashboardResponseFromJSON,
    CustomDashboardResponseToJSON,
    CustomDashboardsResponse,
    CustomDashboardsResponseFromJSON,
    CustomDashboardsResponseToJSON,
    CustomReport,
    CustomReportFromJSON,
    CustomReportToJSON,
    CustomReportAccountConfig,
    CustomReportAccountConfigFromJSON,
    CustomReportAccountConfigToJSON,
    CustomReportAccountConfigResponse,
    CustomReportAccountConfigResponseFromJSON,
    CustomReportAccountConfigResponseToJSON,
    CustomReportExecutionRequest,
    CustomReportExecutionRequestFromJSON,
    CustomReportExecutionRequestToJSON,
    CustomReportExecutionResponse,
    CustomReportExecutionResponseFromJSON,
    CustomReportExecutionResponseToJSON,
    CustomReportResponse,
    CustomReportResponseFromJSON,
    CustomReportResponseToJSON,
    CustomReportsExecutionRequest,
    CustomReportsExecutionRequestFromJSON,
    CustomReportsExecutionRequestToJSON,
    CustomReportsExecutionResponse,
    CustomReportsExecutionResponseFromJSON,
    CustomReportsExecutionResponseToJSON,
    CustomReportsResponse,
    CustomReportsResponseFromJSON,
    CustomReportsResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Report,
    ReportFromJSON,
    ReportToJSON,
    ReportAuthResponse,
    ReportAuthResponseFromJSON,
    ReportAuthResponseToJSON,
    ReportDataSetPageResponse,
    ReportDataSetPageResponseFromJSON,
    ReportDataSetPageResponseToJSON,
    ReportDataSetResponse,
    ReportDataSetResponseFromJSON,
    ReportDataSetResponseToJSON,
    ReportDryRunQueriesRequest,
    ReportDryRunQueriesRequestFromJSON,
    ReportDryRunQueriesRequestToJSON,
    ReportDryRunQueriesResponse,
    ReportDryRunQueriesResponseFromJSON,
    ReportDryRunQueriesResponseToJSON,
    ReportExecuteQueriesRequest,
    ReportExecuteQueriesRequestFromJSON,
    ReportExecuteQueriesRequestToJSON,
    ReportResponse,
    ReportResponseFromJSON,
    ReportResponseToJSON,
    ReportsResponse,
    ReportsResponseFromJSON,
    ReportsResponseToJSON,
} from '../models';

export interface DeleteCustomDashboardRequest {
    customDashboardOid: number;
}

export interface DeleteCustomReportRequest {
    customReportOid: number;
}

export interface DeleteReportRequest {
    reportOid: number;
}

export interface DryRunReportQueriesRequest {
    queryRequest: ReportDryRunQueriesRequest;
}

export interface ExecuteCustomReportRequest {
    customReportOid: number;
    executionRequest: CustomReportExecutionRequest;
}

export interface ExecuteCustomReportsRequest {
    executionRequest: CustomReportsExecutionRequest;
}

export interface ExecuteReportQueriesRequest {
    queryRequest: ReportExecuteQueriesRequest;
}

export interface GetCustomDashboardRequest {
    customDashboardOid: number;
}

export interface GetCustomReportRequest {
    customReportOid: number;
}

export interface GetReportRequest {
    reportOid: number;
}

export interface GetReportDataSetRequest {
    datasetUuid: string;
}

export interface GetReportDataSetPageRequest {
    datasetUuid: string;
    pageNumber: number;
}

export interface InsertCustomDashboardRequest {
    dashboard: CustomDashboard;
}

export interface InsertCustomReportRequest {
    report: CustomReport;
}

export interface InsertReportRequest {
    report: Report;
}

export interface UpdateCustomDashboardRequest {
    customDashboardOid: number;
    dashboard: CustomDashboard;
}

export interface UpdateCustomReportRequest {
    customReportOid: number;
    report: CustomReport;
}

export interface UpdateCustomReportAccountConfigRequest {
    accountConfig: CustomReportAccountConfig;
}

export interface UpdateReportRequest {
    reportOid: number;
    report: Report;
}

/**
 * DatawarehouseApi - interface
 * 
 * @export
 * @interface DatawarehouseApiInterface
 */
export interface DatawarehouseApiInterface {
    /**
     * Delete a custom dashboard on the UltraCart account. 
     * @summary Delete a custom dashboard
     * @param {number} customDashboardOid The dashboard oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    deleteCustomDashboardRaw(requestParameters: DeleteCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a custom dashboard on the UltraCart account. 
     * Delete a custom dashboard
     */
    deleteCustomDashboard(requestParameters: DeleteCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete a custom report on the UltraCart account. 
     * @summary Delete a custom report
     * @param {number} customReportOid The report oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    deleteCustomReportRaw(requestParameters: DeleteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a custom report on the UltraCart account. 
     * Delete a custom report
     */
    deleteCustomReport(requestParameters: DeleteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete a report on the UltraCart account. 
     * @summary Delete a report
     * @param {number} reportOid The report oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    deleteReportRaw(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a report on the UltraCart account. 
     * Delete a report
     */
    deleteReport(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Dry run the report queries 
     * @summary Dry run the report queries
     * @param {ReportDryRunQueriesRequest} queryRequest Dry run request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    dryRunReportQueriesRaw(requestParameters: DryRunReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDryRunQueriesResponse>>;

    /**
     * Dry run the report queries 
     * Dry run the report queries
     */
    dryRunReportQueries(requestParameters: DryRunReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDryRunQueriesResponse>;

    /**
     * Execute a custom report on the UltraCart account. 
     * @summary Execute a custom report
     * @param {number} customReportOid The report oid to execute.
     * @param {CustomReportExecutionRequest} executionRequest Request to execute custom report
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    executeCustomReportRaw(requestParameters: ExecuteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportExecutionResponse>>;

    /**
     * Execute a custom report on the UltraCart account. 
     * Execute a custom report
     */
    executeCustomReport(requestParameters: ExecuteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportExecutionResponse>;

    /**
     * Execute a custom reports on the UltraCart account. 
     * @summary Execute a custom reports
     * @param {CustomReportsExecutionRequest} executionRequest Request to execute custom reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    executeCustomReportsRaw(requestParameters: ExecuteCustomReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportsExecutionResponse>>;

    /**
     * Execute a custom reports on the UltraCart account. 
     * Execute a custom reports
     */
    executeCustomReports(requestParameters: ExecuteCustomReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportsExecutionResponse>;

    /**
     * Execute the report queries 
     * @summary Execute the report queries
     * @param {ReportExecuteQueriesRequest} queryRequest Query request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    executeReportQueriesRaw(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Execute the report queries 
     * Execute the report queries
     */
    executeReportQueries(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieve a custom dashboard 
     * @summary Get a custom dashboard
     * @param {number} customDashboardOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getCustomDashboardRaw(requestParameters: GetCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardResponse>>;

    /**
     * Retrieve a custom dashboard 
     * Get a custom dashboard
     */
    getCustomDashboard(requestParameters: GetCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardResponse>;

    /**
     * Retrieve a custom dashboards 
     * @summary Get custom dashboards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getCustomDashboardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardsResponse>>;

    /**
     * Retrieve a custom dashboards 
     * Get custom dashboards
     */
    getCustomDashboards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardsResponse>;

    /**
     * Retrieve a custom report 
     * @summary Get a custom report
     * @param {number} customReportOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getCustomReportRaw(requestParameters: GetCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportResponse>>;

    /**
     * Retrieve a custom report 
     * Get a custom report
     */
    getCustomReport(requestParameters: GetCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportResponse>;

    /**
     * Retrieve a custom report account configuration 
     * @summary Get custom report account configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getCustomReportAccountConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportAccountConfigResponse>>;

    /**
     * Retrieve a custom report account configuration 
     * Get custom report account configuration
     */
    getCustomReportAccountConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportAccountConfigResponse>;

    /**
     * Retrieve a custom reports 
     * @summary Get custom reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getCustomReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportsResponse>>;

    /**
     * Retrieve a custom reports 
     * Get custom reports
     */
    getCustomReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportsResponse>;

    /**
     * Retrieve a report 
     * @summary Get a report
     * @param {number} reportOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportRaw(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>>;

    /**
     * Retrieve a report 
     * Get a report
     */
    getReport(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse>;

    /**
     * Retrieve a report data set 
     * @summary Get a report data set
     * @param {string} datasetUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportDataSetRaw(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetResponse>>;

    /**
     * Retrieve a report data set 
     * Get a report data set
     */
    getReportDataSet(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetResponse>;

    /**
     * Retrieve a report data set page 
     * @summary Get a report data set page
     * @param {string} datasetUuid 
     * @param {number} pageNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportDataSetPageRaw(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetPageResponse>>;

    /**
     * Retrieve a report data set page 
     * Get a report data set page
     */
    getReportDataSetPage(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetPageResponse>;

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @summary Get report websocket authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportWebsocketAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportAuthResponse>>;

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * Get report websocket authorization
     */
    getReportWebsocketAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportAuthResponse>;

    /**
     * Retrieve a list of reports available 
     * @summary Get list of reports available
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    getReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportsResponse>>;

    /**
     * Retrieve a list of reports available 
     * Get list of reports available
     */
    getReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportsResponse>;

    /**
     * Create a new custom dashboard on the UltraCart account. 
     * @summary Create a custom dashboard
     * @param {CustomDashboard} dashboard Dashboard to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    insertCustomDashboardRaw(requestParameters: InsertCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardResponse>>;

    /**
     * Create a new custom dashboard on the UltraCart account. 
     * Create a custom dashboard
     */
    insertCustomDashboard(requestParameters: InsertCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardResponse>;

    /**
     * Create a new custom report on the UltraCart account. 
     * @summary Create a custom report
     * @param {CustomReport} report Report to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    insertCustomReportRaw(requestParameters: InsertCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportResponse>>;

    /**
     * Create a new custom report on the UltraCart account. 
     * Create a custom report
     */
    insertCustomReport(requestParameters: InsertCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportResponse>;

    /**
     * Create a new report on the UltraCart account. 
     * @summary Create a report
     * @param {Report} report Report to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    insertReportRaw(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>>;

    /**
     * Create a new report on the UltraCart account. 
     * Create a report
     */
    insertReport(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse>;

    /**
     * Update a custom dashboard on the UltraCart account. 
     * @summary Update a custom dashboard
     * @param {number} customDashboardOid The dashboard oid to custom update.
     * @param {CustomDashboard} dashboard Dashboard to custom update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    updateCustomDashboardRaw(requestParameters: UpdateCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardResponse>>;

    /**
     * Update a custom dashboard on the UltraCart account. 
     * Update a custom dashboard
     */
    updateCustomDashboard(requestParameters: UpdateCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardResponse>;

    /**
     * Update a custom report on the UltraCart account. 
     * @summary Update a custom report
     * @param {number} customReportOid The report oid to custom update.
     * @param {CustomReport} report Report to custom update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    updateCustomReportRaw(requestParameters: UpdateCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportResponse>>;

    /**
     * Update a custom report on the UltraCart account. 
     * Update a custom report
     */
    updateCustomReport(requestParameters: UpdateCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportResponse>;

    /**
     * Update custom report account config. 
     * @summary Update custom report account config
     * @param {CustomReportAccountConfig} accountConfig Account config to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    updateCustomReportAccountConfigRaw(requestParameters: UpdateCustomReportAccountConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportAccountConfigResponse>>;

    /**
     * Update custom report account config. 
     * Update custom report account config
     */
    updateCustomReportAccountConfig(requestParameters: UpdateCustomReportAccountConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportAccountConfigResponse>;

    /**
     * Update a report on the UltraCart account. 
     * @summary Update a report
     * @param {number} reportOid The report oid to update.
     * @param {Report} report Report to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatawarehouseApiInterface
     */
    updateReportRaw(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>>;

    /**
     * Update a report on the UltraCart account. 
     * Update a report
     */
    updateReport(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse>;

}

/**
 * 
 */
export class DatawarehouseApi extends runtime.BaseAPI implements DatawarehouseApiInterface {

    /**
     * Delete a custom dashboard on the UltraCart account. 
     * Delete a custom dashboard
     */
    async deleteCustomDashboardRaw(requestParameters: DeleteCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customDashboardOid === null || requestParameters.customDashboardOid === undefined) {
            throw new runtime.RequiredError('customDashboardOid','Required parameter requestParameters.customDashboardOid was null or undefined when calling deleteCustomDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_dashboards/{custom_dashboard_oid}`.replace(`{${"custom_dashboard_oid"}}`, encodeURIComponent(String(requestParameters.customDashboardOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a custom dashboard on the UltraCart account. 
     * Delete a custom dashboard
     */
    async deleteCustomDashboard(requestParameters: DeleteCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomDashboardRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a custom report on the UltraCart account. 
     * Delete a custom report
     */
    async deleteCustomReportRaw(requestParameters: DeleteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customReportOid === null || requestParameters.customReportOid === undefined) {
            throw new runtime.RequiredError('customReportOid','Required parameter requestParameters.customReportOid was null or undefined when calling deleteCustomReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/{custom_report_oid}`.replace(`{${"custom_report_oid"}}`, encodeURIComponent(String(requestParameters.customReportOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a custom report on the UltraCart account. 
     * Delete a custom report
     */
    async deleteCustomReport(requestParameters: DeleteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomReportRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a report on the UltraCart account. 
     * Delete a report
     */
    async deleteReportRaw(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reportOid === null || requestParameters.reportOid === undefined) {
            throw new runtime.RequiredError('reportOid','Required parameter requestParameters.reportOid was null or undefined when calling deleteReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/{report_oid}`.replace(`{${"report_oid"}}`, encodeURIComponent(String(requestParameters.reportOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a report on the UltraCart account. 
     * Delete a report
     */
    async deleteReport(requestParameters: DeleteReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReportRaw(requestParameters, initOverrides);
    }

    /**
     * Dry run the report queries 
     * Dry run the report queries
     */
    async dryRunReportQueriesRaw(requestParameters: DryRunReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDryRunQueriesResponse>> {
        if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
            throw new runtime.RequiredError('queryRequest','Required parameter requestParameters.queryRequest was null or undefined when calling dryRunReportQueries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/dryrun`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportDryRunQueriesRequestToJSON(requestParameters.queryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDryRunQueriesResponseFromJSON(jsonValue));
    }

    /**
     * Dry run the report queries 
     * Dry run the report queries
     */
    async dryRunReportQueries(requestParameters: DryRunReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDryRunQueriesResponse> {
        const response = await this.dryRunReportQueriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a custom report on the UltraCart account. 
     * Execute a custom report
     */
    async executeCustomReportRaw(requestParameters: ExecuteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportExecutionResponse>> {
        if (requestParameters.customReportOid === null || requestParameters.customReportOid === undefined) {
            throw new runtime.RequiredError('customReportOid','Required parameter requestParameters.customReportOid was null or undefined when calling executeCustomReport.');
        }

        if (requestParameters.executionRequest === null || requestParameters.executionRequest === undefined) {
            throw new runtime.RequiredError('executionRequest','Required parameter requestParameters.executionRequest was null or undefined when calling executeCustomReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/{custom_report_oid}/execute`.replace(`{${"custom_report_oid"}}`, encodeURIComponent(String(requestParameters.customReportOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomReportExecutionRequestToJSON(requestParameters.executionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportExecutionResponseFromJSON(jsonValue));
    }

    /**
     * Execute a custom report on the UltraCart account. 
     * Execute a custom report
     */
    async executeCustomReport(requestParameters: ExecuteCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportExecutionResponse> {
        const response = await this.executeCustomReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a custom reports on the UltraCart account. 
     * Execute a custom reports
     */
    async executeCustomReportsRaw(requestParameters: ExecuteCustomReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportsExecutionResponse>> {
        if (requestParameters.executionRequest === null || requestParameters.executionRequest === undefined) {
            throw new runtime.RequiredError('executionRequest','Required parameter requestParameters.executionRequest was null or undefined when calling executeCustomReports.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/execute`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomReportsExecutionRequestToJSON(requestParameters.executionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportsExecutionResponseFromJSON(jsonValue));
    }

    /**
     * Execute a custom reports on the UltraCart account. 
     * Execute a custom reports
     */
    async executeCustomReports(requestParameters: ExecuteCustomReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportsExecutionResponse> {
        const response = await this.executeCustomReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute the report queries 
     * Execute the report queries
     */
    async executeReportQueriesRaw(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.queryRequest === null || requestParameters.queryRequest === undefined) {
            throw new runtime.RequiredError('queryRequest','Required parameter requestParameters.queryRequest was null or undefined when calling executeReportQueries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/execute`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportExecuteQueriesRequestToJSON(requestParameters.queryRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Execute the report queries 
     * Execute the report queries
     */
    async executeReportQueries(requestParameters: ExecuteReportQueriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.executeReportQueriesRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a custom dashboard 
     * Get a custom dashboard
     */
    async getCustomDashboardRaw(requestParameters: GetCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardResponse>> {
        if (requestParameters.customDashboardOid === null || requestParameters.customDashboardOid === undefined) {
            throw new runtime.RequiredError('customDashboardOid','Required parameter requestParameters.customDashboardOid was null or undefined when calling getCustomDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_dashboards/{custom_dashboard_oid}`.replace(`{${"custom_dashboard_oid"}}`, encodeURIComponent(String(requestParameters.customDashboardOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom dashboard 
     * Get a custom dashboard
     */
    async getCustomDashboard(requestParameters: GetCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardResponse> {
        const response = await this.getCustomDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a custom dashboards 
     * Get custom dashboards
     */
    async getCustomDashboardsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_dashboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomDashboardsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom dashboards 
     * Get custom dashboards
     */
    async getCustomDashboards(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardsResponse> {
        const response = await this.getCustomDashboardsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a custom report 
     * Get a custom report
     */
    async getCustomReportRaw(requestParameters: GetCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportResponse>> {
        if (requestParameters.customReportOid === null || requestParameters.customReportOid === undefined) {
            throw new runtime.RequiredError('customReportOid','Required parameter requestParameters.customReportOid was null or undefined when calling getCustomReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/{custom_report_oid}`.replace(`{${"custom_report_oid"}}`, encodeURIComponent(String(requestParameters.customReportOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom report 
     * Get a custom report
     */
    async getCustomReport(requestParameters: GetCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportResponse> {
        const response = await this.getCustomReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a custom report account configuration 
     * Get custom report account configuration
     */
    async getCustomReportAccountConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportAccountConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/account_config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportAccountConfigResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom report account configuration 
     * Get custom report account configuration
     */
    async getCustomReportAccountConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportAccountConfigResponse> {
        const response = await this.getCustomReportAccountConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a custom reports 
     * Get custom reports
     */
    async getCustomReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom reports 
     * Get custom reports
     */
    async getCustomReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportsResponse> {
        const response = await this.getCustomReportsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a report 
     * Get a report
     */
    async getReportRaw(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>> {
        if (requestParameters.reportOid === null || requestParameters.reportOid === undefined) {
            throw new runtime.RequiredError('reportOid','Required parameter requestParameters.reportOid was null or undefined when calling getReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/{report_oid}`.replace(`{${"report_oid"}}`, encodeURIComponent(String(requestParameters.reportOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a report 
     * Get a report
     */
    async getReport(requestParameters: GetReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse> {
        const response = await this.getReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a report data set 
     * Get a report data set
     */
    async getReportDataSetRaw(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetResponse>> {
        if (requestParameters.datasetUuid === null || requestParameters.datasetUuid === undefined) {
            throw new runtime.RequiredError('datasetUuid','Required parameter requestParameters.datasetUuid was null or undefined when calling getReportDataSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/dataset/{dataset_uuid}`.replace(`{${"dataset_uuid"}}`, encodeURIComponent(String(requestParameters.datasetUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDataSetResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a report data set 
     * Get a report data set
     */
    async getReportDataSet(requestParameters: GetReportDataSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetResponse> {
        const response = await this.getReportDataSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a report data set page 
     * Get a report data set page
     */
    async getReportDataSetPageRaw(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportDataSetPageResponse>> {
        if (requestParameters.datasetUuid === null || requestParameters.datasetUuid === undefined) {
            throw new runtime.RequiredError('datasetUuid','Required parameter requestParameters.datasetUuid was null or undefined when calling getReportDataSetPage.');
        }

        if (requestParameters.pageNumber === null || requestParameters.pageNumber === undefined) {
            throw new runtime.RequiredError('pageNumber','Required parameter requestParameters.pageNumber was null or undefined when calling getReportDataSetPage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}`.replace(`{${"dataset_uuid"}}`, encodeURIComponent(String(requestParameters.datasetUuid))).replace(`{${"page_number"}}`, encodeURIComponent(String(requestParameters.pageNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportDataSetPageResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a report data set page 
     * Get a report data set page
     */
    async getReportDataSetPage(requestParameters: GetReportDataSetPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportDataSetPageResponse> {
        const response = await this.getReportDataSetPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * Get report websocket authorization
     */
    async getReportWebsocketAuthorizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportAuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/auth`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportAuthResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * Get report websocket authorization
     */
    async getReportWebsocketAuthorization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportAuthResponse> {
        const response = await this.getReportWebsocketAuthorizationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of reports available 
     * Get list of reports available
     */
    async getReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of reports available 
     * Get list of reports available
     */
    async getReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportsResponse> {
        const response = await this.getReportsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new custom dashboard on the UltraCart account. 
     * Create a custom dashboard
     */
    async insertCustomDashboardRaw(requestParameters: InsertCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardResponse>> {
        if (requestParameters.dashboard === null || requestParameters.dashboard === undefined) {
            throw new runtime.RequiredError('dashboard','Required parameter requestParameters.dashboard was null or undefined when calling insertCustomDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_dashboards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomDashboardToJSON(requestParameters.dashboard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Create a new custom dashboard on the UltraCart account. 
     * Create a custom dashboard
     */
    async insertCustomDashboard(requestParameters: InsertCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardResponse> {
        const response = await this.insertCustomDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new custom report on the UltraCart account. 
     * Create a custom report
     */
    async insertCustomReportRaw(requestParameters: InsertCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportResponse>> {
        if (requestParameters.report === null || requestParameters.report === undefined) {
            throw new runtime.RequiredError('report','Required parameter requestParameters.report was null or undefined when calling insertCustomReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomReportToJSON(requestParameters.report),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportResponseFromJSON(jsonValue));
    }

    /**
     * Create a new custom report on the UltraCart account. 
     * Create a custom report
     */
    async insertCustomReport(requestParameters: InsertCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportResponse> {
        const response = await this.insertCustomReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new report on the UltraCart account. 
     * Create a report
     */
    async insertReportRaw(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>> {
        if (requestParameters.report === null || requestParameters.report === undefined) {
            throw new runtime.RequiredError('report','Required parameter requestParameters.report was null or undefined when calling insertReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReportToJSON(requestParameters.report),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportResponseFromJSON(jsonValue));
    }

    /**
     * Create a new report on the UltraCart account. 
     * Create a report
     */
    async insertReport(requestParameters: InsertReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse> {
        const response = await this.insertReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a custom dashboard on the UltraCart account. 
     * Update a custom dashboard
     */
    async updateCustomDashboardRaw(requestParameters: UpdateCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDashboardResponse>> {
        if (requestParameters.customDashboardOid === null || requestParameters.customDashboardOid === undefined) {
            throw new runtime.RequiredError('customDashboardOid','Required parameter requestParameters.customDashboardOid was null or undefined when calling updateCustomDashboard.');
        }

        if (requestParameters.dashboard === null || requestParameters.dashboard === undefined) {
            throw new runtime.RequiredError('dashboard','Required parameter requestParameters.dashboard was null or undefined when calling updateCustomDashboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_dashboards/{custom_dashboard_oid}`.replace(`{${"custom_dashboard_oid"}}`, encodeURIComponent(String(requestParameters.customDashboardOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomDashboardToJSON(requestParameters.dashboard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomDashboardResponseFromJSON(jsonValue));
    }

    /**
     * Update a custom dashboard on the UltraCart account. 
     * Update a custom dashboard
     */
    async updateCustomDashboard(requestParameters: UpdateCustomDashboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDashboardResponse> {
        const response = await this.updateCustomDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a custom report on the UltraCart account. 
     * Update a custom report
     */
    async updateCustomReportRaw(requestParameters: UpdateCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportResponse>> {
        if (requestParameters.customReportOid === null || requestParameters.customReportOid === undefined) {
            throw new runtime.RequiredError('customReportOid','Required parameter requestParameters.customReportOid was null or undefined when calling updateCustomReport.');
        }

        if (requestParameters.report === null || requestParameters.report === undefined) {
            throw new runtime.RequiredError('report','Required parameter requestParameters.report was null or undefined when calling updateCustomReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/{custom_report_oid}`.replace(`{${"custom_report_oid"}}`, encodeURIComponent(String(requestParameters.customReportOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomReportToJSON(requestParameters.report),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportResponseFromJSON(jsonValue));
    }

    /**
     * Update a custom report on the UltraCart account. 
     * Update a custom report
     */
    async updateCustomReport(requestParameters: UpdateCustomReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportResponse> {
        const response = await this.updateCustomReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update custom report account config. 
     * Update custom report account config
     */
    async updateCustomReportAccountConfigRaw(requestParameters: UpdateCustomReportAccountConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomReportAccountConfigResponse>> {
        if (requestParameters.accountConfig === null || requestParameters.accountConfig === undefined) {
            throw new runtime.RequiredError('accountConfig','Required parameter requestParameters.accountConfig was null or undefined when calling updateCustomReportAccountConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/custom_reports/account_config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomReportAccountConfigToJSON(requestParameters.accountConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomReportAccountConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update custom report account config. 
     * Update custom report account config
     */
    async updateCustomReportAccountConfig(requestParameters: UpdateCustomReportAccountConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomReportAccountConfigResponse> {
        const response = await this.updateCustomReportAccountConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a report on the UltraCart account. 
     * Update a report
     */
    async updateReportRaw(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportResponse>> {
        if (requestParameters.reportOid === null || requestParameters.reportOid === undefined) {
            throw new runtime.RequiredError('reportOid','Required parameter requestParameters.reportOid was null or undefined when calling updateReport.');
        }

        if (requestParameters.report === null || requestParameters.report === undefined) {
            throw new runtime.RequiredError('report','Required parameter requestParameters.report was null or undefined when calling updateReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/datawarehouse/reports/{report_oid}`.replace(`{${"report_oid"}}`, encodeURIComponent(String(requestParameters.reportOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportToJSON(requestParameters.report),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportResponseFromJSON(jsonValue));
    }

    /**
     * Update a report on the UltraCart account. 
     * Update a report
     */
    async updateReport(requestParameters: UpdateReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportResponse> {
        const response = await this.updateReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

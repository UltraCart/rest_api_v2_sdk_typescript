/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    IntegrationLogQueryRequest,
    IntegrationLogQueryRequestFromJSON,
    IntegrationLogQueryRequestToJSON,
    IntegrationLogQueryResponse,
    IntegrationLogQueryResponseFromJSON,
    IntegrationLogQueryResponseToJSON,
    IntegrationLogResponse,
    IntegrationLogResponseFromJSON,
    IntegrationLogResponseToJSON,
    IntegrationLogSummaryQueryRequest,
    IntegrationLogSummaryQueryRequestFromJSON,
    IntegrationLogSummaryQueryRequestToJSON,
    IntegrationLogSummaryQueryResponse,
    IntegrationLogSummaryQueryResponseFromJSON,
    IntegrationLogSummaryQueryResponseToJSON,
} from '../models';

export interface GetIntegrationLogRequest {
    pk: string;
    sk: string;
}

export interface GetIntegrationLogFileRequest {
    pk: string;
    sk: string;
    uuid: string;
}

export interface GetIntegrationLogFilePdfRequest {
    pk: string;
    sk: string;
    uuid: string;
}

export interface GetIntegrationLogSummariesQueryRequest {
    integrationLogSummariesQuery: IntegrationLogSummaryQueryRequest;
}

export interface GetIntegrationLogsQueryRequest {
    integrationLogQuery: IntegrationLogQueryRequest;
    limit?: number;
    offset?: number;
    sort?: string;
}

/**
 * IntegrationLogApi - interface
 * 
 * @export
 * @interface IntegrationLogApiInterface
 */
export interface IntegrationLogApiInterface {
    /**
     * Retrieve an integration logs from the account based identifiers 
     * @summary Retrieve an integration log
     * @param {string} pk 
     * @param {string} sk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApiInterface
     */
    getIntegrationLogRaw(requestParameters: GetIntegrationLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLogResponse>>;

    /**
     * Retrieve an integration logs from the account based identifiers 
     * Retrieve an integration log
     */
    getIntegrationLog(requestParameters: GetIntegrationLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLogResponse>;

    /**
     * Retrieve an integration log file from the account based identifiers 
     * @summary Retrieve an integration log file
     * @param {string} pk 
     * @param {string} sk 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApiInterface
     */
    getIntegrationLogFileRaw(requestParameters: GetIntegrationLogFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Retrieve an integration log file from the account based identifiers 
     * Retrieve an integration log file
     */
    getIntegrationLogFile(requestParameters: GetIntegrationLogFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Retrieve an integration log file from the account based identifiers 
     * @summary Retrieve an integration log file converted to PDF
     * @param {string} pk 
     * @param {string} sk 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApiInterface
     */
    getIntegrationLogFilePdfRaw(requestParameters: GetIntegrationLogFilePdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Retrieve an integration log file from the account based identifiers 
     * Retrieve an integration log file converted to PDF
     */
    getIntegrationLogFilePdf(requestParameters: GetIntegrationLogFilePdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Retrieves a set of integration log summaries from the account based on a query object. 
     * @summary Retrieve integration log summaries
     * @param {IntegrationLogSummaryQueryRequest} integrationLogSummariesQuery Integration log summaries query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApiInterface
     */
    getIntegrationLogSummariesQueryRaw(requestParameters: GetIntegrationLogSummariesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLogSummaryQueryResponse>>;

    /**
     * Retrieves a set of integration log summaries from the account based on a query object. 
     * Retrieve integration log summaries
     */
    getIntegrationLogSummariesQuery(requestParameters: GetIntegrationLogSummariesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLogSummaryQueryResponse>;

    /**
     * Retrieves a set of integration logs from the account based on a query object. 
     * @summary Retrieve integration logs
     * @param {IntegrationLogQueryRequest} integrationLogQuery Integration log query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLogApiInterface
     */
    getIntegrationLogsQueryRaw(requestParameters: GetIntegrationLogsQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLogQueryResponse>>;

    /**
     * Retrieves a set of integration logs from the account based on a query object. 
     * Retrieve integration logs
     */
    getIntegrationLogsQuery(requestParameters: GetIntegrationLogsQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLogQueryResponse>;

}

/**
 * 
 */
export class IntegrationLogApi extends runtime.BaseAPI implements IntegrationLogApiInterface {

    /**
     * Retrieve an integration logs from the account based identifiers 
     * Retrieve an integration log
     */
    async getIntegrationLogRaw(requestParameters: GetIntegrationLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLogResponse>> {
        if (requestParameters.pk === null || requestParameters.pk === undefined) {
            throw new runtime.RequiredError('pk','Required parameter requestParameters.pk was null or undefined when calling getIntegrationLog.');
        }

        if (requestParameters.sk === null || requestParameters.sk === undefined) {
            throw new runtime.RequiredError('sk','Required parameter requestParameters.sk was null or undefined when calling getIntegrationLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["integration_log_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/integration_log/query/{pk}/{sk}`.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters.pk))).replace(`{${"sk"}}`, encodeURIComponent(String(requestParameters.sk))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationLogResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an integration logs from the account based identifiers 
     * Retrieve an integration log
     */
    async getIntegrationLog(requestParameters: GetIntegrationLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLogResponse> {
        const response = await this.getIntegrationLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an integration log file from the account based identifiers 
     * Retrieve an integration log file
     */
    async getIntegrationLogFileRaw(requestParameters: GetIntegrationLogFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.pk === null || requestParameters.pk === undefined) {
            throw new runtime.RequiredError('pk','Required parameter requestParameters.pk was null or undefined when calling getIntegrationLogFile.');
        }

        if (requestParameters.sk === null || requestParameters.sk === undefined) {
            throw new runtime.RequiredError('sk','Required parameter requestParameters.sk was null or undefined when calling getIntegrationLogFile.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getIntegrationLogFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["integration_log_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/integration_log/query/{pk}/{sk}/{uuid}`.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters.pk))).replace(`{${"sk"}}`, encodeURIComponent(String(requestParameters.sk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieve an integration log file from the account based identifiers 
     * Retrieve an integration log file
     */
    async getIntegrationLogFile(requestParameters: GetIntegrationLogFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getIntegrationLogFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an integration log file from the account based identifiers 
     * Retrieve an integration log file converted to PDF
     */
    async getIntegrationLogFilePdfRaw(requestParameters: GetIntegrationLogFilePdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.pk === null || requestParameters.pk === undefined) {
            throw new runtime.RequiredError('pk','Required parameter requestParameters.pk was null or undefined when calling getIntegrationLogFilePdf.');
        }

        if (requestParameters.sk === null || requestParameters.sk === undefined) {
            throw new runtime.RequiredError('sk','Required parameter requestParameters.sk was null or undefined when calling getIntegrationLogFilePdf.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getIntegrationLogFilePdf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["integration_log_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/integration_log/query/{pk}/{sk}/{uuid}/pdf`.replace(`{${"pk"}}`, encodeURIComponent(String(requestParameters.pk))).replace(`{${"sk"}}`, encodeURIComponent(String(requestParameters.sk))).replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Retrieve an integration log file from the account based identifiers 
     * Retrieve an integration log file converted to PDF
     */
    async getIntegrationLogFilePdf(requestParameters: GetIntegrationLogFilePdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getIntegrationLogFilePdfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a set of integration log summaries from the account based on a query object. 
     * Retrieve integration log summaries
     */
    async getIntegrationLogSummariesQueryRaw(requestParameters: GetIntegrationLogSummariesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLogSummaryQueryResponse>> {
        if (requestParameters.integrationLogSummariesQuery === null || requestParameters.integrationLogSummariesQuery === undefined) {
            throw new runtime.RequiredError('integrationLogSummariesQuery','Required parameter requestParameters.integrationLogSummariesQuery was null or undefined when calling getIntegrationLogSummariesQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["integration_log_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/integration_log/summary/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationLogSummaryQueryRequestToJSON(requestParameters.integrationLogSummariesQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationLogSummaryQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a set of integration log summaries from the account based on a query object. 
     * Retrieve integration log summaries
     */
    async getIntegrationLogSummariesQuery(requestParameters: GetIntegrationLogSummariesQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLogSummaryQueryResponse> {
        const response = await this.getIntegrationLogSummariesQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a set of integration logs from the account based on a query object. 
     * Retrieve integration logs
     */
    async getIntegrationLogsQueryRaw(requestParameters: GetIntegrationLogsQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationLogQueryResponse>> {
        if (requestParameters.integrationLogQuery === null || requestParameters.integrationLogQuery === undefined) {
            throw new runtime.RequiredError('integrationLogQuery','Required parameter requestParameters.integrationLogQuery was null or undefined when calling getIntegrationLogsQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["integration_log_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/integration_log/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntegrationLogQueryRequestToJSON(requestParameters.integrationLogQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationLogQueryResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a set of integration logs from the account based on a query object. 
     * Retrieve integration logs
     */
    async getIntegrationLogsQuery(requestParameters: GetIntegrationLogsQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationLogQueryResponse> {
        const response = await this.getIntegrationLogsQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

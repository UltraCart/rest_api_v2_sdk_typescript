/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountsReceivableRetryConfig,
    AccountsReceivableRetryConfigFromJSON,
    AccountsReceivableRetryConfigToJSON,
    AccountsReceivableRetryConfigResponse,
    AccountsReceivableRetryConfigResponseFromJSON,
    AccountsReceivableRetryConfigResponseToJSON,
    AccountsReceivableRetryStatsResponse,
    AccountsReceivableRetryStatsResponseFromJSON,
    AccountsReceivableRetryStatsResponseToJSON,
    BaseResponse,
    BaseResponseFromJSON,
    BaseResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    OrderByTokenQuery,
    OrderByTokenQueryFromJSON,
    OrderByTokenQueryToJSON,
    OrderEdiDocumentsResponse,
    OrderEdiDocumentsResponseFromJSON,
    OrderEdiDocumentsResponseToJSON,
    OrderFormat,
    OrderFormatFromJSON,
    OrderFormatToJSON,
    OrderFormatResponse,
    OrderFormatResponseFromJSON,
    OrderFormatResponseToJSON,
    OrderInvoiceResponse,
    OrderInvoiceResponseFromJSON,
    OrderInvoiceResponseToJSON,
    OrderPackingSlipResponse,
    OrderPackingSlipResponseFromJSON,
    OrderPackingSlipResponseToJSON,
    OrderProcessPaymentRequest,
    OrderProcessPaymentRequestFromJSON,
    OrderProcessPaymentRequestToJSON,
    OrderProcessPaymentResponse,
    OrderProcessPaymentResponseFromJSON,
    OrderProcessPaymentResponseToJSON,
    OrderQuery,
    OrderQueryFromJSON,
    OrderQueryToJSON,
    OrderQueryBatch,
    OrderQueryBatchFromJSON,
    OrderQueryBatchToJSON,
    OrderRefundableResponse,
    OrderRefundableResponseFromJSON,
    OrderRefundableResponseToJSON,
    OrderReplacement,
    OrderReplacementFromJSON,
    OrderReplacementToJSON,
    OrderReplacementResponse,
    OrderReplacementResponseFromJSON,
    OrderReplacementResponseToJSON,
    OrderResponse,
    OrderResponseFromJSON,
    OrderResponseToJSON,
    OrderTokenResponse,
    OrderTokenResponseFromJSON,
    OrderTokenResponseToJSON,
    OrderValidationRequest,
    OrderValidationRequestFromJSON,
    OrderValidationRequestToJSON,
    OrderValidationResponse,
    OrderValidationResponseFromJSON,
    OrderValidationResponseToJSON,
    OrdersResponse,
    OrdersResponseFromJSON,
    OrdersResponseToJSON,
} from '../models';

export interface AdjustOrderTotalRequest {
    orderId: string;
    desiredTotal: string;
}

export interface CancelOrderRequest {
    orderId: string;
    lockSelfShipOrders?: boolean;
    skipRefundAndHold?: boolean;
}

export interface DeleteOrderRequest {
    orderId: string;
}

export interface DuplicateOrderRequest {
    orderId: string;
    expand?: string;
}

export interface FormatRequest {
    orderId: string;
    formatOptions: OrderFormat;
}

export interface GenerateInvoiceRequest {
    orderId: string;
}

export interface GenerateOrderTokenRequest {
    orderId: string;
}

export interface GeneratePackingSlipAllDCRequest {
    orderId: string;
}

export interface GeneratePackingSlipSpecificDCRequest {
    distributionCenterCode: string;
    orderId: string;
}

export interface GetAccountsReceivableRetryStatsRequest {
    from?: string;
    to?: string;
}

export interface GetOrderRequest {
    orderId: string;
    expand?: string;
}

export interface GetOrderByTokenRequest {
    orderByTokenQuery: OrderByTokenQuery;
    expand?: string;
}

export interface GetOrderEdiDocumentsRequest {
    orderId: string;
}

export interface GetOrdersRequest {
    orderId?: string;
    paymentMethod?: string;
    company?: string;
    firstName?: string;
    lastName?: string;
    city?: string;
    stateRegion?: string;
    postalCode?: string;
    countryCode?: string;
    phone?: string;
    email?: string;
    ccEmail?: string;
    total?: number;
    screenBrandingThemeCode?: string;
    storefrontHostName?: string;
    creationDateBegin?: string;
    creationDateEnd?: string;
    paymentDateBegin?: string;
    paymentDateEnd?: string;
    shipmentDateBegin?: string;
    shipmentDateEnd?: string;
    rma?: string;
    purchaseOrderNumber?: string;
    itemId?: string;
    currentStage?: string;
    channelPartnerCode?: string;
    channelPartnerOrderId?: string;
    limit?: number;
    offset?: number;
    sort?: string;
    expand?: string;
}

export interface GetOrdersBatchRequest {
    orderBatch: OrderQueryBatch;
    expand?: string;
}

export interface GetOrdersByQueryRequest {
    orderQuery: OrderQuery;
    limit?: number;
    offset?: number;
    sort?: string;
    expand?: string;
}

export interface InsertOrderRequest {
    order: Order;
    expand?: string;
}

export interface IsRefundableOrderRequest {
    orderId: string;
}

export interface ProcessPaymentRequest {
    orderId: string;
    processPaymentRequest: OrderProcessPaymentRequest;
}

export interface RefundOrderRequest {
    orderId: string;
    order: Order;
    rejectAfterRefund?: boolean;
    skipCustomerNotification?: boolean;
    autoOrderCancel?: boolean;
    manualRefund?: boolean;
    reverseAffiliateTransactions?: boolean;
    issueStoreCredit?: boolean;
    autoOrderCancelReason?: string;
    expand?: string;
}

export interface ReplacementRequest {
    orderId: string;
    replacement: OrderReplacement;
}

export interface ResendReceiptRequest {
    orderId: string;
}

export interface ResendShipmentConfirmationRequest {
    orderId: string;
}

export interface UpdateAccountsReceivableRetryConfigRequest {
    retryConfig: AccountsReceivableRetryConfig;
}

export interface UpdateOrderRequest {
    orderId: string;
    order: Order;
    expand?: string;
}

export interface ValidateOrderRequest {
    validationRequest: OrderValidationRequest;
}

/**
 * OrderApi - interface
 * 
 * @export
 * @interface OrderApiInterface
 */
export interface OrderApiInterface {
    /**
     * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
     * @summary Adjusts an order total
     * @param {string} orderId The order id to cancel.
     * @param {string} desiredTotal The desired total with no formatting. example 123.45
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    adjustOrderTotalRaw(requestParameters: AdjustOrderTotalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
     * Adjusts an order total
     */
    adjustOrderTotal(requestParameters: AdjustOrderTotalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * @summary Cancel an order
     * @param {string} orderId The order id to cancel.
     * @param {boolean} [lockSelfShipOrders] Flag to prevent a order shipping during a refund process
     * @param {boolean} [skipRefundAndHold] Skip refund and move order to Held Orders department
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * Cancel an order
     */
    cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Delete an order on the UltraCart account. 
     * @summary Delete an order
     * @param {string} orderId The order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteOrderRaw(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an order on the UltraCart account. 
     * Delete an order
     */
    deleteOrder(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
     * @summary Duplicate an order
     * @param {string} orderId The order id to duplicate.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    duplicateOrderRaw(requestParameters: DuplicateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
     * Duplicate an order
     */
    duplicateOrder(requestParameters: DuplicateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Format the order for display at text or html 
     * @summary Format order
     * @param {string} orderId The order id to format
     * @param {OrderFormat} formatOptions Format options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    formatRaw(requestParameters: FormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderFormatResponse>>;

    /**
     * Format the order for display at text or html 
     * Format order
     */
    format(requestParameters: FormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderFormatResponse>;

    /**
     * The invoice PDF that is returned is base 64 encoded 
     * @summary Generate an invoice for this order.
     * @param {string} orderId Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    generateInvoiceRaw(requestParameters: GenerateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderInvoiceResponse>>;

    /**
     * The invoice PDF that is returned is base 64 encoded 
     * Generate an invoice for this order.
     */
    generateInvoice(requestParameters: GenerateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderInvoiceResponse>;

    /**
     * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
     * @summary Generate an order token for a given order id
     * @param {string} orderId The order id to generate a token for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    generateOrderTokenRaw(requestParameters: GenerateOrderTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTokenResponse>>;

    /**
     * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
     * Generate an order token for a given order id
     */
    generateOrderToken(requestParameters: GenerateOrderTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTokenResponse>;

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * @summary Generate a packing slip for this order across all distribution centers.
     * @param {string} orderId Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    generatePackingSlipAllDCRaw(requestParameters: GeneratePackingSlipAllDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPackingSlipResponse>>;

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order across all distribution centers.
     */
    generatePackingSlipAllDC(requestParameters: GeneratePackingSlipAllDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPackingSlipResponse>;

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * @summary Generate a packing slip for this order for the given distribution center.
     * @param {string} distributionCenterCode Distribution center code
     * @param {string} orderId Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    generatePackingSlipSpecificDCRaw(requestParameters: GeneratePackingSlipSpecificDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPackingSlipResponse>>;

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order for the given distribution center.
     */
    generatePackingSlipSpecificDC(requestParameters: GeneratePackingSlipSpecificDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPackingSlipResponse>;

    /**
     * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * @summary Retrieve A/R Retry Configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAccountsReceivableRetryConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsReceivableRetryConfigResponse>>;

    /**
     * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Retrieve A/R Retry Configuration
     */
    getAccountsReceivableRetryConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsReceivableRetryConfigResponse>;

    /**
     * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * @summary Retrieve A/R Retry Statistics
     * @param {string} [from] 
     * @param {string} [to] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAccountsReceivableRetryStatsRaw(requestParameters: GetAccountsReceivableRetryStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsReceivableRetryStatsResponse>>;

    /**
     * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Retrieve A/R Retry Statistics
     */
    getAccountsReceivableRetryStats(requestParameters: GetAccountsReceivableRetryStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsReceivableRetryStatsResponse>;

    /**
     * Retrieves a single order using the specified order id. 
     * @summary Retrieve an order
     * @param {string} orderId The order id to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderRaw(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Retrieves a single order using the specified order id. 
     * Retrieve an order
     */
    getOrder(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Retrieves a single order using the specified order token. 
     * @summary Retrieve an order using a token
     * @param {OrderByTokenQuery} orderByTokenQuery Order by token query
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderByTokenRaw(requestParameters: GetOrderByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Retrieves a single order using the specified order token. 
     * Retrieve an order using a token
     */
    getOrderByToken(requestParameters: GetOrderByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Retrieve EDI documents associated with this order. 
     * @summary Retrieve EDI documents associated with this order.
     * @param {string} orderId The order id to retrieve EDI documents for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderEdiDocumentsRaw(requestParameters: GetOrderEdiDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderEdiDocumentsResponse>>;

    /**
     * Retrieve EDI documents associated with this order. 
     * Retrieve EDI documents associated with this order.
     */
    getOrderEdiDocuments(requestParameters: GetOrderEdiDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderEdiDocumentsResponse>;

    /**
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve orders
     * @param {string} [orderId] Order Id
     * @param {string} [paymentMethod] Payment Method
     * @param {string} [company] Company
     * @param {string} [firstName] First Name
     * @param {string} [lastName] Last Name
     * @param {string} [city] City
     * @param {string} [stateRegion] State/Region
     * @param {string} [postalCode] Postal Code
     * @param {string} [countryCode] Country Code (ISO-3166 two letter)
     * @param {string} [phone] Phone
     * @param {string} [email] Email
     * @param {string} [ccEmail] CC Email
     * @param {number} [total] Total
     * @param {string} [screenBrandingThemeCode] Screen Branding Theme Code
     * @param {string} [storefrontHostName] StoreFront Host Name
     * @param {string} [creationDateBegin] Creation Date Begin
     * @param {string} [creationDateEnd] Creation Date End
     * @param {string} [paymentDateBegin] Payment Date Begin
     * @param {string} [paymentDateEnd] Payment Date End
     * @param {string} [shipmentDateBegin] Shipment Date Begin
     * @param {string} [shipmentDateEnd] Shipment Date End
     * @param {string} [rma] RMA
     * @param {string} [purchaseOrderNumber] Purchase Order Number
     * @param {string} [itemId] Item Id
     * @param {string} [currentStage] Current Stage
     * @param {string} [channelPartnerCode] Channel Partner Code
     * @param {string} [channelPartnerOrderId] Channel Partner Order ID
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrdersRaw(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>>;

    /**
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve orders
     */
    getOrders(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse>;

    /**
     * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
     * @summary Retrieve order batch
     * @param {OrderQueryBatch} orderBatch Order batch
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrdersBatchRaw(requestParameters: GetOrdersBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>>;

    /**
     * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
     * Retrieve order batch
     */
    getOrdersBatch(requestParameters: GetOrdersBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse>;

    /**
     * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve orders by query
     * @param {OrderQuery} orderQuery Order query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrdersByQueryRaw(requestParameters: GetOrdersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>>;

    /**
     * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve orders by query
     */
    getOrdersByQuery(requestParameters: GetOrdersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse>;

    /**
     * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
     * @summary Insert an order
     * @param {Order} order Order to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    insertOrderRaw(requestParameters: InsertOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
     * Insert an order
     */
    insertOrder(requestParameters: InsertOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Determine if an order can be refunded based upon payment method and age 
     * @summary Determine if an order can be refunded
     * @param {string} orderId The order id to check for refundable order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    isRefundableOrderRaw(requestParameters: IsRefundableOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRefundableResponse>>;

    /**
     * Determine if an order can be refunded based upon payment method and age 
     * Determine if an order can be refunded
     */
    isRefundableOrder(requestParameters: IsRefundableOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRefundableResponse>;

    /**
     * Process payment on order 
     * @summary Process payment
     * @param {string} orderId The order id to process payment on
     * @param {OrderProcessPaymentRequest} processPaymentRequest Process payment parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    processPaymentRaw(requestParameters: ProcessPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderProcessPaymentResponse>>;

    /**
     * Process payment on order 
     * Process payment
     */
    processPayment(requestParameters: ProcessPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderProcessPaymentResponse>;

    /**
     * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * @summary Refund an order
     * @param {string} orderId The order id to refund.
     * @param {Order} order Order to refund
     * @param {boolean} [rejectAfterRefund] Reject order after refund
     * @param {boolean} [skipCustomerNotification] Skip customer email notification
     * @param {boolean} [autoOrderCancel] Cancel associated auto orders
     * @param {boolean} [manualRefund] Consider a manual refund done externally
     * @param {boolean} [reverseAffiliateTransactions] Reverse affiliate transactions
     * @param {boolean} [issueStoreCredit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
     * @param {string} [autoOrderCancelReason] Reason for auto orders cancellation
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    refundOrderRaw(requestParameters: RefundOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * Refund an order
     */
    refundOrder(requestParameters: RefundOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Create a replacement order based upon a previous order 
     * @summary Replacement order
     * @param {string} orderId The order id to generate a replacement for.
     * @param {OrderReplacement} replacement Replacement order details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    replacementRaw(requestParameters: ReplacementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderReplacementResponse>>;

    /**
     * Create a replacement order based upon a previous order 
     * Replacement order
     */
    replacement(requestParameters: ReplacementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderReplacementResponse>;

    /**
     * Resend the receipt for an order on the UltraCart account. 
     * @summary Resend receipt
     * @param {string} orderId The order id to resend the receipt for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    resendReceiptRaw(requestParameters: ResendReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Resend the receipt for an order on the UltraCart account. 
     * Resend receipt
     */
    resendReceipt(requestParameters: ResendReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Resend shipment confirmation for an order on the UltraCart account. 
     * @summary Resend shipment confirmation
     * @param {string} orderId The order id to resend the shipment notification for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    resendShipmentConfirmationRaw(requestParameters: ResendShipmentConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Resend shipment confirmation for an order on the UltraCart account. 
     * Resend shipment confirmation
     */
    resendShipmentConfirmation(requestParameters: ResendShipmentConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * @summary Update A/R Retry Configuration
     * @param {AccountsReceivableRetryConfig} retryConfig AccountsReceivableRetryConfig object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateAccountsReceivableRetryConfigRaw(requestParameters: UpdateAccountsReceivableRetryConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Update A/R Retry Configuration
     */
    updateAccountsReceivableRetryConfig(requestParameters: UpdateAccountsReceivableRetryConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
     * @summary Update an order
     * @param {string} orderId The order id to update.
     * @param {Order} order Order to update
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
     * Update an order
     */
    updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions. 
     * @summary Validate
     * @param {OrderValidationRequest} validationRequest Validation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    validateOrderRaw(requestParameters: ValidateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderValidationResponse>>;

    /**
     * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions. 
     * Validate
     */
    validateOrder(requestParameters: ValidateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderValidationResponse>;

}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI implements OrderApiInterface {

    /**
     * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
     * Adjusts an order total
     */
    async adjustOrderTotalRaw(requestParameters: AdjustOrderTotalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling adjustOrderTotal.');
        }

        if (requestParameters.desiredTotal === null || requestParameters.desiredTotal === undefined) {
            throw new runtime.RequiredError('desiredTotal','Required parameter requestParameters.desiredTotal was null or undefined when calling adjustOrderTotal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/adjust_order_total/{desired_total}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"desired_total"}}`, encodeURIComponent(String(requestParameters.desiredTotal))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Adjusts an order total.  Adjusts individual items appropriately and considers taxes.  Desired total should be provided in the same currency as the order and must be less than the current total and greater than zero.  This call will change the order total.  It returns true if the desired total is achieved.  If the goal seeking algorithm falls short (usually by pennies), this method returns back false.  View the merchant notes for the order for further details. 
     * Adjusts an order total
     */
    async adjustOrderTotal(requestParameters: AdjustOrderTotalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.adjustOrderTotalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * Cancel an order
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.lockSelfShipOrders !== undefined) {
            queryParameters['lock_self_ship_orders'] = requestParameters.lockSelfShipOrders;
        }

        if (requestParameters.skipRefundAndHold !== undefined) {
            queryParameters['skip_refund_and_hold'] = requestParameters.skipRefundAndHold;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/cancel`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * Cancel an order
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an order on the UltraCart account. 
     * Delete an order
     */
    async deleteOrderRaw(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an order on the UltraCart account. 
     * Delete an order
     */
    async deleteOrder(requestParameters: DeleteOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
     * Duplicate an order
     */
    async duplicateOrderRaw(requestParameters: DuplicateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling duplicateOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/duplicate`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Perform a duplicate of the specified order_id and return a new order located in Accounts Receivable. 
     * Duplicate an order
     */
    async duplicateOrder(requestParameters: DuplicateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.duplicateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Format the order for display at text or html 
     * Format order
     */
    async formatRaw(requestParameters: FormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderFormatResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling format.');
        }

        if (requestParameters.formatOptions === null || requestParameters.formatOptions === undefined) {
            throw new runtime.RequiredError('formatOptions','Required parameter requestParameters.formatOptions was null or undefined when calling format.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/format`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderFormatToJSON(requestParameters.formatOptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFormatResponseFromJSON(jsonValue));
    }

    /**
     * Format the order for display at text or html 
     * Format order
     */
    async format(requestParameters: FormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderFormatResponse> {
        const response = await this.formatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The invoice PDF that is returned is base 64 encoded 
     * Generate an invoice for this order.
     */
    async generateInvoiceRaw(requestParameters: GenerateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderInvoiceResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generateInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/invoice`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderInvoiceResponseFromJSON(jsonValue));
    }

    /**
     * The invoice PDF that is returned is base 64 encoded 
     * Generate an invoice for this order.
     */
    async generateInvoice(requestParameters: GenerateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderInvoiceResponse> {
        const response = await this.generateInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
     * Generate an order token for a given order id
     */
    async generateOrderTokenRaw(requestParameters: GenerateOrderTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTokenResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generateOrderToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/token/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderTokenResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single order token for a given order id.  The token can be used with the getOrderByToken API. 
     * Generate an order token for a given order id
     */
    async generateOrderToken(requestParameters: GenerateOrderTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTokenResponse> {
        const response = await this.generateOrderTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order across all distribution centers.
     */
    async generatePackingSlipAllDCRaw(requestParameters: GeneratePackingSlipAllDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPackingSlipResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generatePackingSlipAllDC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/packing_slip`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderPackingSlipResponseFromJSON(jsonValue));
    }

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order across all distribution centers.
     */
    async generatePackingSlipAllDC(requestParameters: GeneratePackingSlipAllDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPackingSlipResponse> {
        const response = await this.generatePackingSlipAllDCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order for the given distribution center.
     */
    async generatePackingSlipSpecificDCRaw(requestParameters: GeneratePackingSlipSpecificDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderPackingSlipResponse>> {
        if (requestParameters.distributionCenterCode === null || requestParameters.distributionCenterCode === undefined) {
            throw new runtime.RequiredError('distributionCenterCode','Required parameter requestParameters.distributionCenterCode was null or undefined when calling generatePackingSlipSpecificDC.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generatePackingSlipSpecificDC.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/packing_slip/{distribution_center_code}`.replace(`{${"distribution_center_code"}}`, encodeURIComponent(String(requestParameters.distributionCenterCode))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderPackingSlipResponseFromJSON(jsonValue));
    }

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order for the given distribution center.
     */
    async generatePackingSlipSpecificDC(requestParameters: GeneratePackingSlipSpecificDCRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderPackingSlipResponse> {
        const response = await this.generatePackingSlipSpecificDCRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Retrieve A/R Retry Configuration
     */
    async getAccountsReceivableRetryConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsReceivableRetryConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/accountsReceivableRetryConfig`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsReceivableRetryConfigResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve A/R Retry Configuration. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Retrieve A/R Retry Configuration
     */
    async getAccountsReceivableRetryConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsReceivableRetryConfigResponse> {
        const response = await this.getAccountsReceivableRetryConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Retrieve A/R Retry Statistics
     */
    async getAccountsReceivableRetryStatsRaw(requestParameters: GetAccountsReceivableRetryStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountsReceivableRetryStatsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/accountsReceivableRetryConfig/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountsReceivableRetryStatsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve A/R Retry Statistics. This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Retrieve A/R Retry Statistics
     */
    async getAccountsReceivableRetryStats(requestParameters: GetAccountsReceivableRetryStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountsReceivableRetryStatsResponse> {
        const response = await this.getAccountsReceivableRetryStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single order using the specified order id. 
     * Retrieve an order
     */
    async getOrderRaw(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single order using the specified order id. 
     * Retrieve an order
     */
    async getOrder(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single order using the specified order token. 
     * Retrieve an order using a token
     */
    async getOrderByTokenRaw(requestParameters: GetOrderByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderByTokenQuery === null || requestParameters.orderByTokenQuery === undefined) {
            throw new runtime.RequiredError('orderByTokenQuery','Required parameter requestParameters.orderByTokenQuery was null or undefined when calling getOrderByToken.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderByTokenQueryToJSON(requestParameters.orderByTokenQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single order using the specified order token. 
     * Retrieve an order using a token
     */
    async getOrderByToken(requestParameters: GetOrderByTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.getOrderByTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve EDI documents associated with this order. 
     * Retrieve EDI documents associated with this order.
     */
    async getOrderEdiDocumentsRaw(requestParameters: GetOrderEdiDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderEdiDocumentsResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderEdiDocuments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/edi`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderEdiDocumentsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve EDI documents associated with this order. 
     * Retrieve EDI documents associated with this order.
     */
    async getOrderEdiDocuments(requestParameters: GetOrderEdiDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderEdiDocumentsResponse> {
        const response = await this.getOrderEdiDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve orders
     */
    async getOrdersRaw(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.orderId !== undefined) {
            queryParameters['order_id'] = requestParameters.orderId;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['payment_method'] = requestParameters.paymentMethod;
        }

        if (requestParameters.company !== undefined) {
            queryParameters['company'] = requestParameters.company;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['first_name'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['last_name'] = requestParameters.lastName;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.stateRegion !== undefined) {
            queryParameters['state_region'] = requestParameters.stateRegion;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postal_code'] = requestParameters.postalCode;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['country_code'] = requestParameters.countryCode;
        }

        if (requestParameters.phone !== undefined) {
            queryParameters['phone'] = requestParameters.phone;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.ccEmail !== undefined) {
            queryParameters['cc_email'] = requestParameters.ccEmail;
        }

        if (requestParameters.total !== undefined) {
            queryParameters['total'] = requestParameters.total;
        }

        if (requestParameters.screenBrandingThemeCode !== undefined) {
            queryParameters['screen_branding_theme_code'] = requestParameters.screenBrandingThemeCode;
        }

        if (requestParameters.storefrontHostName !== undefined) {
            queryParameters['storefront_host_name'] = requestParameters.storefrontHostName;
        }

        if (requestParameters.creationDateBegin !== undefined) {
            queryParameters['creation_date_begin'] = requestParameters.creationDateBegin;
        }

        if (requestParameters.creationDateEnd !== undefined) {
            queryParameters['creation_date_end'] = requestParameters.creationDateEnd;
        }

        if (requestParameters.paymentDateBegin !== undefined) {
            queryParameters['payment_date_begin'] = requestParameters.paymentDateBegin;
        }

        if (requestParameters.paymentDateEnd !== undefined) {
            queryParameters['payment_date_end'] = requestParameters.paymentDateEnd;
        }

        if (requestParameters.shipmentDateBegin !== undefined) {
            queryParameters['shipment_date_begin'] = requestParameters.shipmentDateBegin;
        }

        if (requestParameters.shipmentDateEnd !== undefined) {
            queryParameters['shipment_date_end'] = requestParameters.shipmentDateEnd;
        }

        if (requestParameters.rma !== undefined) {
            queryParameters['rma'] = requestParameters.rma;
        }

        if (requestParameters.purchaseOrderNumber !== undefined) {
            queryParameters['purchase_order_number'] = requestParameters.purchaseOrderNumber;
        }

        if (requestParameters.itemId !== undefined) {
            queryParameters['item_id'] = requestParameters.itemId;
        }

        if (requestParameters.currentStage !== undefined) {
            queryParameters['current_stage'] = requestParameters.currentStage;
        }

        if (requestParameters.channelPartnerCode !== undefined) {
            queryParameters['channel_partner_code'] = requestParameters.channelPartnerCode;
        }

        if (requestParameters.channelPartnerOrderId !== undefined) {
            queryParameters['channel_partner_order_id'] = requestParameters.channelPartnerOrderId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve orders
     */
    async getOrders(requestParameters: GetOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.getOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
     * Retrieve order batch
     */
    async getOrdersBatchRaw(requestParameters: GetOrdersBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        if (requestParameters.orderBatch === null || requestParameters.orderBatch === undefined) {
            throw new runtime.RequiredError('orderBatch','Required parameter requestParameters.orderBatch was null or undefined when calling getOrdersBatch.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderQueryBatchToJSON(requestParameters.orderBatch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a group of orders from the account based on an array of order ids.  If more than 500 order ids are specified, the API call will fail with a bad request error. 
     * Retrieve order batch
     */
    async getOrdersBatch(requestParameters: GetOrdersBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.getOrdersBatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve orders by query
     */
    async getOrdersByQueryRaw(requestParameters: GetOrdersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        if (requestParameters.orderQuery === null || requestParameters.orderQuery === undefined) {
            throw new runtime.RequiredError('orderQuery','Required parameter requestParameters.orderQuery was null or undefined when calling getOrdersByQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderQueryToJSON(requestParameters.orderQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a group of orders from the account based on a query object.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve orders by query
     */
    async getOrdersByQuery(requestParameters: GetOrdersByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.getOrdersByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
     * Insert an order
     */
    async insertOrderRaw(requestParameters: InsertOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.order === null || requestParameters.order === undefined) {
            throw new runtime.RequiredError('order','Required parameter requestParameters.order was null or undefined when calling insertOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Inserts a new order on the UltraCart account.  This is probably NOT the method you want.  This is for channel orders.  For regular orders the customer is entering, use the CheckoutApi.  It has many, many more features, checks, and validations. 
     * Insert an order
     */
    async insertOrder(requestParameters: InsertOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.insertOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Determine if an order can be refunded based upon payment method and age 
     * Determine if an order can be refunded
     */
    async isRefundableOrderRaw(requestParameters: IsRefundableOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRefundableResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling isRefundableOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/refundable`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderRefundableResponseFromJSON(jsonValue));
    }

    /**
     * Determine if an order can be refunded based upon payment method and age 
     * Determine if an order can be refunded
     */
    async isRefundableOrder(requestParameters: IsRefundableOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRefundableResponse> {
        const response = await this.isRefundableOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process payment on order 
     * Process payment
     */
    async processPaymentRaw(requestParameters: ProcessPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderProcessPaymentResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling processPayment.');
        }

        if (requestParameters.processPaymentRequest === null || requestParameters.processPaymentRequest === undefined) {
            throw new runtime.RequiredError('processPaymentRequest','Required parameter requestParameters.processPaymentRequest was null or undefined when calling processPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/process_payment`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderProcessPaymentRequestToJSON(requestParameters.processPaymentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderProcessPaymentResponseFromJSON(jsonValue));
    }

    /**
     * Process payment on order 
     * Process payment
     */
    async processPayment(requestParameters: ProcessPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderProcessPaymentResponse> {
        const response = await this.processPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * Refund an order
     */
    async refundOrderRaw(requestParameters: RefundOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling refundOrder.');
        }

        if (requestParameters.order === null || requestParameters.order === undefined) {
            throw new runtime.RequiredError('order','Required parameter requestParameters.order was null or undefined when calling refundOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.rejectAfterRefund !== undefined) {
            queryParameters['reject_after_refund'] = requestParameters.rejectAfterRefund;
        }

        if (requestParameters.skipCustomerNotification !== undefined) {
            queryParameters['skip_customer_notification'] = requestParameters.skipCustomerNotification;
        }

        if (requestParameters.autoOrderCancel !== undefined) {
            queryParameters['auto_order_cancel'] = requestParameters.autoOrderCancel;
        }

        if (requestParameters.manualRefund !== undefined) {
            queryParameters['manual_refund'] = requestParameters.manualRefund;
        }

        if (requestParameters.reverseAffiliateTransactions !== undefined) {
            queryParameters['reverse_affiliate_transactions'] = requestParameters.reverseAffiliateTransactions;
        }

        if (requestParameters.issueStoreCredit !== undefined) {
            queryParameters['issue_store_credit'] = requestParameters.issueStoreCredit;
        }

        if (requestParameters.autoOrderCancelReason !== undefined) {
            queryParameters['auto_order_cancel_reason'] = requestParameters.autoOrderCancelReason;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/refund`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Perform a refund operation on an order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * Refund an order
     */
    async refundOrder(requestParameters: RefundOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.refundOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a replacement order based upon a previous order 
     * Replacement order
     */
    async replacementRaw(requestParameters: ReplacementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderReplacementResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling replacement.');
        }

        if (requestParameters.replacement === null || requestParameters.replacement === undefined) {
            throw new runtime.RequiredError('replacement','Required parameter requestParameters.replacement was null or undefined when calling replacement.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/replacement`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderReplacementToJSON(requestParameters.replacement),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderReplacementResponseFromJSON(jsonValue));
    }

    /**
     * Create a replacement order based upon a previous order 
     * Replacement order
     */
    async replacement(requestParameters: ReplacementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderReplacementResponse> {
        const response = await this.replacementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend the receipt for an order on the UltraCart account. 
     * Resend receipt
     */
    async resendReceiptRaw(requestParameters: ResendReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendReceipt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/resend_receipt`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Resend the receipt for an order on the UltraCart account. 
     * Resend receipt
     */
    async resendReceipt(requestParameters: ResendReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.resendReceiptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend shipment confirmation for an order on the UltraCart account. 
     * Resend shipment confirmation
     */
    async resendShipmentConfirmationRaw(requestParameters: ResendShipmentConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendShipmentConfirmation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}/resend_shipment_confirmation`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Resend shipment confirmation for an order on the UltraCart account. 
     * Resend shipment confirmation
     */
    async resendShipmentConfirmation(requestParameters: ResendShipmentConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.resendShipmentConfirmationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Update A/R Retry Configuration
     */
    async updateAccountsReceivableRetryConfigRaw(requestParameters: UpdateAccountsReceivableRetryConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.retryConfig === null || requestParameters.retryConfig === undefined) {
            throw new runtime.RequiredError('retryConfig','Required parameter requestParameters.retryConfig was null or undefined when calling updateAccountsReceivableRetryConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/accountsReceivableRetryConfig`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountsReceivableRetryConfigToJSON(requestParameters.retryConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Update A/R Retry Configuration.  This is primarily an internal API call.  It is doubtful you would ever need to use it. 
     * Update A/R Retry Configuration
     */
    async updateAccountsReceivableRetryConfig(requestParameters: UpdateAccountsReceivableRetryConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.updateAccountsReceivableRetryConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
     * Update an order
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrder.');
        }

        if (requestParameters.order === null || requestParameters.order === undefined) {
            throw new runtime.RequiredError('order','Required parameter requestParameters.order was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/orders/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Update a new order on the UltraCart account.  This is probably NOT the method you want.  It is rare to update a completed order.  This will not trigger charges, emails, or any other automation. 
     * Update an order
     */
    async updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions. 
     * Validate
     */
    async validateOrderRaw(requestParameters: ValidateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderValidationResponse>> {
        if (requestParameters.validationRequest === null || requestParameters.validationRequest === undefined) {
            throw new runtime.RequiredError('validationRequest','Required parameter requestParameters.validationRequest was null or undefined when calling validateOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["order_read", "order_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/order/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderValidationRequestToJSON(requestParameters.validationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate the order for errors.  Specific checks can be passed to fine tune what is validated. Read and write permissions are required because the validate method may fix obvious address issues automatically which require update permission.This rest call makes use of the built-in translation of rest objects to UltraCart internal objects which also contains a multitude of validation checks that cannot be trapped.  Therefore any time this call is made, you should also trap api exceptions and examine their content because it may contain validation issues.  So check the response object and trap any exceptions. 
     * Validate
     */
    async validateOrder(requestParameters: ValidateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderValidationResponse> {
        const response = await this.validateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

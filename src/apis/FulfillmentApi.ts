/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DistributionCentersResponse,
    DistributionCentersResponseFromJSON,
    DistributionCentersResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FulfillmentInventory,
    FulfillmentInventoryFromJSON,
    FulfillmentInventoryToJSON,
    FulfillmentShipment,
    FulfillmentShipmentFromJSON,
    FulfillmentShipmentToJSON,
    OrdersResponse,
    OrdersResponseFromJSON,
    OrdersResponseToJSON,
} from '../models';

export interface AcknowledgeOrdersRequest {
    distributionCenterCode: string;
    orderIds: Array<string>;
}

export interface GeneratePackingSlipRequest {
    distributionCenterCode: string;
    orderId: string;
}

export interface GetDistributionCenterOrdersRequest {
    distributionCenterCode: string;
}

export interface ShipOrdersRequest {
    distributionCenterCode: string;
    shipments: Array<FulfillmentShipment>;
}

export interface UpdateInventoryRequest {
    distributionCenterCode: string;
    inventories: Array<FulfillmentInventory>;
}

/**
 * FulfillmentApi - interface
 * 
 * @export
 * @interface FulfillmentApiInterface
 */
export interface FulfillmentApiInterface {
    /**
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * @summary Acknowledge receipt of orders.
     * @param {string} distributionCenterCode Distribution center code
     * @param {Array<string>} orderIds Orders to acknowledge receipt of (limit 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiInterface
     */
    acknowledgeOrdersRaw(requestParameters: AcknowledgeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * Acknowledge receipt of orders.
     */
    acknowledgeOrders(requestParameters: AcknowledgeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * @summary Generate a packing slip for this order for the given distribution center.
     * @param {string} distributionCenterCode Distribution center code
     * @param {string} orderId Order ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiInterface
     */
    generatePackingSlipRaw(requestParameters: GeneratePackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>>;

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order for the given distribution center.
     */
    generatePackingSlip(requestParameters: GeneratePackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse>;

    /**
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You\'ll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * @summary Retrieve orders queued up for this distribution center.
     * @param {string} distributionCenterCode Distribution center code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiInterface
     */
    getDistributionCenterOrdersRaw(requestParameters: GetDistributionCenterOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>>;

    /**
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You\'ll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * Retrieve orders queued up for this distribution center.
     */
    getDistributionCenterOrders(requestParameters: GetDistributionCenterOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse>;

    /**
     * Retrieves the distribution centers that this user has access to. 
     * @summary Retrieve distribution centers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiInterface
     */
    getDistributionCentersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DistributionCentersResponse>>;

    /**
     * Retrieves the distribution centers that this user has access to. 
     * Retrieve distribution centers
     */
    getDistributionCenters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DistributionCentersResponse>;

    /**
     * Store the tracking information and mark the order shipped for this distribution center. 
     * @summary Mark orders as shipped
     * @param {string} distributionCenterCode Distribution center code
     * @param {Array<FulfillmentShipment>} shipments Orders to mark shipped
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiInterface
     */
    shipOrdersRaw(requestParameters: ShipOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Store the tracking information and mark the order shipped for this distribution center. 
     * Mark orders as shipped
     */
    shipOrders(requestParameters: ShipOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Update the inventory for items associated with this distribution center 
     * @summary Update inventory
     * @param {string} distributionCenterCode Distribution center code
     * @param {Array<FulfillmentInventory>} inventories Inventory updates (limit 500)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentApiInterface
     */
    updateInventoryRaw(requestParameters: UpdateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update the inventory for items associated with this distribution center 
     * Update inventory
     */
    updateInventory(requestParameters: UpdateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class FulfillmentApi extends runtime.BaseAPI implements FulfillmentApiInterface {

    /**
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * Acknowledge receipt of orders.
     */
    async acknowledgeOrdersRaw(requestParameters: AcknowledgeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.distributionCenterCode === null || requestParameters.distributionCenterCode === undefined) {
            throw new runtime.RequiredError('distributionCenterCode','Required parameter requestParameters.distributionCenterCode was null or undefined when calling acknowledgeOrders.');
        }

        if (requestParameters.orderIds === null || requestParameters.orderIds === undefined) {
            throw new runtime.RequiredError('orderIds','Required parameter requestParameters.orderIds was null or undefined when calling acknowledgeOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/fulfillment/distribution_centers/{distribution_center_code}/acknowledgements`.replace(`{${"distribution_center_code"}}`, encodeURIComponent(String(requestParameters.distributionCenterCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderIds,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Acknowledge receipt of orders so that they are removed from the fulfillment queue.  This method must be called after receiving and order (via webhook) or retrieving (via retrieve orders method). 
     * Acknowledge receipt of orders.
     */
    async acknowledgeOrders(requestParameters: AcknowledgeOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acknowledgeOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order for the given distribution center.
     */
    async generatePackingSlipRaw(requestParameters: GeneratePackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        if (requestParameters.distributionCenterCode === null || requestParameters.distributionCenterCode === undefined) {
            throw new runtime.RequiredError('distributionCenterCode','Required parameter requestParameters.distributionCenterCode was null or undefined when calling generatePackingSlip.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling generatePackingSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/fulfillment/distribution_centers/{distribution_center_code}/orders/{order_id}`.replace(`{${"distribution_center_code"}}`, encodeURIComponent(String(requestParameters.distributionCenterCode))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * The packing slip PDF that is returned is base 64 encoded 
     * Generate a packing slip for this order for the given distribution center.
     */
    async generatePackingSlip(requestParameters: GeneratePackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.generatePackingSlipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You\'ll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * Retrieve orders queued up for this distribution center.
     */
    async getDistributionCenterOrdersRaw(requestParameters: GetDistributionCenterOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrdersResponse>> {
        if (requestParameters.distributionCenterCode === null || requestParameters.distributionCenterCode === undefined) {
            throw new runtime.RequiredError('distributionCenterCode','Required parameter requestParameters.distributionCenterCode was null or undefined when calling getDistributionCenterOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/fulfillment/distribution_centers/{distribution_center_code}/orders`.replace(`{${"distribution_center_code"}}`, encodeURIComponent(String(requestParameters.distributionCenterCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrdersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves up to 100 orders that are queued up in this distribution center.  You must acknowledge them before additional new orders will be returned.  There is NO record chunking.  You\'ll get the same 100 records again and again until you acknowledge orders.  The orders that are returned contain only items for this distribution center and are by default completely expanded with billing, buysafe, channel_partner, checkout, coupons, customer_profile, edi, gift, gift_certificate, internal, items, payment, shipping, summary, taxes. 
     * Retrieve orders queued up for this distribution center.
     */
    async getDistributionCenterOrders(requestParameters: GetDistributionCenterOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrdersResponse> {
        const response = await this.getDistributionCenterOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the distribution centers that this user has access to. 
     * Retrieve distribution centers
     */
    async getDistributionCentersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DistributionCentersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/fulfillment/distribution_centers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionCentersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the distribution centers that this user has access to. 
     * Retrieve distribution centers
     */
    async getDistributionCenters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DistributionCentersResponse> {
        const response = await this.getDistributionCentersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Store the tracking information and mark the order shipped for this distribution center. 
     * Mark orders as shipped
     */
    async shipOrdersRaw(requestParameters: ShipOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.distributionCenterCode === null || requestParameters.distributionCenterCode === undefined) {
            throw new runtime.RequiredError('distributionCenterCode','Required parameter requestParameters.distributionCenterCode was null or undefined when calling shipOrders.');
        }

        if (requestParameters.shipments === null || requestParameters.shipments === undefined) {
            throw new runtime.RequiredError('shipments','Required parameter requestParameters.shipments was null or undefined when calling shipOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/fulfillment/distribution_centers/{distribution_center_code}/shipments`.replace(`{${"distribution_center_code"}}`, encodeURIComponent(String(requestParameters.distributionCenterCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipments.map(FulfillmentShipmentToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Store the tracking information and mark the order shipped for this distribution center. 
     * Mark orders as shipped
     */
    async shipOrders(requestParameters: ShipOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.shipOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * Update the inventory for items associated with this distribution center 
     * Update inventory
     */
    async updateInventoryRaw(requestParameters: UpdateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.distributionCenterCode === null || requestParameters.distributionCenterCode === undefined) {
            throw new runtime.RequiredError('distributionCenterCode','Required parameter requestParameters.distributionCenterCode was null or undefined when calling updateInventory.');
        }

        if (requestParameters.inventories === null || requestParameters.inventories === undefined) {
            throw new runtime.RequiredError('inventories','Required parameter requestParameters.inventories was null or undefined when calling updateInventory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["fulfillment_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/fulfillment/distribution_centers/{distribution_center_code}/inventory`.replace(`{${"distribution_center_code"}}`, encodeURIComponent(String(requestParameters.distributionCenterCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.inventories.map(FulfillmentInventoryToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the inventory for items associated with this distribution center 
     * Update inventory
     */
    async updateInventory(requestParameters: UpdateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateInventoryRaw(requestParameters, initOverrides);
    }

}

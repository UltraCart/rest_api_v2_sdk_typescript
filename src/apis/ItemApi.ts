/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Item,
    ItemFromJSON,
    ItemToJSON,
    ItemDigitalItem,
    ItemDigitalItemFromJSON,
    ItemDigitalItemToJSON,
    ItemDigitalItemResponse,
    ItemDigitalItemResponseFromJSON,
    ItemDigitalItemResponseToJSON,
    ItemDigitalItemsResponse,
    ItemDigitalItemsResponseFromJSON,
    ItemDigitalItemsResponseToJSON,
    ItemResponse,
    ItemResponseFromJSON,
    ItemResponseToJSON,
    ItemReview,
    ItemReviewFromJSON,
    ItemReviewToJSON,
    ItemReviewResponse,
    ItemReviewResponseFromJSON,
    ItemReviewResponseToJSON,
    ItemReviewsResponse,
    ItemReviewsResponseFromJSON,
    ItemReviewsResponseToJSON,
    ItemsRequest,
    ItemsRequestFromJSON,
    ItemsRequestToJSON,
    ItemsResponse,
    ItemsResponseFromJSON,
    ItemsResponseToJSON,
    PricingTiersResponse,
    PricingTiersResponseFromJSON,
    PricingTiersResponseToJSON,
    TempMultimediaResponse,
    TempMultimediaResponseFromJSON,
    TempMultimediaResponseToJSON,
} from '../models';

export interface DeleteDigitalItemRequest {
    digitalItemOid: number;
}

export interface DeleteItemRequest {
    merchantItemOid: number;
}

export interface DeleteReviewRequest {
    reviewOid: number;
    merchantItemOid: number;
}

export interface GetDigitalItemRequest {
    digitalItemOid: number;
}

export interface GetDigitalItemsRequest {
    limit?: number;
    offset?: number;
    since?: string;
    sort?: string;
    expand?: string;
    placeholders?: boolean;
}

export interface GetDigitalItemsByExternalIdRequest {
    externalId: string;
}

export interface GetItemRequest {
    merchantItemOid: number;
    expand?: string;
    placeholders?: boolean;
}

export interface GetItemByMerchantItemIdRequest {
    merchantItemId: string;
    expand?: string;
    placeholders?: boolean;
}

export interface GetItemsRequest {
    parentCategoryId?: number;
    parentCategoryPath?: string;
    limit?: number;
    offset?: number;
    since?: string;
    sort?: string;
    expand?: string;
    placeholders?: boolean;
}

export interface GetPricingTiersRequest {
    expand?: string;
}

export interface GetReviewRequest {
    reviewOid: number;
    merchantItemOid: number;
}

export interface GetReviewsRequest {
    merchantItemOid: number;
}

export interface GetUnassociatedDigitalItemsRequest {
    limit?: number;
    offset?: number;
    since?: string;
    sort?: string;
    expand?: string;
    placeholders?: boolean;
}

export interface InsertDigitalItemRequest {
    digitalItem: ItemDigitalItem;
}

export interface InsertItemRequest {
    item: Item;
    expand?: string;
    placeholders?: boolean;
}

export interface InsertReviewRequest {
    merchantItemOid: number;
    review: ItemReview;
}

export interface UpdateDigitalItemRequest {
    digitalItemOid: number;
    digitalItem: ItemDigitalItem;
}

export interface UpdateItemRequest {
    merchantItemOid: number;
    item: Item;
    expand?: string;
    placeholders?: boolean;
}

export interface UpdateItemsRequest {
    itemsRequest: ItemsRequest;
    expand?: string;
    placeholders?: boolean;
    async?: boolean;
}

export interface UpdateReviewRequest {
    reviewOid: number;
    merchantItemOid: number;
    review: ItemReview;
}

export interface UploadTemporaryMultimediaRequest {
    file: Blob;
}

/**
 * ItemApi - interface
 * 
 * @export
 * @interface ItemApiInterface
 */
export interface ItemApiInterface {
    /**
     * Delete a digital item on the UltraCart account. 
     * @summary Delete a digital item, which is a file within the digital library, not an actual merchant item
     * @param {number} digitalItemOid The digital item oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    deleteDigitalItemRaw(requestParameters: DeleteDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a digital item on the UltraCart account. 
     * Delete a digital item, which is a file within the digital library, not an actual merchant item
     */
    deleteDigitalItem(requestParameters: DeleteDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete an item on the UltraCart account. 
     * @summary Delete an item
     * @param {number} merchantItemOid The item oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    deleteItemRaw(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an item on the UltraCart account. 
     * Delete an item
     */
    deleteItem(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete an item review. 
     * @summary Delete a review
     * @param {number} reviewOid The review oid to delete.
     * @param {number} merchantItemOid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    deleteReviewRaw(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an item review. 
     * Delete a review
     */
    deleteReview(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * @summary Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
     * @param {number} digitalItemOid The digital item oid to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getDigitalItemRaw(requestParameters: GetDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemResponse>>;

    /**
     * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
     */
    getDigitalItem(requestParameters: GetDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemResponse>;

    /**
     * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve digital items from the digital library which are digital files that may be attached to normal items
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch items that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getDigitalItemsRaw(requestParameters: GetDigitalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemsResponse>>;

    /**
     * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve digital items from the digital library which are digital files that may be attached to normal items
     */
    getDigitalItems(requestParameters: GetDigitalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemsResponse>;

    /**
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * @summary Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
     * @param {string} externalId The external id to match against.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getDigitalItemsByExternalIdRaw(requestParameters: GetDigitalItemsByExternalIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemsResponse>>;

    /**
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
     */
    getDigitalItemsByExternalId(requestParameters: GetDigitalItemsByExternalIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemsResponse>;

    /**
     * Retrieves a single item using the specified item oid. 
     * @summary Retrieve an item
     * @param {number} merchantItemOid The item oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getItemRaw(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>>;

    /**
     * Retrieves a single item using the specified item oid. 
     * Retrieve an item
     */
    getItem(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse>;

    /**
     * Retrieves a single item using the specified item id. 
     * @summary Retrieve an item by item id
     * @param {string} merchantItemId The item id to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getItemByMerchantItemIdRaw(requestParameters: GetItemByMerchantItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>>;

    /**
     * Retrieves a single item using the specified item id. 
     * Retrieve an item by item id
     */
    getItemByMerchantItemId(requestParameters: GetItemByMerchantItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse>;

    /**
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve items
     * @param {number} [parentCategoryId] The parent category object id to retrieve items for.  Unspecified means all items on the account.  0 &#x3D; root
     * @param {string} [parentCategoryPath] The parent category path to retrieve items for.  Unspecified means all items on the account.  / &#x3D; root
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch items that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getItemsRaw(requestParameters: GetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsResponse>>;

    /**
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve items
     */
    getItems(requestParameters: GetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsResponse>;

    /**
     * Retrieves the pricing tiers 
     * @summary Retrieve pricing tiers
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getPricingTiersRaw(requestParameters: GetPricingTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingTiersResponse>>;

    /**
     * Retrieves the pricing tiers 
     * Retrieve pricing tiers
     */
    getPricingTiers(requestParameters: GetPricingTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingTiersResponse>;

    /**
     * Retrieve an item review. 
     * @summary get a review
     * @param {number} reviewOid The review oid to retrieve.
     * @param {number} merchantItemOid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getReviewRaw(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewResponse>>;

    /**
     * Retrieve an item review. 
     * get a review
     */
    getReview(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewResponse>;

    /**
     * Retrieve item reviews. 
     * @summary get reviews for an item
     * @param {number} merchantItemOid The item oid the review is associated with.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getReviewsRaw(requestParameters: GetReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewsResponse>>;

    /**
     * Retrieve item reviews. 
     * get reviews for an item
     */
    getReviews(requestParameters: GetReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewsResponse>;

    /**
     * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 2000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch items that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    getUnassociatedDigitalItemsRaw(requestParameters: GetUnassociatedDigitalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemsResponse>>;

    /**
     * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
     */
    getUnassociatedDigitalItems(requestParameters: GetUnassociatedDigitalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemsResponse>;

    /**
     * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
     * @summary Create a file within the digital library
     * @param {ItemDigitalItem} digitalItem Digital item to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    insertDigitalItemRaw(requestParameters: InsertDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemResponse>>;

    /**
     * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
     * Create a file within the digital library
     */
    insertDigitalItem(requestParameters: InsertDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemResponse>;

    /**
     * Create a new item on the UltraCart account. 
     * @summary Create an item
     * @param {Item} item Item to create
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    insertItemRaw(requestParameters: InsertItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>>;

    /**
     * Create a new item on the UltraCart account. 
     * Create an item
     */
    insertItem(requestParameters: InsertItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse>;

    /**
     * Insert a item review. 
     * @summary Insert a review
     * @param {number} merchantItemOid The item oid the review is associated with.
     * @param {ItemReview} review Review to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    insertReviewRaw(requestParameters: InsertReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewResponse>>;

    /**
     * Insert a item review. 
     * Insert a review
     */
    insertReview(requestParameters: InsertReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewResponse>;

    /**
     * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
     * @summary Updates a file within the digital library
     * @param {number} digitalItemOid The digital item oid to update.
     * @param {ItemDigitalItem} digitalItem Digital item to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    updateDigitalItemRaw(requestParameters: UpdateDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemResponse>>;

    /**
     * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
     * Updates a file within the digital library
     */
    updateDigitalItem(requestParameters: UpdateDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemResponse>;

    /**
     * Update a new item on the UltraCart account. 
     * @summary Update an item
     * @param {number} merchantItemOid The item oid to update.
     * @param {Item} item Item to update
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    updateItemRaw(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>>;

    /**
     * Update a new item on the UltraCart account. 
     * Update an item
     */
    updateItem(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse>;

    /**
     * Update multiple item on the UltraCart account. 
     * @summary Update multiple items
     * @param {ItemsRequest} itemsRequest Items to update (synchronous maximum 20 / asynchronous maximum 100)
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    updateItemsRaw(requestParameters: UpdateItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsResponse>>;

    /**
     * Update multiple item on the UltraCart account. 
     * Update multiple items
     */
    updateItems(requestParameters: UpdateItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsResponse>;

    /**
     * Update an item review. 
     * @summary Update a review
     * @param {number} reviewOid The review oid to update.
     * @param {number} merchantItemOid The item oid the review is associated with.
     * @param {ItemReview} review Review to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    updateReviewRaw(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewResponse>>;

    /**
     * Update an item review. 
     * Update a review
     */
    updateReview(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewResponse>;

    /**
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * @summary Upload an image to the temporary multimedia.
     * @param {Blob} file File to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    uploadTemporaryMultimediaRaw(requestParameters: UploadTemporaryMultimediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TempMultimediaResponse>>;

    /**
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * Upload an image to the temporary multimedia.
     */
    uploadTemporaryMultimedia(requestParameters: UploadTemporaryMultimediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TempMultimediaResponse>;

}

/**
 * 
 */
export class ItemApi extends runtime.BaseAPI implements ItemApiInterface {

    /**
     * Delete a digital item on the UltraCart account. 
     * Delete a digital item, which is a file within the digital library, not an actual merchant item
     */
    async deleteDigitalItemRaw(requestParameters: DeleteDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.digitalItemOid === null || requestParameters.digitalItemOid === undefined) {
            throw new runtime.RequiredError('digitalItemOid','Required parameter requestParameters.digitalItemOid was null or undefined when calling deleteDigitalItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library/{digital_item_oid}`.replace(`{${"digital_item_oid"}}`, encodeURIComponent(String(requestParameters.digitalItemOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a digital item on the UltraCart account. 
     * Delete a digital item, which is a file within the digital library, not an actual merchant item
     */
    async deleteDigitalItem(requestParameters: DeleteDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDigitalItemRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an item on the UltraCart account. 
     * Delete an item
     */
    async deleteItemRaw(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling deleteItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}`.replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an item on the UltraCart account. 
     * Delete an item
     */
    async deleteItem(requestParameters: DeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an item review. 
     * Delete a review
     */
    async deleteReviewRaw(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewOid === null || requestParameters.reviewOid === undefined) {
            throw new runtime.RequiredError('reviewOid','Required parameter requestParameters.reviewOid was null or undefined when calling deleteReview.');
        }

        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling deleteReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}/reviews/{review_oid}`.replace(`{${"review_oid"}}`, encodeURIComponent(String(requestParameters.reviewOid))).replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an item review. 
     * Delete a review
     */
    async deleteReview(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReviewRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
     */
    async getDigitalItemRaw(requestParameters: GetDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemResponse>> {
        if (requestParameters.digitalItemOid === null || requestParameters.digitalItemOid === undefined) {
            throw new runtime.RequiredError('digitalItemOid','Required parameter requestParameters.digitalItemOid was null or undefined when calling getDigitalItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library/{digital_item_oid}`.replace(`{${"digital_item_oid"}}`, encodeURIComponent(String(requestParameters.digitalItemOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDigitalItemResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a digital item (file information) from the account.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * Retrieve a digital item from the digital library, which are digital files that may be attached to normal items
     */
    async getDigitalItem(requestParameters: GetDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemResponse> {
        const response = await this.getDigitalItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve digital items from the digital library which are digital files that may be attached to normal items
     */
    async getDigitalItemsRaw(requestParameters: GetDigitalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDigitalItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a group of digital items (file information) from the account.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve digital items from the digital library which are digital files that may be attached to normal items
     */
    async getDigitalItems(requestParameters: GetDigitalItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemsResponse> {
        const response = await this.getDigitalItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
     */
    async getDigitalItemsByExternalIdRaw(requestParameters: GetDigitalItemsByExternalIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemsResponse>> {
        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling getDigitalItemsByExternalId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library/by_external/{external_id}`.replace(`{${"external_id"}}`, encodeURIComponent(String(requestParameters.externalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDigitalItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items. 
     * Retrieves digital items from the digital library (which are digital files that may be attached to normal items) that having a matching external id
     */
    async getDigitalItemsByExternalId(requestParameters: GetDigitalItemsByExternalIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemsResponse> {
        const response = await this.getDigitalItemsByExternalIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single item using the specified item oid. 
     * Retrieve an item
     */
    async getItemRaw(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>> {
        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling getItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}`.replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single item using the specified item oid. 
     * Retrieve an item
     */
    async getItem(requestParameters: GetItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse> {
        const response = await this.getItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single item using the specified item id. 
     * Retrieve an item by item id
     */
    async getItemByMerchantItemIdRaw(requestParameters: GetItemByMerchantItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>> {
        if (requestParameters.merchantItemId === null || requestParameters.merchantItemId === undefined) {
            throw new runtime.RequiredError('merchantItemId','Required parameter requestParameters.merchantItemId was null or undefined when calling getItemByMerchantItemId.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/merchant_item_id/{merchant_item_id}`.replace(`{${"merchant_item_id"}}`, encodeURIComponent(String(requestParameters.merchantItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single item using the specified item id. 
     * Retrieve an item by item id
     */
    async getItemByMerchantItemId(requestParameters: GetItemByMerchantItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse> {
        const response = await this.getItemByMerchantItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve items
     */
    async getItemsRaw(requestParameters: GetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.parentCategoryId !== undefined) {
            queryParameters['parent_category_id'] = requestParameters.parentCategoryId;
        }

        if (requestParameters.parentCategoryPath !== undefined) {
            queryParameters['parent_category_path'] = requestParameters.parentCategoryPath;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a group of items from the account.  If no parameters are specified, all items will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve items
     */
    async getItems(requestParameters: GetItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsResponse> {
        const response = await this.getItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the pricing tiers 
     * Retrieve pricing tiers
     */
    async getPricingTiersRaw(requestParameters: GetPricingTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingTiersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/pricing_tiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingTiersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the pricing tiers 
     * Retrieve pricing tiers
     */
    async getPricingTiers(requestParameters: GetPricingTiersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingTiersResponse> {
        const response = await this.getPricingTiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an item review. 
     * get a review
     */
    async getReviewRaw(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewResponse>> {
        if (requestParameters.reviewOid === null || requestParameters.reviewOid === undefined) {
            throw new runtime.RequiredError('reviewOid','Required parameter requestParameters.reviewOid was null or undefined when calling getReview.');
        }

        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling getReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}/reviews/{review_oid}`.replace(`{${"review_oid"}}`, encodeURIComponent(String(requestParameters.reviewOid))).replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemReviewResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an item review. 
     * get a review
     */
    async getReview(requestParameters: GetReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewResponse> {
        const response = await this.getReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve item reviews. 
     * get reviews for an item
     */
    async getReviewsRaw(requestParameters: GetReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewsResponse>> {
        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling getReviews.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}/reviews`.replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemReviewsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve item reviews. 
     * get reviews for an item
     */
    async getReviews(requestParameters: GetReviewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewsResponse> {
        const response = await this.getReviewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
     */
    async getUnassociatedDigitalItemsRaw(requestParameters: GetUnassociatedDigitalItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library/unassociated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDigitalItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a group of digital items (file information) from the account that are not yet associated with any actual items.  If no parameters are specified, all digital items will be returned.  Be aware that these are not normal items that can be added to a shopping cart. Rather, they are digital files that may be associated with normal items.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve digital items from the digital library (which are digital files that may be attached to normal items) not yet associated with actual items
     */
    async getUnassociatedDigitalItems(requestParameters: GetUnassociatedDigitalItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemsResponse> {
        const response = await this.getUnassociatedDigitalItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
     * Create a file within the digital library
     */
    async insertDigitalItemRaw(requestParameters: InsertDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemResponse>> {
        if (requestParameters.digitalItem === null || requestParameters.digitalItem === undefined) {
            throw new runtime.RequiredError('digitalItem','Required parameter requestParameters.digitalItem was null or undefined when calling insertDigitalItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemDigitalItemToJSON(requestParameters.digitalItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDigitalItemResponseFromJSON(jsonValue));
    }

    /**
     * Create a file within the digital library.  This does not create an item, but makes this digital file available and selectable as part (or all) of an item. 
     * Create a file within the digital library
     */
    async insertDigitalItem(requestParameters: InsertDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemResponse> {
        const response = await this.insertDigitalItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new item on the UltraCart account. 
     * Create an item
     */
    async insertItemRaw(requestParameters: InsertItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>> {
        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling insertItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseFromJSON(jsonValue));
    }

    /**
     * Create a new item on the UltraCart account. 
     * Create an item
     */
    async insertItem(requestParameters: InsertItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse> {
        const response = await this.insertItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert a item review. 
     * Insert a review
     */
    async insertReviewRaw(requestParameters: InsertReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewResponse>> {
        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling insertReview.');
        }

        if (requestParameters.review === null || requestParameters.review === undefined) {
            throw new runtime.RequiredError('review','Required parameter requestParameters.review was null or undefined when calling insertReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}/reviews`.replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemReviewToJSON(requestParameters.review),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemReviewResponseFromJSON(jsonValue));
    }

    /**
     * Insert a item review. 
     * Insert a review
     */
    async insertReview(requestParameters: InsertReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewResponse> {
        const response = await this.insertReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
     * Updates a file within the digital library
     */
    async updateDigitalItemRaw(requestParameters: UpdateDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemDigitalItemResponse>> {
        if (requestParameters.digitalItemOid === null || requestParameters.digitalItemOid === undefined) {
            throw new runtime.RequiredError('digitalItemOid','Required parameter requestParameters.digitalItemOid was null or undefined when calling updateDigitalItem.');
        }

        if (requestParameters.digitalItem === null || requestParameters.digitalItem === undefined) {
            throw new runtime.RequiredError('digitalItem','Required parameter requestParameters.digitalItem was null or undefined when calling updateDigitalItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/digital_library/{digital_item_oid}`.replace(`{${"digital_item_oid"}}`, encodeURIComponent(String(requestParameters.digitalItemOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemDigitalItemToJSON(requestParameters.digitalItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemDigitalItemResponseFromJSON(jsonValue));
    }

    /**
     * Updates a file within the digital library.  This does not update an item, but updates a digital file available and selectable as part (or all) of an item. 
     * Updates a file within the digital library
     */
    async updateDigitalItem(requestParameters: UpdateDigitalItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemDigitalItemResponse> {
        const response = await this.updateDigitalItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a new item on the UltraCart account. 
     * Update an item
     */
    async updateItemRaw(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemResponse>> {
        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling updateItem.');
        }

        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling updateItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}`.replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters.item),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemResponseFromJSON(jsonValue));
    }

    /**
     * Update a new item on the UltraCart account. 
     * Update an item
     */
    async updateItem(requestParameters: UpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemResponse> {
        const response = await this.updateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple item on the UltraCart account. 
     * Update multiple items
     */
    async updateItemsRaw(requestParameters: UpdateItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsResponse>> {
        if (requestParameters.itemsRequest === null || requestParameters.itemsRequest === undefined) {
            throw new runtime.RequiredError('itemsRequest','Required parameter requestParameters.itemsRequest was null or undefined when calling updateItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        if (requestParameters.async !== undefined) {
            queryParameters['_async'] = requestParameters.async;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/batch`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemsRequestToJSON(requestParameters.itemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple item on the UltraCart account. 
     * Update multiple items
     */
    async updateItems(requestParameters: UpdateItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsResponse> {
        const response = await this.updateItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an item review. 
     * Update a review
     */
    async updateReviewRaw(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemReviewResponse>> {
        if (requestParameters.reviewOid === null || requestParameters.reviewOid === undefined) {
            throw new runtime.RequiredError('reviewOid','Required parameter requestParameters.reviewOid was null or undefined when calling updateReview.');
        }

        if (requestParameters.merchantItemOid === null || requestParameters.merchantItemOid === undefined) {
            throw new runtime.RequiredError('merchantItemOid','Required parameter requestParameters.merchantItemOid was null or undefined when calling updateReview.');
        }

        if (requestParameters.review === null || requestParameters.review === undefined) {
            throw new runtime.RequiredError('review','Required parameter requestParameters.review was null or undefined when calling updateReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/item/items/{merchant_item_oid}/reviews/{review_oid}`.replace(`{${"review_oid"}}`, encodeURIComponent(String(requestParameters.reviewOid))).replace(`{${"merchant_item_oid"}}`, encodeURIComponent(String(requestParameters.merchantItemOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemReviewToJSON(requestParameters.review),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemReviewResponseFromJSON(jsonValue));
    }

    /**
     * Update an item review. 
     * Update a review
     */
    async updateReview(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemReviewResponse> {
        const response = await this.updateReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * Upload an image to the temporary multimedia.
     */
    async uploadTemporaryMultimediaRaw(requestParameters: UploadTemporaryMultimediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TempMultimediaResponse>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadTemporaryMultimedia.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/item/temp_multimedia`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TempMultimediaResponseFromJSON(jsonValue));
    }

    /**
     * Uploads an image and returns back meta information about the image as well as the identifier needed for the item update. 
     * Upload an image to the temporary multimedia.
     */
    async uploadTemporaryMultimedia(requestParameters: UploadTemporaryMultimediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TempMultimediaResponse> {
        const response = await this.uploadTemporaryMultimediaRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

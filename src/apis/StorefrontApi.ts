/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddLibraryItemRequest,
    AddLibraryItemRequestFromJSON,
    AddLibraryItemRequestToJSON,
    ApplyLibraryItemRequest,
    ApplyLibraryItemRequestFromJSON,
    ApplyLibraryItemRequestToJSON,
    ApplyLibraryItemResponse,
    ApplyLibraryItemResponseFromJSON,
    ApplyLibraryItemResponseToJSON,
    BaseResponse,
    BaseResponseFromJSON,
    BaseResponseToJSON,
    CountriesResponse,
    CountriesResponseFromJSON,
    CountriesResponseToJSON,
    EmailBaseTemplateListResponse,
    EmailBaseTemplateListResponseFromJSON,
    EmailBaseTemplateListResponseToJSON,
    EmailCampaign,
    EmailCampaignFromJSON,
    EmailCampaignToJSON,
    EmailCampaignFolder,
    EmailCampaignFolderFromJSON,
    EmailCampaignFolderToJSON,
    EmailCampaignFolderResponse,
    EmailCampaignFolderResponseFromJSON,
    EmailCampaignFolderResponseToJSON,
    EmailCampaignFoldersResponse,
    EmailCampaignFoldersResponseFromJSON,
    EmailCampaignFoldersResponseToJSON,
    EmailCampaignResponse,
    EmailCampaignResponseFromJSON,
    EmailCampaignResponseToJSON,
    EmailCampaignsResponse,
    EmailCampaignsResponseFromJSON,
    EmailCampaignsResponseToJSON,
    EmailClicksResponse,
    EmailClicksResponseFromJSON,
    EmailClicksResponseToJSON,
    EmailCommseq,
    EmailCommseqFromJSON,
    EmailCommseqToJSON,
    EmailCommseqEmail,
    EmailCommseqEmailFromJSON,
    EmailCommseqEmailToJSON,
    EmailCommseqEmailResponse,
    EmailCommseqEmailResponseFromJSON,
    EmailCommseqEmailResponseToJSON,
    EmailCommseqEmailSendTestRequest,
    EmailCommseqEmailSendTestRequestFromJSON,
    EmailCommseqEmailSendTestRequestToJSON,
    EmailCommseqEmailSendTestResponse,
    EmailCommseqEmailSendTestResponseFromJSON,
    EmailCommseqEmailSendTestResponseToJSON,
    EmailCommseqEmailsRequest,
    EmailCommseqEmailsRequestFromJSON,
    EmailCommseqEmailsRequestToJSON,
    EmailCommseqEmailsResponse,
    EmailCommseqEmailsResponseFromJSON,
    EmailCommseqEmailsResponseToJSON,
    EmailCommseqPostcard,
    EmailCommseqPostcardFromJSON,
    EmailCommseqPostcardToJSON,
    EmailCommseqPostcardResponse,
    EmailCommseqPostcardResponseFromJSON,
    EmailCommseqPostcardResponseToJSON,
    EmailCommseqPostcardSendTestRequest,
    EmailCommseqPostcardSendTestRequestFromJSON,
    EmailCommseqPostcardSendTestRequestToJSON,
    EmailCommseqPostcardSendTestResponse,
    EmailCommseqPostcardSendTestResponseFromJSON,
    EmailCommseqPostcardSendTestResponseToJSON,
    EmailCommseqPostcardsRequest,
    EmailCommseqPostcardsRequestFromJSON,
    EmailCommseqPostcardsRequestToJSON,
    EmailCommseqPostcardsResponse,
    EmailCommseqPostcardsResponseFromJSON,
    EmailCommseqPostcardsResponseToJSON,
    EmailCommseqResponse,
    EmailCommseqResponseFromJSON,
    EmailCommseqResponseToJSON,
    EmailCommseqSequenceTestRequest,
    EmailCommseqSequenceTestRequestFromJSON,
    EmailCommseqSequenceTestRequestToJSON,
    EmailCommseqSequenceTestResponse,
    EmailCommseqSequenceTestResponseFromJSON,
    EmailCommseqSequenceTestResponseToJSON,
    EmailCommseqSmsSendTestRequest,
    EmailCommseqSmsSendTestRequestFromJSON,
    EmailCommseqSmsSendTestRequestToJSON,
    EmailCommseqSmsSendTestResponse,
    EmailCommseqSmsSendTestResponseFromJSON,
    EmailCommseqSmsSendTestResponseToJSON,
    EmailCommseqStatResponse,
    EmailCommseqStatResponseFromJSON,
    EmailCommseqStatResponseToJSON,
    EmailCommseqStepLogsResponse,
    EmailCommseqStepLogsResponseFromJSON,
    EmailCommseqStepLogsResponseToJSON,
    EmailCommseqWebhookSendTestRequest,
    EmailCommseqWebhookSendTestRequestFromJSON,
    EmailCommseqWebhookSendTestRequestToJSON,
    EmailCommseqWebhookSendTestResponse,
    EmailCommseqWebhookSendTestResponseFromJSON,
    EmailCommseqWebhookSendTestResponseToJSON,
    EmailCommseqsResponse,
    EmailCommseqsResponseFromJSON,
    EmailCommseqsResponseToJSON,
    EmailCustomer,
    EmailCustomerFromJSON,
    EmailCustomerToJSON,
    EmailCustomerEditorUrlResponse,
    EmailCustomerEditorUrlResponseFromJSON,
    EmailCustomerEditorUrlResponseToJSON,
    EmailCustomersResponse,
    EmailCustomersResponseFromJSON,
    EmailCustomersResponseToJSON,
    EmailDashboardActivityResponse,
    EmailDashboardActivityResponseFromJSON,
    EmailDashboardActivityResponseToJSON,
    EmailDashboardStatsResponse,
    EmailDashboardStatsResponseFromJSON,
    EmailDashboardStatsResponseToJSON,
    EmailDomain,
    EmailDomainFromJSON,
    EmailDomainToJSON,
    EmailEditorTokenResponse,
    EmailEditorTokenResponseFromJSON,
    EmailEditorTokenResponseToJSON,
    EmailFlow,
    EmailFlowFromJSON,
    EmailFlowToJSON,
    EmailFlowBackPopulateRequest,
    EmailFlowBackPopulateRequestFromJSON,
    EmailFlowBackPopulateRequestToJSON,
    EmailFlowBackPopulateResponse,
    EmailFlowBackPopulateResponseFromJSON,
    EmailFlowBackPopulateResponseToJSON,
    EmailFlowFolder,
    EmailFlowFolderFromJSON,
    EmailFlowFolderToJSON,
    EmailFlowFolderResponse,
    EmailFlowFolderResponseFromJSON,
    EmailFlowFolderResponseToJSON,
    EmailFlowFoldersResponse,
    EmailFlowFoldersResponseFromJSON,
    EmailFlowFoldersResponseToJSON,
    EmailFlowResponse,
    EmailFlowResponseFromJSON,
    EmailFlowResponseToJSON,
    EmailFlowsResponse,
    EmailFlowsResponseFromJSON,
    EmailFlowsResponseToJSON,
    EmailGlobalSettings,
    EmailGlobalSettingsFromJSON,
    EmailGlobalSettingsToJSON,
    EmailGlobalSettingsResponse,
    EmailGlobalSettingsResponseFromJSON,
    EmailGlobalSettingsResponseToJSON,
    EmailGlobalUnsubscribeRequest,
    EmailGlobalUnsubscribeRequestFromJSON,
    EmailGlobalUnsubscribeRequestToJSON,
    EmailGlobalUnsubscribeResponse,
    EmailGlobalUnsubscribeResponseFromJSON,
    EmailGlobalUnsubscribeResponseToJSON,
    EmailHistogramPropertyNamesResponse,
    EmailHistogramPropertyNamesResponseFromJSON,
    EmailHistogramPropertyNamesResponseToJSON,
    EmailHistogramPropertyValuesResponse,
    EmailHistogramPropertyValuesResponseFromJSON,
    EmailHistogramPropertyValuesResponseToJSON,
    EmailList,
    EmailListFromJSON,
    EmailListToJSON,
    EmailListArchiveResponse,
    EmailListArchiveResponseFromJSON,
    EmailListArchiveResponseToJSON,
    EmailListCustomersResponse,
    EmailListCustomersResponseFromJSON,
    EmailListCustomersResponseToJSON,
    EmailListResponse,
    EmailListResponseFromJSON,
    EmailListResponseToJSON,
    EmailListSegmentFolder,
    EmailListSegmentFolderFromJSON,
    EmailListSegmentFolderToJSON,
    EmailListSegmentFolderResponse,
    EmailListSegmentFolderResponseFromJSON,
    EmailListSegmentFolderResponseToJSON,
    EmailListSegmentFoldersResponse,
    EmailListSegmentFoldersResponseFromJSON,
    EmailListSegmentFoldersResponseToJSON,
    EmailListSubscribeResponse,
    EmailListSubscribeResponseFromJSON,
    EmailListSubscribeResponseToJSON,
    EmailListsResponse,
    EmailListsResponseFromJSON,
    EmailListsResponseToJSON,
    EmailOrdersResponse,
    EmailOrdersResponseFromJSON,
    EmailOrdersResponseToJSON,
    EmailPerformanceResponse,
    EmailPerformanceResponseFromJSON,
    EmailPerformanceResponseToJSON,
    EmailPlan,
    EmailPlanFromJSON,
    EmailPlanToJSON,
    EmailPlanResponse,
    EmailPlanResponseFromJSON,
    EmailPlanResponseToJSON,
    EmailPostcardTrackingResponse,
    EmailPostcardTrackingResponseFromJSON,
    EmailPostcardTrackingResponseToJSON,
    EmailSegment,
    EmailSegmentFromJSON,
    EmailSegmentToJSON,
    EmailSegmentArchiveResponse,
    EmailSegmentArchiveResponseFromJSON,
    EmailSegmentArchiveResponseToJSON,
    EmailSegmentCustomersResponse,
    EmailSegmentCustomersResponseFromJSON,
    EmailSegmentCustomersResponseToJSON,
    EmailSegmentDownloadPrepareResponse,
    EmailSegmentDownloadPrepareResponseFromJSON,
    EmailSegmentDownloadPrepareResponseToJSON,
    EmailSegmentResponse,
    EmailSegmentResponseFromJSON,
    EmailSegmentResponseToJSON,
    EmailSegmentsResponse,
    EmailSegmentsResponseFromJSON,
    EmailSegmentsResponseToJSON,
    EmailSendingDomainResponse,
    EmailSendingDomainResponseFromJSON,
    EmailSendingDomainResponseToJSON,
    EmailSendingDomainsResponse,
    EmailSendingDomainsResponseFromJSON,
    EmailSendingDomainsResponseToJSON,
    EmailSettings,
    EmailSettingsFromJSON,
    EmailSettingsToJSON,
    EmailSettingsResponse,
    EmailSettingsResponseFromJSON,
    EmailSettingsResponseToJSON,
    EmailStatPostcardSummaryRequest,
    EmailStatPostcardSummaryRequestFromJSON,
    EmailStatPostcardSummaryRequestToJSON,
    EmailStatPostcardSummaryResponse,
    EmailStatPostcardSummaryResponseFromJSON,
    EmailStatPostcardSummaryResponseToJSON,
    EmailStatSummaryRequest,
    EmailStatSummaryRequestFromJSON,
    EmailStatSummaryRequestToJSON,
    EmailStatSummaryResponse,
    EmailStatSummaryResponseFromJSON,
    EmailStatSummaryResponseToJSON,
    EmailStepStatRequest,
    EmailStepStatRequestFromJSON,
    EmailStepStatRequestToJSON,
    EmailStepStatResponse,
    EmailStepStatResponseFromJSON,
    EmailStepStatResponseToJSON,
    EmailStepWaitingRequest,
    EmailStepWaitingRequestFromJSON,
    EmailStepWaitingRequestToJSON,
    EmailStepWaitingResponse,
    EmailStepWaitingResponseFromJSON,
    EmailStepWaitingResponseToJSON,
    EmailTemplate,
    EmailTemplateFromJSON,
    EmailTemplateToJSON,
    EmailTemplatesResponse,
    EmailTemplatesResponseFromJSON,
    EmailTemplatesResponseToJSON,
    EmailThirdPartyListImportRequest,
    EmailThirdPartyListImportRequestFromJSON,
    EmailThirdPartyListImportRequestToJSON,
    EmailThirdPartyProvidersResponse,
    EmailThirdPartyProvidersResponseFromJSON,
    EmailThirdPartyProvidersResponseToJSON,
    EmailWebhookEditorValuesResponse,
    EmailWebhookEditorValuesResponseFromJSON,
    EmailWebhookEditorValuesResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Experiment,
    ExperimentFromJSON,
    ExperimentToJSON,
    ExperimentResponse,
    ExperimentResponseFromJSON,
    ExperimentResponseToJSON,
    ExperimentsResponse,
    ExperimentsResponseFromJSON,
    ExperimentsResponseToJSON,
    FileManagerPageResponse,
    FileManagerPageResponseFromJSON,
    FileManagerPageResponseToJSON,
    FileManagerUploadRequest,
    FileManagerUploadRequestFromJSON,
    FileManagerUploadRequestToJSON,
    FileManagerUploadUrlResponse,
    FileManagerUploadUrlResponseFromJSON,
    FileManagerUploadUrlResponseToJSON,
    GeocodeRequest,
    GeocodeRequestFromJSON,
    GeocodeRequestToJSON,
    GeocodeResponse,
    GeocodeResponseFromJSON,
    GeocodeResponseToJSON,
    LibraryFilterValuesResponse,
    LibraryFilterValuesResponseFromJSON,
    LibraryFilterValuesResponseToJSON,
    LibraryItem,
    LibraryItemFromJSON,
    LibraryItemToJSON,
    LibraryItemQuery,
    LibraryItemQueryFromJSON,
    LibraryItemQueryToJSON,
    LibraryItemResponse,
    LibraryItemResponseFromJSON,
    LibraryItemResponseToJSON,
    LibraryItemsResponse,
    LibraryItemsResponseFromJSON,
    LibraryItemsResponseToJSON,
    LookupRequest,
    LookupRequestFromJSON,
    LookupRequestToJSON,
    LookupResponse,
    LookupResponseFromJSON,
    LookupResponseToJSON,
    PricingTiersResponse,
    PricingTiersResponseFromJSON,
    PricingTiersResponseToJSON,
    PublishLibraryItemRequest,
    PublishLibraryItemRequestFromJSON,
    PublishLibraryItemRequestToJSON,
    RulerValidationRequest,
    RulerValidationRequestFromJSON,
    RulerValidationRequestToJSON,
    RulerValidationResponse,
    RulerValidationResponseFromJSON,
    RulerValidationResponseToJSON,
    ScreenRecordingHeatmapIndexRequest,
    ScreenRecordingHeatmapIndexRequestFromJSON,
    ScreenRecordingHeatmapIndexRequestToJSON,
    ScreenRecordingHeatmapIndexResponse,
    ScreenRecordingHeatmapIndexResponseFromJSON,
    ScreenRecordingHeatmapIndexResponseToJSON,
    ScreenRecordingHeatmapRequest,
    ScreenRecordingHeatmapRequestFromJSON,
    ScreenRecordingHeatmapRequestToJSON,
    ScreenRecordingHeatmapReset,
    ScreenRecordingHeatmapResetFromJSON,
    ScreenRecordingHeatmapResetToJSON,
    ScreenRecordingHeatmapResponse,
    ScreenRecordingHeatmapResponseFromJSON,
    ScreenRecordingHeatmapResponseToJSON,
    ScreenRecordingMerchantNotesRequest,
    ScreenRecordingMerchantNotesRequestFromJSON,
    ScreenRecordingMerchantNotesRequestToJSON,
    ScreenRecordingPageViewDataResponse,
    ScreenRecordingPageViewDataResponseFromJSON,
    ScreenRecordingPageViewDataResponseToJSON,
    ScreenRecordingQueryRequest,
    ScreenRecordingQueryRequestFromJSON,
    ScreenRecordingQueryRequestToJSON,
    ScreenRecordingQueryResponse,
    ScreenRecordingQueryResponseFromJSON,
    ScreenRecordingQueryResponseToJSON,
    ScreenRecordingResponse,
    ScreenRecordingResponseFromJSON,
    ScreenRecordingResponseToJSON,
    ScreenRecordingSegment,
    ScreenRecordingSegmentFromJSON,
    ScreenRecordingSegmentToJSON,
    ScreenRecordingSegmentResponse,
    ScreenRecordingSegmentResponseFromJSON,
    ScreenRecordingSegmentResponseToJSON,
    ScreenRecordingSegmentsResponse,
    ScreenRecordingSegmentsResponseFromJSON,
    ScreenRecordingSegmentsResponseToJSON,
    ScreenRecordingSettings,
    ScreenRecordingSettingsFromJSON,
    ScreenRecordingSettingsToJSON,
    ScreenRecordingSettingsResponse,
    ScreenRecordingSettingsResponseFromJSON,
    ScreenRecordingSettingsResponseToJSON,
    ScreenRecordingTagsRequest,
    ScreenRecordingTagsRequestFromJSON,
    ScreenRecordingTagsRequestToJSON,
    ScreenRecordingTagsResponse,
    ScreenRecordingTagsResponseFromJSON,
    ScreenRecordingTagsResponseToJSON,
    ScreenshotsResponse,
    ScreenshotsResponseFromJSON,
    ScreenshotsResponseToJSON,
    StoreFrontsResponse,
    StoreFrontsResponseFromJSON,
    StoreFrontsResponseToJSON,
    ThumbnailParametersRequest,
    ThumbnailParametersRequestFromJSON,
    ThumbnailParametersRequestToJSON,
    ThumbnailParametersResponse,
    ThumbnailParametersResponseFromJSON,
    ThumbnailParametersResponseToJSON,
    TransactionEmail,
    TransactionEmailFromJSON,
    TransactionEmailToJSON,
    TransactionEmailListResponse,
    TransactionEmailListResponseFromJSON,
    TransactionEmailListResponseToJSON,
    TransactionEmailResponse,
    TransactionEmailResponseFromJSON,
    TransactionEmailResponseToJSON,
    Twilio,
    TwilioFromJSON,
    TwilioToJSON,
    TwilioResponse,
    TwilioResponseFromJSON,
    TwilioResponseToJSON,
    TwiliosResponse,
    TwiliosResponseFromJSON,
    TwiliosResponseToJSON,
} from '../models';

export interface AddToLibraryRequest {
    addLibraryRequest: AddLibraryItemRequest;
}

export interface ApplyToStoreFrontRequest {
    applyLibraryRequest: ApplyLibraryItemRequest;
}

export interface ArchiveEmailListRequest {
    storefrontOid: number;
    emailListUuid: string;
}

export interface ArchiveEmailSegmentRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
}

export interface BackPopulateEmailFlowRequest {
    storefrontOid: number;
    emailFlowUuid: string;
    backPopulateRequest: EmailFlowBackPopulateRequest;
}

export interface CheckDownloadEmailSegmentRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
    emailSegmentRebuildUuid: string;
}

export interface CloneEmailCampaignRequest {
    storefrontOid: number;
    emailCampaignUuid: string;
    targetStorefrontOid?: number;
}

export interface CloneEmailFlowRequest {
    storefrontOid: number;
    emailFlowUuid: string;
    targetStorefrontOid?: number;
}

export interface CreateEmailSendingDomainRequest {
    domain: string;
}

export interface CreateEmailSendingDomain2Request {
    emailDomain: EmailDomain;
}

export interface CreateFsDirectoryRequest {
    id: number;
    name?: string;
    parentStorefrontFsDirectoryOid?: number;
}

export interface CreateTwilioAccountRequest {
    twilio: Twilio;
}

export interface DeleteEmailCampaignFolderRequest {
    storefrontOid: number;
    emailCampaignFolderUuid: string;
}

export interface DeleteEmailCommseqStatRequest {
    storefrontOid: number;
    commseqUuid: string;
}

export interface DeleteEmailEmailRequest {
    storefrontOid: number;
    commseqEmailUuid: string;
}

export interface DeleteEmailFlowFolderRequest {
    storefrontOid: number;
    emailFlowFolderUuid: string;
}

export interface DeleteEmailListCustomerRequest {
    storefrontOid: number;
    emailListUuid: string;
    emailCustomerUuid: string;
}

export interface DeleteEmailListSegmentFolderRequest {
    storefrontOid: number;
    emailListSegmentFolderUuid: string;
}

export interface DeleteEmailPostcardRequest {
    storefrontOid: number;
    commseqPostcardUuid: string;
}

export interface DeleteEmailSendingDomainRequest {
    domain: string;
}

export interface DeleteExperimentRequest {
    storefrontOid: number;
    storefrontExperimentOid: number;
}

export interface DeleteFsFileRequest {
    id: number;
    parentStorefrontFsDirectoryOid?: number;
    storefrontFsFileOid?: number;
}

export interface DeleteHeatmapRequest {
    storefrontOid: number;
    query: ScreenRecordingHeatmapReset;
}

export interface DeleteLibraryItemRequest {
    libraryItemOid: number;
}

export interface DeleteLibraryItemPublishedVersionsRequest {
    libraryItemOid: number;
}

export interface DeleteScreenRecordingSegmentRequest {
    storefrontOid: number;
    screenRecordingSegmentOid: number;
}

export interface DeleteTwilioAccountRequest {
    espTwilioUuid: string;
}

export interface DuplicateLibraryItemRequest {
    libraryItemOid: number;
}

export interface FavoriteScreenRecordingRequest {
    storefrontOid: number;
    screenRecordingUuid: string;
}

export interface GeocodeAddressRequest {
    storefrontOid: number;
    geocodeRequest: GeocodeRequest;
}

export interface GetCountriesRequest {
    storefrontOid: number;
}

export interface GetEditorTokenRequest {
    storefrontOid: number;
}

export interface GetEmailBaseTemplatesRequest {
    storefrontOid: number;
}

export interface GetEmailCampaignRequest {
    storefrontOid: number;
    emailCampaignUuid: string;
}

export interface GetEmailCampaignFolderRequest {
    storefrontOid: number;
    emailCampaignFolderUuid: string;
}

export interface GetEmailCampaignFoldersRequest {
    storefrontOid: number;
}

export interface GetEmailCampaignScreenshotsRequest {
    storefrontOid: number;
    emailCampaignUuid: string;
}

export interface GetEmailCampaignsRequest {
    storefrontOid: number;
}

export interface GetEmailCampaignsWithStatsRequest {
    storefrontOid: number;
    statDays: string;
}

export interface GetEmailCommseqRequest {
    storefrontOid: number;
    commseqUuid: string;
}

export interface GetEmailCommseqEmailStatsRequest {
    storefrontOid: number;
    commseqUuid: string;
    statsRequest: EmailStatSummaryRequest;
}

export interface GetEmailCommseqPostcardStatsRequest {
    storefrontOid: number;
    commseqUuid: string;
    statsRequest: EmailStatPostcardSummaryRequest;
}

export interface GetEmailCommseqPostcardTrackingRequest {
    storefrontOid: number;
    commseqPostcardUuid: string;
}

export interface GetEmailCommseqStatOverallRequest {
    storefrontOid: number;
    commseqUuid: string;
}

export interface GetEmailCommseqStepStatsRequest {
    storefrontOid: number;
    commseqUuid: string;
    statsRequest: EmailStepStatRequest;
}

export interface GetEmailCommseqStepWaitingRequest {
    storefrontOid: number;
    commseqUuid: string;
    waitingRequest: EmailStepWaitingRequest;
}

export interface GetEmailCommseqWebhookEditorValuesRequest {
    storefrontOid: number;
    commseqUuid: string;
}

export interface GetEmailCommseqsRequest {
    storefrontOid: number;
}

export interface GetEmailCustomerEditorUrlRequest {
    storefrontOid: number;
    emailCustomerUuid: string;
}

export interface GetEmailCustomersRequest {
    storefrontOid: number;
    pageNumber?: number;
    pageSize?: number;
    searchEmailPrefix?: string;
}

export interface GetEmailDashboardActivityRequest {
    storefrontOid: number;
    lastRecords?: number;
}

export interface GetEmailDashboardStatsRequest {
    storefrontOid: number;
    days?: number;
}

export interface GetEmailDispatchLogsRequest {
    storefrontOid: number;
    commseqUuid: string;
    commseqStepUuid: string;
}

export interface GetEmailEmailRequest {
    storefrontOid: number;
    commseqEmailUuid: string;
}

export interface GetEmailEmailClicksRequest {
    storefrontOid: number;
    commseqUuid: string;
    commseqStepUuid: string;
    commseqEmailUuid: string;
    days?: number;
}

export interface GetEmailEmailCustomerEditorUrlRequest {
    storefrontOid: number;
    commseqEmailUuid: string;
    orderId: string;
}

export interface GetEmailEmailOrdersRequest {
    storefrontOid: number;
    commseqUuid: string;
    commseqStepUuid: string;
    commseqEmailUuid: string;
    days?: number;
}

export interface GetEmailEmailsRequest {
    storefrontOid: number;
}

export interface GetEmailEmailsMultipleRequest {
    storefrontOid: number;
    emailCommseqEmailsRequest: EmailCommseqEmailsRequest;
}

export interface GetEmailFlowRequest {
    storefrontOid: number;
    emailFlowUuid: string;
}

export interface GetEmailFlowFolderRequest {
    storefrontOid: number;
    emailFlowFolderUuid: string;
}

export interface GetEmailFlowFoldersRequest {
    storefrontOid: number;
}

export interface GetEmailFlowScreenshotsRequest {
    storefrontOid: number;
    emailFlowUuid: string;
}

export interface GetEmailFlowsRequest {
    storefrontOid: number;
}

export interface GetEmailListRequest {
    storefrontOid: number;
    emailListUuid: string;
}

export interface GetEmailListCustomerEditorUrlRequest {
    storefrontOid: number;
    emailListUuid: string;
    emailCustomerUuid: string;
}

export interface GetEmailListCustomersRequest {
    storefrontOid: number;
    emailListUuid: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface GetEmailListSegmentFolderRequest {
    storefrontOid: number;
    emailListSegmentFolderUuid: string;
}

export interface GetEmailListSegmentFoldersRequest {
    storefrontOid: number;
}

export interface GetEmailListsRequest {
    storefrontOid: number;
}

export interface GetEmailPerformanceRequest {
    storefrontOid: number;
}

export interface GetEmailPlanRequest {
    storefrontOid: number;
}

export interface GetEmailPostcardRequest {
    storefrontOid: number;
    commseqPostcardUuid: string;
}

export interface GetEmailPostcardsRequest {
    storefrontOid: number;
}

export interface GetEmailPostcardsMultipleRequest {
    storefrontOid: number;
    emailCommseqPostcardsRequest: EmailCommseqPostcardsRequest;
}

export interface GetEmailSegmentRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
}

export interface GetEmailSegmentCustomerEditorUrlRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
    emailCustomerUuid: string;
}

export interface GetEmailSegmentCustomersRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface GetEmailSegmentsRequest {
    storefrontOid: number;
}

export interface GetEmailSendingDomainRequest {
    domain: string;
}

export interface GetEmailSendingDomainStatusRequest {
    domain: string;
}

export interface GetEmailSettingsRequest {
    storefrontOid: number;
}

export interface GetEmailTemplateRequest {
    storefrontOid: number;
    emailTemplateOid: number;
}

export interface GetEmailTemplatesRequest {
    storefrontOid: number;
    triggerType?: string;
}

export interface GetEmailThirdPartyProvidersRequest {
    storefrontOid: number;
}

export interface GetExperimentsRequest {
    storefrontOid: number;
}

export interface GetFsDirectoryRequest {
    id: number;
    path?: string;
    storefrontFsDirectoryOid?: number;
    storefrontThemeOid?: number;
}

export interface GetHeatmapRequest {
    storefrontOid: number;
    query: ScreenRecordingHeatmapRequest;
}

export interface GetHeatmapIndexRequest {
    storefrontOid: number;
    query: ScreenRecordingHeatmapIndexRequest;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface GetHistogramPropertyNamesRequest {
    storefrontOid: number;
    propertyType?: string;
}

export interface GetHistogramPropertyValuesRequest {
    storefrontOid: number;
    propertyName?: string;
    propertyType?: string;
    limit?: number;
}

export interface GetLibraryItemRequest {
    libraryItemOid: number;
}

export interface GetLibraryItemPublishedVersionsRequest {
    libraryItemOid: number;
}

export interface GetScreenRecordingRequest {
    storefrontOid: number;
    screenRecordingUuid: string;
}

export interface GetScreenRecordingPageViewDataRequest {
    storefrontOid: number;
    screenRecordingUuid: string;
    screenRecordingPageViewUuid: string;
}

export interface GetScreenRecordingSegmentRequest {
    storefrontOid: number;
    screenRecordingSegmentOid: number;
}

export interface GetScreenRecordingSegmentsRequest {
    storefrontOid: number;
}

export interface GetScreenRecordingSettingsRequest {
    storefrontOid: number;
}

export interface GetScreenRecordingTagsRequest {
    storefrontOid: number;
}

export interface GetScreenRecordingsByQueryRequest {
    storefrontOid: number;
    query: ScreenRecordingQueryRequest;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface GetScreenRecordingsBySegmentRequest {
    storefrontOid: number;
    screenRecordingSegmentOid: number;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface GetStoreFrontPricingTiersRequest {
    expand?: string;
}

export interface GetThumbnailParametersRequest {
    thumbnailParameters: ThumbnailParametersRequest;
}

export interface GetTransactionEmailRequest {
    storefrontOid: number;
    emailId: string;
}

export interface GetTransactionEmailListRequest {
    storefrontOid: number;
}

export interface GetTransactionEmailScreenshotsRequest {
    storefrontOid: number;
    emailId: string;
}

export interface GetTwilioAccountRequest {
    espTwilioUuid: string;
}

export interface GetUploadFsFileUrlRequest {
    id: number;
    extension: string;
}

export interface GlobalUnsubscribeRequest {
    storefrontOid: number;
    unsubscribe: EmailGlobalUnsubscribeRequest;
}

export interface ImportEmailThirdPartyProviderListRequest {
    storefrontOid: number;
    importRequest: EmailThirdPartyListImportRequest;
}

export interface InsertEmailCampaignRequest {
    storefrontOid: number;
    emailCampaign: EmailCampaign;
}

export interface InsertEmailCampaignFolderRequest {
    storefrontOid: number;
    emailCampaignFolder: EmailCampaignFolder;
}

export interface InsertEmailCommseqRequest {
    storefrontOid: number;
    emailCommseq: EmailCommseq;
}

export interface InsertEmailEmailRequest {
    storefrontOid: number;
    emailCommseqEmail: EmailCommseqEmail;
}

export interface InsertEmailFlowRequest {
    storefrontOid: number;
    emailFlow: EmailFlow;
}

export interface InsertEmailFlowFolderRequest {
    storefrontOid: number;
    emailFlowFolder: EmailFlowFolder;
}

export interface InsertEmailListRequest {
    storefrontOid: number;
    emailList: EmailList;
}

export interface InsertEmailListSegmentFolderRequest {
    storefrontOid: number;
    emailListSegmentFolder: EmailListSegmentFolder;
}

export interface InsertEmailPostcardRequest {
    storefrontOid: number;
    emailCommseqPostcard: EmailCommseqPostcard;
}

export interface InsertEmailSegmentRequest {
    storefrontOid: number;
    emailSegment: EmailSegment;
}

export interface InsertScreenRecordingSegmentRequest {
    storefrontOid: number;
    segment: ScreenRecordingSegment;
}

export interface PrepareDownloadEmailSegmentRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
}

export interface PublishLibraryItemOperationRequest {
    libraryItemOid: number;
    publishLibraryRequest: PublishLibraryItemRequest;
}

export interface PurchaseLibraryItemRequest {
    libraryItemOid: number;
    storefrontOid?: number;
}

export interface ReleaseEmailCommseqStepWaitingRequest {
    storefrontOid: number;
    commseqUuid: string;
    commseqStepUuid: string;
}

export interface ReviewRequest {
    storefrontOid: number;
    commseqEmailUuid: string;
    emailCommseqEmailReviewRequest: EmailCommseqEmailSendTestRequest;
}

export interface SearchRequest {
    category?: string;
    matches?: string;
    storefrontOid?: string;
    maxHits?: number;
    subcategory?: string;
}

export interface Search2Request {
    lookupRequest: LookupRequest;
}

export interface SearchEmailListCustomersRequest {
    storefrontOid: number;
    emailListUuid: string;
    startsWith?: string;
}

export interface SearchEmailSegmentCustomersRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
    startsWith?: string;
}

export interface SearchLibraryItemsRequest {
    itemQuery: LibraryItemQuery;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface SearchPublishedItemsRequest {
    itemQuery: LibraryItemQuery;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface SearchReviewItemsRequest {
    itemQuery: LibraryItemQuery;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface SearchSharedItemsRequest {
    itemQuery: LibraryItemQuery;
    limit?: number;
    offset?: number;
    sort?: string;
}

export interface SendEmailTestRequest {
    storefrontOid: number;
    commseqEmailUuid: string;
    emailCommseqEmailTestRequest: EmailCommseqEmailSendTestRequest;
}

export interface SendPostcardTestRequest {
    storefrontOid: number;
    commseqPostcardUuid: string;
    emailCommseqPostcardTestRequest: EmailCommseqPostcardSendTestRequest;
}

export interface SendSmsTestRequest {
    storefrontOid: number;
    commseqUuid: string;
    commseqStepUuid: string;
    emailCommseqSmsTestRequest: EmailCommseqSmsSendTestRequest;
}

export interface SendWebhookTestRequest {
    storefrontOid: number;
    emailCommseqWebhookTestRequest: EmailCommseqWebhookSendTestRequest;
}

export interface SequenceTestRequest {
    storefrontOid: number;
    commseqUuid: string;
    emailCommseqSequenceTestRequest: EmailCommseqSequenceTestRequest;
}

export interface StartEmailCampaignRequest {
    storefrontOid: number;
    emailCampaignUuid: string;
}

export interface SubscribeToEmailListRequest {
    storefrontOid: number;
    emailListUuid: string;
    customers: Array<EmailCustomer>;
}

export interface UnfavoriteScreenRecordingRequest {
    storefrontOid: number;
    screenRecordingUuid: string;
}

export interface UpdateEmailCampaignRequest {
    storefrontOid: number;
    emailCampaignUuid: string;
    emailCampaign: EmailCampaign;
}

export interface UpdateEmailCampaignFolderRequest {
    storefrontOid: number;
    emailCampaignFolderUuid: string;
    emailCampaignFolder: EmailCampaignFolder;
}

export interface UpdateEmailCommseqRequest {
    storefrontOid: number;
    commseqUuid: string;
    emailCommseq: EmailCommseq;
}

export interface UpdateEmailCustomerRequest {
    storefrontOid: number;
    emailCustomerUuid: string;
    emailCustomer: EmailCustomer;
}

export interface UpdateEmailEmailRequest {
    storefrontOid: number;
    commseqEmailUuid: string;
    emailCommseqEmail: EmailCommseqEmail;
}

export interface UpdateEmailFlowRequest {
    storefrontOid: number;
    emailFlowUuid: string;
    emailFlow: EmailFlow;
}

export interface UpdateEmailFlowFolderRequest {
    storefrontOid: number;
    emailFlowFolderUuid: string;
    emailFlowFolder: EmailFlowFolder;
}

export interface UpdateEmailGlobalSettingsRequest {
    globalSettings: EmailGlobalSettings;
}

export interface UpdateEmailListRequest {
    storefrontOid: number;
    emailListUuid: string;
    emailList: EmailList;
}

export interface UpdateEmailListSegmentFolderRequest {
    storefrontOid: number;
    emailListSegmentFolderUuid: string;
    emailListSegmentFolder: EmailListSegmentFolder;
}

export interface UpdateEmailPlanRequest {
    storefrontOid: number;
    settings: EmailPlan;
}

export interface UpdateEmailPostcardRequest {
    storefrontOid: number;
    commseqPostcardUuid: string;
    emailCommseqPostcard: EmailCommseqPostcard;
}

export interface UpdateEmailSegmentRequest {
    storefrontOid: number;
    emailSegmentUuid: string;
    emailSegment: EmailSegment;
}

export interface UpdateEmailSendingDomainRequest {
    domain: string;
    emailDomain: EmailDomain;
}

export interface UpdateEmailSettingsRequest {
    storefrontOid: number;
    settings: EmailSettings;
}

export interface UpdateExperimentRequest {
    storefrontOid: number;
    storefrontExperimentOid: number;
    experiment: Experiment;
}

export interface UpdateLibraryItemRequest {
    libraryItemOid: number;
    libraryItem: LibraryItem;
}

export interface UpdateScreenRecordingMerchantNotesRequest {
    storefrontOid: number;
    screenRecordingUuid: string;
    merchantNotesRequest: ScreenRecordingMerchantNotesRequest;
}

export interface UpdateScreenRecordingSegmentRequest {
    storefrontOid: number;
    screenRecordingSegmentOid: number;
    segment: ScreenRecordingSegment;
}

export interface UpdateScreenRecordingSettingsRequest {
    storefrontOid: number;
    settings: ScreenRecordingSettings;
}

export interface UpdateScreenRecordingTagsRequest {
    storefrontOid: number;
    screenRecordingUuid: string;
    tags: ScreenRecordingTagsRequest;
}

export interface UpdateTransactionEmailRequest {
    storefrontOid: number;
    emailId: string;
    transactionEmail: TransactionEmail;
}

export interface UpdateTwilioAccountRequest {
    espTwilioUuid: string;
    twilio: Twilio;
}

export interface UploadFsFileRequest {
    id: number;
    uploadRequest: FileManagerUploadRequest;
}

export interface ValidateRulerRequest {
    rulerValidateRequest: RulerValidationRequest;
}

/**
 * StorefrontApi - interface
 * 
 * @export
 * @interface StorefrontApiInterface
 */
export interface StorefrontApiInterface {
    /**
     * 
     * @summary Add to library
     * @param {AddLibraryItemRequest} addLibraryRequest New library item request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    addToLibraryRaw(requestParameters: AddToLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>>;

    /**
     * Add to library
     */
    addToLibrary(requestParameters: AddToLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse>;

    /**
     * 
     * @summary Apply library item to storefront.
     * @param {ApplyLibraryItemRequest} applyLibraryRequest New library item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    applyToStoreFrontRaw(requestParameters: ApplyToStoreFrontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplyLibraryItemResponse>>;

    /**
     * Apply library item to storefront.
     */
    applyToStoreFront(requestParameters: ApplyToStoreFrontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplyLibraryItemResponse>;

    /**
     * 
     * @summary Archive email list
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    archiveEmailListRaw(requestParameters: ArchiveEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListArchiveResponse>>;

    /**
     * Archive email list
     */
    archiveEmailList(requestParameters: ArchiveEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListArchiveResponse>;

    /**
     * 
     * @summary Archive email segment
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    archiveEmailSegmentRaw(requestParameters: ArchiveEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentArchiveResponse>>;

    /**
     * Archive email segment
     */
    archiveEmailSegment(requestParameters: ArchiveEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentArchiveResponse>;

    /**
     * 
     * @summary Back populate email flow
     * @param {number} storefrontOid 
     * @param {string} emailFlowUuid 
     * @param {EmailFlowBackPopulateRequest} backPopulateRequest The request to back populate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    backPopulateEmailFlowRaw(requestParameters: BackPopulateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowBackPopulateResponse>>;

    /**
     * Back populate email flow
     */
    backPopulateEmailFlow(requestParameters: BackPopulateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowBackPopulateResponse>;

    /**
     * 
     * @summary Check download of email segment
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {string} emailSegmentRebuildUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    checkDownloadEmailSegmentRaw(requestParameters: CheckDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentDownloadPrepareResponse>>;

    /**
     * Check download of email segment
     */
    checkDownloadEmailSegment(requestParameters: CheckDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentDownloadPrepareResponse>;

    /**
     * 
     * @summary Clone email campaign
     * @param {number} storefrontOid 
     * @param {string} emailCampaignUuid 
     * @param {number} [targetStorefrontOid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    cloneEmailCampaignRaw(requestParameters: CloneEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>>;

    /**
     * Clone email campaign
     */
    cloneEmailCampaign(requestParameters: CloneEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse>;

    /**
     * 
     * @summary Clone email flow
     * @param {number} storefrontOid 
     * @param {string} emailFlowUuid 
     * @param {number} [targetStorefrontOid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    cloneEmailFlowRaw(requestParameters: CloneEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>>;

    /**
     * Clone email flow
     */
    cloneEmailFlow(requestParameters: CloneEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse>;

    /**
     * 
     * @summary Create email campaign
     * @param {string} domain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    createEmailSendingDomainRaw(requestParameters: CreateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>>;

    /**
     * Create email campaign
     */
    createEmailSendingDomain(requestParameters: CreateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse>;

    /**
     * 
     * @summary Create email sending domain for various providers
     * @param {EmailDomain} emailDomain EmailDomain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    createEmailSendingDomain2Raw(requestParameters: CreateEmailSendingDomain2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>>;

    /**
     * Create email sending domain for various providers
     */
    createEmailSendingDomain2(requestParameters: CreateEmailSendingDomain2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse>;

    /**
     * 
     * @summary Create file manager directory
     * @param {number} id 
     * @param {string} [name] 
     * @param {number} [parentStorefrontFsDirectoryOid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    createFsDirectoryRaw(requestParameters: CreateFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerPageResponse>>;

    /**
     * Create file manager directory
     */
    createFsDirectory(requestParameters: CreateFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerPageResponse>;

    /**
     * 
     * @summary Create Twilio account
     * @param {Twilio} twilio Twilio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    createTwilioAccountRaw(requestParameters: CreateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwilioResponse>>;

    /**
     * Create Twilio account
     */
    createTwilioAccount(requestParameters: CreateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwilioResponse>;

    /**
     * 
     * @summary Delete email campaignFolder
     * @param {number} storefrontOid 
     * @param {string} emailCampaignFolderUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailCampaignFolderRaw(requestParameters: DeleteEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Delete email campaignFolder
     */
    deleteEmailCampaignFolder(requestParameters: DeleteEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Delete communication sequence stats
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailCommseqStatRaw(requestParameters: DeleteEmailCommseqStatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete communication sequence stats
     */
    deleteEmailCommseqStat(requestParameters: DeleteEmailCommseqStatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete email email
     * @param {number} storefrontOid 
     * @param {string} commseqEmailUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailEmailRaw(requestParameters: DeleteEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Delete email email
     */
    deleteEmailEmail(requestParameters: DeleteEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Delete email flowFolder
     * @param {number} storefrontOid 
     * @param {string} emailFlowFolderUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailFlowFolderRaw(requestParameters: DeleteEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Delete email flowFolder
     */
    deleteEmailFlowFolder(requestParameters: DeleteEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Delete email list customer
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {string} emailCustomerUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailListCustomerRaw(requestParameters: DeleteEmailListCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Delete email list customer
     */
    deleteEmailListCustomer(requestParameters: DeleteEmailListCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Delete email ListSegmentFolder
     * @param {number} storefrontOid 
     * @param {string} emailListSegmentFolderUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailListSegmentFolderRaw(requestParameters: DeleteEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Delete email ListSegmentFolder
     */
    deleteEmailListSegmentFolder(requestParameters: DeleteEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Delete email postcard
     * @param {number} storefrontOid 
     * @param {string} commseqPostcardUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailPostcardRaw(requestParameters: DeleteEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Delete email postcard
     */
    deleteEmailPostcard(requestParameters: DeleteEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary delete email campaign
     * @param {string} domain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteEmailSendingDomainRaw(requestParameters: DeleteEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * delete email campaign
     */
    deleteEmailSendingDomain(requestParameters: DeleteEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Delete experiment
     * @param {number} storefrontOid 
     * @param {number} storefrontExperimentOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteExperimentRaw(requestParameters: DeleteExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete experiment
     */
    deleteExperiment(requestParameters: DeleteExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete file manager directory
     * @param {number} id 
     * @param {number} [parentStorefrontFsDirectoryOid] 
     * @param {number} [storefrontFsFileOid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteFsFileRaw(requestParameters: DeleteFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerPageResponse>>;

    /**
     * Delete file manager directory
     */
    deleteFsFile(requestParameters: DeleteFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerPageResponse>;

    /**
     * Delete screen recording heatmap 
     * @summary Delete screen recording heatmap
     * @param {number} storefrontOid 
     * @param {ScreenRecordingHeatmapReset} query Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteHeatmapRaw(requestParameters: DeleteHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete screen recording heatmap 
     * Delete screen recording heatmap
     */
    deleteHeatmap(requestParameters: DeleteHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete library item
     * @param {number} libraryItemOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteLibraryItemRaw(requestParameters: DeleteLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete library item
     */
    deleteLibraryItem(requestParameters: DeleteLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete all published versions for a library item, including anything in review.
     * @param {number} libraryItemOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteLibraryItemPublishedVersionsRaw(requestParameters: DeleteLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete all published versions for a library item, including anything in review.
     */
    deleteLibraryItemPublishedVersions(requestParameters: DeleteLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete screen recording segment
     * @param {number} storefrontOid 
     * @param {number} screenRecordingSegmentOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteScreenRecordingSegmentRaw(requestParameters: DeleteScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete screen recording segment
     */
    deleteScreenRecordingSegment(requestParameters: DeleteScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary delete Twilio account
     * @param {string} espTwilioUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    deleteTwilioAccountRaw(requestParameters: DeleteTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * delete Twilio account
     */
    deleteTwilioAccount(requestParameters: DeleteTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Duplicate library item.
     * @param {number} libraryItemOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    duplicateLibraryItemRaw(requestParameters: DuplicateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>>;

    /**
     * Duplicate library item.
     */
    duplicateLibraryItem(requestParameters: DuplicateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse>;

    /**
     * Update favorite flag on screen recording 
     * @summary Update favorite flag on screen recording
     * @param {number} storefrontOid 
     * @param {string} screenRecordingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    favoriteScreenRecordingRaw(requestParameters: FavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update favorite flag on screen recording 
     * Update favorite flag on screen recording
     */
    favoriteScreenRecording(requestParameters: FavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Obtain lat/long for an address
     * @param {number} storefrontOid 
     * @param {GeocodeRequest} geocodeRequest geocode request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    geocodeAddressRaw(requestParameters: GeocodeAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeocodeResponse>>;

    /**
     * Obtain lat/long for an address
     */
    geocodeAddress(requestParameters: GeocodeAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeocodeResponse>;

    /**
     * Obtain a list of all the countries 
     * @summary Get countries
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getCountriesRaw(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountriesResponse>>;

    /**
     * Obtain a list of all the countries 
     * Get countries
     */
    getCountries(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountriesResponse>;

    /**
     * Fetches a temporary authentication token for the editor 
     * @summary Gets editor token
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEditorTokenRaw(requestParameters: GetEditorTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailEditorTokenResponse>>;

    /**
     * Fetches a temporary authentication token for the editor 
     * Gets editor token
     */
    getEditorToken(requestParameters: GetEditorTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailEditorTokenResponse>;

    /**
     * 
     * @summary Get email communication base templates
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailBaseTemplatesRaw(requestParameters: GetEmailBaseTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailBaseTemplateListResponse>>;

    /**
     * Get email communication base templates
     */
    getEmailBaseTemplates(requestParameters: GetEmailBaseTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailBaseTemplateListResponse>;

    /**
     * 
     * @summary Get email campaign
     * @param {number} storefrontOid 
     * @param {string} emailCampaignUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCampaignRaw(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>>;

    /**
     * Get email campaign
     */
    getEmailCampaign(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse>;

    /**
     * 
     * @summary Get email campaign folder
     * @param {number} storefrontOid 
     * @param {string} emailCampaignFolderUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCampaignFolderRaw(requestParameters: GetEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFolderResponse>>;

    /**
     * Get email campaign folder
     */
    getEmailCampaignFolder(requestParameters: GetEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFolderResponse>;

    /**
     * 
     * @summary Get email campaign folders
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCampaignFoldersRaw(requestParameters: GetEmailCampaignFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFoldersResponse>>;

    /**
     * Get email campaign folders
     */
    getEmailCampaignFolders(requestParameters: GetEmailCampaignFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFoldersResponse>;

    /**
     * 
     * @summary Get email campaign screenshots
     * @param {number} storefrontOid 
     * @param {string} emailCampaignUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCampaignScreenshotsRaw(requestParameters: GetEmailCampaignScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotsResponse>>;

    /**
     * Get email campaign screenshots
     */
    getEmailCampaignScreenshots(requestParameters: GetEmailCampaignScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotsResponse>;

    /**
     * 
     * @summary Get email campaigns
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCampaignsRaw(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignsResponse>>;

    /**
     * Get email campaigns
     */
    getEmailCampaigns(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignsResponse>;

    /**
     * 
     * @summary Get email campaigns with stats
     * @param {number} storefrontOid 
     * @param {string} statDays 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCampaignsWithStatsRaw(requestParameters: GetEmailCampaignsWithStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignsResponse>>;

    /**
     * Get email campaigns with stats
     */
    getEmailCampaignsWithStats(requestParameters: GetEmailCampaignsWithStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignsResponse>;

    /**
     * 
     * @summary Get email commseq
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqRaw(requestParameters: GetEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqResponse>>;

    /**
     * Get email commseq
     */
    getEmailCommseq(requestParameters: GetEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqResponse>;

    /**
     * 
     * @summary Get email communication sequence emails stats
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {EmailStatSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqEmailStatsRaw(requestParameters: GetEmailCommseqEmailStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStatSummaryResponse>>;

    /**
     * Get email communication sequence emails stats
     */
    getEmailCommseqEmailStats(requestParameters: GetEmailCommseqEmailStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStatSummaryResponse>;

    /**
     * 
     * @summary Get email communication sequence postcard stats
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {EmailStatPostcardSummaryRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqPostcardStatsRaw(requestParameters: GetEmailCommseqPostcardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStatPostcardSummaryResponse>>;

    /**
     * Get email communication sequence postcard stats
     */
    getEmailCommseqPostcardStats(requestParameters: GetEmailCommseqPostcardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStatPostcardSummaryResponse>;

    /**
     * 
     * @summary Get email communication postcard tracking
     * @param {number} storefrontOid 
     * @param {string} commseqPostcardUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqPostcardTrackingRaw(requestParameters: GetEmailCommseqPostcardTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPostcardTrackingResponse>>;

    /**
     * Get email communication postcard tracking
     */
    getEmailCommseqPostcardTracking(requestParameters: GetEmailCommseqPostcardTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPostcardTrackingResponse>;

    /**
     * 
     * @summary Get communication sequence stats overall
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqStatOverallRaw(requestParameters: GetEmailCommseqStatOverallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqStatResponse>>;

    /**
     * Get communication sequence stats overall
     */
    getEmailCommseqStatOverall(requestParameters: GetEmailCommseqStatOverallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqStatResponse>;

    /**
     * 
     * @summary Get email communication sequence step stats
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {EmailStepStatRequest} statsRequest StatsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqStepStatsRaw(requestParameters: GetEmailCommseqStepStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStepStatResponse>>;

    /**
     * Get email communication sequence step stats
     */
    getEmailCommseqStepStats(requestParameters: GetEmailCommseqStepStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStepStatResponse>;

    /**
     * 
     * @summary Get email communication sequence customers waiting at each requested step
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {EmailStepWaitingRequest} waitingRequest WaitingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqStepWaitingRaw(requestParameters: GetEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStepWaitingResponse>>;

    /**
     * Get email communication sequence customers waiting at each requested step
     */
    getEmailCommseqStepWaiting(requestParameters: GetEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStepWaitingResponse>;

    /**
     * 
     * @summary Get email webhook editor values
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqWebhookEditorValuesRaw(requestParameters: GetEmailCommseqWebhookEditorValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailWebhookEditorValuesResponse>>;

    /**
     * Get email webhook editor values
     */
    getEmailCommseqWebhookEditorValues(requestParameters: GetEmailCommseqWebhookEditorValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailWebhookEditorValuesResponse>;

    /**
     * 
     * @summary Get email commseqs
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCommseqsRaw(requestParameters: GetEmailCommseqsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqsResponse>>;

    /**
     * Get email commseqs
     */
    getEmailCommseqs(requestParameters: GetEmailCommseqsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqsResponse>;

    /**
     * 
     * @summary Get customers editor URL
     * @param {number} storefrontOid 
     * @param {string} emailCustomerUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCustomerEditorUrlRaw(requestParameters: GetEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>>;

    /**
     * Get customers editor URL
     */
    getEmailCustomerEditorUrl(requestParameters: GetEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse>;

    /**
     * 
     * @summary Get email customers
     * @param {number} storefrontOid 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [searchEmailPrefix] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailCustomersRaw(requestParameters: GetEmailCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomersResponse>>;

    /**
     * Get email customers
     */
    getEmailCustomers(requestParameters: GetEmailCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomersResponse>;

    /**
     * 
     * @summary Get email dashboard activity
     * @param {number} storefrontOid 
     * @param {number} [lastRecords] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailDashboardActivityRaw(requestParameters: GetEmailDashboardActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailDashboardActivityResponse>>;

    /**
     * Get email dashboard activity
     */
    getEmailDashboardActivity(requestParameters: GetEmailDashboardActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailDashboardActivityResponse>;

    /**
     * 
     * @summary Get dashboard stats
     * @param {number} storefrontOid 
     * @param {number} [days] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailDashboardStatsRaw(requestParameters: GetEmailDashboardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailDashboardStatsResponse>>;

    /**
     * Get dashboard stats
     */
    getEmailDashboardStats(requestParameters: GetEmailDashboardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailDashboardStatsResponse>;

    /**
     * 
     * @summary Get email dispatch logs
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {string} commseqStepUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailDispatchLogsRaw(requestParameters: GetEmailDispatchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqStepLogsResponse>>;

    /**
     * Get email dispatch logs
     */
    getEmailDispatchLogs(requestParameters: GetEmailDispatchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqStepLogsResponse>;

    /**
     * 
     * @summary Get email email
     * @param {number} storefrontOid 
     * @param {string} commseqEmailUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailEmailRaw(requestParameters: GetEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailResponse>>;

    /**
     * Get email email
     */
    getEmailEmail(requestParameters: GetEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailResponse>;

    /**
     * 
     * @summary Get email email clicks
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {string} commseqStepUuid 
     * @param {string} commseqEmailUuid 
     * @param {number} [days] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailEmailClicksRaw(requestParameters: GetEmailEmailClicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailClicksResponse>>;

    /**
     * Get email email clicks
     */
    getEmailEmailClicks(requestParameters: GetEmailEmailClicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailClicksResponse>;

    /**
     * 
     * @summary Get email order customer editor url
     * @param {number} storefrontOid 
     * @param {string} commseqEmailUuid 
     * @param {string} orderId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailEmailCustomerEditorUrlRaw(requestParameters: GetEmailEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>>;

    /**
     * Get email order customer editor url
     */
    getEmailEmailCustomerEditorUrl(requestParameters: GetEmailEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse>;

    /**
     * 
     * @summary Get email email orders
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {string} commseqStepUuid 
     * @param {string} commseqEmailUuid 
     * @param {number} [days] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailEmailOrdersRaw(requestParameters: GetEmailEmailOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailOrdersResponse>>;

    /**
     * Get email email orders
     */
    getEmailEmailOrders(requestParameters: GetEmailEmailOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailOrdersResponse>;

    /**
     * 
     * @summary Get email emails
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailEmailsRaw(requestParameters: GetEmailEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailsResponse>>;

    /**
     * Get email emails
     */
    getEmailEmails(requestParameters: GetEmailEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailsResponse>;

    /**
     * 
     * @summary Get email emails multiple
     * @param {number} storefrontOid 
     * @param {EmailCommseqEmailsRequest} emailCommseqEmailsRequest Request of email uuids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailEmailsMultipleRaw(requestParameters: GetEmailEmailsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailsResponse>>;

    /**
     * Get email emails multiple
     */
    getEmailEmailsMultiple(requestParameters: GetEmailEmailsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailsResponse>;

    /**
     * 
     * @summary Get email flow
     * @param {number} storefrontOid 
     * @param {string} emailFlowUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailFlowRaw(requestParameters: GetEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>>;

    /**
     * Get email flow
     */
    getEmailFlow(requestParameters: GetEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse>;

    /**
     * 
     * @summary Get email flow folder
     * @param {number} storefrontOid 
     * @param {string} emailFlowFolderUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailFlowFolderRaw(requestParameters: GetEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFolderResponse>>;

    /**
     * Get email flow folder
     */
    getEmailFlowFolder(requestParameters: GetEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFolderResponse>;

    /**
     * 
     * @summary Get email flow folders
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailFlowFoldersRaw(requestParameters: GetEmailFlowFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFoldersResponse>>;

    /**
     * Get email flow folders
     */
    getEmailFlowFolders(requestParameters: GetEmailFlowFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFoldersResponse>;

    /**
     * 
     * @summary Get email flow screenshots
     * @param {number} storefrontOid 
     * @param {string} emailFlowUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailFlowScreenshotsRaw(requestParameters: GetEmailFlowScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotsResponse>>;

    /**
     * Get email flow screenshots
     */
    getEmailFlowScreenshots(requestParameters: GetEmailFlowScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotsResponse>;

    /**
     * 
     * @summary Get email flows
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailFlowsRaw(requestParameters: GetEmailFlowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowsResponse>>;

    /**
     * Get email flows
     */
    getEmailFlows(requestParameters: GetEmailFlowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowsResponse>;

    /**
     * 
     * @summary Get email globalsettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailGlobalSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailGlobalSettingsResponse>>;

    /**
     * Get email globalsettings
     */
    getEmailGlobalSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailGlobalSettingsResponse>;

    /**
     * 
     * @summary Get email list
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailListRaw(requestParameters: GetEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListResponse>>;

    /**
     * Get email list
     */
    getEmailList(requestParameters: GetEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListResponse>;

    /**
     * 
     * @summary Get email list customer editor url
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {string} emailCustomerUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailListCustomerEditorUrlRaw(requestParameters: GetEmailListCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>>;

    /**
     * Get email list customer editor url
     */
    getEmailListCustomerEditorUrl(requestParameters: GetEmailListCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse>;

    /**
     * 
     * @summary Get email list customers
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailListCustomersRaw(requestParameters: GetEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListCustomersResponse>>;

    /**
     * Get email list customers
     */
    getEmailListCustomers(requestParameters: GetEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListCustomersResponse>;

    /**
     * 
     * @summary Get email campaign folder
     * @param {number} storefrontOid 
     * @param {string} emailListSegmentFolderUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailListSegmentFolderRaw(requestParameters: GetEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFolderResponse>>;

    /**
     * Get email campaign folder
     */
    getEmailListSegmentFolder(requestParameters: GetEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFolderResponse>;

    /**
     * 
     * @summary Get email campaign folders
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailListSegmentFoldersRaw(requestParameters: GetEmailListSegmentFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFoldersResponse>>;

    /**
     * Get email campaign folders
     */
    getEmailListSegmentFolders(requestParameters: GetEmailListSegmentFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFoldersResponse>;

    /**
     * 
     * @summary Get email lists
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailListsRaw(requestParameters: GetEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListsResponse>>;

    /**
     * Get email lists
     */
    getEmailLists(requestParameters: GetEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListsResponse>;

    /**
     * 
     * @summary Get email performance
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailPerformanceRaw(requestParameters: GetEmailPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPerformanceResponse>>;

    /**
     * Get email performance
     */
    getEmailPerformance(requestParameters: GetEmailPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPerformanceResponse>;

    /**
     * 
     * @summary Get email plan
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailPlanRaw(requestParameters: GetEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPlanResponse>>;

    /**
     * Get email plan
     */
    getEmailPlan(requestParameters: GetEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPlanResponse>;

    /**
     * 
     * @summary Get email postcard
     * @param {number} storefrontOid 
     * @param {string} commseqPostcardUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailPostcardRaw(requestParameters: GetEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardResponse>>;

    /**
     * Get email postcard
     */
    getEmailPostcard(requestParameters: GetEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardResponse>;

    /**
     * 
     * @summary Get email postcards
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailPostcardsRaw(requestParameters: GetEmailPostcardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardsResponse>>;

    /**
     * Get email postcards
     */
    getEmailPostcards(requestParameters: GetEmailPostcardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardsResponse>;

    /**
     * 
     * @summary Get email postcards multiple
     * @param {number} storefrontOid 
     * @param {EmailCommseqPostcardsRequest} emailCommseqPostcardsRequest Request of postcard uuids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailPostcardsMultipleRaw(requestParameters: GetEmailPostcardsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardsResponse>>;

    /**
     * Get email postcards multiple
     */
    getEmailPostcardsMultiple(requestParameters: GetEmailPostcardsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardsResponse>;

    /**
     * 
     * @summary Get email segment
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSegmentRaw(requestParameters: GetEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentResponse>>;

    /**
     * Get email segment
     */
    getEmailSegment(requestParameters: GetEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentResponse>;

    /**
     * 
     * @summary Get email segment customers editor URL
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {string} emailCustomerUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSegmentCustomerEditorUrlRaw(requestParameters: GetEmailSegmentCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>>;

    /**
     * Get email segment customers editor URL
     */
    getEmailSegmentCustomerEditorUrl(requestParameters: GetEmailSegmentCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse>;

    /**
     * 
     * @summary Get email segment customers
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSegmentCustomersRaw(requestParameters: GetEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentCustomersResponse>>;

    /**
     * Get email segment customers
     */
    getEmailSegmentCustomers(requestParameters: GetEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentCustomersResponse>;

    /**
     * 
     * @summary Get email segments
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSegmentsRaw(requestParameters: GetEmailSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentsResponse>>;

    /**
     * Get email segments
     */
    getEmailSegments(requestParameters: GetEmailSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentsResponse>;

    /**
     * 
     * @summary Get email sending domain
     * @param {string} domain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSendingDomainRaw(requestParameters: GetEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>>;

    /**
     * Get email sending domain
     */
    getEmailSendingDomain(requestParameters: GetEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse>;

    /**
     * 
     * @summary Get email sending domain status
     * @param {string} domain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSendingDomainStatusRaw(requestParameters: GetEmailSendingDomainStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>>;

    /**
     * Get email sending domain status
     */
    getEmailSendingDomainStatus(requestParameters: GetEmailSendingDomainStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse>;

    /**
     * 
     * @summary Get email sending domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSendingDomainsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainsResponse>>;

    /**
     * Get email sending domains
     */
    getEmailSendingDomains(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainsResponse>;

    /**
     * 
     * @summary Get email settings
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailSettingsRaw(requestParameters: GetEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSettingsResponse>>;

    /**
     * Get email settings
     */
    getEmailSettings(requestParameters: GetEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSettingsResponse>;

    /**
     * 
     * @summary Get email template
     * @param {number} storefrontOid 
     * @param {number} emailTemplateOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailTemplateRaw(requestParameters: GetEmailTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>>;

    /**
     * Get email template
     */
    getEmailTemplate(requestParameters: GetEmailTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate>;

    /**
     * 
     * @summary Get email templates
     * @param {number} storefrontOid 
     * @param {string} [triggerType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailTemplatesRaw(requestParameters: GetEmailTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplatesResponse>>;

    /**
     * Get email templates
     */
    getEmailTemplates(requestParameters: GetEmailTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplatesResponse>;

    /**
     * 
     * @summary Get a list of third party email providers
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getEmailThirdPartyProvidersRaw(requestParameters: GetEmailThirdPartyProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailThirdPartyProvidersResponse>>;

    /**
     * Get a list of third party email providers
     */
    getEmailThirdPartyProviders(requestParameters: GetEmailThirdPartyProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailThirdPartyProvidersResponse>;

    /**
     * 
     * @summary Get experiments
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getExperimentsRaw(requestParameters: GetExperimentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentsResponse>>;

    /**
     * Get experiments
     */
    getExperiments(requestParameters: GetExperimentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentsResponse>;

    /**
     * 
     * @summary Get file manager directory
     * @param {number} id 
     * @param {string} [path] 
     * @param {number} [storefrontFsDirectoryOid] 
     * @param {number} [storefrontThemeOid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getFsDirectoryRaw(requestParameters: GetFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerPageResponse>>;

    /**
     * Get file manager directory
     */
    getFsDirectory(requestParameters: GetFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerPageResponse>;

    /**
     * Get screen recording heatmap 
     * @summary Get screen recording heatmap
     * @param {number} storefrontOid 
     * @param {ScreenRecordingHeatmapRequest} query Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getHeatmapRaw(requestParameters: GetHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingHeatmapResponse>>;

    /**
     * Get screen recording heatmap 
     * Get screen recording heatmap
     */
    getHeatmap(requestParameters: GetHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingHeatmapResponse>;

    /**
     * Get screen recording heatmap index 
     * @summary Get screen recording heatmap index
     * @param {number} storefrontOid 
     * @param {ScreenRecordingHeatmapIndexRequest} query Query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getHeatmapIndexRaw(requestParameters: GetHeatmapIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingHeatmapIndexResponse>>;

    /**
     * Get screen recording heatmap index 
     * Get screen recording heatmap index
     */
    getHeatmapIndex(requestParameters: GetHeatmapIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingHeatmapIndexResponse>;

    /**
     * Obtain a list of property names for a given property type 
     * @summary Get histogram property names
     * @param {number} storefrontOid 
     * @param {string} [propertyType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getHistogramPropertyNamesRaw(requestParameters: GetHistogramPropertyNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailHistogramPropertyNamesResponse>>;

    /**
     * Obtain a list of property names for a given property type 
     * Get histogram property names
     */
    getHistogramPropertyNames(requestParameters: GetHistogramPropertyNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailHistogramPropertyNamesResponse>;

    /**
     * Obtain a list of property values for a given property name and type 
     * @summary Get histogram property values
     * @param {number} storefrontOid 
     * @param {string} [propertyName] 
     * @param {string} [propertyType] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getHistogramPropertyValuesRaw(requestParameters: GetHistogramPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailHistogramPropertyValuesResponse>>;

    /**
     * Obtain a list of property values for a given property name and type 
     * Get histogram property values
     */
    getHistogramPropertyValues(requestParameters: GetHistogramPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailHistogramPropertyValuesResponse>;

    /**
     * 
     * @summary Get library values used to populate drop down boxes for filtering.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getLibraryFilterValuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryFilterValuesResponse>>;

    /**
     * Get library values used to populate drop down boxes for filtering.
     */
    getLibraryFilterValues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryFilterValuesResponse>;

    /**
     * 
     * @summary Get library item.
     * @param {number} libraryItemOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getLibraryItemRaw(requestParameters: GetLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>>;

    /**
     * Get library item.
     */
    getLibraryItem(requestParameters: GetLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse>;

    /**
     * 
     * @summary Get all published versions for a library item.
     * @param {number} libraryItemOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getLibraryItemPublishedVersionsRaw(requestParameters: GetLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>>;

    /**
     * Get all published versions for a library item.
     */
    getLibraryItemPublishedVersions(requestParameters: GetLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse>;

    /**
     * Get screen recording 
     * @summary Get screen recording
     * @param {number} storefrontOid 
     * @param {string} screenRecordingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingRaw(requestParameters: GetScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingResponse>>;

    /**
     * Get screen recording 
     * Get screen recording
     */
    getScreenRecording(requestParameters: GetScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingResponse>;

    /**
     * Get screen recording page view data 
     * @summary Get screen recording page view data
     * @param {number} storefrontOid 
     * @param {string} screenRecordingUuid 
     * @param {string} screenRecordingPageViewUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingPageViewDataRaw(requestParameters: GetScreenRecordingPageViewDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingPageViewDataResponse>>;

    /**
     * Get screen recording page view data 
     * Get screen recording page view data
     */
    getScreenRecordingPageViewData(requestParameters: GetScreenRecordingPageViewDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingPageViewDataResponse>;

    /**
     * 
     * @summary Get screen recording segment
     * @param {number} storefrontOid 
     * @param {number} screenRecordingSegmentOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingSegmentRaw(requestParameters: GetScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentResponse>>;

    /**
     * Get screen recording segment
     */
    getScreenRecordingSegment(requestParameters: GetScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentResponse>;

    /**
     * 
     * @summary Get screen recording segments
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingSegmentsRaw(requestParameters: GetScreenRecordingSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentsResponse>>;

    /**
     * Get screen recording segments
     */
    getScreenRecordingSegments(requestParameters: GetScreenRecordingSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentsResponse>;

    /**
     * 
     * @summary Get screen recording settings
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingSettingsRaw(requestParameters: GetScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSettingsResponse>>;

    /**
     * Get screen recording settings
     */
    getScreenRecordingSettings(requestParameters: GetScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSettingsResponse>;

    /**
     * Get tags used by screen recording 
     * @summary Get tags used by screen recording
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingTagsRaw(requestParameters: GetScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingTagsResponse>>;

    /**
     * Get tags used by screen recording 
     * Get tags used by screen recording
     */
    getScreenRecordingTags(requestParameters: GetScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingTagsResponse>;

    /**
     * Query screen recordings 
     * @summary Query screen recordings
     * @param {number} storefrontOid 
     * @param {ScreenRecordingQueryRequest} query Query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingsByQueryRaw(requestParameters: GetScreenRecordingsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingQueryResponse>>;

    /**
     * Query screen recordings 
     * Query screen recordings
     */
    getScreenRecordingsByQuery(requestParameters: GetScreenRecordingsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingQueryResponse>;

    /**
     * Get screen recordings by segment 
     * @summary Get screen recordings by segment
     * @param {number} storefrontOid 
     * @param {number} screenRecordingSegmentOid 
     * @param {number} [limit] The maximum number of records to return on this one API call. (Default 100, Max 500)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getScreenRecordingsBySegmentRaw(requestParameters: GetScreenRecordingsBySegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingQueryResponse>>;

    /**
     * Get screen recordings by segment 
     * Get screen recordings by segment
     */
    getScreenRecordingsBySegment(requestParameters: GetScreenRecordingsBySegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingQueryResponse>;

    /**
     * Retrieves the pricing tiers 
     * @summary Retrieve pricing tiers
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getStoreFrontPricingTiersRaw(requestParameters: GetStoreFrontPricingTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingTiersResponse>>;

    /**
     * Retrieves the pricing tiers 
     * Retrieve pricing tiers
     */
    getStoreFrontPricingTiers(requestParameters: GetStoreFrontPricingTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingTiersResponse>;

    /**
     * 
     * @summary Get storefronts (internal use only for security reasons)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getStoreFrontsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreFrontsResponse>>;

    /**
     * Get storefronts (internal use only for security reasons)
     */
    getStoreFronts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreFrontsResponse>;

    /**
     * 
     * @summary Get thumbnail parameters
     * @param {ThumbnailParametersRequest} thumbnailParameters Thumbnail Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getThumbnailParametersRaw(requestParameters: GetThumbnailParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThumbnailParametersResponse>>;

    /**
     * Get thumbnail parameters
     */
    getThumbnailParameters(requestParameters: GetThumbnailParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThumbnailParametersResponse>;

    /**
     * Fetch a transactional email 
     * @summary Gets a transaction email object
     * @param {number} storefrontOid 
     * @param {string} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getTransactionEmailRaw(requestParameters: GetTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEmailResponse>>;

    /**
     * Fetch a transactional email 
     * Gets a transaction email object
     */
    getTransactionEmail(requestParameters: GetTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEmailResponse>;

    /**
     * Obtain a list of all transactional emails and return back just their names 
     * @summary Gets a list of transaction email names
     * @param {number} storefrontOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getTransactionEmailListRaw(requestParameters: GetTransactionEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEmailListResponse>>;

    /**
     * Obtain a list of all transactional emails and return back just their names 
     * Gets a list of transaction email names
     */
    getTransactionEmailList(requestParameters: GetTransactionEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEmailListResponse>;

    /**
     * 
     * @summary Get transactional email screenshots
     * @param {number} storefrontOid 
     * @param {string} emailId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getTransactionEmailScreenshotsRaw(requestParameters: GetTransactionEmailScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotsResponse>>;

    /**
     * Get transactional email screenshots
     */
    getTransactionEmailScreenshots(requestParameters: GetTransactionEmailScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotsResponse>;

    /**
     * 
     * @summary Get Twilio account
     * @param {string} espTwilioUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getTwilioAccountRaw(requestParameters: GetTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwilioResponse>>;

    /**
     * Get Twilio account
     */
    getTwilioAccount(requestParameters: GetTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwilioResponse>;

    /**
     * 
     * @summary Get all Twilio accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getTwilioAccountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwiliosResponse>>;

    /**
     * Get all Twilio accounts
     */
    getTwilioAccounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwiliosResponse>;

    /**
     * 
     * @summary Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
     * @param {number} id 
     * @param {string} extension 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    getUploadFsFileUrlRaw(requestParameters: GetUploadFsFileUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerUploadUrlResponse>>;

    /**
     * Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
     */
    getUploadFsFileUrl(requestParameters: GetUploadFsFileUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerUploadUrlResponse>;

    /**
     * 
     * @summary Globally unsubscribe a customer
     * @param {number} storefrontOid 
     * @param {EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    globalUnsubscribeRaw(requestParameters: GlobalUnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailGlobalUnsubscribeResponse>>;

    /**
     * Globally unsubscribe a customer
     */
    globalUnsubscribe(requestParameters: GlobalUnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailGlobalUnsubscribeResponse>;

    /**
     * 
     * @summary Import a third party provider list
     * @param {number} storefrontOid 
     * @param {EmailThirdPartyListImportRequest} importRequest lists to import
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    importEmailThirdPartyProviderListRaw(requestParameters: ImportEmailThirdPartyProviderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Import a third party provider list
     */
    importEmailThirdPartyProviderList(requestParameters: ImportEmailThirdPartyProviderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Insert email campaign
     * @param {number} storefrontOid 
     * @param {EmailCampaign} emailCampaign Email campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailCampaignRaw(requestParameters: InsertEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>>;

    /**
     * Insert email campaign
     */
    insertEmailCampaign(requestParameters: InsertEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse>;

    /**
     * 
     * @summary Insert email campaign folder
     * @param {number} storefrontOid 
     * @param {EmailCampaignFolder} emailCampaignFolder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailCampaignFolderRaw(requestParameters: InsertEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFolderResponse>>;

    /**
     * Insert email campaign folder
     */
    insertEmailCampaignFolder(requestParameters: InsertEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFolderResponse>;

    /**
     * 
     * @summary Insert email commseq
     * @param {number} storefrontOid 
     * @param {EmailCommseq} emailCommseq Email commseq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailCommseqRaw(requestParameters: InsertEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqResponse>>;

    /**
     * Insert email commseq
     */
    insertEmailCommseq(requestParameters: InsertEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqResponse>;

    /**
     * 
     * @summary Insert email email
     * @param {number} storefrontOid 
     * @param {EmailCommseqEmail} emailCommseqEmail Email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailEmailRaw(requestParameters: InsertEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailResponse>>;

    /**
     * Insert email email
     */
    insertEmailEmail(requestParameters: InsertEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailResponse>;

    /**
     * 
     * @summary Insert email flow
     * @param {number} storefrontOid 
     * @param {EmailFlow} emailFlow Email flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailFlowRaw(requestParameters: InsertEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>>;

    /**
     * Insert email flow
     */
    insertEmailFlow(requestParameters: InsertEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse>;

    /**
     * 
     * @summary Insert email flow folder
     * @param {number} storefrontOid 
     * @param {EmailFlowFolder} emailFlowFolder Email flow folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailFlowFolderRaw(requestParameters: InsertEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFolderResponse>>;

    /**
     * Insert email flow folder
     */
    insertEmailFlowFolder(requestParameters: InsertEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFolderResponse>;

    /**
     * 
     * @summary Insert email list
     * @param {number} storefrontOid 
     * @param {EmailList} emailList Email list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailListRaw(requestParameters: InsertEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListResponse>>;

    /**
     * Insert email list
     */
    insertEmailList(requestParameters: InsertEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListResponse>;

    /**
     * 
     * @summary Insert email campaign folder
     * @param {number} storefrontOid 
     * @param {EmailListSegmentFolder} emailListSegmentFolder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailListSegmentFolderRaw(requestParameters: InsertEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFolderResponse>>;

    /**
     * Insert email campaign folder
     */
    insertEmailListSegmentFolder(requestParameters: InsertEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFolderResponse>;

    /**
     * 
     * @summary Insert email postcard
     * @param {number} storefrontOid 
     * @param {EmailCommseqPostcard} emailCommseqPostcard Email postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailPostcardRaw(requestParameters: InsertEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardResponse>>;

    /**
     * Insert email postcard
     */
    insertEmailPostcard(requestParameters: InsertEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardResponse>;

    /**
     * 
     * @summary Insert email segment
     * @param {number} storefrontOid 
     * @param {EmailSegment} emailSegment Email segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertEmailSegmentRaw(requestParameters: InsertEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentResponse>>;

    /**
     * Insert email segment
     */
    insertEmailSegment(requestParameters: InsertEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentResponse>;

    /**
     * 
     * @summary Insert screen recording segment
     * @param {number} storefrontOid 
     * @param {ScreenRecordingSegment} segment Segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    insertScreenRecordingSegmentRaw(requestParameters: InsertScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentResponse>>;

    /**
     * Insert screen recording segment
     */
    insertScreenRecordingSegment(requestParameters: InsertScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentResponse>;

    /**
     * 
     * @summary Prepare download of email segment
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    prepareDownloadEmailSegmentRaw(requestParameters: PrepareDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentDownloadPrepareResponse>>;

    /**
     * Prepare download of email segment
     */
    prepareDownloadEmailSegment(requestParameters: PrepareDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentDownloadPrepareResponse>;

    /**
     * 
     * @summary Publish library item.
     * @param {number} libraryItemOid 
     * @param {PublishLibraryItemRequest} publishLibraryRequest Publish library item request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    publishLibraryItemRaw(requestParameters: PublishLibraryItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>>;

    /**
     * Publish library item.
     */
    publishLibraryItem(requestParameters: PublishLibraryItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse>;

    /**
     * 
     * @summary Purchase public library item, which creates a copy of the item in your personal code library
     * @param {number} libraryItemOid 
     * @param {number} [storefrontOid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    purchaseLibraryItemRaw(requestParameters: PurchaseLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>>;

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     */
    purchaseLibraryItem(requestParameters: PurchaseLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse>;

    /**
     * 
     * @summary Release email communication sequence customers waiting at the specified step
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {string} commseqStepUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    releaseEmailCommseqStepWaitingRaw(requestParameters: ReleaseEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Release email communication sequence customers waiting at the specified step
     */
    releaseEmailCommseqStepWaiting(requestParameters: ReleaseEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Request a review of an email
     * @param {number} storefrontOid 
     * @param {string} commseqEmailUuid 
     * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailReviewRequest Email commseq email review request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    reviewRaw(requestParameters: ReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailSendTestResponse>>;

    /**
     * Request a review of an email
     */
    review(requestParameters: ReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailSendTestResponse>;

    /**
     * 
     * @summary Searches for all matching values
     * @param {string} [category] 
     * @param {string} [matches] 
     * @param {string} [storefrontOid] 
     * @param {number} [maxHits] 
     * @param {string} [subcategory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupResponse>>;

    /**
     * Searches for all matching values
     */
    search(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupResponse>;

    /**
     * 
     * @summary Searches for all matching values (using POST)
     * @param {LookupRequest} lookupRequest LookupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    search2Raw(requestParameters: Search2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupResponse>>;

    /**
     * Searches for all matching values (using POST)
     */
    search2(requestParameters: Search2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupResponse>;

    /**
     * 
     * @summary Search email list customers
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {string} [startsWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchEmailListCustomersRaw(requestParameters: SearchEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListCustomersResponse>>;

    /**
     * Search email list customers
     */
    searchEmailListCustomers(requestParameters: SearchEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListCustomersResponse>;

    /**
     * 
     * @summary Search email segment customers
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {string} [startsWith] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchEmailSegmentCustomersRaw(requestParameters: SearchEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentCustomersResponse>>;

    /**
     * Search email segment customers
     */
    searchEmailSegmentCustomers(requestParameters: SearchEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentCustomersResponse>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve library items
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchLibraryItemsRaw(requestParameters: SearchLibraryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    searchLibraryItems(requestParameters: SearchLibraryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve library items
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchPublishedItemsRaw(requestParameters: SearchPublishedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    searchPublishedItems(requestParameters: SearchPublishedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve library items needing review or rejected
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchReviewItemsRaw(requestParameters: SearchReviewItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items needing review or rejected
     */
    searchReviewItems(requestParameters: SearchReviewItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve library items
     * @param {LibraryItemQuery} itemQuery Item query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Maximum 10000)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    searchSharedItemsRaw(requestParameters: SearchSharedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>>;

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    searchSharedItems(requestParameters: SearchSharedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse>;

    /**
     * 
     * @summary Send email test
     * @param {number} storefrontOid 
     * @param {string} commseqEmailUuid 
     * @param {EmailCommseqEmailSendTestRequest} emailCommseqEmailTestRequest Email commseq email test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    sendEmailTestRaw(requestParameters: SendEmailTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailSendTestResponse>>;

    /**
     * Send email test
     */
    sendEmailTest(requestParameters: SendEmailTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailSendTestResponse>;

    /**
     * 
     * @summary Send postcard test
     * @param {number} storefrontOid 
     * @param {string} commseqPostcardUuid 
     * @param {EmailCommseqPostcardSendTestRequest} emailCommseqPostcardTestRequest Email commseq email test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    sendPostcardTestRaw(requestParameters: SendPostcardTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardSendTestResponse>>;

    /**
     * Send postcard test
     */
    sendPostcardTest(requestParameters: SendPostcardTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardSendTestResponse>;

    /**
     * 
     * @summary Send SMS test
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {string} commseqStepUuid 
     * @param {EmailCommseqSmsSendTestRequest} emailCommseqSmsTestRequest Email commseq sms test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    sendSmsTestRaw(requestParameters: SendSmsTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqSmsSendTestResponse>>;

    /**
     * Send SMS test
     */
    sendSmsTest(requestParameters: SendSmsTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqSmsSendTestResponse>;

    /**
     * 
     * @summary Send webhook test
     * @param {number} storefrontOid 
     * @param {EmailCommseqWebhookSendTestRequest} emailCommseqWebhookTestRequest Email commseq webhook test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    sendWebhookTestRaw(requestParameters: SendWebhookTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqWebhookSendTestResponse>>;

    /**
     * Send webhook test
     */
    sendWebhookTest(requestParameters: SendWebhookTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqWebhookSendTestResponse>;

    /**
     * 
     * @summary Sequence test
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {EmailCommseqSequenceTestRequest} emailCommseqSequenceTestRequest Commseq test request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    sequenceTestRaw(requestParameters: SequenceTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqSequenceTestResponse>>;

    /**
     * Sequence test
     */
    sequenceTest(requestParameters: SequenceTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqSequenceTestResponse>;

    /**
     * 
     * @summary Start email campaign
     * @param {number} storefrontOid 
     * @param {string} emailCampaignUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    startEmailCampaignRaw(requestParameters: StartEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Start email campaign
     */
    startEmailCampaign(requestParameters: StartEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * 
     * @summary Subscribe customers to email list
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {Array<EmailCustomer>} customers Customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    subscribeToEmailListRaw(requestParameters: SubscribeToEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSubscribeResponse>>;

    /**
     * Subscribe customers to email list
     */
    subscribeToEmailList(requestParameters: SubscribeToEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSubscribeResponse>;

    /**
     * Remove favorite flag on screen recording 
     * @summary Remove favorite flag on screen recording
     * @param {number} storefrontOid 
     * @param {string} screenRecordingUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    unfavoriteScreenRecordingRaw(requestParameters: UnfavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove favorite flag on screen recording 
     * Remove favorite flag on screen recording
     */
    unfavoriteScreenRecording(requestParameters: UnfavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update email campaign
     * @param {number} storefrontOid 
     * @param {string} emailCampaignUuid 
     * @param {EmailCampaign} emailCampaign Email campaign
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailCampaignRaw(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>>;

    /**
     * Update email campaign
     */
    updateEmailCampaign(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse>;

    /**
     * 
     * @summary Update email campaign folder
     * @param {number} storefrontOid 
     * @param {string} emailCampaignFolderUuid 
     * @param {EmailCampaignFolder} emailCampaignFolder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailCampaignFolderRaw(requestParameters: UpdateEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFolderResponse>>;

    /**
     * Update email campaign folder
     */
    updateEmailCampaignFolder(requestParameters: UpdateEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFolderResponse>;

    /**
     * 
     * @summary Update email commseq
     * @param {number} storefrontOid 
     * @param {string} commseqUuid 
     * @param {EmailCommseq} emailCommseq Email commseq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailCommseqRaw(requestParameters: UpdateEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqResponse>>;

    /**
     * Update email commseq
     */
    updateEmailCommseq(requestParameters: UpdateEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqResponse>;

    /**
     * 
     * @summary Update email customer
     * @param {number} storefrontOid 
     * @param {string} emailCustomerUuid 
     * @param {EmailCustomer} emailCustomer Email customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailCustomerRaw(requestParameters: UpdateEmailCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update email customer
     */
    updateEmailCustomer(requestParameters: UpdateEmailCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update email email
     * @param {number} storefrontOid 
     * @param {string} commseqEmailUuid 
     * @param {EmailCommseqEmail} emailCommseqEmail Email commseq email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailEmailRaw(requestParameters: UpdateEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailResponse>>;

    /**
     * Update email email
     */
    updateEmailEmail(requestParameters: UpdateEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailResponse>;

    /**
     * 
     * @summary Update email flow
     * @param {number} storefrontOid 
     * @param {string} emailFlowUuid 
     * @param {EmailFlow} emailFlow Email flow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailFlowRaw(requestParameters: UpdateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>>;

    /**
     * Update email flow
     */
    updateEmailFlow(requestParameters: UpdateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse>;

    /**
     * 
     * @summary Update email flow folder
     * @param {number} storefrontOid 
     * @param {string} emailFlowFolderUuid 
     * @param {EmailFlowFolder} emailFlowFolder Email flow folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailFlowFolderRaw(requestParameters: UpdateEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFolderResponse>>;

    /**
     * Update email flow folder
     */
    updateEmailFlowFolder(requestParameters: UpdateEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFolderResponse>;

    /**
     * 
     * @summary Update email global settings
     * @param {EmailGlobalSettings} globalSettings global settings request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailGlobalSettingsRaw(requestParameters: UpdateEmailGlobalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailGlobalSettingsResponse>>;

    /**
     * Update email global settings
     */
    updateEmailGlobalSettings(requestParameters: UpdateEmailGlobalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailGlobalSettingsResponse>;

    /**
     * 
     * @summary Update email list
     * @param {number} storefrontOid 
     * @param {string} emailListUuid 
     * @param {EmailList} emailList Email list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailListRaw(requestParameters: UpdateEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListResponse>>;

    /**
     * Update email list
     */
    updateEmailList(requestParameters: UpdateEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListResponse>;

    /**
     * 
     * @summary Update email campaign folder
     * @param {number} storefrontOid 
     * @param {string} emailListSegmentFolderUuid 
     * @param {EmailListSegmentFolder} emailListSegmentFolder Email campaign folder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailListSegmentFolderRaw(requestParameters: UpdateEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFolderResponse>>;

    /**
     * Update email campaign folder
     */
    updateEmailListSegmentFolder(requestParameters: UpdateEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFolderResponse>;

    /**
     * 
     * @summary Update email plan
     * @param {number} storefrontOid 
     * @param {EmailPlan} settings plan request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailPlanRaw(requestParameters: UpdateEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPlanResponse>>;

    /**
     * Update email plan
     */
    updateEmailPlan(requestParameters: UpdateEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPlanResponse>;

    /**
     * 
     * @summary Update email postcard
     * @param {number} storefrontOid 
     * @param {string} commseqPostcardUuid 
     * @param {EmailCommseqPostcard} emailCommseqPostcard Email commseq postcard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailPostcardRaw(requestParameters: UpdateEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardResponse>>;

    /**
     * Update email postcard
     */
    updateEmailPostcard(requestParameters: UpdateEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardResponse>;

    /**
     * 
     * @summary Update email segment
     * @param {number} storefrontOid 
     * @param {string} emailSegmentUuid 
     * @param {EmailSegment} emailSegment Email segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailSegmentRaw(requestParameters: UpdateEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentResponse>>;

    /**
     * Update email segment
     */
    updateEmailSegment(requestParameters: UpdateEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentResponse>;

    /**
     * 
     * @summary Update email sending domain
     * @param {string} domain 
     * @param {EmailDomain} emailDomain EmailDomain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailSendingDomainRaw(requestParameters: UpdateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>>;

    /**
     * Update email sending domain
     */
    updateEmailSendingDomain(requestParameters: UpdateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse>;

    /**
     * 
     * @summary Update email settings
     * @param {number} storefrontOid 
     * @param {EmailSettings} settings settings request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateEmailSettingsRaw(requestParameters: UpdateEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSettingsResponse>>;

    /**
     * Update email settings
     */
    updateEmailSettings(requestParameters: UpdateEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSettingsResponse>;

    /**
     * 
     * @summary Update experiment
     * @param {number} storefrontOid 
     * @param {number} storefrontExperimentOid 
     * @param {Experiment} experiment Experiment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateExperimentRaw(requestParameters: UpdateExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>>;

    /**
     * Update experiment
     */
    updateExperiment(requestParameters: UpdateExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse>;

    /**
     * 
     * @summary Update library item. Note that only certain fields may be updated via this method.
     * @param {number} libraryItemOid 
     * @param {LibraryItem} libraryItem Library item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateLibraryItemRaw(requestParameters: UpdateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>>;

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     */
    updateLibraryItem(requestParameters: UpdateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse>;

    /**
     * Update merchant notes on a screen recording 
     * @summary Update merchant notes on a screen recording
     * @param {number} storefrontOid 
     * @param {string} screenRecordingUuid 
     * @param {ScreenRecordingMerchantNotesRequest} merchantNotesRequest Merchant Notes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateScreenRecordingMerchantNotesRaw(requestParameters: UpdateScreenRecordingMerchantNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update merchant notes on a screen recording 
     * Update merchant notes on a screen recording
     */
    updateScreenRecordingMerchantNotes(requestParameters: UpdateScreenRecordingMerchantNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update screen recording segment
     * @param {number} storefrontOid 
     * @param {number} screenRecordingSegmentOid 
     * @param {ScreenRecordingSegment} segment Segment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateScreenRecordingSegmentRaw(requestParameters: UpdateScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentResponse>>;

    /**
     * Update screen recording segment
     */
    updateScreenRecordingSegment(requestParameters: UpdateScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentResponse>;

    /**
     * 
     * @summary Update screen recording settings
     * @param {number} storefrontOid 
     * @param {ScreenRecordingSettings} settings Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateScreenRecordingSettingsRaw(requestParameters: UpdateScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSettingsResponse>>;

    /**
     * Update screen recording settings
     */
    updateScreenRecordingSettings(requestParameters: UpdateScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSettingsResponse>;

    /**
     * Update tags on a screen recording 
     * @summary Update tags on a screen recording
     * @param {number} storefrontOid 
     * @param {string} screenRecordingUuid 
     * @param {ScreenRecordingTagsRequest} tags Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateScreenRecordingTagsRaw(requestParameters: UpdateScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update tags on a screen recording 
     * Update tags on a screen recording
     */
    updateScreenRecordingTags(requestParameters: UpdateScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Updates a transactional email 
     * @summary Updates a transaction email object
     * @param {number} storefrontOid 
     * @param {string} emailId 
     * @param {TransactionEmail} transactionEmail TransactionEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateTransactionEmailRaw(requestParameters: UpdateTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEmailResponse>>;

    /**
     * Updates a transactional email 
     * Updates a transaction email object
     */
    updateTransactionEmail(requestParameters: UpdateTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEmailResponse>;

    /**
     * 
     * @summary Update Twilio account
     * @param {string} espTwilioUuid 
     * @param {Twilio} twilio Twilio
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    updateTwilioAccountRaw(requestParameters: UpdateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwilioResponse>>;

    /**
     * Update Twilio account
     */
    updateTwilioAccount(requestParameters: UpdateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwilioResponse>;

    /**
     * 
     * @summary This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
     * @param {number} id 
     * @param {FileManagerUploadRequest} uploadRequest UploadRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    uploadFsFileRaw(requestParameters: UploadFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
     */
    uploadFsFile(requestParameters: UploadFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Validate AWS Event Ruler
     * @param {RulerValidationRequest} rulerValidateRequest Ruler Validate Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontApiInterface
     */
    validateRulerRaw(requestParameters: ValidateRulerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RulerValidationResponse>>;

    /**
     * Validate AWS Event Ruler
     */
    validateRuler(requestParameters: ValidateRulerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RulerValidationResponse>;

}

/**
 * 
 */
export class StorefrontApi extends runtime.BaseAPI implements StorefrontApiInterface {

    /**
     * Add to library
     */
    async addToLibraryRaw(requestParameters: AddToLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>> {
        if (requestParameters.addLibraryRequest === null || requestParameters.addLibraryRequest === undefined) {
            throw new runtime.RequiredError('addLibraryRequest','Required parameter requestParameters.addLibraryRequest was null or undefined when calling addToLibrary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddLibraryItemRequestToJSON(requestParameters.addLibraryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Add to library
     */
    async addToLibrary(requestParameters: AddToLibraryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse> {
        const response = await this.addToLibraryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply library item to storefront.
     */
    async applyToStoreFrontRaw(requestParameters: ApplyToStoreFrontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplyLibraryItemResponse>> {
        if (requestParameters.applyLibraryRequest === null || requestParameters.applyLibraryRequest === undefined) {
            throw new runtime.RequiredError('applyLibraryRequest','Required parameter requestParameters.applyLibraryRequest was null or undefined when calling applyToStoreFront.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/apply`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplyLibraryItemRequestToJSON(requestParameters.applyLibraryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplyLibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Apply library item to storefront.
     */
    async applyToStoreFront(requestParameters: ApplyToStoreFrontRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplyLibraryItemResponse> {
        const response = await this.applyToStoreFrontRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archive email list
     */
    async archiveEmailListRaw(requestParameters: ArchiveEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListArchiveResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling archiveEmailList.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling archiveEmailList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListArchiveResponseFromJSON(jsonValue));
    }

    /**
     * Archive email list
     */
    async archiveEmailList(requestParameters: ArchiveEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListArchiveResponse> {
        const response = await this.archiveEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archive email segment
     */
    async archiveEmailSegmentRaw(requestParameters: ArchiveEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentArchiveResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling archiveEmailSegment.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling archiveEmailSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentArchiveResponseFromJSON(jsonValue));
    }

    /**
     * Archive email segment
     */
    async archiveEmailSegment(requestParameters: ArchiveEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentArchiveResponse> {
        const response = await this.archiveEmailSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Back populate email flow
     */
    async backPopulateEmailFlowRaw(requestParameters: BackPopulateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowBackPopulateResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling backPopulateEmailFlow.');
        }

        if (requestParameters.emailFlowUuid === null || requestParameters.emailFlowUuid === undefined) {
            throw new runtime.RequiredError('emailFlowUuid','Required parameter requestParameters.emailFlowUuid was null or undefined when calling backPopulateEmailFlow.');
        }

        if (requestParameters.backPopulateRequest === null || requestParameters.backPopulateRequest === undefined) {
            throw new runtime.RequiredError('backPopulateRequest','Required parameter requestParameters.backPopulateRequest was null or undefined when calling backPopulateEmailFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFlowBackPopulateRequestToJSON(requestParameters.backPopulateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowBackPopulateResponseFromJSON(jsonValue));
    }

    /**
     * Back populate email flow
     */
    async backPopulateEmailFlow(requestParameters: BackPopulateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowBackPopulateResponse> {
        const response = await this.backPopulateEmailFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check download of email segment
     */
    async checkDownloadEmailSegmentRaw(requestParameters: CheckDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentDownloadPrepareResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling checkDownloadEmailSegment.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling checkDownloadEmailSegment.');
        }

        if (requestParameters.emailSegmentRebuildUuid === null || requestParameters.emailSegmentRebuildUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentRebuildUuid','Required parameter requestParameters.emailSegmentRebuildUuid was null or undefined when calling checkDownloadEmailSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))).replace(`{${"email_segment_rebuild_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentRebuildUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentDownloadPrepareResponseFromJSON(jsonValue));
    }

    /**
     * Check download of email segment
     */
    async checkDownloadEmailSegment(requestParameters: CheckDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentDownloadPrepareResponse> {
        const response = await this.checkDownloadEmailSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clone email campaign
     */
    async cloneEmailCampaignRaw(requestParameters: CloneEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling cloneEmailCampaign.');
        }

        if (requestParameters.emailCampaignUuid === null || requestParameters.emailCampaignUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignUuid','Required parameter requestParameters.emailCampaignUuid was null or undefined when calling cloneEmailCampaign.');
        }

        const queryParameters: any = {};

        if (requestParameters.targetStorefrontOid !== undefined) {
            queryParameters['target_storefront_oid'] = requestParameters.targetStorefrontOid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Clone email campaign
     */
    async cloneEmailCampaign(requestParameters: CloneEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse> {
        const response = await this.cloneEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clone email flow
     */
    async cloneEmailFlowRaw(requestParameters: CloneEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling cloneEmailFlow.');
        }

        if (requestParameters.emailFlowUuid === null || requestParameters.emailFlowUuid === undefined) {
            throw new runtime.RequiredError('emailFlowUuid','Required parameter requestParameters.emailFlowUuid was null or undefined when calling cloneEmailFlow.');
        }

        const queryParameters: any = {};

        if (requestParameters.targetStorefrontOid !== undefined) {
            queryParameters['target_storefront_oid'] = requestParameters.targetStorefrontOid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowResponseFromJSON(jsonValue));
    }

    /**
     * Clone email flow
     */
    async cloneEmailFlow(requestParameters: CloneEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse> {
        const response = await this.cloneEmailFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create email campaign
     */
    async createEmailSendingDomainRaw(requestParameters: CreateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling createEmailSendingDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domains/{domain}/create`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendingDomainResponseFromJSON(jsonValue));
    }

    /**
     * Create email campaign
     */
    async createEmailSendingDomain(requestParameters: CreateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse> {
        const response = await this.createEmailSendingDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create email sending domain for various providers
     */
    async createEmailSendingDomain2Raw(requestParameters: CreateEmailSendingDomain2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>> {
        if (requestParameters.emailDomain === null || requestParameters.emailDomain === undefined) {
            throw new runtime.RequiredError('emailDomain','Required parameter requestParameters.emailDomain was null or undefined when calling createEmailSendingDomain2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domains`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailDomainToJSON(requestParameters.emailDomain),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendingDomainResponseFromJSON(jsonValue));
    }

    /**
     * Create email sending domain for various providers
     */
    async createEmailSendingDomain2(requestParameters: CreateEmailSendingDomain2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse> {
        const response = await this.createEmailSendingDomain2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create file manager directory
     */
    async createFsDirectoryRaw(requestParameters: CreateFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerPageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createFsDirectory.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.parentStorefrontFsDirectoryOid !== undefined) {
            queryParameters['parent_storefront_fs_directory_oid'] = requestParameters.parentStorefrontFsDirectoryOid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{id}/fs/dir`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileManagerPageResponseFromJSON(jsonValue));
    }

    /**
     * Create file manager directory
     */
    async createFsDirectory(requestParameters: CreateFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerPageResponse> {
        const response = await this.createFsDirectoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Twilio account
     */
    async createTwilioAccountRaw(requestParameters: CreateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwilioResponse>> {
        if (requestParameters.twilio === null || requestParameters.twilio === undefined) {
            throw new runtime.RequiredError('twilio','Required parameter requestParameters.twilio was null or undefined when calling createTwilioAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/twilio/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwilioToJSON(requestParameters.twilio),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwilioResponseFromJSON(jsonValue));
    }

    /**
     * Create Twilio account
     */
    async createTwilioAccount(requestParameters: CreateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwilioResponse> {
        const response = await this.createTwilioAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete email campaignFolder
     */
    async deleteEmailCampaignFolderRaw(requestParameters: DeleteEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailCampaignFolder.');
        }

        if (requestParameters.emailCampaignFolderUuid === null || requestParameters.emailCampaignFolderUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignFolderUuid','Required parameter requestParameters.emailCampaignFolderUuid was null or undefined when calling deleteEmailCampaignFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignFolderUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete email campaignFolder
     */
    async deleteEmailCampaignFolder(requestParameters: DeleteEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailCampaignFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete communication sequence stats
     */
    async deleteEmailCommseqStatRaw(requestParameters: DeleteEmailCommseqStatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailCommseqStat.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling deleteEmailCommseqStat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete communication sequence stats
     */
    async deleteEmailCommseqStat(requestParameters: DeleteEmailCommseqStatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmailCommseqStatRaw(requestParameters, initOverrides);
    }

    /**
     * Delete email email
     */
    async deleteEmailEmailRaw(requestParameters: DeleteEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailEmail.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling deleteEmailEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete email email
     */
    async deleteEmailEmail(requestParameters: DeleteEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete email flowFolder
     */
    async deleteEmailFlowFolderRaw(requestParameters: DeleteEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailFlowFolder.');
        }

        if (requestParameters.emailFlowFolderUuid === null || requestParameters.emailFlowFolderUuid === undefined) {
            throw new runtime.RequiredError('emailFlowFolderUuid','Required parameter requestParameters.emailFlowFolderUuid was null or undefined when calling deleteEmailFlowFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowFolderUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete email flowFolder
     */
    async deleteEmailFlowFolder(requestParameters: DeleteEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailFlowFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete email list customer
     */
    async deleteEmailListCustomerRaw(requestParameters: DeleteEmailListCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailListCustomer.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling deleteEmailListCustomer.');
        }

        if (requestParameters.emailCustomerUuid === null || requestParameters.emailCustomerUuid === undefined) {
            throw new runtime.RequiredError('emailCustomerUuid','Required parameter requestParameters.emailCustomerUuid was null or undefined when calling deleteEmailListCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))).replace(`{${"email_customer_uuid"}}`, encodeURIComponent(String(requestParameters.emailCustomerUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete email list customer
     */
    async deleteEmailListCustomer(requestParameters: DeleteEmailListCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailListCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete email ListSegmentFolder
     */
    async deleteEmailListSegmentFolderRaw(requestParameters: DeleteEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailListSegmentFolder.');
        }

        if (requestParameters.emailListSegmentFolderUuid === null || requestParameters.emailListSegmentFolderUuid === undefined) {
            throw new runtime.RequiredError('emailListSegmentFolderUuid','Required parameter requestParameters.emailListSegmentFolderUuid was null or undefined when calling deleteEmailListSegmentFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_segment_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailListSegmentFolderUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete email ListSegmentFolder
     */
    async deleteEmailListSegmentFolder(requestParameters: DeleteEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailListSegmentFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete email postcard
     */
    async deleteEmailPostcardRaw(requestParameters: DeleteEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteEmailPostcard.');
        }

        if (requestParameters.commseqPostcardUuid === null || requestParameters.commseqPostcardUuid === undefined) {
            throw new runtime.RequiredError('commseqPostcardUuid','Required parameter requestParameters.commseqPostcardUuid was null or undefined when calling deleteEmailPostcard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_postcard_uuid"}}`, encodeURIComponent(String(requestParameters.commseqPostcardUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Delete email postcard
     */
    async deleteEmailPostcard(requestParameters: DeleteEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailPostcardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete email campaign
     */
    async deleteEmailSendingDomainRaw(requestParameters: DeleteEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling deleteEmailSendingDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domains/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * delete email campaign
     */
    async deleteEmailSendingDomain(requestParameters: DeleteEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteEmailSendingDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete experiment
     */
    async deleteExperimentRaw(requestParameters: DeleteExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteExperiment.');
        }

        if (requestParameters.storefrontExperimentOid === null || requestParameters.storefrontExperimentOid === undefined) {
            throw new runtime.RequiredError('storefrontExperimentOid','Required parameter requestParameters.storefrontExperimentOid was null or undefined when calling deleteExperiment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"storefront_experiment_oid"}}`, encodeURIComponent(String(requestParameters.storefrontExperimentOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete experiment
     */
    async deleteExperiment(requestParameters: DeleteExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExperimentRaw(requestParameters, initOverrides);
    }

    /**
     * Delete file manager directory
     */
    async deleteFsFileRaw(requestParameters: DeleteFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerPageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFsFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.parentStorefrontFsDirectoryOid !== undefined) {
            queryParameters['parent_storefront_fs_directory_oid'] = requestParameters.parentStorefrontFsDirectoryOid;
        }

        if (requestParameters.storefrontFsFileOid !== undefined) {
            queryParameters['storefront_fs_file_oid'] = requestParameters.storefrontFsFileOid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{id}/fs/file`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileManagerPageResponseFromJSON(jsonValue));
    }

    /**
     * Delete file manager directory
     */
    async deleteFsFile(requestParameters: DeleteFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerPageResponse> {
        const response = await this.deleteFsFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete screen recording heatmap 
     * Delete screen recording heatmap
     */
    async deleteHeatmapRaw(requestParameters: DeleteHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteHeatmap.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling deleteHeatmap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/heatmap`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingHeatmapResetToJSON(requestParameters.query),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete screen recording heatmap 
     * Delete screen recording heatmap
     */
    async deleteHeatmap(requestParameters: DeleteHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteHeatmapRaw(requestParameters, initOverrides);
    }

    /**
     * Delete library item
     */
    async deleteLibraryItemRaw(requestParameters: DeleteLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling deleteLibraryItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete library item
     */
    async deleteLibraryItem(requestParameters: DeleteLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLibraryItemRaw(requestParameters, initOverrides);
    }

    /**
     * Delete all published versions for a library item, including anything in review.
     */
    async deleteLibraryItemPublishedVersionsRaw(requestParameters: DeleteLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling deleteLibraryItemPublishedVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}/published_versions`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all published versions for a library item, including anything in review.
     */
    async deleteLibraryItemPublishedVersions(requestParameters: DeleteLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLibraryItemPublishedVersionsRaw(requestParameters, initOverrides);
    }

    /**
     * Delete screen recording segment
     */
    async deleteScreenRecordingSegmentRaw(requestParameters: DeleteScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling deleteScreenRecordingSegment.');
        }

        if (requestParameters.screenRecordingSegmentOid === null || requestParameters.screenRecordingSegmentOid === undefined) {
            throw new runtime.RequiredError('screenRecordingSegmentOid','Required parameter requestParameters.screenRecordingSegmentOid was null or undefined when calling deleteScreenRecordingSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_segment_oid"}}`, encodeURIComponent(String(requestParameters.screenRecordingSegmentOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete screen recording segment
     */
    async deleteScreenRecordingSegment(requestParameters: DeleteScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteScreenRecordingSegmentRaw(requestParameters, initOverrides);
    }

    /**
     * delete Twilio account
     */
    async deleteTwilioAccountRaw(requestParameters: DeleteTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.espTwilioUuid === null || requestParameters.espTwilioUuid === undefined) {
            throw new runtime.RequiredError('espTwilioUuid','Required parameter requestParameters.espTwilioUuid was null or undefined when calling deleteTwilioAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/twilio/accounts/{esp_twilio_uuid}`.replace(`{${"esp_twilio_uuid"}}`, encodeURIComponent(String(requestParameters.espTwilioUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * delete Twilio account
     */
    async deleteTwilioAccount(requestParameters: DeleteTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deleteTwilioAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate library item.
     */
    async duplicateLibraryItemRaw(requestParameters: DuplicateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling duplicateLibraryItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}/duplicate`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Duplicate library item.
     */
    async duplicateLibraryItem(requestParameters: DuplicateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse> {
        const response = await this.duplicateLibraryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update favorite flag on screen recording 
     * Update favorite flag on screen recording
     */
    async favoriteScreenRecordingRaw(requestParameters: FavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling favoriteScreenRecording.');
        }

        if (requestParameters.screenRecordingUuid === null || requestParameters.screenRecordingUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingUuid','Required parameter requestParameters.screenRecordingUuid was null or undefined when calling favoriteScreenRecording.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update favorite flag on screen recording 
     * Update favorite flag on screen recording
     */
    async favoriteScreenRecording(requestParameters: FavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.favoriteScreenRecordingRaw(requestParameters, initOverrides);
    }

    /**
     * Obtain lat/long for an address
     */
    async geocodeAddressRaw(requestParameters: GeocodeAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeocodeResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling geocodeAddress.');
        }

        if (requestParameters.geocodeRequest === null || requestParameters.geocodeRequest === undefined) {
            throw new runtime.RequiredError('geocodeRequest','Required parameter requestParameters.geocodeRequest was null or undefined when calling geocodeAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/geocode`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeocodeRequestToJSON(requestParameters.geocodeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeocodeResponseFromJSON(jsonValue));
    }

    /**
     * Obtain lat/long for an address
     */
    async geocodeAddress(requestParameters: GeocodeAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeocodeResponse> {
        const response = await this.geocodeAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtain a list of all the countries 
     * Get countries
     */
    async getCountriesRaw(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountriesResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getCountries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/countries`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountriesResponseFromJSON(jsonValue));
    }

    /**
     * Obtain a list of all the countries 
     * Get countries
     */
    async getCountries(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountriesResponse> {
        const response = await this.getCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a temporary authentication token for the editor 
     * Gets editor token
     */
    async getEditorTokenRaw(requestParameters: GetEditorTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailEditorTokenResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEditorToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/editor_token`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailEditorTokenResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a temporary authentication token for the editor 
     * Gets editor token
     */
    async getEditorToken(requestParameters: GetEditorTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailEditorTokenResponse> {
        const response = await this.getEditorTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email communication base templates
     */
    async getEmailBaseTemplatesRaw(requestParameters: GetEmailBaseTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailBaseTemplateListResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailBaseTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/baseTemplates`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailBaseTemplateListResponseFromJSON(jsonValue));
    }

    /**
     * Get email communication base templates
     */
    async getEmailBaseTemplates(requestParameters: GetEmailBaseTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailBaseTemplateListResponse> {
        const response = await this.getEmailBaseTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaign
     */
    async getEmailCampaignRaw(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCampaign.');
        }

        if (requestParameters.emailCampaignUuid === null || requestParameters.emailCampaignUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignUuid','Required parameter requestParameters.emailCampaignUuid was null or undefined when calling getEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaign
     */
    async getEmailCampaign(requestParameters: GetEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse> {
        const response = await this.getEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaign folder
     */
    async getEmailCampaignFolderRaw(requestParameters: GetEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCampaignFolder.');
        }

        if (requestParameters.emailCampaignFolderUuid === null || requestParameters.emailCampaignFolderUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignFolderUuid','Required parameter requestParameters.emailCampaignFolderUuid was null or undefined when calling getEmailCampaignFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignFolderUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignFolderResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaign folder
     */
    async getEmailCampaignFolder(requestParameters: GetEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFolderResponse> {
        const response = await this.getEmailCampaignFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaign folders
     */
    async getEmailCampaignFoldersRaw(requestParameters: GetEmailCampaignFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFoldersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCampaignFolders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaign_folders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignFoldersResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaign folders
     */
    async getEmailCampaignFolders(requestParameters: GetEmailCampaignFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFoldersResponse> {
        const response = await this.getEmailCampaignFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaign screenshots
     */
    async getEmailCampaignScreenshotsRaw(requestParameters: GetEmailCampaignScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCampaignScreenshots.');
        }

        if (requestParameters.emailCampaignUuid === null || requestParameters.emailCampaignUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignUuid','Required parameter requestParameters.emailCampaignUuid was null or undefined when calling getEmailCampaignScreenshots.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenshotsResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaign screenshots
     */
    async getEmailCampaignScreenshots(requestParameters: GetEmailCampaignScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotsResponse> {
        const response = await this.getEmailCampaignScreenshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaigns
     */
    async getEmailCampaignsRaw(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCampaigns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignsResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaigns
     */
    async getEmailCampaigns(requestParameters: GetEmailCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignsResponse> {
        const response = await this.getEmailCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaigns with stats
     */
    async getEmailCampaignsWithStatsRaw(requestParameters: GetEmailCampaignsWithStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCampaignsWithStats.');
        }

        if (requestParameters.statDays === null || requestParameters.statDays === undefined) {
            throw new runtime.RequiredError('statDays','Required parameter requestParameters.statDays was null or undefined when calling getEmailCampaignsWithStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"stat_days"}}`, encodeURIComponent(String(requestParameters.statDays))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignsResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaigns with stats
     */
    async getEmailCampaignsWithStats(requestParameters: GetEmailCampaignsWithStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignsResponse> {
        const response = await this.getEmailCampaignsWithStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email commseq
     */
    async getEmailCommseqRaw(requestParameters: GetEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseq.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqResponseFromJSON(jsonValue));
    }

    /**
     * Get email commseq
     */
    async getEmailCommseq(requestParameters: GetEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqResponse> {
        const response = await this.getEmailCommseqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email communication sequence emails stats
     */
    async getEmailCommseqEmailStatsRaw(requestParameters: GetEmailCommseqEmailStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStatSummaryResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqEmailStats.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseqEmailStats.');
        }

        if (requestParameters.statsRequest === null || requestParameters.statsRequest === undefined) {
            throw new runtime.RequiredError('statsRequest','Required parameter requestParameters.statsRequest was null or undefined when calling getEmailCommseqEmailStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailStatSummaryRequestToJSON(requestParameters.statsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStatSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Get email communication sequence emails stats
     */
    async getEmailCommseqEmailStats(requestParameters: GetEmailCommseqEmailStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStatSummaryResponse> {
        const response = await this.getEmailCommseqEmailStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email communication sequence postcard stats
     */
    async getEmailCommseqPostcardStatsRaw(requestParameters: GetEmailCommseqPostcardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStatPostcardSummaryResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqPostcardStats.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseqPostcardStats.');
        }

        if (requestParameters.statsRequest === null || requestParameters.statsRequest === undefined) {
            throw new runtime.RequiredError('statsRequest','Required parameter requestParameters.statsRequest was null or undefined when calling getEmailCommseqPostcardStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailStatPostcardSummaryRequestToJSON(requestParameters.statsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStatPostcardSummaryResponseFromJSON(jsonValue));
    }

    /**
     * Get email communication sequence postcard stats
     */
    async getEmailCommseqPostcardStats(requestParameters: GetEmailCommseqPostcardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStatPostcardSummaryResponse> {
        const response = await this.getEmailCommseqPostcardStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email communication postcard tracking
     */
    async getEmailCommseqPostcardTrackingRaw(requestParameters: GetEmailCommseqPostcardTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPostcardTrackingResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqPostcardTracking.');
        }

        if (requestParameters.commseqPostcardUuid === null || requestParameters.commseqPostcardUuid === undefined) {
            throw new runtime.RequiredError('commseqPostcardUuid','Required parameter requestParameters.commseqPostcardUuid was null or undefined when calling getEmailCommseqPostcardTracking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/tracking`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_postcard_uuid"}}`, encodeURIComponent(String(requestParameters.commseqPostcardUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailPostcardTrackingResponseFromJSON(jsonValue));
    }

    /**
     * Get email communication postcard tracking
     */
    async getEmailCommseqPostcardTracking(requestParameters: GetEmailCommseqPostcardTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPostcardTrackingResponse> {
        const response = await this.getEmailCommseqPostcardTrackingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get communication sequence stats overall
     */
    async getEmailCommseqStatOverallRaw(requestParameters: GetEmailCommseqStatOverallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqStatResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqStatOverall.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseqStatOverall.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqStatResponseFromJSON(jsonValue));
    }

    /**
     * Get communication sequence stats overall
     */
    async getEmailCommseqStatOverall(requestParameters: GetEmailCommseqStatOverallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqStatResponse> {
        const response = await this.getEmailCommseqStatOverallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email communication sequence step stats
     */
    async getEmailCommseqStepStatsRaw(requestParameters: GetEmailCommseqStepStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStepStatResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqStepStats.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseqStepStats.');
        }

        if (requestParameters.statsRequest === null || requestParameters.statsRequest === undefined) {
            throw new runtime.RequiredError('statsRequest','Required parameter requestParameters.statsRequest was null or undefined when calling getEmailCommseqStepStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailStepStatRequestToJSON(requestParameters.statsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStepStatResponseFromJSON(jsonValue));
    }

    /**
     * Get email communication sequence step stats
     */
    async getEmailCommseqStepStats(requestParameters: GetEmailCommseqStepStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStepStatResponse> {
        const response = await this.getEmailCommseqStepStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email communication sequence customers waiting at each requested step
     */
    async getEmailCommseqStepWaitingRaw(requestParameters: GetEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStepWaitingResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqStepWaiting.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseqStepWaiting.');
        }

        if (requestParameters.waitingRequest === null || requestParameters.waitingRequest === undefined) {
            throw new runtime.RequiredError('waitingRequest','Required parameter requestParameters.waitingRequest was null or undefined when calling getEmailCommseqStepWaiting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailStepWaitingRequestToJSON(requestParameters.waitingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStepWaitingResponseFromJSON(jsonValue));
    }

    /**
     * Get email communication sequence customers waiting at each requested step
     */
    async getEmailCommseqStepWaiting(requestParameters: GetEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStepWaitingResponse> {
        const response = await this.getEmailCommseqStepWaitingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email webhook editor values
     */
    async getEmailCommseqWebhookEditorValuesRaw(requestParameters: GetEmailCommseqWebhookEditorValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailWebhookEditorValuesResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqWebhookEditorValues.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailCommseqWebhookEditorValues.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailWebhookEditorValuesResponseFromJSON(jsonValue));
    }

    /**
     * Get email webhook editor values
     */
    async getEmailCommseqWebhookEditorValues(requestParameters: GetEmailCommseqWebhookEditorValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailWebhookEditorValuesResponse> {
        const response = await this.getEmailCommseqWebhookEditorValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email commseqs
     */
    async getEmailCommseqsRaw(requestParameters: GetEmailCommseqsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCommseqs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqsResponseFromJSON(jsonValue));
    }

    /**
     * Get email commseqs
     */
    async getEmailCommseqs(requestParameters: GetEmailCommseqsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqsResponse> {
        const response = await this.getEmailCommseqsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customers editor URL
     */
    async getEmailCustomerEditorUrlRaw(requestParameters: GetEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCustomerEditorUrl.');
        }

        if (requestParameters.emailCustomerUuid === null || requestParameters.emailCustomerUuid === undefined) {
            throw new runtime.RequiredError('emailCustomerUuid','Required parameter requestParameters.emailCustomerUuid was null or undefined when calling getEmailCustomerEditorUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_customer_uuid"}}`, encodeURIComponent(String(requestParameters.emailCustomerUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCustomerEditorUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get customers editor URL
     */
    async getEmailCustomerEditorUrl(requestParameters: GetEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse> {
        const response = await this.getEmailCustomerEditorUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email customers
     */
    async getEmailCustomersRaw(requestParameters: GetEmailCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailCustomers.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.searchEmailPrefix !== undefined) {
            queryParameters['searchEmailPrefix'] = requestParameters.searchEmailPrefix;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/customers`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCustomersResponseFromJSON(jsonValue));
    }

    /**
     * Get email customers
     */
    async getEmailCustomers(requestParameters: GetEmailCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomersResponse> {
        const response = await this.getEmailCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email dashboard activity
     */
    async getEmailDashboardActivityRaw(requestParameters: GetEmailDashboardActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailDashboardActivityResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailDashboardActivity.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastRecords !== undefined) {
            queryParameters['last_records'] = requestParameters.lastRecords;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/dashboard_activity`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailDashboardActivityResponseFromJSON(jsonValue));
    }

    /**
     * Get email dashboard activity
     */
    async getEmailDashboardActivity(requestParameters: GetEmailDashboardActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailDashboardActivityResponse> {
        const response = await this.getEmailDashboardActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get dashboard stats
     */
    async getEmailDashboardStatsRaw(requestParameters: GetEmailDashboardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailDashboardStatsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailDashboardStats.');
        }

        const queryParameters: any = {};

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/dashboard_stats`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailDashboardStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get dashboard stats
     */
    async getEmailDashboardStats(requestParameters: GetEmailDashboardStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailDashboardStatsResponse> {
        const response = await this.getEmailDashboardStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email dispatch logs
     */
    async getEmailDispatchLogsRaw(requestParameters: GetEmailDispatchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqStepLogsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailDispatchLogs.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailDispatchLogs.');
        }

        if (requestParameters.commseqStepUuid === null || requestParameters.commseqStepUuid === undefined) {
            throw new runtime.RequiredError('commseqStepUuid','Required parameter requestParameters.commseqStepUuid was null or undefined when calling getEmailDispatchLogs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))).replace(`{${"commseq_step_uuid"}}`, encodeURIComponent(String(requestParameters.commseqStepUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqStepLogsResponseFromJSON(jsonValue));
    }

    /**
     * Get email dispatch logs
     */
    async getEmailDispatchLogs(requestParameters: GetEmailDispatchLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqStepLogsResponse> {
        const response = await this.getEmailDispatchLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email email
     */
    async getEmailEmailRaw(requestParameters: GetEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailEmail.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling getEmailEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailResponseFromJSON(jsonValue));
    }

    /**
     * Get email email
     */
    async getEmailEmail(requestParameters: GetEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailResponse> {
        const response = await this.getEmailEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email email clicks
     */
    async getEmailEmailClicksRaw(requestParameters: GetEmailEmailClicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailClicksResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailEmailClicks.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailEmailClicks.');
        }

        if (requestParameters.commseqStepUuid === null || requestParameters.commseqStepUuid === undefined) {
            throw new runtime.RequiredError('commseqStepUuid','Required parameter requestParameters.commseqStepUuid was null or undefined when calling getEmailEmailClicks.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling getEmailEmailClicks.');
        }

        const queryParameters: any = {};

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))).replace(`{${"commseq_step_uuid"}}`, encodeURIComponent(String(requestParameters.commseqStepUuid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailClicksResponseFromJSON(jsonValue));
    }

    /**
     * Get email email clicks
     */
    async getEmailEmailClicks(requestParameters: GetEmailEmailClicksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailClicksResponse> {
        const response = await this.getEmailEmailClicksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email order customer editor url
     */
    async getEmailEmailCustomerEditorUrlRaw(requestParameters: GetEmailEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling getEmailEmailCustomerEditorUrl.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getEmailEmailCustomerEditorUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))).replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCustomerEditorUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get email order customer editor url
     */
    async getEmailEmailCustomerEditorUrl(requestParameters: GetEmailEmailCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse> {
        const response = await this.getEmailEmailCustomerEditorUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email email orders
     */
    async getEmailEmailOrdersRaw(requestParameters: GetEmailEmailOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailOrdersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailEmailOrders.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling getEmailEmailOrders.');
        }

        if (requestParameters.commseqStepUuid === null || requestParameters.commseqStepUuid === undefined) {
            throw new runtime.RequiredError('commseqStepUuid','Required parameter requestParameters.commseqStepUuid was null or undefined when calling getEmailEmailOrders.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling getEmailEmailOrders.');
        }

        const queryParameters: any = {};

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))).replace(`{${"commseq_step_uuid"}}`, encodeURIComponent(String(requestParameters.commseqStepUuid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailOrdersResponseFromJSON(jsonValue));
    }

    /**
     * Get email email orders
     */
    async getEmailEmailOrders(requestParameters: GetEmailEmailOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailOrdersResponse> {
        const response = await this.getEmailEmailOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email emails
     */
    async getEmailEmailsRaw(requestParameters: GetEmailEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailEmails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailsResponseFromJSON(jsonValue));
    }

    /**
     * Get email emails
     */
    async getEmailEmails(requestParameters: GetEmailEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailsResponse> {
        const response = await this.getEmailEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email emails multiple
     */
    async getEmailEmailsMultipleRaw(requestParameters: GetEmailEmailsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailEmailsMultiple.');
        }

        if (requestParameters.emailCommseqEmailsRequest === null || requestParameters.emailCommseqEmailsRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqEmailsRequest','Required parameter requestParameters.emailCommseqEmailsRequest was null or undefined when calling getEmailEmailsMultiple.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/multiple`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqEmailsRequestToJSON(requestParameters.emailCommseqEmailsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailsResponseFromJSON(jsonValue));
    }

    /**
     * Get email emails multiple
     */
    async getEmailEmailsMultiple(requestParameters: GetEmailEmailsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailsResponse> {
        const response = await this.getEmailEmailsMultipleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email flow
     */
    async getEmailFlowRaw(requestParameters: GetEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailFlow.');
        }

        if (requestParameters.emailFlowUuid === null || requestParameters.emailFlowUuid === undefined) {
            throw new runtime.RequiredError('emailFlowUuid','Required parameter requestParameters.emailFlowUuid was null or undefined when calling getEmailFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows/{email_flow_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowResponseFromJSON(jsonValue));
    }

    /**
     * Get email flow
     */
    async getEmailFlow(requestParameters: GetEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse> {
        const response = await this.getEmailFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email flow folder
     */
    async getEmailFlowFolderRaw(requestParameters: GetEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailFlowFolder.');
        }

        if (requestParameters.emailFlowFolderUuid === null || requestParameters.emailFlowFolderUuid === undefined) {
            throw new runtime.RequiredError('emailFlowFolderUuid','Required parameter requestParameters.emailFlowFolderUuid was null or undefined when calling getEmailFlowFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowFolderUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowFolderResponseFromJSON(jsonValue));
    }

    /**
     * Get email flow folder
     */
    async getEmailFlowFolder(requestParameters: GetEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFolderResponse> {
        const response = await this.getEmailFlowFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email flow folders
     */
    async getEmailFlowFoldersRaw(requestParameters: GetEmailFlowFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFoldersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailFlowFolders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flow_folders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowFoldersResponseFromJSON(jsonValue));
    }

    /**
     * Get email flow folders
     */
    async getEmailFlowFolders(requestParameters: GetEmailFlowFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFoldersResponse> {
        const response = await this.getEmailFlowFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email flow screenshots
     */
    async getEmailFlowScreenshotsRaw(requestParameters: GetEmailFlowScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailFlowScreenshots.');
        }

        if (requestParameters.emailFlowUuid === null || requestParameters.emailFlowUuid === undefined) {
            throw new runtime.RequiredError('emailFlowUuid','Required parameter requestParameters.emailFlowUuid was null or undefined when calling getEmailFlowScreenshots.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenshotsResponseFromJSON(jsonValue));
    }

    /**
     * Get email flow screenshots
     */
    async getEmailFlowScreenshots(requestParameters: GetEmailFlowScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotsResponse> {
        const response = await this.getEmailFlowScreenshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email flows
     */
    async getEmailFlowsRaw(requestParameters: GetEmailFlowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailFlows.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowsResponseFromJSON(jsonValue));
    }

    /**
     * Get email flows
     */
    async getEmailFlows(requestParameters: GetEmailFlowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowsResponse> {
        const response = await this.getEmailFlowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email globalsettings
     */
    async getEmailGlobalSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailGlobalSettingsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/global_settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailGlobalSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Get email globalsettings
     */
    async getEmailGlobalSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailGlobalSettingsResponse> {
        const response = await this.getEmailGlobalSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get email list
     */
    async getEmailListRaw(requestParameters: GetEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailList.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling getEmailList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListResponseFromJSON(jsonValue));
    }

    /**
     * Get email list
     */
    async getEmailList(requestParameters: GetEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListResponse> {
        const response = await this.getEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email list customer editor url
     */
    async getEmailListCustomerEditorUrlRaw(requestParameters: GetEmailListCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailListCustomerEditorUrl.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling getEmailListCustomerEditorUrl.');
        }

        if (requestParameters.emailCustomerUuid === null || requestParameters.emailCustomerUuid === undefined) {
            throw new runtime.RequiredError('emailCustomerUuid','Required parameter requestParameters.emailCustomerUuid was null or undefined when calling getEmailListCustomerEditorUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))).replace(`{${"email_customer_uuid"}}`, encodeURIComponent(String(requestParameters.emailCustomerUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCustomerEditorUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get email list customer editor url
     */
    async getEmailListCustomerEditorUrl(requestParameters: GetEmailListCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse> {
        const response = await this.getEmailListCustomerEditorUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email list customers
     */
    async getEmailListCustomersRaw(requestParameters: GetEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListCustomersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailListCustomers.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling getEmailListCustomers.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListCustomersResponseFromJSON(jsonValue));
    }

    /**
     * Get email list customers
     */
    async getEmailListCustomers(requestParameters: GetEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListCustomersResponse> {
        const response = await this.getEmailListCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaign folder
     */
    async getEmailListSegmentFolderRaw(requestParameters: GetEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailListSegmentFolder.');
        }

        if (requestParameters.emailListSegmentFolderUuid === null || requestParameters.emailListSegmentFolderUuid === undefined) {
            throw new runtime.RequiredError('emailListSegmentFolderUuid','Required parameter requestParameters.emailListSegmentFolderUuid was null or undefined when calling getEmailListSegmentFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_segment_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailListSegmentFolderUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListSegmentFolderResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaign folder
     */
    async getEmailListSegmentFolder(requestParameters: GetEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFolderResponse> {
        const response = await this.getEmailListSegmentFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email campaign folders
     */
    async getEmailListSegmentFoldersRaw(requestParameters: GetEmailListSegmentFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFoldersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailListSegmentFolders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/list_segment_folders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListSegmentFoldersResponseFromJSON(jsonValue));
    }

    /**
     * Get email campaign folders
     */
    async getEmailListSegmentFolders(requestParameters: GetEmailListSegmentFoldersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFoldersResponse> {
        const response = await this.getEmailListSegmentFoldersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email lists
     */
    async getEmailListsRaw(requestParameters: GetEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailLists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListsResponseFromJSON(jsonValue));
    }

    /**
     * Get email lists
     */
    async getEmailLists(requestParameters: GetEmailListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListsResponse> {
        const response = await this.getEmailListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email performance
     */
    async getEmailPerformanceRaw(requestParameters: GetEmailPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPerformanceResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailPerformance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/performance`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailPerformanceResponseFromJSON(jsonValue));
    }

    /**
     * Get email performance
     */
    async getEmailPerformance(requestParameters: GetEmailPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPerformanceResponse> {
        const response = await this.getEmailPerformanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email plan
     */
    async getEmailPlanRaw(requestParameters: GetEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPlanResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/plan`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailPlanResponseFromJSON(jsonValue));
    }

    /**
     * Get email plan
     */
    async getEmailPlan(requestParameters: GetEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPlanResponse> {
        const response = await this.getEmailPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email postcard
     */
    async getEmailPostcardRaw(requestParameters: GetEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailPostcard.');
        }

        if (requestParameters.commseqPostcardUuid === null || requestParameters.commseqPostcardUuid === undefined) {
            throw new runtime.RequiredError('commseqPostcardUuid','Required parameter requestParameters.commseqPostcardUuid was null or undefined when calling getEmailPostcard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_postcard_uuid"}}`, encodeURIComponent(String(requestParameters.commseqPostcardUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqPostcardResponseFromJSON(jsonValue));
    }

    /**
     * Get email postcard
     */
    async getEmailPostcard(requestParameters: GetEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardResponse> {
        const response = await this.getEmailPostcardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email postcards
     */
    async getEmailPostcardsRaw(requestParameters: GetEmailPostcardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailPostcards.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqPostcardsResponseFromJSON(jsonValue));
    }

    /**
     * Get email postcards
     */
    async getEmailPostcards(requestParameters: GetEmailPostcardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardsResponse> {
        const response = await this.getEmailPostcardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email postcards multiple
     */
    async getEmailPostcardsMultipleRaw(requestParameters: GetEmailPostcardsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailPostcardsMultiple.');
        }

        if (requestParameters.emailCommseqPostcardsRequest === null || requestParameters.emailCommseqPostcardsRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqPostcardsRequest','Required parameter requestParameters.emailCommseqPostcardsRequest was null or undefined when calling getEmailPostcardsMultiple.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards/multiple`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqPostcardsRequestToJSON(requestParameters.emailCommseqPostcardsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqPostcardsResponseFromJSON(jsonValue));
    }

    /**
     * Get email postcards multiple
     */
    async getEmailPostcardsMultiple(requestParameters: GetEmailPostcardsMultipleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardsResponse> {
        const response = await this.getEmailPostcardsMultipleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email segment
     */
    async getEmailSegmentRaw(requestParameters: GetEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailSegment.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling getEmailSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentResponseFromJSON(jsonValue));
    }

    /**
     * Get email segment
     */
    async getEmailSegment(requestParameters: GetEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentResponse> {
        const response = await this.getEmailSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email segment customers editor URL
     */
    async getEmailSegmentCustomerEditorUrlRaw(requestParameters: GetEmailSegmentCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCustomerEditorUrlResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
        }

        if (requestParameters.emailCustomerUuid === null || requestParameters.emailCustomerUuid === undefined) {
            throw new runtime.RequiredError('emailCustomerUuid','Required parameter requestParameters.emailCustomerUuid was null or undefined when calling getEmailSegmentCustomerEditorUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))).replace(`{${"email_customer_uuid"}}`, encodeURIComponent(String(requestParameters.emailCustomerUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCustomerEditorUrlResponseFromJSON(jsonValue));
    }

    /**
     * Get email segment customers editor URL
     */
    async getEmailSegmentCustomerEditorUrl(requestParameters: GetEmailSegmentCustomerEditorUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCustomerEditorUrlResponse> {
        const response = await this.getEmailSegmentCustomerEditorUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email segment customers
     */
    async getEmailSegmentCustomersRaw(requestParameters: GetEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentCustomersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailSegmentCustomers.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling getEmailSegmentCustomers.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentCustomersResponseFromJSON(jsonValue));
    }

    /**
     * Get email segment customers
     */
    async getEmailSegmentCustomers(requestParameters: GetEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentCustomersResponse> {
        const response = await this.getEmailSegmentCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email segments
     */
    async getEmailSegmentsRaw(requestParameters: GetEmailSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailSegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentsResponseFromJSON(jsonValue));
    }

    /**
     * Get email segments
     */
    async getEmailSegments(requestParameters: GetEmailSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentsResponse> {
        const response = await this.getEmailSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email sending domain
     */
    async getEmailSendingDomainRaw(requestParameters: GetEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling getEmailSendingDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domain/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendingDomainResponseFromJSON(jsonValue));
    }

    /**
     * Get email sending domain
     */
    async getEmailSendingDomain(requestParameters: GetEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse> {
        const response = await this.getEmailSendingDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email sending domain status
     */
    async getEmailSendingDomainStatusRaw(requestParameters: GetEmailSendingDomainStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling getEmailSendingDomainStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domains/{domain}/status`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendingDomainResponseFromJSON(jsonValue));
    }

    /**
     * Get email sending domain status
     */
    async getEmailSendingDomainStatus(requestParameters: GetEmailSendingDomainStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse> {
        const response = await this.getEmailSendingDomainStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email sending domains
     */
    async getEmailSendingDomainsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendingDomainsResponseFromJSON(jsonValue));
    }

    /**
     * Get email sending domains
     */
    async getEmailSendingDomains(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainsResponse> {
        const response = await this.getEmailSendingDomainsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get email settings
     */
    async getEmailSettingsRaw(requestParameters: GetEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSettingsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/settings`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Get email settings
     */
    async getEmailSettings(requestParameters: GetEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSettingsResponse> {
        const response = await this.getEmailSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email template
     */
    async getEmailTemplateRaw(requestParameters: GetEmailTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplate>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailTemplate.');
        }

        if (requestParameters.emailTemplateOid === null || requestParameters.emailTemplateOid === undefined) {
            throw new runtime.RequiredError('emailTemplateOid','Required parameter requestParameters.emailTemplateOid was null or undefined when calling getEmailTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/templates/{email_template_oid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_template_oid"}}`, encodeURIComponent(String(requestParameters.emailTemplateOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateFromJSON(jsonValue));
    }

    /**
     * Get email template
     */
    async getEmailTemplate(requestParameters: GetEmailTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplate> {
        const response = await this.getEmailTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get email templates
     */
    async getEmailTemplatesRaw(requestParameters: GetEmailTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailTemplatesResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.triggerType !== undefined) {
            queryParameters['trigger_type'] = requestParameters.triggerType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/templates`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplatesResponseFromJSON(jsonValue));
    }

    /**
     * Get email templates
     */
    async getEmailTemplates(requestParameters: GetEmailTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailTemplatesResponse> {
        const response = await this.getEmailTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of third party email providers
     */
    async getEmailThirdPartyProvidersRaw(requestParameters: GetEmailThirdPartyProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailThirdPartyProvidersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getEmailThirdPartyProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/third_party_providers`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailThirdPartyProvidersResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of third party email providers
     */
    async getEmailThirdPartyProviders(requestParameters: GetEmailThirdPartyProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailThirdPartyProvidersResponse> {
        const response = await this.getEmailThirdPartyProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get experiments
     */
    async getExperimentsRaw(requestParameters: GetExperimentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getExperiments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/experiments`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentsResponseFromJSON(jsonValue));
    }

    /**
     * Get experiments
     */
    async getExperiments(requestParameters: GetExperimentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentsResponse> {
        const response = await this.getExperimentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get file manager directory
     */
    async getFsDirectoryRaw(requestParameters: GetFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerPageResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFsDirectory.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.storefrontFsDirectoryOid !== undefined) {
            queryParameters['storefront_fs_directory_oid'] = requestParameters.storefrontFsDirectoryOid;
        }

        if (requestParameters.storefrontThemeOid !== undefined) {
            queryParameters['storefront_theme_oid'] = requestParameters.storefrontThemeOid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{id}/fs/dir`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileManagerPageResponseFromJSON(jsonValue));
    }

    /**
     * Get file manager directory
     */
    async getFsDirectory(requestParameters: GetFsDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerPageResponse> {
        const response = await this.getFsDirectoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording heatmap 
     * Get screen recording heatmap
     */
    async getHeatmapRaw(requestParameters: GetHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingHeatmapResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getHeatmap.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getHeatmap.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/heatmap`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingHeatmapRequestToJSON(requestParameters.query),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingHeatmapResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording heatmap 
     * Get screen recording heatmap
     */
    async getHeatmap(requestParameters: GetHeatmapRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingHeatmapResponse> {
        const response = await this.getHeatmapRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording heatmap index 
     * Get screen recording heatmap index
     */
    async getHeatmapIndexRaw(requestParameters: GetHeatmapIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingHeatmapIndexResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getHeatmapIndex.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getHeatmapIndex.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/heatmap/index`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingHeatmapIndexRequestToJSON(requestParameters.query),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingHeatmapIndexResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording heatmap index 
     * Get screen recording heatmap index
     */
    async getHeatmapIndex(requestParameters: GetHeatmapIndexRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingHeatmapIndexResponse> {
        const response = await this.getHeatmapIndexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtain a list of property names for a given property type 
     * Get histogram property names
     */
    async getHistogramPropertyNamesRaw(requestParameters: GetHistogramPropertyNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailHistogramPropertyNamesResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getHistogramPropertyNames.');
        }

        const queryParameters: any = {};

        if (requestParameters.propertyType !== undefined) {
            queryParameters['property_type'] = requestParameters.propertyType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/histogram/property_names`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailHistogramPropertyNamesResponseFromJSON(jsonValue));
    }

    /**
     * Obtain a list of property names for a given property type 
     * Get histogram property names
     */
    async getHistogramPropertyNames(requestParameters: GetHistogramPropertyNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailHistogramPropertyNamesResponse> {
        const response = await this.getHistogramPropertyNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtain a list of property values for a given property name and type 
     * Get histogram property values
     */
    async getHistogramPropertyValuesRaw(requestParameters: GetHistogramPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailHistogramPropertyValuesResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getHistogramPropertyValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.propertyName !== undefined) {
            queryParameters['property_name'] = requestParameters.propertyName;
        }

        if (requestParameters.propertyType !== undefined) {
            queryParameters['property_type'] = requestParameters.propertyType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/histogram/property_values`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailHistogramPropertyValuesResponseFromJSON(jsonValue));
    }

    /**
     * Obtain a list of property values for a given property name and type 
     * Get histogram property values
     */
    async getHistogramPropertyValues(requestParameters: GetHistogramPropertyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailHistogramPropertyValuesResponse> {
        const response = await this.getHistogramPropertyValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get library values used to populate drop down boxes for filtering.
     */
    async getLibraryFilterValuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryFilterValuesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/filter_values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryFilterValuesResponseFromJSON(jsonValue));
    }

    /**
     * Get library values used to populate drop down boxes for filtering.
     */
    async getLibraryFilterValues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryFilterValuesResponse> {
        const response = await this.getLibraryFilterValuesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get library item.
     */
    async getLibraryItemRaw(requestParameters: GetLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling getLibraryItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Get library item.
     */
    async getLibraryItem(requestParameters: GetLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse> {
        const response = await this.getLibraryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all published versions for a library item.
     */
    async getLibraryItemPublishedVersionsRaw(requestParameters: GetLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling getLibraryItemPublishedVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}/published_versions`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemsResponseFromJSON(jsonValue));
    }

    /**
     * Get all published versions for a library item.
     */
    async getLibraryItemPublishedVersions(requestParameters: GetLibraryItemPublishedVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse> {
        const response = await this.getLibraryItemPublishedVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording 
     * Get screen recording
     */
    async getScreenRecordingRaw(requestParameters: GetScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecording.');
        }

        if (requestParameters.screenRecordingUuid === null || requestParameters.screenRecordingUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingUuid','Required parameter requestParameters.screenRecordingUuid was null or undefined when calling getScreenRecording.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording 
     * Get screen recording
     */
    async getScreenRecording(requestParameters: GetScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingResponse> {
        const response = await this.getScreenRecordingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording page view data 
     * Get screen recording page view data
     */
    async getScreenRecordingPageViewDataRaw(requestParameters: GetScreenRecordingPageViewDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingPageViewDataResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingPageViewData.');
        }

        if (requestParameters.screenRecordingUuid === null || requestParameters.screenRecordingUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingUuid','Required parameter requestParameters.screenRecordingUuid was null or undefined when calling getScreenRecordingPageViewData.');
        }

        if (requestParameters.screenRecordingPageViewUuid === null || requestParameters.screenRecordingPageViewUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingPageViewUuid','Required parameter requestParameters.screenRecordingPageViewUuid was null or undefined when calling getScreenRecordingPageViewData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingUuid))).replace(`{${"screen_recording_page_view_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingPageViewUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingPageViewDataResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording page view data 
     * Get screen recording page view data
     */
    async getScreenRecordingPageViewData(requestParameters: GetScreenRecordingPageViewDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingPageViewDataResponse> {
        const response = await this.getScreenRecordingPageViewDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording segment
     */
    async getScreenRecordingSegmentRaw(requestParameters: GetScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingSegment.');
        }

        if (requestParameters.screenRecordingSegmentOid === null || requestParameters.screenRecordingSegmentOid === undefined) {
            throw new runtime.RequiredError('screenRecordingSegmentOid','Required parameter requestParameters.screenRecordingSegmentOid was null or undefined when calling getScreenRecordingSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_segment_oid"}}`, encodeURIComponent(String(requestParameters.screenRecordingSegmentOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingSegmentResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording segment
     */
    async getScreenRecordingSegment(requestParameters: GetScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentResponse> {
        const response = await this.getScreenRecordingSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording segments
     */
    async getScreenRecordingSegmentsRaw(requestParameters: GetScreenRecordingSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingSegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/segments`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingSegmentsResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording segments
     */
    async getScreenRecordingSegments(requestParameters: GetScreenRecordingSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentsResponse> {
        const response = await this.getScreenRecordingSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recording settings
     */
    async getScreenRecordingSettingsRaw(requestParameters: GetScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSettingsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/settings`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recording settings
     */
    async getScreenRecordingSettings(requestParameters: GetScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSettingsResponse> {
        const response = await this.getScreenRecordingSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tags used by screen recording 
     * Get tags used by screen recording
     */
    async getScreenRecordingTagsRaw(requestParameters: GetScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingTagsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/tags`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingTagsResponseFromJSON(jsonValue));
    }

    /**
     * Get tags used by screen recording 
     * Get tags used by screen recording
     */
    async getScreenRecordingTags(requestParameters: GetScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingTagsResponse> {
        const response = await this.getScreenRecordingTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query screen recordings 
     * Query screen recordings
     */
    async getScreenRecordingsByQueryRaw(requestParameters: GetScreenRecordingsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingQueryResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingsByQuery.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getScreenRecordingsByQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/query`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingQueryRequestToJSON(requestParameters.query),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingQueryResponseFromJSON(jsonValue));
    }

    /**
     * Query screen recordings 
     * Query screen recordings
     */
    async getScreenRecordingsByQuery(requestParameters: GetScreenRecordingsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingQueryResponse> {
        const response = await this.getScreenRecordingsByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get screen recordings by segment 
     * Get screen recordings by segment
     */
    async getScreenRecordingsBySegmentRaw(requestParameters: GetScreenRecordingsBySegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingQueryResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getScreenRecordingsBySegment.');
        }

        if (requestParameters.screenRecordingSegmentOid === null || requestParameters.screenRecordingSegmentOid === undefined) {
            throw new runtime.RequiredError('screenRecordingSegmentOid','Required parameter requestParameters.screenRecordingSegmentOid was null or undefined when calling getScreenRecordingsBySegment.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_segment_oid"}}`, encodeURIComponent(String(requestParameters.screenRecordingSegmentOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingQueryResponseFromJSON(jsonValue));
    }

    /**
     * Get screen recordings by segment 
     * Get screen recordings by segment
     */
    async getScreenRecordingsBySegment(requestParameters: GetScreenRecordingsBySegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingQueryResponse> {
        const response = await this.getScreenRecordingsBySegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the pricing tiers 
     * Retrieve pricing tiers
     */
    async getStoreFrontPricingTiersRaw(requestParameters: GetStoreFrontPricingTiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PricingTiersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["item_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/pricing_tiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PricingTiersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the pricing tiers 
     * Retrieve pricing tiers
     */
    async getStoreFrontPricingTiers(requestParameters: GetStoreFrontPricingTiersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PricingTiersResponse> {
        const response = await this.getStoreFrontPricingTiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get storefronts (internal use only for security reasons)
     */
    async getStoreFrontsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreFrontsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read", "affiliate_write", "auto_order_read", "auto_order_write", "channel_partner_read", "channel_partner_write", "chargeback_read", "chargeback_write", "checkout_read", "checkout_write", "configuration_read", "configuration_write", "conversation_read", "conversation_write", "coupon_read", "coupon_write", "customer_read", "customer_write", "fulfillment_read", "fulfillment_write", "gift_certificate_read", "gift_certificate_write", "integration_log_read", "integration_log_write", "order_read", "order_write", "item_read", "item_write", "storefront_read", "storefront_write", "tax_read", "tax_write", "webhook_read", "webhook_write", "ultrabooks_read", "ultrabooks_write", "user_read", "user_write", "workflow_read", "workflow_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreFrontsResponseFromJSON(jsonValue));
    }

    /**
     * Get storefronts (internal use only for security reasons)
     */
    async getStoreFronts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreFrontsResponse> {
        const response = await this.getStoreFrontsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get thumbnail parameters
     */
    async getThumbnailParametersRaw(requestParameters: GetThumbnailParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThumbnailParametersResponse>> {
        if (requestParameters.thumbnailParameters === null || requestParameters.thumbnailParameters === undefined) {
            throw new runtime.RequiredError('thumbnailParameters','Required parameter requestParameters.thumbnailParameters was null or undefined when calling getThumbnailParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/thumbnailParameters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThumbnailParametersRequestToJSON(requestParameters.thumbnailParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThumbnailParametersResponseFromJSON(jsonValue));
    }

    /**
     * Get thumbnail parameters
     */
    async getThumbnailParameters(requestParameters: GetThumbnailParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThumbnailParametersResponse> {
        const response = await this.getThumbnailParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a transactional email 
     * Gets a transaction email object
     */
    async getTransactionEmailRaw(requestParameters: GetTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEmailResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getTransactionEmail.');
        }

        if (requestParameters.emailId === null || requestParameters.emailId === undefined) {
            throw new runtime.RequiredError('emailId','Required parameter requestParameters.emailId was null or undefined when calling getTransactionEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/transaction_email/list/{email_id}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters.emailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionEmailResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a transactional email 
     * Gets a transaction email object
     */
    async getTransactionEmail(requestParameters: GetTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEmailResponse> {
        const response = await this.getTransactionEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Obtain a list of all transactional emails and return back just their names 
     * Gets a list of transaction email names
     */
    async getTransactionEmailListRaw(requestParameters: GetTransactionEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEmailListResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getTransactionEmailList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/transaction_email/list`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionEmailListResponseFromJSON(jsonValue));
    }

    /**
     * Obtain a list of all transactional emails and return back just their names 
     * Gets a list of transaction email names
     */
    async getTransactionEmailList(requestParameters: GetTransactionEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEmailListResponse> {
        const response = await this.getTransactionEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get transactional email screenshots
     */
    async getTransactionEmailScreenshotsRaw(requestParameters: GetTransactionEmailScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenshotsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling getTransactionEmailScreenshots.');
        }

        if (requestParameters.emailId === null || requestParameters.emailId === undefined) {
            throw new runtime.RequiredError('emailId','Required parameter requestParameters.emailId was null or undefined when calling getTransactionEmailScreenshots.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters.emailId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenshotsResponseFromJSON(jsonValue));
    }

    /**
     * Get transactional email screenshots
     */
    async getTransactionEmailScreenshots(requestParameters: GetTransactionEmailScreenshotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenshotsResponse> {
        const response = await this.getTransactionEmailScreenshotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Twilio account
     */
    async getTwilioAccountRaw(requestParameters: GetTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwilioResponse>> {
        if (requestParameters.espTwilioUuid === null || requestParameters.espTwilioUuid === undefined) {
            throw new runtime.RequiredError('espTwilioUuid','Required parameter requestParameters.espTwilioUuid was null or undefined when calling getTwilioAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/twilio/accounts/{esp_twilio_uuid}`.replace(`{${"esp_twilio_uuid"}}`, encodeURIComponent(String(requestParameters.espTwilioUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwilioResponseFromJSON(jsonValue));
    }

    /**
     * Get Twilio account
     */
    async getTwilioAccount(requestParameters: GetTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwilioResponse> {
        const response = await this.getTwilioAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all Twilio accounts
     */
    async getTwilioAccountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwiliosResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/twilio/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwiliosResponseFromJSON(jsonValue));
    }

    /**
     * Get all Twilio accounts
     */
    async getTwilioAccounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwiliosResponse> {
        const response = await this.getTwilioAccountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
     */
    async getUploadFsFileUrlRaw(requestParameters: GetUploadFsFileUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileManagerUploadUrlResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUploadFsFileUrl.');
        }

        if (requestParameters.extension === null || requestParameters.extension === undefined) {
            throw new runtime.RequiredError('extension','Required parameter requestParameters.extension was null or undefined when calling getUploadFsFileUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{id}/fs/upload_url/{extension}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters.extension))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileManagerUploadUrlResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
     */
    async getUploadFsFileUrl(requestParameters: GetUploadFsFileUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileManagerUploadUrlResponse> {
        const response = await this.getUploadFsFileUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Globally unsubscribe a customer
     */
    async globalUnsubscribeRaw(requestParameters: GlobalUnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailGlobalUnsubscribeResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling globalUnsubscribe.');
        }

        if (requestParameters.unsubscribe === null || requestParameters.unsubscribe === undefined) {
            throw new runtime.RequiredError('unsubscribe','Required parameter requestParameters.unsubscribe was null or undefined when calling globalUnsubscribe.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/globalUnsubscribe`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailGlobalUnsubscribeRequestToJSON(requestParameters.unsubscribe),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailGlobalUnsubscribeResponseFromJSON(jsonValue));
    }

    /**
     * Globally unsubscribe a customer
     */
    async globalUnsubscribe(requestParameters: GlobalUnsubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailGlobalUnsubscribeResponse> {
        const response = await this.globalUnsubscribeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import a third party provider list
     */
    async importEmailThirdPartyProviderListRaw(requestParameters: ImportEmailThirdPartyProviderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling importEmailThirdPartyProviderList.');
        }

        if (requestParameters.importRequest === null || requestParameters.importRequest === undefined) {
            throw new runtime.RequiredError('importRequest','Required parameter requestParameters.importRequest was null or undefined when calling importEmailThirdPartyProviderList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/third_party_providers/import`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailThirdPartyListImportRequestToJSON(requestParameters.importRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import a third party provider list
     */
    async importEmailThirdPartyProviderList(requestParameters: ImportEmailThirdPartyProviderListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.importEmailThirdPartyProviderListRaw(requestParameters, initOverrides);
    }

    /**
     * Insert email campaign
     */
    async insertEmailCampaignRaw(requestParameters: InsertEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailCampaign.');
        }

        if (requestParameters.emailCampaign === null || requestParameters.emailCampaign === undefined) {
            throw new runtime.RequiredError('emailCampaign','Required parameter requestParameters.emailCampaign was null or undefined when calling insertEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCampaignToJSON(requestParameters.emailCampaign),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Insert email campaign
     */
    async insertEmailCampaign(requestParameters: InsertEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse> {
        const response = await this.insertEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email campaign folder
     */
    async insertEmailCampaignFolderRaw(requestParameters: InsertEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailCampaignFolder.');
        }

        if (requestParameters.emailCampaignFolder === null || requestParameters.emailCampaignFolder === undefined) {
            throw new runtime.RequiredError('emailCampaignFolder','Required parameter requestParameters.emailCampaignFolder was null or undefined when calling insertEmailCampaignFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaign_folders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCampaignFolderToJSON(requestParameters.emailCampaignFolder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignFolderResponseFromJSON(jsonValue));
    }

    /**
     * Insert email campaign folder
     */
    async insertEmailCampaignFolder(requestParameters: InsertEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFolderResponse> {
        const response = await this.insertEmailCampaignFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email commseq
     */
    async insertEmailCommseqRaw(requestParameters: InsertEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailCommseq.');
        }

        if (requestParameters.emailCommseq === null || requestParameters.emailCommseq === undefined) {
            throw new runtime.RequiredError('emailCommseq','Required parameter requestParameters.emailCommseq was null or undefined when calling insertEmailCommseq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqToJSON(requestParameters.emailCommseq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqResponseFromJSON(jsonValue));
    }

    /**
     * Insert email commseq
     */
    async insertEmailCommseq(requestParameters: InsertEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqResponse> {
        const response = await this.insertEmailCommseqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email email
     */
    async insertEmailEmailRaw(requestParameters: InsertEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailEmail.');
        }

        if (requestParameters.emailCommseqEmail === null || requestParameters.emailCommseqEmail === undefined) {
            throw new runtime.RequiredError('emailCommseqEmail','Required parameter requestParameters.emailCommseqEmail was null or undefined when calling insertEmailEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqEmailToJSON(requestParameters.emailCommseqEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailResponseFromJSON(jsonValue));
    }

    /**
     * Insert email email
     */
    async insertEmailEmail(requestParameters: InsertEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailResponse> {
        const response = await this.insertEmailEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email flow
     */
    async insertEmailFlowRaw(requestParameters: InsertEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailFlow.');
        }

        if (requestParameters.emailFlow === null || requestParameters.emailFlow === undefined) {
            throw new runtime.RequiredError('emailFlow','Required parameter requestParameters.emailFlow was null or undefined when calling insertEmailFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFlowToJSON(requestParameters.emailFlow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowResponseFromJSON(jsonValue));
    }

    /**
     * Insert email flow
     */
    async insertEmailFlow(requestParameters: InsertEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse> {
        const response = await this.insertEmailFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email flow folder
     */
    async insertEmailFlowFolderRaw(requestParameters: InsertEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailFlowFolder.');
        }

        if (requestParameters.emailFlowFolder === null || requestParameters.emailFlowFolder === undefined) {
            throw new runtime.RequiredError('emailFlowFolder','Required parameter requestParameters.emailFlowFolder was null or undefined when calling insertEmailFlowFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flow_folders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFlowFolderToJSON(requestParameters.emailFlowFolder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowFolderResponseFromJSON(jsonValue));
    }

    /**
     * Insert email flow folder
     */
    async insertEmailFlowFolder(requestParameters: InsertEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFolderResponse> {
        const response = await this.insertEmailFlowFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email list
     */
    async insertEmailListRaw(requestParameters: InsertEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailList.');
        }

        if (requestParameters.emailList === null || requestParameters.emailList === undefined) {
            throw new runtime.RequiredError('emailList','Required parameter requestParameters.emailList was null or undefined when calling insertEmailList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailListToJSON(requestParameters.emailList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListResponseFromJSON(jsonValue));
    }

    /**
     * Insert email list
     */
    async insertEmailList(requestParameters: InsertEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListResponse> {
        const response = await this.insertEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email campaign folder
     */
    async insertEmailListSegmentFolderRaw(requestParameters: InsertEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailListSegmentFolder.');
        }

        if (requestParameters.emailListSegmentFolder === null || requestParameters.emailListSegmentFolder === undefined) {
            throw new runtime.RequiredError('emailListSegmentFolder','Required parameter requestParameters.emailListSegmentFolder was null or undefined when calling insertEmailListSegmentFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/list_segment_folders`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailListSegmentFolderToJSON(requestParameters.emailListSegmentFolder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListSegmentFolderResponseFromJSON(jsonValue));
    }

    /**
     * Insert email campaign folder
     */
    async insertEmailListSegmentFolder(requestParameters: InsertEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFolderResponse> {
        const response = await this.insertEmailListSegmentFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email postcard
     */
    async insertEmailPostcardRaw(requestParameters: InsertEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailPostcard.');
        }

        if (requestParameters.emailCommseqPostcard === null || requestParameters.emailCommseqPostcard === undefined) {
            throw new runtime.RequiredError('emailCommseqPostcard','Required parameter requestParameters.emailCommseqPostcard was null or undefined when calling insertEmailPostcard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqPostcardToJSON(requestParameters.emailCommseqPostcard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqPostcardResponseFromJSON(jsonValue));
    }

    /**
     * Insert email postcard
     */
    async insertEmailPostcard(requestParameters: InsertEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardResponse> {
        const response = await this.insertEmailPostcardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert email segment
     */
    async insertEmailSegmentRaw(requestParameters: InsertEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertEmailSegment.');
        }

        if (requestParameters.emailSegment === null || requestParameters.emailSegment === undefined) {
            throw new runtime.RequiredError('emailSegment','Required parameter requestParameters.emailSegment was null or undefined when calling insertEmailSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSegmentToJSON(requestParameters.emailSegment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentResponseFromJSON(jsonValue));
    }

    /**
     * Insert email segment
     */
    async insertEmailSegment(requestParameters: InsertEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentResponse> {
        const response = await this.insertEmailSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert screen recording segment
     */
    async insertScreenRecordingSegmentRaw(requestParameters: InsertScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling insertScreenRecordingSegment.');
        }

        if (requestParameters.segment === null || requestParameters.segment === undefined) {
            throw new runtime.RequiredError('segment','Required parameter requestParameters.segment was null or undefined when calling insertScreenRecordingSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/segments`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingSegmentToJSON(requestParameters.segment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingSegmentResponseFromJSON(jsonValue));
    }

    /**
     * Insert screen recording segment
     */
    async insertScreenRecordingSegment(requestParameters: InsertScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentResponse> {
        const response = await this.insertScreenRecordingSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepare download of email segment
     */
    async prepareDownloadEmailSegmentRaw(requestParameters: PrepareDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentDownloadPrepareResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling prepareDownloadEmailSegment.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling prepareDownloadEmailSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentDownloadPrepareResponseFromJSON(jsonValue));
    }

    /**
     * Prepare download of email segment
     */
    async prepareDownloadEmailSegment(requestParameters: PrepareDownloadEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentDownloadPrepareResponse> {
        const response = await this.prepareDownloadEmailSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish library item.
     */
    async publishLibraryItemRaw(requestParameters: PublishLibraryItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling publishLibraryItem.');
        }

        if (requestParameters.publishLibraryRequest === null || requestParameters.publishLibraryRequest === undefined) {
            throw new runtime.RequiredError('publishLibraryRequest','Required parameter requestParameters.publishLibraryRequest was null or undefined when calling publishLibraryItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}/publish`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishLibraryItemRequestToJSON(requestParameters.publishLibraryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Publish library item.
     */
    async publishLibraryItem(requestParameters: PublishLibraryItemOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse> {
        const response = await this.publishLibraryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     */
    async purchaseLibraryItemRaw(requestParameters: PurchaseLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling purchaseLibraryItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.storefrontOid !== undefined) {
            queryParameters['storefront_oid'] = requestParameters.storefrontOid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}/purchase`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     */
    async purchaseLibraryItem(requestParameters: PurchaseLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse> {
        const response = await this.purchaseLibraryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Release email communication sequence customers waiting at the specified step
     */
    async releaseEmailCommseqStepWaitingRaw(requestParameters: ReleaseEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling releaseEmailCommseqStepWaiting.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
        }

        if (requestParameters.commseqStepUuid === null || requestParameters.commseqStepUuid === undefined) {
            throw new runtime.RequiredError('commseqStepUuid','Required parameter requestParameters.commseqStepUuid was null or undefined when calling releaseEmailCommseqStepWaiting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))).replace(`{${"commseq_step_uuid"}}`, encodeURIComponent(String(requestParameters.commseqStepUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Release email communication sequence customers waiting at the specified step
     */
    async releaseEmailCommseqStepWaiting(requestParameters: ReleaseEmailCommseqStepWaitingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.releaseEmailCommseqStepWaitingRaw(requestParameters, initOverrides);
    }

    /**
     * Request a review of an email
     */
    async reviewRaw(requestParameters: ReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailSendTestResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling review.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling review.');
        }

        if (requestParameters.emailCommseqEmailReviewRequest === null || requestParameters.emailCommseqEmailReviewRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqEmailReviewRequest','Required parameter requestParameters.emailCommseqEmailReviewRequest was null or undefined when calling review.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqEmailSendTestRequestToJSON(requestParameters.emailCommseqEmailReviewRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailSendTestResponseFromJSON(jsonValue));
    }

    /**
     * Request a review of an email
     */
    async review(requestParameters: ReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailSendTestResponse> {
        const response = await this.reviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for all matching values
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupResponse>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.matches !== undefined) {
            queryParameters['matches'] = requestParameters.matches;
        }

        if (requestParameters.storefrontOid !== undefined) {
            queryParameters['storefront_oid'] = requestParameters.storefrontOid;
        }

        if (requestParameters.maxHits !== undefined) {
            queryParameters['max_hits'] = requestParameters.maxHits;
        }

        if (requestParameters.subcategory !== undefined) {
            queryParameters['subcategory'] = requestParameters.subcategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LookupResponseFromJSON(jsonValue));
    }

    /**
     * Searches for all matching values
     */
    async search(requestParameters: SearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupResponse> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for all matching values (using POST)
     */
    async search2Raw(requestParameters: Search2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LookupResponse>> {
        if (requestParameters.lookupRequest === null || requestParameters.lookupRequest === undefined) {
            throw new runtime.RequiredError('lookupRequest','Required parameter requestParameters.lookupRequest was null or undefined when calling search2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupRequestToJSON(requestParameters.lookupRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LookupResponseFromJSON(jsonValue));
    }

    /**
     * Searches for all matching values (using POST)
     */
    async search2(requestParameters: Search2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LookupResponse> {
        const response = await this.search2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search email list customers
     */
    async searchEmailListCustomersRaw(requestParameters: SearchEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListCustomersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling searchEmailListCustomers.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling searchEmailListCustomers.');
        }

        const queryParameters: any = {};

        if (requestParameters.startsWith !== undefined) {
            queryParameters['startsWith'] = requestParameters.startsWith;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListCustomersResponseFromJSON(jsonValue));
    }

    /**
     * Search email list customers
     */
    async searchEmailListCustomers(requestParameters: SearchEmailListCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListCustomersResponse> {
        const response = await this.searchEmailListCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search email segment customers
     */
    async searchEmailSegmentCustomersRaw(requestParameters: SearchEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentCustomersResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling searchEmailSegmentCustomers.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling searchEmailSegmentCustomers.');
        }

        const queryParameters: any = {};

        if (requestParameters.startsWith !== undefined) {
            queryParameters['startsWith'] = requestParameters.startsWith;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentCustomersResponseFromJSON(jsonValue));
    }

    /**
     * Search email segment customers
     */
    async searchEmailSegmentCustomers(requestParameters: SearchEmailSegmentCustomersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentCustomersResponse> {
        const response = await this.searchEmailSegmentCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    async searchLibraryItemsRaw(requestParameters: SearchLibraryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>> {
        if (requestParameters.itemQuery === null || requestParameters.itemQuery === undefined) {
            throw new runtime.RequiredError('itemQuery','Required parameter requestParameters.itemQuery was null or undefined when calling searchLibraryItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryItemQueryToJSON(requestParameters.itemQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    async searchLibraryItems(requestParameters: SearchLibraryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse> {
        const response = await this.searchLibraryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    async searchPublishedItemsRaw(requestParameters: SearchPublishedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>> {
        if (requestParameters.itemQuery === null || requestParameters.itemQuery === undefined) {
            throw new runtime.RequiredError('itemQuery','Required parameter requestParameters.itemQuery was null or undefined when calling searchPublishedItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/search_published`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryItemQueryToJSON(requestParameters.itemQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    async searchPublishedItems(requestParameters: SearchPublishedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse> {
        const response = await this.searchPublishedItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items needing review or rejected
     */
    async searchReviewItemsRaw(requestParameters: SearchReviewItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>> {
        if (requestParameters.itemQuery === null || requestParameters.itemQuery === undefined) {
            throw new runtime.RequiredError('itemQuery','Required parameter requestParameters.itemQuery was null or undefined when calling searchReviewItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/search_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryItemQueryToJSON(requestParameters.itemQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items needing review or rejected
     */
    async searchReviewItems(requestParameters: SearchReviewItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse> {
        const response = await this.searchReviewItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    async searchSharedItemsRaw(requestParameters: SearchSharedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemsResponse>> {
        if (requestParameters.itemQuery === null || requestParameters.itemQuery === undefined) {
            throw new runtime.RequiredError('itemQuery','Required parameter requestParameters.itemQuery was null or undefined when calling searchSharedItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["affiliate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/search_shared`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryItemQueryToJSON(requestParameters.itemQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve library items
     */
    async searchSharedItems(requestParameters: SearchSharedItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemsResponse> {
        const response = await this.searchSharedItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send email test
     */
    async sendEmailTestRaw(requestParameters: SendEmailTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailSendTestResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling sendEmailTest.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling sendEmailTest.');
        }

        if (requestParameters.emailCommseqEmailTestRequest === null || requestParameters.emailCommseqEmailTestRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqEmailTestRequest','Required parameter requestParameters.emailCommseqEmailTestRequest was null or undefined when calling sendEmailTest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqEmailSendTestRequestToJSON(requestParameters.emailCommseqEmailTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailSendTestResponseFromJSON(jsonValue));
    }

    /**
     * Send email test
     */
    async sendEmailTest(requestParameters: SendEmailTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailSendTestResponse> {
        const response = await this.sendEmailTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send postcard test
     */
    async sendPostcardTestRaw(requestParameters: SendPostcardTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardSendTestResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling sendPostcardTest.');
        }

        if (requestParameters.commseqPostcardUuid === null || requestParameters.commseqPostcardUuid === undefined) {
            throw new runtime.RequiredError('commseqPostcardUuid','Required parameter requestParameters.commseqPostcardUuid was null or undefined when calling sendPostcardTest.');
        }

        if (requestParameters.emailCommseqPostcardTestRequest === null || requestParameters.emailCommseqPostcardTestRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqPostcardTestRequest','Required parameter requestParameters.emailCommseqPostcardTestRequest was null or undefined when calling sendPostcardTest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_postcard_uuid"}}`, encodeURIComponent(String(requestParameters.commseqPostcardUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqPostcardSendTestRequestToJSON(requestParameters.emailCommseqPostcardTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqPostcardSendTestResponseFromJSON(jsonValue));
    }

    /**
     * Send postcard test
     */
    async sendPostcardTest(requestParameters: SendPostcardTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardSendTestResponse> {
        const response = await this.sendPostcardTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send SMS test
     */
    async sendSmsTestRaw(requestParameters: SendSmsTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqSmsSendTestResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling sendSmsTest.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling sendSmsTest.');
        }

        if (requestParameters.commseqStepUuid === null || requestParameters.commseqStepUuid === undefined) {
            throw new runtime.RequiredError('commseqStepUuid','Required parameter requestParameters.commseqStepUuid was null or undefined when calling sendSmsTest.');
        }

        if (requestParameters.emailCommseqSmsTestRequest === null || requestParameters.emailCommseqSmsTestRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqSmsTestRequest','Required parameter requestParameters.emailCommseqSmsTestRequest was null or undefined when calling sendSmsTest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/sms/{commseq_uuid}/{commseq_step_uuid}/test`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))).replace(`{${"commseq_step_uuid"}}`, encodeURIComponent(String(requestParameters.commseqStepUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqSmsSendTestRequestToJSON(requestParameters.emailCommseqSmsTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqSmsSendTestResponseFromJSON(jsonValue));
    }

    /**
     * Send SMS test
     */
    async sendSmsTest(requestParameters: SendSmsTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqSmsSendTestResponse> {
        const response = await this.sendSmsTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send webhook test
     */
    async sendWebhookTestRaw(requestParameters: SendWebhookTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqWebhookSendTestResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling sendWebhookTest.');
        }

        if (requestParameters.emailCommseqWebhookTestRequest === null || requestParameters.emailCommseqWebhookTestRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqWebhookTestRequest','Required parameter requestParameters.emailCommseqWebhookTestRequest was null or undefined when calling sendWebhookTest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/webhooks/test`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqWebhookSendTestRequestToJSON(requestParameters.emailCommseqWebhookTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqWebhookSendTestResponseFromJSON(jsonValue));
    }

    /**
     * Send webhook test
     */
    async sendWebhookTest(requestParameters: SendWebhookTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqWebhookSendTestResponse> {
        const response = await this.sendWebhookTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sequence test
     */
    async sequenceTestRaw(requestParameters: SequenceTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqSequenceTestResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling sequenceTest.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling sequenceTest.');
        }

        if (requestParameters.emailCommseqSequenceTestRequest === null || requestParameters.emailCommseqSequenceTestRequest === undefined) {
            throw new runtime.RequiredError('emailCommseqSequenceTestRequest','Required parameter requestParameters.emailCommseqSequenceTestRequest was null or undefined when calling sequenceTest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/test`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqSequenceTestRequestToJSON(requestParameters.emailCommseqSequenceTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqSequenceTestResponseFromJSON(jsonValue));
    }

    /**
     * Sequence test
     */
    async sequenceTest(requestParameters: SequenceTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqSequenceTestResponse> {
        const response = await this.sequenceTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start email campaign
     */
    async startEmailCampaignRaw(requestParameters: StartEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling startEmailCampaign.');
        }

        if (requestParameters.emailCampaignUuid === null || requestParameters.emailCampaignUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignUuid','Required parameter requestParameters.emailCampaignUuid was null or undefined when calling startEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Start email campaign
     */
    async startEmailCampaign(requestParameters: StartEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.startEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe customers to email list
     */
    async subscribeToEmailListRaw(requestParameters: SubscribeToEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSubscribeResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling subscribeToEmailList.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling subscribeToEmailList.');
        }

        if (requestParameters.customers === null || requestParameters.customers === undefined) {
            throw new runtime.RequiredError('customers','Required parameter requestParameters.customers was null or undefined when calling subscribeToEmailList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customers.map(EmailCustomerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListSubscribeResponseFromJSON(jsonValue));
    }

    /**
     * Subscribe customers to email list
     */
    async subscribeToEmailList(requestParameters: SubscribeToEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSubscribeResponse> {
        const response = await this.subscribeToEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove favorite flag on screen recording 
     * Remove favorite flag on screen recording
     */
    async unfavoriteScreenRecordingRaw(requestParameters: UnfavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling unfavoriteScreenRecording.');
        }

        if (requestParameters.screenRecordingUuid === null || requestParameters.screenRecordingUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingUuid','Required parameter requestParameters.screenRecordingUuid was null or undefined when calling unfavoriteScreenRecording.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove favorite flag on screen recording 
     * Remove favorite flag on screen recording
     */
    async unfavoriteScreenRecording(requestParameters: UnfavoriteScreenRecordingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfavoriteScreenRecordingRaw(requestParameters, initOverrides);
    }

    /**
     * Update email campaign
     */
    async updateEmailCampaignRaw(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailCampaign.');
        }

        if (requestParameters.emailCampaignUuid === null || requestParameters.emailCampaignUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignUuid','Required parameter requestParameters.emailCampaignUuid was null or undefined when calling updateEmailCampaign.');
        }

        if (requestParameters.emailCampaign === null || requestParameters.emailCampaign === undefined) {
            throw new runtime.RequiredError('emailCampaign','Required parameter requestParameters.emailCampaign was null or undefined when calling updateEmailCampaign.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCampaignToJSON(requestParameters.emailCampaign),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Update email campaign
     */
    async updateEmailCampaign(requestParameters: UpdateEmailCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignResponse> {
        const response = await this.updateEmailCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email campaign folder
     */
    async updateEmailCampaignFolderRaw(requestParameters: UpdateEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCampaignFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailCampaignFolder.');
        }

        if (requestParameters.emailCampaignFolderUuid === null || requestParameters.emailCampaignFolderUuid === undefined) {
            throw new runtime.RequiredError('emailCampaignFolderUuid','Required parameter requestParameters.emailCampaignFolderUuid was null or undefined when calling updateEmailCampaignFolder.');
        }

        if (requestParameters.emailCampaignFolder === null || requestParameters.emailCampaignFolder === undefined) {
            throw new runtime.RequiredError('emailCampaignFolder','Required parameter requestParameters.emailCampaignFolder was null or undefined when calling updateEmailCampaignFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_campaign_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailCampaignFolderUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCampaignFolderToJSON(requestParameters.emailCampaignFolder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCampaignFolderResponseFromJSON(jsonValue));
    }

    /**
     * Update email campaign folder
     */
    async updateEmailCampaignFolder(requestParameters: UpdateEmailCampaignFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCampaignFolderResponse> {
        const response = await this.updateEmailCampaignFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email commseq
     */
    async updateEmailCommseqRaw(requestParameters: UpdateEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailCommseq.');
        }

        if (requestParameters.commseqUuid === null || requestParameters.commseqUuid === undefined) {
            throw new runtime.RequiredError('commseqUuid','Required parameter requestParameters.commseqUuid was null or undefined when calling updateEmailCommseq.');
        }

        if (requestParameters.emailCommseq === null || requestParameters.emailCommseq === undefined) {
            throw new runtime.RequiredError('emailCommseq','Required parameter requestParameters.emailCommseq was null or undefined when calling updateEmailCommseq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_uuid"}}`, encodeURIComponent(String(requestParameters.commseqUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqToJSON(requestParameters.emailCommseq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqResponseFromJSON(jsonValue));
    }

    /**
     * Update email commseq
     */
    async updateEmailCommseq(requestParameters: UpdateEmailCommseqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqResponse> {
        const response = await this.updateEmailCommseqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email customer
     */
    async updateEmailCustomerRaw(requestParameters: UpdateEmailCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailCustomer.');
        }

        if (requestParameters.emailCustomerUuid === null || requestParameters.emailCustomerUuid === undefined) {
            throw new runtime.RequiredError('emailCustomerUuid','Required parameter requestParameters.emailCustomerUuid was null or undefined when calling updateEmailCustomer.');
        }

        if (requestParameters.emailCustomer === null || requestParameters.emailCustomer === undefined) {
            throw new runtime.RequiredError('emailCustomer','Required parameter requestParameters.emailCustomer was null or undefined when calling updateEmailCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/customers/{email_customer_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_customer_uuid"}}`, encodeURIComponent(String(requestParameters.emailCustomerUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCustomerToJSON(requestParameters.emailCustomer),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update email customer
     */
    async updateEmailCustomer(requestParameters: UpdateEmailCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEmailCustomerRaw(requestParameters, initOverrides);
    }

    /**
     * Update email email
     */
    async updateEmailEmailRaw(requestParameters: UpdateEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqEmailResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailEmail.');
        }

        if (requestParameters.commseqEmailUuid === null || requestParameters.commseqEmailUuid === undefined) {
            throw new runtime.RequiredError('commseqEmailUuid','Required parameter requestParameters.commseqEmailUuid was null or undefined when calling updateEmailEmail.');
        }

        if (requestParameters.emailCommseqEmail === null || requestParameters.emailCommseqEmail === undefined) {
            throw new runtime.RequiredError('emailCommseqEmail','Required parameter requestParameters.emailCommseqEmail was null or undefined when calling updateEmailEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_email_uuid"}}`, encodeURIComponent(String(requestParameters.commseqEmailUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqEmailToJSON(requestParameters.emailCommseqEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqEmailResponseFromJSON(jsonValue));
    }

    /**
     * Update email email
     */
    async updateEmailEmail(requestParameters: UpdateEmailEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqEmailResponse> {
        const response = await this.updateEmailEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email flow
     */
    async updateEmailFlowRaw(requestParameters: UpdateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailFlow.');
        }

        if (requestParameters.emailFlowUuid === null || requestParameters.emailFlowUuid === undefined) {
            throw new runtime.RequiredError('emailFlowUuid','Required parameter requestParameters.emailFlowUuid was null or undefined when calling updateEmailFlow.');
        }

        if (requestParameters.emailFlow === null || requestParameters.emailFlow === undefined) {
            throw new runtime.RequiredError('emailFlow','Required parameter requestParameters.emailFlow was null or undefined when calling updateEmailFlow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flows/{email_flow_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFlowToJSON(requestParameters.emailFlow),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowResponseFromJSON(jsonValue));
    }

    /**
     * Update email flow
     */
    async updateEmailFlow(requestParameters: UpdateEmailFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowResponse> {
        const response = await this.updateEmailFlowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email flow folder
     */
    async updateEmailFlowFolderRaw(requestParameters: UpdateEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailFlowFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailFlowFolder.');
        }

        if (requestParameters.emailFlowFolderUuid === null || requestParameters.emailFlowFolderUuid === undefined) {
            throw new runtime.RequiredError('emailFlowFolderUuid','Required parameter requestParameters.emailFlowFolderUuid was null or undefined when calling updateEmailFlowFolder.');
        }

        if (requestParameters.emailFlowFolder === null || requestParameters.emailFlowFolder === undefined) {
            throw new runtime.RequiredError('emailFlowFolder','Required parameter requestParameters.emailFlowFolder was null or undefined when calling updateEmailFlowFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_flow_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailFlowFolderUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailFlowFolderToJSON(requestParameters.emailFlowFolder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailFlowFolderResponseFromJSON(jsonValue));
    }

    /**
     * Update email flow folder
     */
    async updateEmailFlowFolder(requestParameters: UpdateEmailFlowFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailFlowFolderResponse> {
        const response = await this.updateEmailFlowFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email global settings
     */
    async updateEmailGlobalSettingsRaw(requestParameters: UpdateEmailGlobalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailGlobalSettingsResponse>> {
        if (requestParameters.globalSettings === null || requestParameters.globalSettings === undefined) {
            throw new runtime.RequiredError('globalSettings','Required parameter requestParameters.globalSettings was null or undefined when calling updateEmailGlobalSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/global_settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailGlobalSettingsToJSON(requestParameters.globalSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailGlobalSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Update email global settings
     */
    async updateEmailGlobalSettings(requestParameters: UpdateEmailGlobalSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailGlobalSettingsResponse> {
        const response = await this.updateEmailGlobalSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email list
     */
    async updateEmailListRaw(requestParameters: UpdateEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailList.');
        }

        if (requestParameters.emailListUuid === null || requestParameters.emailListUuid === undefined) {
            throw new runtime.RequiredError('emailListUuid','Required parameter requestParameters.emailListUuid was null or undefined when calling updateEmailList.');
        }

        if (requestParameters.emailList === null || requestParameters.emailList === undefined) {
            throw new runtime.RequiredError('emailList','Required parameter requestParameters.emailList was null or undefined when calling updateEmailList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/lists/{email_list_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_uuid"}}`, encodeURIComponent(String(requestParameters.emailListUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailListToJSON(requestParameters.emailList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListResponseFromJSON(jsonValue));
    }

    /**
     * Update email list
     */
    async updateEmailList(requestParameters: UpdateEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListResponse> {
        const response = await this.updateEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email campaign folder
     */
    async updateEmailListSegmentFolderRaw(requestParameters: UpdateEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailListSegmentFolderResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailListSegmentFolder.');
        }

        if (requestParameters.emailListSegmentFolderUuid === null || requestParameters.emailListSegmentFolderUuid === undefined) {
            throw new runtime.RequiredError('emailListSegmentFolderUuid','Required parameter requestParameters.emailListSegmentFolderUuid was null or undefined when calling updateEmailListSegmentFolder.');
        }

        if (requestParameters.emailListSegmentFolder === null || requestParameters.emailListSegmentFolder === undefined) {
            throw new runtime.RequiredError('emailListSegmentFolder','Required parameter requestParameters.emailListSegmentFolder was null or undefined when calling updateEmailListSegmentFolder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_list_segment_folder_uuid"}}`, encodeURIComponent(String(requestParameters.emailListSegmentFolderUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailListSegmentFolderToJSON(requestParameters.emailListSegmentFolder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailListSegmentFolderResponseFromJSON(jsonValue));
    }

    /**
     * Update email campaign folder
     */
    async updateEmailListSegmentFolder(requestParameters: UpdateEmailListSegmentFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailListSegmentFolderResponse> {
        const response = await this.updateEmailListSegmentFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email plan
     */
    async updateEmailPlanRaw(requestParameters: UpdateEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailPlanResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailPlan.');
        }

        if (requestParameters.settings === null || requestParameters.settings === undefined) {
            throw new runtime.RequiredError('settings','Required parameter requestParameters.settings was null or undefined when calling updateEmailPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/plan`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailPlanToJSON(requestParameters.settings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailPlanResponseFromJSON(jsonValue));
    }

    /**
     * Update email plan
     */
    async updateEmailPlan(requestParameters: UpdateEmailPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailPlanResponse> {
        const response = await this.updateEmailPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email postcard
     */
    async updateEmailPostcardRaw(requestParameters: UpdateEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailCommseqPostcardResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailPostcard.');
        }

        if (requestParameters.commseqPostcardUuid === null || requestParameters.commseqPostcardUuid === undefined) {
            throw new runtime.RequiredError('commseqPostcardUuid','Required parameter requestParameters.commseqPostcardUuid was null or undefined when calling updateEmailPostcard.');
        }

        if (requestParameters.emailCommseqPostcard === null || requestParameters.emailCommseqPostcard === undefined) {
            throw new runtime.RequiredError('emailCommseqPostcard','Required parameter requestParameters.emailCommseqPostcard was null or undefined when calling updateEmailPostcard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"commseq_postcard_uuid"}}`, encodeURIComponent(String(requestParameters.commseqPostcardUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailCommseqPostcardToJSON(requestParameters.emailCommseqPostcard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailCommseqPostcardResponseFromJSON(jsonValue));
    }

    /**
     * Update email postcard
     */
    async updateEmailPostcard(requestParameters: UpdateEmailPostcardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailCommseqPostcardResponse> {
        const response = await this.updateEmailPostcardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email segment
     */
    async updateEmailSegmentRaw(requestParameters: UpdateEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSegmentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailSegment.');
        }

        if (requestParameters.emailSegmentUuid === null || requestParameters.emailSegmentUuid === undefined) {
            throw new runtime.RequiredError('emailSegmentUuid','Required parameter requestParameters.emailSegmentUuid was null or undefined when calling updateEmailSegment.');
        }

        if (requestParameters.emailSegment === null || requestParameters.emailSegment === undefined) {
            throw new runtime.RequiredError('emailSegment','Required parameter requestParameters.emailSegment was null or undefined when calling updateEmailSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/segments/{email_segment_uuid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_segment_uuid"}}`, encodeURIComponent(String(requestParameters.emailSegmentUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSegmentToJSON(requestParameters.emailSegment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSegmentResponseFromJSON(jsonValue));
    }

    /**
     * Update email segment
     */
    async updateEmailSegment(requestParameters: UpdateEmailSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSegmentResponse> {
        const response = await this.updateEmailSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email sending domain
     */
    async updateEmailSendingDomainRaw(requestParameters: UpdateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendingDomainResponse>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling updateEmailSendingDomain.');
        }

        if (requestParameters.emailDomain === null || requestParameters.emailDomain === undefined) {
            throw new runtime.RequiredError('emailDomain','Required parameter requestParameters.emailDomain was null or undefined when calling updateEmailSendingDomain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/email/sending_domains/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailDomainToJSON(requestParameters.emailDomain),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendingDomainResponseFromJSON(jsonValue));
    }

    /**
     * Update email sending domain
     */
    async updateEmailSendingDomain(requestParameters: UpdateEmailSendingDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendingDomainResponse> {
        const response = await this.updateEmailSendingDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update email settings
     */
    async updateEmailSettingsRaw(requestParameters: UpdateEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSettingsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateEmailSettings.');
        }

        if (requestParameters.settings === null || requestParameters.settings === undefined) {
            throw new runtime.RequiredError('settings','Required parameter requestParameters.settings was null or undefined when calling updateEmailSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/email/settings`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailSettingsToJSON(requestParameters.settings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Update email settings
     */
    async updateEmailSettings(requestParameters: UpdateEmailSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSettingsResponse> {
        const response = await this.updateEmailSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update experiment
     */
    async updateExperimentRaw(requestParameters: UpdateExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExperimentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateExperiment.');
        }

        if (requestParameters.storefrontExperimentOid === null || requestParameters.storefrontExperimentOid === undefined) {
            throw new runtime.RequiredError('storefrontExperimentOid','Required parameter requestParameters.storefrontExperimentOid was null or undefined when calling updateExperiment.');
        }

        if (requestParameters.experiment === null || requestParameters.experiment === undefined) {
            throw new runtime.RequiredError('experiment','Required parameter requestParameters.experiment was null or undefined when calling updateExperiment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"storefront_experiment_oid"}}`, encodeURIComponent(String(requestParameters.storefrontExperimentOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExperimentToJSON(requestParameters.experiment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExperimentResponseFromJSON(jsonValue));
    }

    /**
     * Update experiment
     */
    async updateExperiment(requestParameters: UpdateExperimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExperimentResponse> {
        const response = await this.updateExperimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     */
    async updateLibraryItemRaw(requestParameters: UpdateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibraryItemResponse>> {
        if (requestParameters.libraryItemOid === null || requestParameters.libraryItemOid === undefined) {
            throw new runtime.RequiredError('libraryItemOid','Required parameter requestParameters.libraryItemOid was null or undefined when calling updateLibraryItem.');
        }

        if (requestParameters.libraryItem === null || requestParameters.libraryItem === undefined) {
            throw new runtime.RequiredError('libraryItem','Required parameter requestParameters.libraryItem was null or undefined when calling updateLibraryItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/code_library/{library_item_oid}`.replace(`{${"library_item_oid"}}`, encodeURIComponent(String(requestParameters.libraryItemOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LibraryItemToJSON(requestParameters.libraryItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibraryItemResponseFromJSON(jsonValue));
    }

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     */
    async updateLibraryItem(requestParameters: UpdateLibraryItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibraryItemResponse> {
        const response = await this.updateLibraryItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update merchant notes on a screen recording 
     * Update merchant notes on a screen recording
     */
    async updateScreenRecordingMerchantNotesRaw(requestParameters: UpdateScreenRecordingMerchantNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateScreenRecordingMerchantNotes.');
        }

        if (requestParameters.screenRecordingUuid === null || requestParameters.screenRecordingUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingUuid','Required parameter requestParameters.screenRecordingUuid was null or undefined when calling updateScreenRecordingMerchantNotes.');
        }

        if (requestParameters.merchantNotesRequest === null || requestParameters.merchantNotesRequest === undefined) {
            throw new runtime.RequiredError('merchantNotesRequest','Required parameter requestParameters.merchantNotesRequest was null or undefined when calling updateScreenRecordingMerchantNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingMerchantNotesRequestToJSON(requestParameters.merchantNotesRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update merchant notes on a screen recording 
     * Update merchant notes on a screen recording
     */
    async updateScreenRecordingMerchantNotes(requestParameters: UpdateScreenRecordingMerchantNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateScreenRecordingMerchantNotesRaw(requestParameters, initOverrides);
    }

    /**
     * Update screen recording segment
     */
    async updateScreenRecordingSegmentRaw(requestParameters: UpdateScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSegmentResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateScreenRecordingSegment.');
        }

        if (requestParameters.screenRecordingSegmentOid === null || requestParameters.screenRecordingSegmentOid === undefined) {
            throw new runtime.RequiredError('screenRecordingSegmentOid','Required parameter requestParameters.screenRecordingSegmentOid was null or undefined when calling updateScreenRecordingSegment.');
        }

        if (requestParameters.segment === null || requestParameters.segment === undefined) {
            throw new runtime.RequiredError('segment','Required parameter requestParameters.segment was null or undefined when calling updateScreenRecordingSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_segment_oid"}}`, encodeURIComponent(String(requestParameters.screenRecordingSegmentOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingSegmentToJSON(requestParameters.segment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingSegmentResponseFromJSON(jsonValue));
    }

    /**
     * Update screen recording segment
     */
    async updateScreenRecordingSegment(requestParameters: UpdateScreenRecordingSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSegmentResponse> {
        const response = await this.updateScreenRecordingSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update screen recording settings
     */
    async updateScreenRecordingSettingsRaw(requestParameters: UpdateScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenRecordingSettingsResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateScreenRecordingSettings.');
        }

        if (requestParameters.settings === null || requestParameters.settings === undefined) {
            throw new runtime.RequiredError('settings','Required parameter requestParameters.settings was null or undefined when calling updateScreenRecordingSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/settings`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingSettingsToJSON(requestParameters.settings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenRecordingSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Update screen recording settings
     */
    async updateScreenRecordingSettings(requestParameters: UpdateScreenRecordingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenRecordingSettingsResponse> {
        const response = await this.updateScreenRecordingSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update tags on a screen recording 
     * Update tags on a screen recording
     */
    async updateScreenRecordingTagsRaw(requestParameters: UpdateScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateScreenRecordingTags.');
        }

        if (requestParameters.screenRecordingUuid === null || requestParameters.screenRecordingUuid === undefined) {
            throw new runtime.RequiredError('screenRecordingUuid','Required parameter requestParameters.screenRecordingUuid was null or undefined when calling updateScreenRecordingTags.');
        }

        if (requestParameters.tags === null || requestParameters.tags === undefined) {
            throw new runtime.RequiredError('tags','Required parameter requestParameters.tags was null or undefined when calling updateScreenRecordingTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"screen_recording_uuid"}}`, encodeURIComponent(String(requestParameters.screenRecordingUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScreenRecordingTagsRequestToJSON(requestParameters.tags),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update tags on a screen recording 
     * Update tags on a screen recording
     */
    async updateScreenRecordingTags(requestParameters: UpdateScreenRecordingTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateScreenRecordingTagsRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a transactional email 
     * Updates a transaction email object
     */
    async updateTransactionEmailRaw(requestParameters: UpdateTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEmailResponse>> {
        if (requestParameters.storefrontOid === null || requestParameters.storefrontOid === undefined) {
            throw new runtime.RequiredError('storefrontOid','Required parameter requestParameters.storefrontOid was null or undefined when calling updateTransactionEmail.');
        }

        if (requestParameters.emailId === null || requestParameters.emailId === undefined) {
            throw new runtime.RequiredError('emailId','Required parameter requestParameters.emailId was null or undefined when calling updateTransactionEmail.');
        }

        if (requestParameters.transactionEmail === null || requestParameters.transactionEmail === undefined) {
            throw new runtime.RequiredError('transactionEmail','Required parameter requestParameters.transactionEmail was null or undefined when calling updateTransactionEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{storefront_oid}/transaction_email/list/{email_id}`.replace(`{${"storefront_oid"}}`, encodeURIComponent(String(requestParameters.storefrontOid))).replace(`{${"email_id"}}`, encodeURIComponent(String(requestParameters.emailId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionEmailToJSON(requestParameters.transactionEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionEmailResponseFromJSON(jsonValue));
    }

    /**
     * Updates a transactional email 
     * Updates a transaction email object
     */
    async updateTransactionEmail(requestParameters: UpdateTransactionEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEmailResponse> {
        const response = await this.updateTransactionEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Twilio account
     */
    async updateTwilioAccountRaw(requestParameters: UpdateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TwilioResponse>> {
        if (requestParameters.espTwilioUuid === null || requestParameters.espTwilioUuid === undefined) {
            throw new runtime.RequiredError('espTwilioUuid','Required parameter requestParameters.espTwilioUuid was null or undefined when calling updateTwilioAccount.');
        }

        if (requestParameters.twilio === null || requestParameters.twilio === undefined) {
            throw new runtime.RequiredError('twilio','Required parameter requestParameters.twilio was null or undefined when calling updateTwilioAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/twilio/accounts/{esp_twilio_uuid}`.replace(`{${"esp_twilio_uuid"}}`, encodeURIComponent(String(requestParameters.espTwilioUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TwilioToJSON(requestParameters.twilio),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TwilioResponseFromJSON(jsonValue));
    }

    /**
     * Update Twilio account
     */
    async updateTwilioAccount(requestParameters: UpdateTwilioAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TwilioResponse> {
        const response = await this.updateTwilioAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
     */
    async uploadFsFileRaw(requestParameters: UploadFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadFsFile.');
        }

        if (requestParameters.uploadRequest === null || requestParameters.uploadRequest === undefined) {
            throw new runtime.RequiredError('uploadRequest','Required parameter requestParameters.uploadRequest was null or undefined when calling uploadFsFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/{id}/fs/upload`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FileManagerUploadRequestToJSON(requestParameters.uploadRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
     */
    async uploadFsFile(requestParameters: UploadFsFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadFsFileRaw(requestParameters, initOverrides);
    }

    /**
     * Validate AWS Event Ruler
     */
    async validateRulerRaw(requestParameters: ValidateRulerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RulerValidationResponse>> {
        if (requestParameters.rulerValidateRequest === null || requestParameters.rulerValidateRequest === undefined) {
            throw new runtime.RequiredError('rulerValidateRequest','Required parameter requestParameters.rulerValidateRequest was null or undefined when calling validateRuler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-browser-key"] = this.configuration.apiKey("x-ultracart-browser-key"); // ultraCartBrowserApiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["storefront_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/storefront/ruler/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RulerValidationRequestToJSON(requestParameters.rulerValidateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulerValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate AWS Event Ruler
     */
    async validateRuler(requestParameters: ValidateRulerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RulerValidationResponse> {
        const response = await this.validateRulerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

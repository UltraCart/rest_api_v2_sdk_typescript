/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TaxCity,
    TaxCityFromJSON,
    TaxCityToJSON,
    TaxCountry,
    TaxCountryFromJSON,
    TaxCountryToJSON,
    TaxCounty,
    TaxCountyFromJSON,
    TaxCountyToJSON,
    TaxPostalCode,
    TaxPostalCodeFromJSON,
    TaxPostalCodeToJSON,
    TaxProviderActivateResult,
    TaxProviderActivateResultFromJSON,
    TaxProviderActivateResultToJSON,
    TaxProviderAvalara,
    TaxProviderAvalaraFromJSON,
    TaxProviderAvalaraToJSON,
    TaxProviderAvalaraCompaniesResult,
    TaxProviderAvalaraCompaniesResultFromJSON,
    TaxProviderAvalaraCompaniesResultToJSON,
    TaxProviderSelf,
    TaxProviderSelfFromJSON,
    TaxProviderSelfToJSON,
    TaxProviderSelfCountriesResponse,
    TaxProviderSelfCountriesResponseFromJSON,
    TaxProviderSelfCountriesResponseToJSON,
    TaxProviderSelfRegionsResponse,
    TaxProviderSelfRegionsResponseFromJSON,
    TaxProviderSelfRegionsResponseToJSON,
    TaxProviderSovos,
    TaxProviderSovosFromJSON,
    TaxProviderSovosToJSON,
    TaxProviderTaxJar,
    TaxProviderTaxJarFromJSON,
    TaxProviderTaxJarToJSON,
    TaxProviderTestResult,
    TaxProviderTestResultFromJSON,
    TaxProviderTestResultToJSON,
    TaxProviderUltraCart,
    TaxProviderUltraCartFromJSON,
    TaxProviderUltraCartToJSON,
    TaxProvidersResponse,
    TaxProvidersResponseFromJSON,
    TaxProvidersResponseToJSON,
    TaxState,
    TaxStateFromJSON,
    TaxStateToJSON,
} from '../models';

export interface DeleteTaxProviderSelfCityRequest {
    city: string;
    taxCity: TaxCity;
}

export interface DeleteTaxProviderSelfCountryRequest {
    countryCode: string;
    taxCountry: TaxCountry;
}

export interface DeleteTaxProviderSelfCountyRequest {
    county: string;
    taxCounty: TaxCounty;
}

export interface DeleteTaxProviderSelfPostalCodeRequest {
    postalCode: string;
    taxPostalCode: TaxPostalCode;
}

export interface DeleteTaxProviderSelfStateRequest {
    stateCode: string;
    taxState: TaxState;
}

export interface GetTaxProviderAvalaraCompaniesRequest {
    taxProviderAvalara: TaxProviderAvalara;
}

export interface GetTaxProviderSelfRegionsByCountryCodeRequest {
    countryCode: string;
}

export interface GetTaxProvidersRequest {
    limit?: number;
    offset?: number;
    expand?: string;
}

export interface SetActiveTaxProviderRequest {
    providerName: string;
}

export interface UpdateTaxProviderAvalaraRequest {
    taxProviderAvalara: TaxProviderAvalara;
}

export interface UpdateTaxProviderSelfRequest {
    taxProviderSelf: TaxProviderSelf;
}

export interface UpdateTaxProviderSelfCityRequest {
    city: string;
    taxCity: TaxCity;
}

export interface UpdateTaxProviderSelfCountryRequest {
    countryCode: string;
    taxCountry: TaxCountry;
}

export interface UpdateTaxProviderSelfCountyRequest {
    county: string;
    taxCounty: TaxCounty;
}

export interface UpdateTaxProviderSelfPostalCodeRequest {
    postalCode: string;
    taxPostalCode: TaxPostalCode;
}

export interface UpdateTaxProviderSelfStateRequest {
    stateCode: string;
    taxState: TaxState;
}

export interface UpdateTaxProviderSovosRequest {
    taxProviderSovos: TaxProviderSovos;
}

export interface UpdateTaxProviderTaxJarRequest {
    taxProviderTaxJar: TaxProviderTaxJar;
}

export interface UpdateTaxProviderUltraCartRequest {
    taxProviderUltracart: TaxProviderUltraCart;
}

/**
 * TaxApi - interface
 * 
 * @export
 * @interface TaxApiInterface
 */
export interface TaxApiInterface {
    /**
     * Deletes a Self tax provider city. 
     * @summary Deletes a Self tax provider city
     * @param {string} city The city being deleted.
     * @param {TaxCity} taxCity tax city to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    deleteTaxProviderSelfCityRaw(requestParameters: DeleteTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Self tax provider city. 
     * Deletes a Self tax provider city
     */
    deleteTaxProviderSelfCity(requestParameters: DeleteTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a Self tax provider country. 
     * @summary Deletes a Self tax provider country
     * @param {string} countryCode The country code being deleted.
     * @param {TaxCountry} taxCountry tax country to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    deleteTaxProviderSelfCountryRaw(requestParameters: DeleteTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Self tax provider country. 
     * Deletes a Self tax provider country
     */
    deleteTaxProviderSelfCountry(requestParameters: DeleteTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a Self tax provider county. 
     * @summary Deletes a Self tax provider county
     * @param {string} county The county being deleted.
     * @param {TaxCounty} taxCounty tax county to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    deleteTaxProviderSelfCountyRaw(requestParameters: DeleteTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Self tax provider county. 
     * Deletes a Self tax provider county
     */
    deleteTaxProviderSelfCounty(requestParameters: DeleteTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a Self tax provider postalCode. 
     * @summary Deletes a Self tax provider postalCode
     * @param {string} postalCode The postal code being deleted.
     * @param {TaxPostalCode} taxPostalCode tax postal code to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    deleteTaxProviderSelfPostalCodeRaw(requestParameters: DeleteTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Self tax provider postalCode. 
     * Deletes a Self tax provider postalCode
     */
    deleteTaxProviderSelfPostalCode(requestParameters: DeleteTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a Self tax provider state. 
     * @summary Deletes a Self tax provider state
     * @param {string} stateCode The state code being deleted.
     * @param {TaxState} taxState tax state to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    deleteTaxProviderSelfStateRaw(requestParameters: DeleteTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Self tax provider state. 
     * Deletes a Self tax provider state
     */
    deleteTaxProviderSelfState(requestParameters: DeleteTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves the Avalara tax provider. 
     * @summary Retrieve the Avalara tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderAvalaraRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderAvalara>>;

    /**
     * Retrieves the Avalara tax provider. 
     * Retrieve the Avalara tax provider
     */
    getTaxProviderAvalara(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderAvalara>;

    /**
     * Returns Avalara Tax companies configured by the merchant 
     * @summary Returns Avalara Tax companies configured by the merchant
     * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderAvalaraCompaniesRaw(requestParameters: GetTaxProviderAvalaraCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderAvalaraCompaniesResult>>;

    /**
     * Returns Avalara Tax companies configured by the merchant 
     * Returns Avalara Tax companies configured by the merchant
     */
    getTaxProviderAvalaraCompanies(requestParameters: GetTaxProviderAvalaraCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderAvalaraCompaniesResult>;

    /**
     * Attempts to connect to Avalara and returns back the response. 
     * @summary Attempts to connect to Avalara and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderAvalaraTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTestResult>>;

    /**
     * Attempts to connect to Avalara and returns back the response. 
     * Attempts to connect to Avalara and returns back the response
     */
    getTaxProviderAvalaraTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTestResult>;

    /**
     * Retrieves the Self tax provider. 
     * @summary Retrieve the Self tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelf>>;

    /**
     * Retrieves the Self tax provider. 
     * Retrieve the Self tax provider
     */
    getTaxProviderSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelf>;

    /**
     * Retrieves the Self tax provider countries. 
     * @summary Retrieve the Self tax provider countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderSelfCountriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelfCountriesResponse>>;

    /**
     * Retrieves the Self tax provider countries. 
     * Retrieve the Self tax provider countries
     */
    getTaxProviderSelfCountries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelfCountriesResponse>;

    /**
     * Retrieves the Self tax provider regions for a given country code. 
     * @summary Retrieve the Self tax provider regions for a given country code
     * @param {string} countryCode The country code regions desired.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderSelfRegionsByCountryCodeRaw(requestParameters: GetTaxProviderSelfRegionsByCountryCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelfRegionsResponse>>;

    /**
     * Retrieves the Self tax provider regions for a given country code. 
     * Retrieve the Self tax provider regions for a given country code
     */
    getTaxProviderSelfRegionsByCountryCode(requestParameters: GetTaxProviderSelfRegionsByCountryCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelfRegionsResponse>;

    /**
     * Retrieves the Sovos tax provider. 
     * @summary Retrieve the Sovos tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderSovosRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSovos>>;

    /**
     * Retrieves the Sovos tax provider. 
     * Retrieve the Sovos tax provider
     */
    getTaxProviderSovos(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSovos>;

    /**
     * Attempts to connect to Sovos and returns back the response. 
     * @summary Attempts to connect to Sovos and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderSovosTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTestResult>>;

    /**
     * Attempts to connect to Sovos and returns back the response. 
     * Attempts to connect to Sovos and returns back the response
     */
    getTaxProviderSovosTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTestResult>;

    /**
     * Retrieves the TaxJar tax provider. 
     * @summary Retrieve the TaxJar tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderTaxJarRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTaxJar>>;

    /**
     * Retrieves the TaxJar tax provider. 
     * Retrieve the TaxJar tax provider
     */
    getTaxProviderTaxJar(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTaxJar>;

    /**
     * Attempts to connect to TaxJar and returns back the response. 
     * @summary Attempts to connect to TaxJar and returns back the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderTaxJarTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTestResult>>;

    /**
     * Attempts to connect to TaxJar and returns back the response. 
     * Attempts to connect to TaxJar and returns back the response
     */
    getTaxProviderTaxJarTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTestResult>;

    /**
     * Retrieves the UltraCart tax provider. 
     * @summary Retrieve the UltraCart tax provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProviderUltraCartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderUltraCart>>;

    /**
     * Retrieves the UltraCart tax provider. 
     * Retrieve the UltraCart tax provider
     */
    getTaxProviderUltraCart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderUltraCart>;

    /**
     * Retrieves tax methods for this account. 
     * @summary Retrieve tax methods
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    getTaxProvidersRaw(requestParameters: GetTaxProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProvidersResponse>>;

    /**
     * Retrieves tax methods for this account. 
     * Retrieve tax methods
     */
    getTaxProviders(requestParameters: GetTaxProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProvidersResponse>;

    /**
     * Toggle a tax provider to active. 
     * @summary Toggle a tax provider to active
     * @param {string} providerName The tax provider to set active.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    setActiveTaxProviderRaw(requestParameters: SetActiveTaxProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderActivateResult>>;

    /**
     * Toggle a tax provider to active. 
     * Toggle a tax provider to active
     */
    setActiveTaxProvider(requestParameters: SetActiveTaxProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderActivateResult>;

    /**
     * Update the Avalara tax provider. 
     * @summary Update the Avalara tax provider
     * @param {TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderAvalaraRaw(requestParameters: UpdateTaxProviderAvalaraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderAvalara>>;

    /**
     * Update the Avalara tax provider. 
     * Update the Avalara tax provider
     */
    updateTaxProviderAvalara(requestParameters: UpdateTaxProviderAvalaraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderAvalara>;

    /**
     * Update the Self tax provider. 
     * @summary Update the Self tax provider
     * @param {TaxProviderSelf} taxProviderSelf TaxProviderSelf object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSelfRaw(requestParameters: UpdateTaxProviderSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelf>>;

    /**
     * Update the Self tax provider. 
     * Update the Self tax provider
     */
    updateTaxProviderSelf(requestParameters: UpdateTaxProviderSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelf>;

    /**
     * Updates a Self tax provider city. 
     * @summary Updates a Self tax provider city
     * @param {string} city The city being updated.
     * @param {TaxCity} taxCity tax city to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSelfCityRaw(requestParameters: UpdateTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCity>>;

    /**
     * Updates a Self tax provider city. 
     * Updates a Self tax provider city
     */
    updateTaxProviderSelfCity(requestParameters: UpdateTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCity>;

    /**
     * Updates a Self tax provider country. 
     * @summary Updates a Self tax provider country
     * @param {string} countryCode The country code being updated.
     * @param {TaxCountry} taxCountry tax country to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSelfCountryRaw(requestParameters: UpdateTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCountry>>;

    /**
     * Updates a Self tax provider country. 
     * Updates a Self tax provider country
     */
    updateTaxProviderSelfCountry(requestParameters: UpdateTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCountry>;

    /**
     * Updates a Self tax provider county. 
     * @summary Updates a Self tax provider county
     * @param {string} county The county being updated.
     * @param {TaxCounty} taxCounty tax county to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSelfCountyRaw(requestParameters: UpdateTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCounty>>;

    /**
     * Updates a Self tax provider county. 
     * Updates a Self tax provider county
     */
    updateTaxProviderSelfCounty(requestParameters: UpdateTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCounty>;

    /**
     * Updates a Self tax provider postalCode. 
     * @summary Updates a Self tax provider postalCode
     * @param {string} postalCode The postal code being updated.
     * @param {TaxPostalCode} taxPostalCode tax postal code to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSelfPostalCodeRaw(requestParameters: UpdateTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxPostalCode>>;

    /**
     * Updates a Self tax provider postalCode. 
     * Updates a Self tax provider postalCode
     */
    updateTaxProviderSelfPostalCode(requestParameters: UpdateTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxPostalCode>;

    /**
     * Updates a Self tax provider state. 
     * @summary Updates a Self tax provider state
     * @param {string} stateCode The state code being updated.
     * @param {TaxState} taxState tax state to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSelfStateRaw(requestParameters: UpdateTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxState>>;

    /**
     * Updates a Self tax provider state. 
     * Updates a Self tax provider state
     */
    updateTaxProviderSelfState(requestParameters: UpdateTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxState>;

    /**
     * Update the Sovos tax provider. 
     * @summary Update the Sovos tax provider
     * @param {TaxProviderSovos} taxProviderSovos TaxProviderSovos object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderSovosRaw(requestParameters: UpdateTaxProviderSovosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSovos>>;

    /**
     * Update the Sovos tax provider. 
     * Update the Sovos tax provider
     */
    updateTaxProviderSovos(requestParameters: UpdateTaxProviderSovosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSovos>;

    /**
     * Update the TaxJar tax provider. 
     * @summary Update the TaxJar tax provider
     * @param {TaxProviderTaxJar} taxProviderTaxJar TaxProviderTaxJar object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderTaxJarRaw(requestParameters: UpdateTaxProviderTaxJarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTaxJar>>;

    /**
     * Update the TaxJar tax provider. 
     * Update the TaxJar tax provider
     */
    updateTaxProviderTaxJar(requestParameters: UpdateTaxProviderTaxJarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTaxJar>;

    /**
     * Update the UltraCart tax provider. 
     * @summary Update the UltraCart tax provider
     * @param {TaxProviderUltraCart} taxProviderUltracart TaxProviderUltraCart object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApiInterface
     */
    updateTaxProviderUltraCartRaw(requestParameters: UpdateTaxProviderUltraCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderUltraCart>>;

    /**
     * Update the UltraCart tax provider. 
     * Update the UltraCart tax provider
     */
    updateTaxProviderUltraCart(requestParameters: UpdateTaxProviderUltraCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderUltraCart>;

}

/**
 * 
 */
export class TaxApi extends runtime.BaseAPI implements TaxApiInterface {

    /**
     * Deletes a Self tax provider city. 
     * Deletes a Self tax provider city
     */
    async deleteTaxProviderSelfCityRaw(requestParameters: DeleteTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.city === null || requestParameters.city === undefined) {
            throw new runtime.RequiredError('city','Required parameter requestParameters.city was null or undefined when calling deleteTaxProviderSelfCity.');
        }

        if (requestParameters.taxCity === null || requestParameters.taxCity === undefined) {
            throw new runtime.RequiredError('taxCity','Required parameter requestParameters.taxCity was null or undefined when calling deleteTaxProviderSelfCity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/city/{city}`.replace(`{${"city"}}`, encodeURIComponent(String(requestParameters.city))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TaxCityToJSON(requestParameters.taxCity),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Self tax provider city. 
     * Deletes a Self tax provider city
     */
    async deleteTaxProviderSelfCity(requestParameters: DeleteTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaxProviderSelfCityRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a Self tax provider country. 
     * Deletes a Self tax provider country
     */
    async deleteTaxProviderSelfCountryRaw(requestParameters: DeleteTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling deleteTaxProviderSelfCountry.');
        }

        if (requestParameters.taxCountry === null || requestParameters.taxCountry === undefined) {
            throw new runtime.RequiredError('taxCountry','Required parameter requestParameters.taxCountry was null or undefined when calling deleteTaxProviderSelfCountry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/country/{countryCode}`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TaxCountryToJSON(requestParameters.taxCountry),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Self tax provider country. 
     * Deletes a Self tax provider country
     */
    async deleteTaxProviderSelfCountry(requestParameters: DeleteTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaxProviderSelfCountryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a Self tax provider county. 
     * Deletes a Self tax provider county
     */
    async deleteTaxProviderSelfCountyRaw(requestParameters: DeleteTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.county === null || requestParameters.county === undefined) {
            throw new runtime.RequiredError('county','Required parameter requestParameters.county was null or undefined when calling deleteTaxProviderSelfCounty.');
        }

        if (requestParameters.taxCounty === null || requestParameters.taxCounty === undefined) {
            throw new runtime.RequiredError('taxCounty','Required parameter requestParameters.taxCounty was null or undefined when calling deleteTaxProviderSelfCounty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/county/{county}`.replace(`{${"county"}}`, encodeURIComponent(String(requestParameters.county))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TaxCountyToJSON(requestParameters.taxCounty),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Self tax provider county. 
     * Deletes a Self tax provider county
     */
    async deleteTaxProviderSelfCounty(requestParameters: DeleteTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaxProviderSelfCountyRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a Self tax provider postalCode. 
     * Deletes a Self tax provider postalCode
     */
    async deleteTaxProviderSelfPostalCodeRaw(requestParameters: DeleteTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.postalCode === null || requestParameters.postalCode === undefined) {
            throw new runtime.RequiredError('postalCode','Required parameter requestParameters.postalCode was null or undefined when calling deleteTaxProviderSelfPostalCode.');
        }

        if (requestParameters.taxPostalCode === null || requestParameters.taxPostalCode === undefined) {
            throw new runtime.RequiredError('taxPostalCode','Required parameter requestParameters.taxPostalCode was null or undefined when calling deleteTaxProviderSelfPostalCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/postalCode/{postal_code}`.replace(`{${"postal_code"}}`, encodeURIComponent(String(requestParameters.postalCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TaxPostalCodeToJSON(requestParameters.taxPostalCode),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Self tax provider postalCode. 
     * Deletes a Self tax provider postalCode
     */
    async deleteTaxProviderSelfPostalCode(requestParameters: DeleteTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaxProviderSelfPostalCodeRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a Self tax provider state. 
     * Deletes a Self tax provider state
     */
    async deleteTaxProviderSelfStateRaw(requestParameters: DeleteTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stateCode === null || requestParameters.stateCode === undefined) {
            throw new runtime.RequiredError('stateCode','Required parameter requestParameters.stateCode was null or undefined when calling deleteTaxProviderSelfState.');
        }

        if (requestParameters.taxState === null || requestParameters.taxState === undefined) {
            throw new runtime.RequiredError('taxState','Required parameter requestParameters.taxState was null or undefined when calling deleteTaxProviderSelfState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/state/{stateCode}`.replace(`{${"stateCode"}}`, encodeURIComponent(String(requestParameters.stateCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TaxStateToJSON(requestParameters.taxState),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Self tax provider state. 
     * Deletes a Self tax provider state
     */
    async deleteTaxProviderSelfState(requestParameters: DeleteTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaxProviderSelfStateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the Avalara tax provider. 
     * Retrieve the Avalara tax provider
     */
    async getTaxProviderAvalaraRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderAvalara>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/avalara`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderAvalaraFromJSON(jsonValue));
    }

    /**
     * Retrieves the Avalara tax provider. 
     * Retrieve the Avalara tax provider
     */
    async getTaxProviderAvalara(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderAvalara> {
        const response = await this.getTaxProviderAvalaraRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns Avalara Tax companies configured by the merchant 
     * Returns Avalara Tax companies configured by the merchant
     */
    async getTaxProviderAvalaraCompaniesRaw(requestParameters: GetTaxProviderAvalaraCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderAvalaraCompaniesResult>> {
        if (requestParameters.taxProviderAvalara === null || requestParameters.taxProviderAvalara === undefined) {
            throw new runtime.RequiredError('taxProviderAvalara','Required parameter requestParameters.taxProviderAvalara was null or undefined when calling getTaxProviderAvalaraCompanies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/avalara/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxProviderAvalaraToJSON(requestParameters.taxProviderAvalara),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderAvalaraCompaniesResultFromJSON(jsonValue));
    }

    /**
     * Returns Avalara Tax companies configured by the merchant 
     * Returns Avalara Tax companies configured by the merchant
     */
    async getTaxProviderAvalaraCompanies(requestParameters: GetTaxProviderAvalaraCompaniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderAvalaraCompaniesResult> {
        const response = await this.getTaxProviderAvalaraCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attempts to connect to Avalara and returns back the response. 
     * Attempts to connect to Avalara and returns back the response
     */
    async getTaxProviderAvalaraTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/avalara/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderTestResultFromJSON(jsonValue));
    }

    /**
     * Attempts to connect to Avalara and returns back the response. 
     * Attempts to connect to Avalara and returns back the response
     */
    async getTaxProviderAvalaraTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTestResult> {
        const response = await this.getTaxProviderAvalaraTestRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the Self tax provider. 
     * Retrieve the Self tax provider
     */
    async getTaxProviderSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelf>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderSelfFromJSON(jsonValue));
    }

    /**
     * Retrieves the Self tax provider. 
     * Retrieve the Self tax provider
     */
    async getTaxProviderSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelf> {
        const response = await this.getTaxProviderSelfRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the Self tax provider countries. 
     * Retrieve the Self tax provider countries
     */
    async getTaxProviderSelfCountriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelfCountriesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderSelfCountriesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the Self tax provider countries. 
     * Retrieve the Self tax provider countries
     */
    async getTaxProviderSelfCountries(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelfCountriesResponse> {
        const response = await this.getTaxProviderSelfCountriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the Self tax provider regions for a given country code. 
     * Retrieve the Self tax provider regions for a given country code
     */
    async getTaxProviderSelfRegionsByCountryCodeRaw(requestParameters: GetTaxProviderSelfRegionsByCountryCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelfRegionsResponse>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling getTaxProviderSelfRegionsByCountryCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/regions/{countryCode}`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderSelfRegionsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the Self tax provider regions for a given country code. 
     * Retrieve the Self tax provider regions for a given country code
     */
    async getTaxProviderSelfRegionsByCountryCode(requestParameters: GetTaxProviderSelfRegionsByCountryCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelfRegionsResponse> {
        const response = await this.getTaxProviderSelfRegionsByCountryCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the Sovos tax provider. 
     * Retrieve the Sovos tax provider
     */
    async getTaxProviderSovosRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSovos>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/sovos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderSovosFromJSON(jsonValue));
    }

    /**
     * Retrieves the Sovos tax provider. 
     * Retrieve the Sovos tax provider
     */
    async getTaxProviderSovos(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSovos> {
        const response = await this.getTaxProviderSovosRaw(initOverrides);
        return await response.value();
    }

    /**
     * Attempts to connect to Sovos and returns back the response. 
     * Attempts to connect to Sovos and returns back the response
     */
    async getTaxProviderSovosTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/sovos/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderTestResultFromJSON(jsonValue));
    }

    /**
     * Attempts to connect to Sovos and returns back the response. 
     * Attempts to connect to Sovos and returns back the response
     */
    async getTaxProviderSovosTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTestResult> {
        const response = await this.getTaxProviderSovosTestRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the TaxJar tax provider. 
     * Retrieve the TaxJar tax provider
     */
    async getTaxProviderTaxJarRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTaxJar>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/taxjar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderTaxJarFromJSON(jsonValue));
    }

    /**
     * Retrieves the TaxJar tax provider. 
     * Retrieve the TaxJar tax provider
     */
    async getTaxProviderTaxJar(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTaxJar> {
        const response = await this.getTaxProviderTaxJarRaw(initOverrides);
        return await response.value();
    }

    /**
     * Attempts to connect to TaxJar and returns back the response. 
     * Attempts to connect to TaxJar and returns back the response
     */
    async getTaxProviderTaxJarTestRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTestResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/taxjar/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderTestResultFromJSON(jsonValue));
    }

    /**
     * Attempts to connect to TaxJar and returns back the response. 
     * Attempts to connect to TaxJar and returns back the response
     */
    async getTaxProviderTaxJarTest(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTestResult> {
        const response = await this.getTaxProviderTaxJarTestRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the UltraCart tax provider. 
     * Retrieve the UltraCart tax provider
     */
    async getTaxProviderUltraCartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderUltraCart>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/ultracart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderUltraCartFromJSON(jsonValue));
    }

    /**
     * Retrieves the UltraCart tax provider. 
     * Retrieve the UltraCart tax provider
     */
    async getTaxProviderUltraCart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderUltraCart> {
        const response = await this.getTaxProviderUltraCartRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves tax methods for this account. 
     * Retrieve tax methods
     */
    async getTaxProvidersRaw(requestParameters: GetTaxProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProvidersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProvidersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves tax methods for this account. 
     * Retrieve tax methods
     */
    async getTaxProviders(requestParameters: GetTaxProvidersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProvidersResponse> {
        const response = await this.getTaxProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle a tax provider to active. 
     * Toggle a tax provider to active
     */
    async setActiveTaxProviderRaw(requestParameters: SetActiveTaxProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderActivateResult>> {
        if (requestParameters.providerName === null || requestParameters.providerName === undefined) {
            throw new runtime.RequiredError('providerName','Required parameter requestParameters.providerName was null or undefined when calling setActiveTaxProvider.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/setActive/{providerName}`.replace(`{${"providerName"}}`, encodeURIComponent(String(requestParameters.providerName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderActivateResultFromJSON(jsonValue));
    }

    /**
     * Toggle a tax provider to active. 
     * Toggle a tax provider to active
     */
    async setActiveTaxProvider(requestParameters: SetActiveTaxProviderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderActivateResult> {
        const response = await this.setActiveTaxProviderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the Avalara tax provider. 
     * Update the Avalara tax provider
     */
    async updateTaxProviderAvalaraRaw(requestParameters: UpdateTaxProviderAvalaraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderAvalara>> {
        if (requestParameters.taxProviderAvalara === null || requestParameters.taxProviderAvalara === undefined) {
            throw new runtime.RequiredError('taxProviderAvalara','Required parameter requestParameters.taxProviderAvalara was null or undefined when calling updateTaxProviderAvalara.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/avalara`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxProviderAvalaraToJSON(requestParameters.taxProviderAvalara),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderAvalaraFromJSON(jsonValue));
    }

    /**
     * Update the Avalara tax provider. 
     * Update the Avalara tax provider
     */
    async updateTaxProviderAvalara(requestParameters: UpdateTaxProviderAvalaraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderAvalara> {
        const response = await this.updateTaxProviderAvalaraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the Self tax provider. 
     * Update the Self tax provider
     */
    async updateTaxProviderSelfRaw(requestParameters: UpdateTaxProviderSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSelf>> {
        if (requestParameters.taxProviderSelf === null || requestParameters.taxProviderSelf === undefined) {
            throw new runtime.RequiredError('taxProviderSelf','Required parameter requestParameters.taxProviderSelf was null or undefined when calling updateTaxProviderSelf.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxProviderSelfToJSON(requestParameters.taxProviderSelf),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderSelfFromJSON(jsonValue));
    }

    /**
     * Update the Self tax provider. 
     * Update the Self tax provider
     */
    async updateTaxProviderSelf(requestParameters: UpdateTaxProviderSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSelf> {
        const response = await this.updateTaxProviderSelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Self tax provider city. 
     * Updates a Self tax provider city
     */
    async updateTaxProviderSelfCityRaw(requestParameters: UpdateTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCity>> {
        if (requestParameters.city === null || requestParameters.city === undefined) {
            throw new runtime.RequiredError('city','Required parameter requestParameters.city was null or undefined when calling updateTaxProviderSelfCity.');
        }

        if (requestParameters.taxCity === null || requestParameters.taxCity === undefined) {
            throw new runtime.RequiredError('taxCity','Required parameter requestParameters.taxCity was null or undefined when calling updateTaxProviderSelfCity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/city/{city}`.replace(`{${"city"}}`, encodeURIComponent(String(requestParameters.city))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxCityToJSON(requestParameters.taxCity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxCityFromJSON(jsonValue));
    }

    /**
     * Updates a Self tax provider city. 
     * Updates a Self tax provider city
     */
    async updateTaxProviderSelfCity(requestParameters: UpdateTaxProviderSelfCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCity> {
        const response = await this.updateTaxProviderSelfCityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Self tax provider country. 
     * Updates a Self tax provider country
     */
    async updateTaxProviderSelfCountryRaw(requestParameters: UpdateTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCountry>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling updateTaxProviderSelfCountry.');
        }

        if (requestParameters.taxCountry === null || requestParameters.taxCountry === undefined) {
            throw new runtime.RequiredError('taxCountry','Required parameter requestParameters.taxCountry was null or undefined when calling updateTaxProviderSelfCountry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/country/{countryCode}`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxCountryToJSON(requestParameters.taxCountry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxCountryFromJSON(jsonValue));
    }

    /**
     * Updates a Self tax provider country. 
     * Updates a Self tax provider country
     */
    async updateTaxProviderSelfCountry(requestParameters: UpdateTaxProviderSelfCountryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCountry> {
        const response = await this.updateTaxProviderSelfCountryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Self tax provider county. 
     * Updates a Self tax provider county
     */
    async updateTaxProviderSelfCountyRaw(requestParameters: UpdateTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCounty>> {
        if (requestParameters.county === null || requestParameters.county === undefined) {
            throw new runtime.RequiredError('county','Required parameter requestParameters.county was null or undefined when calling updateTaxProviderSelfCounty.');
        }

        if (requestParameters.taxCounty === null || requestParameters.taxCounty === undefined) {
            throw new runtime.RequiredError('taxCounty','Required parameter requestParameters.taxCounty was null or undefined when calling updateTaxProviderSelfCounty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/county/{county}`.replace(`{${"county"}}`, encodeURIComponent(String(requestParameters.county))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxCountyToJSON(requestParameters.taxCounty),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxCountyFromJSON(jsonValue));
    }

    /**
     * Updates a Self tax provider county. 
     * Updates a Self tax provider county
     */
    async updateTaxProviderSelfCounty(requestParameters: UpdateTaxProviderSelfCountyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCounty> {
        const response = await this.updateTaxProviderSelfCountyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Self tax provider postalCode. 
     * Updates a Self tax provider postalCode
     */
    async updateTaxProviderSelfPostalCodeRaw(requestParameters: UpdateTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxPostalCode>> {
        if (requestParameters.postalCode === null || requestParameters.postalCode === undefined) {
            throw new runtime.RequiredError('postalCode','Required parameter requestParameters.postalCode was null or undefined when calling updateTaxProviderSelfPostalCode.');
        }

        if (requestParameters.taxPostalCode === null || requestParameters.taxPostalCode === undefined) {
            throw new runtime.RequiredError('taxPostalCode','Required parameter requestParameters.taxPostalCode was null or undefined when calling updateTaxProviderSelfPostalCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/postalCode/{postal_code}`.replace(`{${"postal_code"}}`, encodeURIComponent(String(requestParameters.postalCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxPostalCodeToJSON(requestParameters.taxPostalCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxPostalCodeFromJSON(jsonValue));
    }

    /**
     * Updates a Self tax provider postalCode. 
     * Updates a Self tax provider postalCode
     */
    async updateTaxProviderSelfPostalCode(requestParameters: UpdateTaxProviderSelfPostalCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxPostalCode> {
        const response = await this.updateTaxProviderSelfPostalCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Self tax provider state. 
     * Updates a Self tax provider state
     */
    async updateTaxProviderSelfStateRaw(requestParameters: UpdateTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxState>> {
        if (requestParameters.stateCode === null || requestParameters.stateCode === undefined) {
            throw new runtime.RequiredError('stateCode','Required parameter requestParameters.stateCode was null or undefined when calling updateTaxProviderSelfState.');
        }

        if (requestParameters.taxState === null || requestParameters.taxState === undefined) {
            throw new runtime.RequiredError('taxState','Required parameter requestParameters.taxState was null or undefined when calling updateTaxProviderSelfState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/self/state/{stateCode}`.replace(`{${"stateCode"}}`, encodeURIComponent(String(requestParameters.stateCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxStateToJSON(requestParameters.taxState),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxStateFromJSON(jsonValue));
    }

    /**
     * Updates a Self tax provider state. 
     * Updates a Self tax provider state
     */
    async updateTaxProviderSelfState(requestParameters: UpdateTaxProviderSelfStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxState> {
        const response = await this.updateTaxProviderSelfStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the Sovos tax provider. 
     * Update the Sovos tax provider
     */
    async updateTaxProviderSovosRaw(requestParameters: UpdateTaxProviderSovosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderSovos>> {
        if (requestParameters.taxProviderSovos === null || requestParameters.taxProviderSovos === undefined) {
            throw new runtime.RequiredError('taxProviderSovos','Required parameter requestParameters.taxProviderSovos was null or undefined when calling updateTaxProviderSovos.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/sovos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxProviderSovosToJSON(requestParameters.taxProviderSovos),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderSovosFromJSON(jsonValue));
    }

    /**
     * Update the Sovos tax provider. 
     * Update the Sovos tax provider
     */
    async updateTaxProviderSovos(requestParameters: UpdateTaxProviderSovosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderSovos> {
        const response = await this.updateTaxProviderSovosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the TaxJar tax provider. 
     * Update the TaxJar tax provider
     */
    async updateTaxProviderTaxJarRaw(requestParameters: UpdateTaxProviderTaxJarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderTaxJar>> {
        if (requestParameters.taxProviderTaxJar === null || requestParameters.taxProviderTaxJar === undefined) {
            throw new runtime.RequiredError('taxProviderTaxJar','Required parameter requestParameters.taxProviderTaxJar was null or undefined when calling updateTaxProviderTaxJar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/taxjar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxProviderTaxJarToJSON(requestParameters.taxProviderTaxJar),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderTaxJarFromJSON(jsonValue));
    }

    /**
     * Update the TaxJar tax provider. 
     * Update the TaxJar tax provider
     */
    async updateTaxProviderTaxJar(requestParameters: UpdateTaxProviderTaxJarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderTaxJar> {
        const response = await this.updateTaxProviderTaxJarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the UltraCart tax provider. 
     * Update the UltraCart tax provider
     */
    async updateTaxProviderUltraCartRaw(requestParameters: UpdateTaxProviderUltraCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxProviderUltraCart>> {
        if (requestParameters.taxProviderUltracart === null || requestParameters.taxProviderUltracart === undefined) {
            throw new runtime.RequiredError('taxProviderUltracart','Required parameter requestParameters.taxProviderUltracart was null or undefined when calling updateTaxProviderUltraCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["tax_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/tax/providers/ultracart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxProviderUltraCartToJSON(requestParameters.taxProviderUltracart),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxProviderUltraCartFromJSON(jsonValue));
    }

    /**
     * Update the UltraCart tax provider. 
     * Update the UltraCart tax provider
     */
    async updateTaxProviderUltraCart(requestParameters: UpdateTaxProviderUltraCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxProviderUltraCart> {
        const response = await this.updateTaxProviderUltraCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GiftCertificate,
    GiftCertificateFromJSON,
    GiftCertificateToJSON,
    GiftCertificateCreateRequest,
    GiftCertificateCreateRequestFromJSON,
    GiftCertificateCreateRequestToJSON,
    GiftCertificateLedgerEntry,
    GiftCertificateLedgerEntryFromJSON,
    GiftCertificateLedgerEntryToJSON,
    GiftCertificateQuery,
    GiftCertificateQueryFromJSON,
    GiftCertificateQueryToJSON,
    GiftCertificateResponse,
    GiftCertificateResponseFromJSON,
    GiftCertificateResponseToJSON,
    GiftCertificatesResponse,
    GiftCertificatesResponseFromJSON,
    GiftCertificatesResponseToJSON,
} from '../models';

export interface AddGiftCertificateLedgerEntryRequest {
    giftCertificateOid: number;
    giftCertificateLedgerEntry: GiftCertificateLedgerEntry;
}

export interface CreateGiftCertificateRequest {
    giftCertificateCreateRequest: GiftCertificateCreateRequest;
}

export interface DeleteGiftCertificateRequest {
    giftCertificateOid: number;
}

export interface GetGiftCertificateByCodeRequest {
    code: string;
}

export interface GetGiftCertificateByOidRequest {
    giftCertificateOid: number;
}

export interface GetGiftCertificatesByEmailRequest {
    email: string;
}

export interface GetGiftCertificatesByQueryRequest {
    giftCertificateQuery: GiftCertificateQuery;
    limit?: number;
    offset?: number;
    since?: string;
    sort?: string;
    expand?: string;
}

export interface UpdateGiftCertificateRequest {
    giftCertificateOid: number;
    giftCertificate: GiftCertificate;
}

/**
 * GiftCertificateApi - interface
 * 
 * @export
 * @interface GiftCertificateApiInterface
 */
export interface GiftCertificateApiInterface {
    /**
     * Adds a ledger entry for this gift certificate. 
     * @summary Add a gift certificate ledger entry
     * @param {number} giftCertificateOid 
     * @param {GiftCertificateLedgerEntry} giftCertificateLedgerEntry Gift certificate ledger entry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    addGiftCertificateLedgerEntryRaw(requestParameters: AddGiftCertificateLedgerEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>>;

    /**
     * Adds a ledger entry for this gift certificate. 
     * Add a gift certificate ledger entry
     */
    addGiftCertificateLedgerEntry(requestParameters: AddGiftCertificateLedgerEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse>;

    /**
     * Creates a gift certificate for this merchant account. 
     * @summary Create a gift certificate
     * @param {GiftCertificateCreateRequest} giftCertificateCreateRequest Gift certificate create request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    createGiftCertificateRaw(requestParameters: CreateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>>;

    /**
     * Creates a gift certificate for this merchant account. 
     * Create a gift certificate
     */
    createGiftCertificate(requestParameters: CreateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse>;

    /**
     * Deletes a gift certificate for this merchant account. 
     * @summary Delete a gift certificate
     * @param {number} giftCertificateOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    deleteGiftCertificateRaw(requestParameters: DeleteGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a gift certificate for this merchant account. 
     * Delete a gift certificate
     */
    deleteGiftCertificate(requestParameters: DeleteGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * @summary Retrieve gift certificate by code
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    getGiftCertificateByCodeRaw(requestParameters: GetGiftCertificateByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>>;

    /**
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * Retrieve gift certificate by code
     */
    getGiftCertificateByCode(requestParameters: GetGiftCertificateByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse>;

    /**
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * @summary Retrieve gift certificate by oid
     * @param {number} giftCertificateOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    getGiftCertificateByOidRaw(requestParameters: GetGiftCertificateByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>>;

    /**
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * Retrieve gift certificate by oid
     */
    getGiftCertificateByOid(requestParameters: GetGiftCertificateByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse>;

    /**
     * Retrieves all gift certificates from the account based on customer email. 
     * @summary Retrieve gift certificate by email
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    getGiftCertificatesByEmailRaw(requestParameters: GetGiftCertificatesByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificatesResponse>>;

    /**
     * Retrieves all gift certificates from the account based on customer email. 
     * Retrieve gift certificate by email
     */
    getGiftCertificatesByEmail(requestParameters: GetGiftCertificatesByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificatesResponse>;

    /**
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve gift certificates by query
     * @param {GiftCertificateQuery} giftCertificateQuery Gift certificates query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch customers that have been created/modified since this date/time.
     * @param {string} [sort] The sort order of the customers.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    getGiftCertificatesByQueryRaw(requestParameters: GetGiftCertificatesByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificatesResponse>>;

    /**
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve gift certificates by query
     */
    getGiftCertificatesByQuery(requestParameters: GetGiftCertificatesByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificatesResponse>;

    /**
     * Update a gift certificate for this merchant account. 
     * @summary Update a gift certificate
     * @param {number} giftCertificateOid 
     * @param {GiftCertificate} giftCertificate Gift certificate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GiftCertificateApiInterface
     */
    updateGiftCertificateRaw(requestParameters: UpdateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>>;

    /**
     * Update a gift certificate for this merchant account. 
     * Update a gift certificate
     */
    updateGiftCertificate(requestParameters: UpdateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse>;

}

/**
 * 
 */
export class GiftCertificateApi extends runtime.BaseAPI implements GiftCertificateApiInterface {

    /**
     * Adds a ledger entry for this gift certificate. 
     * Add a gift certificate ledger entry
     */
    async addGiftCertificateLedgerEntryRaw(requestParameters: AddGiftCertificateLedgerEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>> {
        if (requestParameters.giftCertificateOid === null || requestParameters.giftCertificateOid === undefined) {
            throw new runtime.RequiredError('giftCertificateOid','Required parameter requestParameters.giftCertificateOid was null or undefined when calling addGiftCertificateLedgerEntry.');
        }

        if (requestParameters.giftCertificateLedgerEntry === null || requestParameters.giftCertificateLedgerEntry === undefined) {
            throw new runtime.RequiredError('giftCertificateLedgerEntry','Required parameter requestParameters.giftCertificateLedgerEntry was null or undefined when calling addGiftCertificateLedgerEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/{gift_certificate_oid}/ledger_entry`.replace(`{${"gift_certificate_oid"}}`, encodeURIComponent(String(requestParameters.giftCertificateOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GiftCertificateLedgerEntryToJSON(requestParameters.giftCertificateLedgerEntry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Adds a ledger entry for this gift certificate. 
     * Add a gift certificate ledger entry
     */
    async addGiftCertificateLedgerEntry(requestParameters: AddGiftCertificateLedgerEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse> {
        const response = await this.addGiftCertificateLedgerEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a gift certificate for this merchant account. 
     * Create a gift certificate
     */
    async createGiftCertificateRaw(requestParameters: CreateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>> {
        if (requestParameters.giftCertificateCreateRequest === null || requestParameters.giftCertificateCreateRequest === undefined) {
            throw new runtime.RequiredError('giftCertificateCreateRequest','Required parameter requestParameters.giftCertificateCreateRequest was null or undefined when calling createGiftCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GiftCertificateCreateRequestToJSON(requestParameters.giftCertificateCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Creates a gift certificate for this merchant account. 
     * Create a gift certificate
     */
    async createGiftCertificate(requestParameters: CreateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse> {
        const response = await this.createGiftCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a gift certificate for this merchant account. 
     * Delete a gift certificate
     */
    async deleteGiftCertificateRaw(requestParameters: DeleteGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.giftCertificateOid === null || requestParameters.giftCertificateOid === undefined) {
            throw new runtime.RequiredError('giftCertificateOid','Required parameter requestParameters.giftCertificateOid was null or undefined when calling deleteGiftCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/{gift_certificate_oid}`.replace(`{${"gift_certificate_oid"}}`, encodeURIComponent(String(requestParameters.giftCertificateOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a gift certificate for this merchant account. 
     * Delete a gift certificate
     */
    async deleteGiftCertificate(requestParameters: DeleteGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGiftCertificateRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * Retrieve gift certificate by code
     */
    async getGiftCertificateByCodeRaw(requestParameters: GetGiftCertificateByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getGiftCertificateByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/by_code/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a gift certificate from the account based on the code (the value the customer enters at checkout time). 
     * Retrieve gift certificate by code
     */
    async getGiftCertificateByCode(requestParameters: GetGiftCertificateByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse> {
        const response = await this.getGiftCertificateByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * Retrieve gift certificate by oid
     */
    async getGiftCertificateByOidRaw(requestParameters: GetGiftCertificateByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>> {
        if (requestParameters.giftCertificateOid === null || requestParameters.giftCertificateOid === undefined) {
            throw new runtime.RequiredError('giftCertificateOid','Required parameter requestParameters.giftCertificateOid was null or undefined when calling getGiftCertificateByOid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/{gift_certificate_oid}`.replace(`{${"gift_certificate_oid"}}`, encodeURIComponent(String(requestParameters.giftCertificateOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a gift certificate from the account based on the internal primary key. 
     * Retrieve gift certificate by oid
     */
    async getGiftCertificateByOid(requestParameters: GetGiftCertificateByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse> {
        const response = await this.getGiftCertificateByOidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all gift certificates from the account based on customer email. 
     * Retrieve gift certificate by email
     */
    async getGiftCertificatesByEmailRaw(requestParameters: GetGiftCertificatesByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificatesResponse>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getGiftCertificatesByEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/by_email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificatesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all gift certificates from the account based on customer email. 
     * Retrieve gift certificate by email
     */
    async getGiftCertificatesByEmail(requestParameters: GetGiftCertificatesByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificatesResponse> {
        const response = await this.getGiftCertificatesByEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve gift certificates by query
     */
    async getGiftCertificatesByQueryRaw(requestParameters: GetGiftCertificatesByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificatesResponse>> {
        if (requestParameters.giftCertificateQuery === null || requestParameters.giftCertificateQuery === undefined) {
            throw new runtime.RequiredError('giftCertificateQuery','Required parameter requestParameters.giftCertificateQuery was null or undefined when calling getGiftCertificatesByQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GiftCertificateQueryToJSON(requestParameters.giftCertificateQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificatesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves gift certificates from the account.  If no parameters are specified, all gift certificates will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve gift certificates by query
     */
    async getGiftCertificatesByQuery(requestParameters: GetGiftCertificatesByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificatesResponse> {
        const response = await this.getGiftCertificatesByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a gift certificate for this merchant account. 
     * Update a gift certificate
     */
    async updateGiftCertificateRaw(requestParameters: UpdateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GiftCertificateResponse>> {
        if (requestParameters.giftCertificateOid === null || requestParameters.giftCertificateOid === undefined) {
            throw new runtime.RequiredError('giftCertificateOid','Required parameter requestParameters.giftCertificateOid was null or undefined when calling updateGiftCertificate.');
        }

        if (requestParameters.giftCertificate === null || requestParameters.giftCertificate === undefined) {
            throw new runtime.RequiredError('giftCertificate','Required parameter requestParameters.giftCertificate was null or undefined when calling updateGiftCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["gift_certificate_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/gift_certificate/gift_certificates/{gift_certificate_oid}`.replace(`{${"gift_certificate_oid"}}`, encodeURIComponent(String(requestParameters.giftCertificateOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GiftCertificateToJSON(requestParameters.giftCertificate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GiftCertificateResponseFromJSON(jsonValue));
    }

    /**
     * Update a gift certificate for this merchant account. 
     * Update a gift certificate
     */
    async updateGiftCertificate(requestParameters: UpdateGiftCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GiftCertificateResponse> {
        const response = await this.updateGiftCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

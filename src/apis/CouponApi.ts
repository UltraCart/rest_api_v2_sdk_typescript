/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Coupon,
    CouponFromJSON,
    CouponToJSON,
    CouponAutoApplyConditions,
    CouponAutoApplyConditionsFromJSON,
    CouponAutoApplyConditionsToJSON,
    CouponCodesRequest,
    CouponCodesRequestFromJSON,
    CouponCodesRequestToJSON,
    CouponCodesResponse,
    CouponCodesResponseFromJSON,
    CouponCodesResponseToJSON,
    CouponDeletesRequest,
    CouponDeletesRequestFromJSON,
    CouponDeletesRequestToJSON,
    CouponEditorValues,
    CouponEditorValuesFromJSON,
    CouponEditorValuesToJSON,
    CouponExistsResponse,
    CouponExistsResponseFromJSON,
    CouponExistsResponseToJSON,
    CouponItemSearchResultsResponse,
    CouponItemSearchResultsResponseFromJSON,
    CouponItemSearchResultsResponseToJSON,
    CouponQuery,
    CouponQueryFromJSON,
    CouponQueryToJSON,
    CouponResponse,
    CouponResponseFromJSON,
    CouponResponseToJSON,
    CouponsRequest,
    CouponsRequestFromJSON,
    CouponsRequestToJSON,
    CouponsResponse,
    CouponsResponseFromJSON,
    CouponsResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    UploadCouponCodesRequest,
    UploadCouponCodesRequestFromJSON,
    UploadCouponCodesRequestToJSON,
    UploadCouponCodesResponse,
    UploadCouponCodesResponseFromJSON,
    UploadCouponCodesResponseToJSON,
} from '../models';

export interface DeleteCouponRequest {
    couponOid: number;
}

export interface DeleteCouponsByCodeRequest {
    couponDeleteRequest: CouponDeletesRequest;
}

export interface DeleteCouponsByOidRequest {
    couponDeleteRequest: CouponDeletesRequest;
}

export interface DoesCouponCodeExistRequest {
    merchantCode: string;
}

export interface GenerateCouponCodesRequest {
    couponOid: number;
    couponCodesRequest: CouponCodesRequest;
}

export interface GenerateOneTimeCodesByMerchantCodeRequest {
    merchantCode: string;
    couponCodesRequest: CouponCodesRequest;
}

export interface GetCouponRequest {
    couponOid: number;
    expand?: string;
}

export interface GetCouponByMerchantCodeRequest {
    merchantCode: string;
    expand?: string;
}

export interface GetCouponsRequest {
    merchantCode?: string;
    description?: string;
    couponType?: string;
    startDateBegin?: string;
    startDateEnd?: string;
    expirationDateBegin?: string;
    expirationDateEnd?: string;
    affiliateOid?: number;
    excludeExpired?: boolean;
    limit?: number;
    offset?: number;
    sort?: string;
    expand?: string;
}

export interface GetCouponsByQueryRequest {
    couponQuery: CouponQuery;
    limit?: number;
    offset?: number;
    sort?: string;
    expand?: string;
}

export interface InsertCouponRequest {
    coupon: Coupon;
    expand?: string;
}

export interface InsertCouponsRequest {
    couponsRequest: CouponsRequest;
    expand?: string;
    placeholders?: boolean;
}

export interface SearchItemsRequest {
    s?: string;
    m?: number;
}

export interface UpdateAutoApplyRequest {
    conditions: CouponAutoApplyConditions;
}

export interface UpdateCouponRequest {
    couponOid: number;
    coupon: Coupon;
    expand?: string;
}

export interface UpdateCouponsRequest {
    couponsRequest: CouponsRequest;
    expand?: string;
    placeholders?: boolean;
    async?: boolean;
}

export interface UploadCouponCodesOperationRequest {
    couponOid: number;
    uploadCouponCodesRequest: UploadCouponCodesRequest;
}

/**
 * CouponApi - interface
 * 
 * @export
 * @interface CouponApiInterface
 */
export interface CouponApiInterface {
    /**
     * Delete a coupon on the UltraCart account. 
     * @summary Delete a coupon
     * @param {number} couponOid The coupon_oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    deleteCouponRaw(requestParameters: DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a coupon on the UltraCart account. 
     * Delete a coupon
     */
    deleteCoupon(requestParameters: DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete coupons on the UltraCart account. 
     * @summary Deletes multiple coupons
     * @param {CouponDeletesRequest} couponDeleteRequest Coupon oids to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    deleteCouponsByCodeRaw(requestParameters: DeleteCouponsByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete coupons on the UltraCart account. 
     * Deletes multiple coupons
     */
    deleteCouponsByCode(requestParameters: DeleteCouponsByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete coupons on the UltraCart account. 
     * @summary Deletes multiple coupons
     * @param {CouponDeletesRequest} couponDeleteRequest Coupon oids to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    deleteCouponsByOidRaw(requestParameters: DeleteCouponsByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete coupons on the UltraCart account. 
     * Deletes multiple coupons
     */
    deleteCouponsByOid(requestParameters: DeleteCouponsByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Determines if a coupon merchant code already exists. 
     * @summary Determines if a coupon merchant code already exists
     * @param {string} merchantCode The coupon merchant code to examine.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    doesCouponCodeExistRaw(requestParameters: DoesCouponCodeExistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponExistsResponse>>;

    /**
     * Determines if a coupon merchant code already exists. 
     * Determines if a coupon merchant code already exists
     */
    doesCouponCodeExist(requestParameters: DoesCouponCodeExistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponExistsResponse>;

    /**
     * Generate one time codes for a coupon 
     * @summary Generates one time codes for a coupon
     * @param {number} couponOid The coupon oid to generate codes.
     * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    generateCouponCodesRaw(requestParameters: GenerateCouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCodesResponse>>;

    /**
     * Generate one time codes for a coupon 
     * Generates one time codes for a coupon
     */
    generateCouponCodes(requestParameters: GenerateCouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCodesResponse>;

    /**
     * Generate one time codes by merchant code 
     * @summary Generates one time codes by merchant code
     * @param {string} merchantCode The merchant code to generate one time codes.
     * @param {CouponCodesRequest} couponCodesRequest Coupon code generation parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    generateOneTimeCodesByMerchantCodeRaw(requestParameters: GenerateOneTimeCodesByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCodesResponse>>;

    /**
     * Generate one time codes by merchant code 
     * Generates one time codes by merchant code
     */
    generateOneTimeCodesByMerchantCode(requestParameters: GenerateOneTimeCodesByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCodesResponse>;

    /**
     * Retrieve auto apply rules and conditions 
     * @summary Retrieve auto apply rules and conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    getAutoApplyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponAutoApplyConditions>>;

    /**
     * Retrieve auto apply rules and conditions 
     * Retrieve auto apply rules and conditions
     */
    getAutoApply(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponAutoApplyConditions>;

    /**
     * Retrieves a single coupon using the specified coupon profile oid. 
     * @summary Retrieve a coupon
     * @param {number} couponOid The coupon oid to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    getCouponRaw(requestParameters: GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>>;

    /**
     * Retrieves a single coupon using the specified coupon profile oid. 
     * Retrieve a coupon
     */
    getCoupon(requestParameters: GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse>;

    /**
     * Retrieves a single coupon using the specified merchant code. 
     * @summary Retrieve a coupon by merchant code
     * @param {string} merchantCode The coupon merchant code to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    getCouponByMerchantCodeRaw(requestParameters: GetCouponByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>>;

    /**
     * Retrieves a single coupon using the specified merchant code. 
     * Retrieve a coupon by merchant code
     */
    getCouponByMerchantCode(requestParameters: GetCouponByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse>;

    /**
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve coupons
     * @param {string} [merchantCode] Merchant code
     * @param {string} [description] Description
     * @param {string} [couponType] Coupon type
     * @param {string} [startDateBegin] Start date begin
     * @param {string} [startDateEnd] Start date end
     * @param {string} [expirationDateBegin] Expiration date begin
     * @param {string} [expirationDateEnd] Expiration date end
     * @param {number} [affiliateOid] Affiliate oid
     * @param {boolean} [excludeExpired] Exclude expired
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    getCouponsRaw(requestParameters: GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>>;

    /**
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve coupons
     */
    getCoupons(requestParameters: GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse>;

    /**
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @summary Retrieve coupons by query
     * @param {CouponQuery} couponQuery Coupon query
     * @param {number} [limit] The maximum number of records to return on this one API call. (Max 200)
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the coupons.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    getCouponsByQueryRaw(requestParameters: GetCouponsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>>;

    /**
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve coupons by query
     */
    getCouponsByQuery(requestParameters: GetCouponsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse>;

    /**
     * Retrieve values needed for a coupon editor 
     * @summary Retrieve values needed for a coupon editor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    getEditorValuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponEditorValues>>;

    /**
     * Retrieve values needed for a coupon editor 
     * Retrieve values needed for a coupon editor
     */
    getEditorValues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponEditorValues>;

    /**
     * Insert a coupon on the UltraCart account. 
     * @summary Insert a coupon
     * @param {Coupon} coupon Coupon to insert
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    insertCouponRaw(requestParameters: InsertCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>>;

    /**
     * Insert a coupon on the UltraCart account. 
     * Insert a coupon
     */
    insertCoupon(requestParameters: InsertCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse>;

    /**
     * Insert multiple coupon on the UltraCart account. 
     * @summary Insert multiple coupons
     * @param {CouponsRequest} couponsRequest Coupons to insert (maximum 50)
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    insertCouponsRaw(requestParameters: InsertCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>>;

    /**
     * Insert multiple coupon on the UltraCart account. 
     * Insert multiple coupons
     */
    insertCoupons(requestParameters: InsertCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse>;

    /**
     * Searches for items to display within a coupon editor and assign to coupons 
     * @summary Searches for items to display within a coupon editor and assign to coupons
     * @param {string} [s] 
     * @param {number} [m] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    searchItemsRaw(requestParameters: SearchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponItemSearchResultsResponse>>;

    /**
     * Searches for items to display within a coupon editor and assign to coupons 
     * Searches for items to display within a coupon editor and assign to coupons
     */
    searchItems(requestParameters: SearchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponItemSearchResultsResponse>;

    /**
     * Update auto apply rules and conditions 
     * @summary Update auto apply rules and conditions
     * @param {CouponAutoApplyConditions} conditions Conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    updateAutoApplyRaw(requestParameters: UpdateAutoApplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update auto apply rules and conditions 
     * Update auto apply rules and conditions
     */
    updateAutoApply(requestParameters: UpdateAutoApplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Update a coupon on the UltraCart account. 
     * @summary Update a coupon
     * @param {number} couponOid The coupon_oid to update.
     * @param {Coupon} coupon Coupon to update
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    updateCouponRaw(requestParameters: UpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>>;

    /**
     * Update a coupon on the UltraCart account. 
     * Update a coupon
     */
    updateCoupon(requestParameters: UpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse>;

    /**
     * Update multiple coupon on the UltraCart account. 
     * @summary Update multiple coupons
     * @param {CouponsRequest} couponsRequest Coupons to update (synchronous maximum 50 / asynchronous maximum 100)
     * @param {string} [expand] The object expansion to perform on the result.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {boolean} [async] True if the operation should be run async.  No result returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    updateCouponsRaw(requestParameters: UpdateCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>>;

    /**
     * Update multiple coupon on the UltraCart account. 
     * Update multiple coupons
     */
    updateCoupons(requestParameters: UpdateCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse>;

    /**
     * Upload one-time codes for a coupon 
     * @summary Upload one-time codes for a coupon
     * @param {number} couponOid The coupon oid to associate with the provided one-time codes.
     * @param {UploadCouponCodesRequest} uploadCouponCodesRequest One-time coupon codes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApiInterface
     */
    uploadCouponCodesRaw(requestParameters: UploadCouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadCouponCodesResponse>>;

    /**
     * Upload one-time codes for a coupon 
     * Upload one-time codes for a coupon
     */
    uploadCouponCodes(requestParameters: UploadCouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadCouponCodesResponse>;

}

/**
 * 
 */
export class CouponApi extends runtime.BaseAPI implements CouponApiInterface {

    /**
     * Delete a coupon on the UltraCart account. 
     * Delete a coupon
     */
    async deleteCouponRaw(requestParameters: DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponOid === null || requestParameters.couponOid === undefined) {
            throw new runtime.RequiredError('couponOid','Required parameter requestParameters.couponOid was null or undefined when calling deleteCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/{coupon_oid}`.replace(`{${"coupon_oid"}}`, encodeURIComponent(String(requestParameters.couponOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a coupon on the UltraCart account. 
     * Delete a coupon
     */
    async deleteCoupon(requestParameters: DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCouponRaw(requestParameters, initOverrides);
    }

    /**
     * Delete coupons on the UltraCart account. 
     * Deletes multiple coupons
     */
    async deleteCouponsByCodeRaw(requestParameters: DeleteCouponsByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponDeleteRequest === null || requestParameters.couponDeleteRequest === undefined) {
            throw new runtime.RequiredError('couponDeleteRequest','Required parameter requestParameters.couponDeleteRequest was null or undefined when calling deleteCouponsByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/by_code`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CouponDeletesRequestToJSON(requestParameters.couponDeleteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete coupons on the UltraCart account. 
     * Deletes multiple coupons
     */
    async deleteCouponsByCode(requestParameters: DeleteCouponsByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCouponsByCodeRaw(requestParameters, initOverrides);
    }

    /**
     * Delete coupons on the UltraCart account. 
     * Deletes multiple coupons
     */
    async deleteCouponsByOidRaw(requestParameters: DeleteCouponsByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponDeleteRequest === null || requestParameters.couponDeleteRequest === undefined) {
            throw new runtime.RequiredError('couponDeleteRequest','Required parameter requestParameters.couponDeleteRequest was null or undefined when calling deleteCouponsByOid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/by_oid`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CouponDeletesRequestToJSON(requestParameters.couponDeleteRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete coupons on the UltraCart account. 
     * Deletes multiple coupons
     */
    async deleteCouponsByOid(requestParameters: DeleteCouponsByOidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCouponsByOidRaw(requestParameters, initOverrides);
    }

    /**
     * Determines if a coupon merchant code already exists. 
     * Determines if a coupon merchant code already exists
     */
    async doesCouponCodeExistRaw(requestParameters: DoesCouponCodeExistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponExistsResponse>> {
        if (requestParameters.merchantCode === null || requestParameters.merchantCode === undefined) {
            throw new runtime.RequiredError('merchantCode','Required parameter requestParameters.merchantCode was null or undefined when calling doesCouponCodeExist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/merchant_code/{merchant_code}/exists`.replace(`{${"merchant_code"}}`, encodeURIComponent(String(requestParameters.merchantCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponExistsResponseFromJSON(jsonValue));
    }

    /**
     * Determines if a coupon merchant code already exists. 
     * Determines if a coupon merchant code already exists
     */
    async doesCouponCodeExist(requestParameters: DoesCouponCodeExistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponExistsResponse> {
        const response = await this.doesCouponCodeExistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate one time codes for a coupon 
     * Generates one time codes for a coupon
     */
    async generateCouponCodesRaw(requestParameters: GenerateCouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCodesResponse>> {
        if (requestParameters.couponOid === null || requestParameters.couponOid === undefined) {
            throw new runtime.RequiredError('couponOid','Required parameter requestParameters.couponOid was null or undefined when calling generateCouponCodes.');
        }

        if (requestParameters.couponCodesRequest === null || requestParameters.couponCodesRequest === undefined) {
            throw new runtime.RequiredError('couponCodesRequest','Required parameter requestParameters.couponCodesRequest was null or undefined when calling generateCouponCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/{coupon_oid}/generate_codes`.replace(`{${"coupon_oid"}}`, encodeURIComponent(String(requestParameters.couponOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponCodesRequestToJSON(requestParameters.couponCodesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponCodesResponseFromJSON(jsonValue));
    }

    /**
     * Generate one time codes for a coupon 
     * Generates one time codes for a coupon
     */
    async generateCouponCodes(requestParameters: GenerateCouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCodesResponse> {
        const response = await this.generateCouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate one time codes by merchant code 
     * Generates one time codes by merchant code
     */
    async generateOneTimeCodesByMerchantCodeRaw(requestParameters: GenerateOneTimeCodesByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCodesResponse>> {
        if (requestParameters.merchantCode === null || requestParameters.merchantCode === undefined) {
            throw new runtime.RequiredError('merchantCode','Required parameter requestParameters.merchantCode was null or undefined when calling generateOneTimeCodesByMerchantCode.');
        }

        if (requestParameters.couponCodesRequest === null || requestParameters.couponCodesRequest === undefined) {
            throw new runtime.RequiredError('couponCodesRequest','Required parameter requestParameters.couponCodesRequest was null or undefined when calling generateOneTimeCodesByMerchantCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/merchant_code/{merchant_code}/generate_codes`.replace(`{${"merchant_code"}}`, encodeURIComponent(String(requestParameters.merchantCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponCodesRequestToJSON(requestParameters.couponCodesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponCodesResponseFromJSON(jsonValue));
    }

    /**
     * Generate one time codes by merchant code 
     * Generates one time codes by merchant code
     */
    async generateOneTimeCodesByMerchantCode(requestParameters: GenerateOneTimeCodesByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCodesResponse> {
        const response = await this.generateOneTimeCodesByMerchantCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve auto apply rules and conditions 
     * Retrieve auto apply rules and conditions
     */
    async getAutoApplyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponAutoApplyConditions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/auto_apply`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponAutoApplyConditionsFromJSON(jsonValue));
    }

    /**
     * Retrieve auto apply rules and conditions 
     * Retrieve auto apply rules and conditions
     */
    async getAutoApply(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponAutoApplyConditions> {
        const response = await this.getAutoApplyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single coupon using the specified coupon profile oid. 
     * Retrieve a coupon
     */
    async getCouponRaw(requestParameters: GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>> {
        if (requestParameters.couponOid === null || requestParameters.couponOid === undefined) {
            throw new runtime.RequiredError('couponOid','Required parameter requestParameters.couponOid was null or undefined when calling getCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/{coupon_oid}`.replace(`{${"coupon_oid"}}`, encodeURIComponent(String(requestParameters.couponOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single coupon using the specified coupon profile oid. 
     * Retrieve a coupon
     */
    async getCoupon(requestParameters: GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse> {
        const response = await this.getCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single coupon using the specified merchant code. 
     * Retrieve a coupon by merchant code
     */
    async getCouponByMerchantCodeRaw(requestParameters: GetCouponByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>> {
        if (requestParameters.merchantCode === null || requestParameters.merchantCode === undefined) {
            throw new runtime.RequiredError('merchantCode','Required parameter requestParameters.merchantCode was null or undefined when calling getCouponByMerchantCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/merchant_code/{merchant_code}`.replace(`{${"merchant_code"}}`, encodeURIComponent(String(requestParameters.merchantCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single coupon using the specified merchant code. 
     * Retrieve a coupon by merchant code
     */
    async getCouponByMerchantCode(requestParameters: GetCouponByMerchantCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse> {
        const response = await this.getCouponByMerchantCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve coupons
     */
    async getCouponsRaw(requestParameters: GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.merchantCode !== undefined) {
            queryParameters['merchant_code'] = requestParameters.merchantCode;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.couponType !== undefined) {
            queryParameters['coupon_type'] = requestParameters.couponType;
        }

        if (requestParameters.startDateBegin !== undefined) {
            queryParameters['start_date_begin'] = requestParameters.startDateBegin;
        }

        if (requestParameters.startDateEnd !== undefined) {
            queryParameters['start_date_end'] = requestParameters.startDateEnd;
        }

        if (requestParameters.expirationDateBegin !== undefined) {
            queryParameters['expiration_date_begin'] = requestParameters.expirationDateBegin;
        }

        if (requestParameters.expirationDateEnd !== undefined) {
            queryParameters['expiration_date_end'] = requestParameters.expirationDateEnd;
        }

        if (requestParameters.affiliateOid !== undefined) {
            queryParameters['affiliate_oid'] = requestParameters.affiliateOid;
        }

        if (requestParameters.excludeExpired !== undefined) {
            queryParameters['exclude_expired'] = requestParameters.excludeExpired;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves coupons for this account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve coupons
     */
    async getCoupons(requestParameters: GetCouponsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse> {
        const response = await this.getCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve coupons by query
     */
    async getCouponsByQueryRaw(requestParameters: GetCouponsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>> {
        if (requestParameters.couponQuery === null || requestParameters.couponQuery === undefined) {
            throw new runtime.RequiredError('couponQuery','Required parameter requestParameters.couponQuery was null or undefined when calling getCouponsByQuery.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponQueryToJSON(requestParameters.couponQuery),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves coupons from the account.  If no parameters are specified, all coupons will be returned.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * Retrieve coupons by query
     */
    async getCouponsByQuery(requestParameters: GetCouponsByQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse> {
        const response = await this.getCouponsByQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve values needed for a coupon editor 
     * Retrieve values needed for a coupon editor
     */
    async getEditorValuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponEditorValues>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/editor_values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponEditorValuesFromJSON(jsonValue));
    }

    /**
     * Retrieve values needed for a coupon editor 
     * Retrieve values needed for a coupon editor
     */
    async getEditorValues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponEditorValues> {
        const response = await this.getEditorValuesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Insert a coupon on the UltraCart account. 
     * Insert a coupon
     */
    async insertCouponRaw(requestParameters: InsertCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>> {
        if (requestParameters.coupon === null || requestParameters.coupon === undefined) {
            throw new runtime.RequiredError('coupon','Required parameter requestParameters.coupon was null or undefined when calling insertCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponToJSON(requestParameters.coupon),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponResponseFromJSON(jsonValue));
    }

    /**
     * Insert a coupon on the UltraCart account. 
     * Insert a coupon
     */
    async insertCoupon(requestParameters: InsertCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse> {
        const response = await this.insertCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert multiple coupon on the UltraCart account. 
     * Insert multiple coupons
     */
    async insertCouponsRaw(requestParameters: InsertCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>> {
        if (requestParameters.couponsRequest === null || requestParameters.couponsRequest === undefined) {
            throw new runtime.RequiredError('couponsRequest','Required parameter requestParameters.couponsRequest was null or undefined when calling insertCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponsRequestToJSON(requestParameters.couponsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponsResponseFromJSON(jsonValue));
    }

    /**
     * Insert multiple coupon on the UltraCart account. 
     * Insert multiple coupons
     */
    async insertCoupons(requestParameters: InsertCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse> {
        const response = await this.insertCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for items to display within a coupon editor and assign to coupons 
     * Searches for items to display within a coupon editor and assign to coupons
     */
    async searchItemsRaw(requestParameters: SearchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponItemSearchResultsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.s !== undefined) {
            queryParameters['s'] = requestParameters.s;
        }

        if (requestParameters.m !== undefined) {
            queryParameters['m'] = requestParameters.m;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/searchItems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponItemSearchResultsResponseFromJSON(jsonValue));
    }

    /**
     * Searches for items to display within a coupon editor and assign to coupons 
     * Searches for items to display within a coupon editor and assign to coupons
     */
    async searchItems(requestParameters: SearchItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponItemSearchResultsResponse> {
        const response = await this.searchItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update auto apply rules and conditions 
     * Update auto apply rules and conditions
     */
    async updateAutoApplyRaw(requestParameters: UpdateAutoApplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.conditions === null || requestParameters.conditions === undefined) {
            throw new runtime.RequiredError('conditions','Required parameter requestParameters.conditions was null or undefined when calling updateAutoApply.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/auto_apply`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponAutoApplyConditionsToJSON(requestParameters.conditions),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update auto apply rules and conditions 
     * Update auto apply rules and conditions
     */
    async updateAutoApply(requestParameters: UpdateAutoApplyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAutoApplyRaw(requestParameters, initOverrides);
    }

    /**
     * Update a coupon on the UltraCart account. 
     * Update a coupon
     */
    async updateCouponRaw(requestParameters: UpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponResponse>> {
        if (requestParameters.couponOid === null || requestParameters.couponOid === undefined) {
            throw new runtime.RequiredError('couponOid','Required parameter requestParameters.couponOid was null or undefined when calling updateCoupon.');
        }

        if (requestParameters.coupon === null || requestParameters.coupon === undefined) {
            throw new runtime.RequiredError('coupon','Required parameter requestParameters.coupon was null or undefined when calling updateCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/{coupon_oid}`.replace(`{${"coupon_oid"}}`, encodeURIComponent(String(requestParameters.couponOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CouponToJSON(requestParameters.coupon),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponResponseFromJSON(jsonValue));
    }

    /**
     * Update a coupon on the UltraCart account. 
     * Update a coupon
     */
    async updateCoupon(requestParameters: UpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponResponse> {
        const response = await this.updateCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple coupon on the UltraCart account. 
     * Update multiple coupons
     */
    async updateCouponsRaw(requestParameters: UpdateCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponsResponse>> {
        if (requestParameters.couponsRequest === null || requestParameters.couponsRequest === undefined) {
            throw new runtime.RequiredError('couponsRequest','Required parameter requestParameters.couponsRequest was null or undefined when calling updateCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        if (requestParameters.async !== undefined) {
            queryParameters['_async'] = requestParameters.async;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/batch`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CouponsRequestToJSON(requestParameters.couponsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponsResponseFromJSON(jsonValue));
    }

    /**
     * Update multiple coupon on the UltraCart account. 
     * Update multiple coupons
     */
    async updateCoupons(requestParameters: UpdateCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponsResponse> {
        const response = await this.updateCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload one-time codes for a coupon 
     * Upload one-time codes for a coupon
     */
    async uploadCouponCodesRaw(requestParameters: UploadCouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadCouponCodesResponse>> {
        if (requestParameters.couponOid === null || requestParameters.couponOid === undefined) {
            throw new runtime.RequiredError('couponOid','Required parameter requestParameters.couponOid was null or undefined when calling uploadCouponCodes.');
        }

        if (requestParameters.uploadCouponCodesRequest === null || requestParameters.uploadCouponCodesRequest === undefined) {
            throw new runtime.RequiredError('uploadCouponCodesRequest','Required parameter requestParameters.uploadCouponCodesRequest was null or undefined when calling uploadCouponCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["coupon_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/coupon/coupons/{coupon_oid}/upload_codes`.replace(`{${"coupon_oid"}}`, encodeURIComponent(String(requestParameters.couponOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadCouponCodesRequestToJSON(requestParameters.uploadCouponCodesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadCouponCodesResponseFromJSON(jsonValue));
    }

    /**
     * Upload one-time codes for a coupon 
     * Upload one-time codes for a coupon
     */
    async uploadCouponCodes(requestParameters: UploadCouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadCouponCodesResponse> {
        const response = await this.uploadCouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

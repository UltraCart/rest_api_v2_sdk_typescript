/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChannelPartnerCancelResponse,
    ChannelPartnerCancelResponseFromJSON,
    ChannelPartnerCancelResponseToJSON,
    ChannelPartnerEstimateShippingResponse,
    ChannelPartnerEstimateShippingResponseFromJSON,
    ChannelPartnerEstimateShippingResponseToJSON,
    ChannelPartnerEstimateTaxResponse,
    ChannelPartnerEstimateTaxResponseFromJSON,
    ChannelPartnerEstimateTaxResponseToJSON,
    ChannelPartnerImportResponse,
    ChannelPartnerImportResponseFromJSON,
    ChannelPartnerImportResponseToJSON,
    ChannelPartnerOrder,
    ChannelPartnerOrderFromJSON,
    ChannelPartnerOrderToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface CancelOrderByChannelPartnerOrderIdRequest {
    orderId: string;
}

export interface CancelOrderByUltraCartOrderIdRequest {
    orderId: string;
}

export interface EstimateShippingForChannelPartnerOrderRequest {
    channelPartnerOrder: ChannelPartnerOrder;
}

export interface EstimateTaxForChannelPartnerOrderRequest {
    channelPartnerOrder: ChannelPartnerOrder;
}

export interface ImportChannelPartnerOrderRequest {
    channelPartnerOrder: ChannelPartnerOrder;
}

/**
 * ChannelPartnerApi - interface
 * 
 * @export
 * @interface ChannelPartnerApiInterface
 */
export interface ChannelPartnerApiInterface {
    /**
     * Cancel channel partner order by channel partner order id 
     * @summary Cancel channel partner order by channel partner order id
     * @param {string} orderId The channel partner order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    cancelOrderByChannelPartnerOrderIdRaw(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>>;

    /**
     * Cancel channel partner order by channel partner order id 
     * Cancel channel partner order by channel partner order id
     */
    cancelOrderByChannelPartnerOrderId(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse>;

    /**
     * Cancel channel partner order by UltraCart order id 
     * @summary Cancel channel partner order by UltraCart order id
     * @param {string} orderId The UltraCart order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    cancelOrderByUltraCartOrderIdRaw(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>>;

    /**
     * Cancel channel partner order by UltraCart order id 
     * Cancel channel partner order by UltraCart order id
     */
    cancelOrderByUltraCartOrderId(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse>;

    /**
     * Estimate shipping for order from a channel partner. 
     * @summary Estimate shipping for channel partner order
     * @param {ChannelPartnerOrder} channelPartnerOrder Order needing shipping estimate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    estimateShippingForChannelPartnerOrderRaw(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateShippingResponse>>;

    /**
     * Estimate shipping for order from a channel partner. 
     * Estimate shipping for channel partner order
     */
    estimateShippingForChannelPartnerOrder(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateShippingResponse>;

    /**
     * Estimate tax for order from a channel partner. 
     * @summary Estimate tax for channel partner order
     * @param {ChannelPartnerOrder} channelPartnerOrder Order needing tax estimate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    estimateTaxForChannelPartnerOrderRaw(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateTaxResponse>>;

    /**
     * Estimate tax for order from a channel partner. 
     * Estimate tax for channel partner order
     */
    estimateTaxForChannelPartnerOrder(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateTaxResponse>;

    /**
     * Insert order from a channel partner. 
     * @summary Insert channel partner order
     * @param {ChannelPartnerOrder} channelPartnerOrder Order to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    importChannelPartnerOrderRaw(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerImportResponse>>;

    /**
     * Insert order from a channel partner. 
     * Insert channel partner order
     */
    importChannelPartnerOrder(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerImportResponse>;

}

/**
 * 
 */
export class ChannelPartnerApi extends runtime.BaseAPI implements ChannelPartnerApiInterface {

    /**
     * Cancel channel partner order by channel partner order id 
     * Cancel channel partner order by channel partner order id
     */
    async cancelOrderByChannelPartnerOrderIdRaw(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrderByChannelPartnerOrderId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/cancel/by_channel_partner_order_id/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerCancelResponseFromJSON(jsonValue));
    }

    /**
     * Cancel channel partner order by channel partner order id 
     * Cancel channel partner order by channel partner order id
     */
    async cancelOrderByChannelPartnerOrderId(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse> {
        const response = await this.cancelOrderByChannelPartnerOrderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel channel partner order by UltraCart order id 
     * Cancel channel partner order by UltraCart order id
     */
    async cancelOrderByUltraCartOrderIdRaw(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrderByUltraCartOrderId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/cancel/by_ultracart_order_id/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerCancelResponseFromJSON(jsonValue));
    }

    /**
     * Cancel channel partner order by UltraCart order id 
     * Cancel channel partner order by UltraCart order id
     */
    async cancelOrderByUltraCartOrderId(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse> {
        const response = await this.cancelOrderByUltraCartOrderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Estimate shipping for order from a channel partner. 
     * Estimate shipping for channel partner order
     */
    async estimateShippingForChannelPartnerOrderRaw(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateShippingResponse>> {
        if (requestParameters.channelPartnerOrder === null || requestParameters.channelPartnerOrder === undefined) {
            throw new runtime.RequiredError('channelPartnerOrder','Required parameter requestParameters.channelPartnerOrder was null or undefined when calling estimateShippingForChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/estimate_shipping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerOrderToJSON(requestParameters.channelPartnerOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerEstimateShippingResponseFromJSON(jsonValue));
    }

    /**
     * Estimate shipping for order from a channel partner. 
     * Estimate shipping for channel partner order
     */
    async estimateShippingForChannelPartnerOrder(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateShippingResponse> {
        const response = await this.estimateShippingForChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Estimate tax for order from a channel partner. 
     * Estimate tax for channel partner order
     */
    async estimateTaxForChannelPartnerOrderRaw(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateTaxResponse>> {
        if (requestParameters.channelPartnerOrder === null || requestParameters.channelPartnerOrder === undefined) {
            throw new runtime.RequiredError('channelPartnerOrder','Required parameter requestParameters.channelPartnerOrder was null or undefined when calling estimateTaxForChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/estimate_tax`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerOrderToJSON(requestParameters.channelPartnerOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerEstimateTaxResponseFromJSON(jsonValue));
    }

    /**
     * Estimate tax for order from a channel partner. 
     * Estimate tax for channel partner order
     */
    async estimateTaxForChannelPartnerOrder(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateTaxResponse> {
        const response = await this.estimateTaxForChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert order from a channel partner. 
     * Insert channel partner order
     */
    async importChannelPartnerOrderRaw(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerImportResponse>> {
        if (requestParameters.channelPartnerOrder === null || requestParameters.channelPartnerOrder === undefined) {
            throw new runtime.RequiredError('channelPartnerOrder','Required parameter requestParameters.channelPartnerOrder was null or undefined when calling importChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerOrderToJSON(requestParameters.channelPartnerOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerImportResponseFromJSON(jsonValue));
    }

    /**
     * Insert order from a channel partner. 
     * Insert channel partner order
     */
    async importChannelPartnerOrder(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerImportResponse> {
        const response = await this.importChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

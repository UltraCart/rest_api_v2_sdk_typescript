/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChanelPartnerReasonCodesResponse,
    ChanelPartnerReasonCodesResponseFromJSON,
    ChanelPartnerReasonCodesResponseToJSON,
    ChannelPartnerCancelResponse,
    ChannelPartnerCancelResponseFromJSON,
    ChannelPartnerCancelResponseToJSON,
    ChannelPartnerEstimateShippingResponse,
    ChannelPartnerEstimateShippingResponseFromJSON,
    ChannelPartnerEstimateShippingResponseToJSON,
    ChannelPartnerEstimateTaxResponse,
    ChannelPartnerEstimateTaxResponseFromJSON,
    ChannelPartnerEstimateTaxResponseToJSON,
    ChannelPartnerImportResponse,
    ChannelPartnerImportResponseFromJSON,
    ChannelPartnerImportResponseToJSON,
    ChannelPartnerOrder,
    ChannelPartnerOrderFromJSON,
    ChannelPartnerOrderToJSON,
    ChannelPartnerShipToPreference,
    ChannelPartnerShipToPreferenceFromJSON,
    ChannelPartnerShipToPreferenceToJSON,
    ChannelPartnerShipToPreferenceResponse,
    ChannelPartnerShipToPreferenceResponseFromJSON,
    ChannelPartnerShipToPreferenceResponseToJSON,
    ChannelPartnerShipToPreferencesResponse,
    ChannelPartnerShipToPreferencesResponseFromJSON,
    ChannelPartnerShipToPreferencesResponseToJSON,
    ChannelPartnersResponse,
    ChannelPartnersResponseFromJSON,
    ChannelPartnersResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    OrderResponse,
    OrderResponseFromJSON,
    OrderResponseToJSON,
} from '../models';

export interface CancelOrderByChannelPartnerOrderIdRequest {
    orderId: string;
}

export interface CancelOrderByUltraCartOrderIdRequest {
    orderId: string;
}

export interface DeleteChannelPartnerShipToPreferenceRequest {
    channelPartnerOid: number;
    channelPartnerShipToPreferenceOid: number;
}

export interface EstimateShippingForChannelPartnerOrderRequest {
    channelPartnerOrder: ChannelPartnerOrder;
}

export interface EstimateTaxForChannelPartnerOrderRequest {
    channelPartnerOrder: ChannelPartnerOrder;
}

export interface GetChannelPartnerOrderRequest {
    orderId: string;
    expand?: string;
}

export interface GetChannelPartnerOrderByChannelPartnerOrderIdRequest {
    orderId: string;
    expand?: string;
}

export interface GetChannelPartnerReasonCodesRequest {
    channelPartnerOid: number;
}

export interface GetChannelPartnerShipToPreferenceRequest {
    channelPartnerOid: number;
    channelPartnerShipToPreferenceOid: number;
}

export interface GetChannelPartnerShipToPreferencesRequest {
    channelPartnerOid: number;
}

export interface ImportChannelPartnerOrderRequest {
    channelPartnerOrder: ChannelPartnerOrder;
}

export interface InsertChannelPartnerShipToPreferenceRequest {
    channelPartnerOid: number;
    shipToPreference: ChannelPartnerShipToPreference;
}

export interface RefundChannelPartnerOrderRequest {
    orderId: string;
    order: Order;
    rejectAfterRefund?: boolean;
    skipCustomerNotification?: boolean;
    autoOrderCancel?: boolean;
    manualRefund?: boolean;
    reverseAffiliateTransactions?: boolean;
    issueStoreCredit?: boolean;
    autoOrderCancelReason?: string;
    expand?: string;
}

export interface UpdateChannelPartnerShipToPreferenceRequest {
    channelPartnerOid: number;
    channelPartnerShipToPreferenceOid: number;
    shipToPreference: ChannelPartnerShipToPreference;
}

/**
 * ChannelPartnerApi - interface
 * 
 * @export
 * @interface ChannelPartnerApiInterface
 */
export interface ChannelPartnerApiInterface {
    /**
     * Cancel channel partner order by channel partner order id 
     * @summary Cancel channel partner order by channel partner order id
     * @param {string} orderId The channel partner order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    cancelOrderByChannelPartnerOrderIdRaw(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>>;

    /**
     * Cancel channel partner order by channel partner order id 
     * Cancel channel partner order by channel partner order id
     */
    cancelOrderByChannelPartnerOrderId(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse>;

    /**
     * Cancel channel partner order by UltraCart order id 
     * @summary Cancel channel partner order by UltraCart order id
     * @param {string} orderId The UltraCart order id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    cancelOrderByUltraCartOrderIdRaw(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>>;

    /**
     * Cancel channel partner order by UltraCart order id 
     * Cancel channel partner order by UltraCart order id
     */
    cancelOrderByUltraCartOrderId(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse>;

    /**
     * Delete a ship to preference record for the channel partner. 
     * @summary Delete a ship to preference record for the channel partner.
     * @param {number} channelPartnerOid 
     * @param {number} channelPartnerShipToPreferenceOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    deleteChannelPartnerShipToPreferenceRaw(requestParameters: DeleteChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a ship to preference record for the channel partner. 
     * Delete a ship to preference record for the channel partner.
     */
    deleteChannelPartnerShipToPreference(requestParameters: DeleteChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Estimate shipping for order from a channel partner. 
     * @summary Estimate shipping for channel partner order
     * @param {ChannelPartnerOrder} channelPartnerOrder Order needing shipping estimate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    estimateShippingForChannelPartnerOrderRaw(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateShippingResponse>>;

    /**
     * Estimate shipping for order from a channel partner. 
     * Estimate shipping for channel partner order
     */
    estimateShippingForChannelPartnerOrder(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateShippingResponse>;

    /**
     * Estimate tax for order from a channel partner. 
     * @summary Estimate tax for channel partner order
     * @param {ChannelPartnerOrder} channelPartnerOrder Order needing tax estimate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    estimateTaxForChannelPartnerOrderRaw(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateTaxResponse>>;

    /**
     * Estimate tax for order from a channel partner. 
     * Estimate tax for channel partner order
     */
    estimateTaxForChannelPartnerOrder(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateTaxResponse>;

    /**
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * @summary Retrieve a channel partner order
     * @param {string} orderId The order id to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    getChannelPartnerOrderRaw(requestParameters: GetChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * Retrieve a channel partner order
     */
    getChannelPartnerOrder(requestParameters: GetChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * @summary Retrieve a channel partner order by the channel partner order id
     * @param {string} orderId The channel partner order id to retrieve.
     * @param {string} [expand] The object expansion to perform on the result.  See OrderApi.getOrder documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    getChannelPartnerOrderByChannelPartnerOrderIdRaw(requestParameters: GetChannelPartnerOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * Retrieve a channel partner order by the channel partner order id
     */
    getChannelPartnerOrderByChannelPartnerOrderId(requestParameters: GetChannelPartnerOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Retrieve reject and refund reason codes. 
     * @summary Retrieve reject and refund reason codes.
     * @param {number} channelPartnerOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    getChannelPartnerReasonCodesRaw(requestParameters: GetChannelPartnerReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChanelPartnerReasonCodesResponse>>;

    /**
     * Retrieve reject and refund reason codes. 
     * Retrieve reject and refund reason codes.
     */
    getChannelPartnerReasonCodes(requestParameters: GetChannelPartnerReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChanelPartnerReasonCodesResponse>;

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * @summary Retrieve the ship to preference associated with the channel partner and the specific id.
     * @param {number} channelPartnerOid 
     * @param {number} channelPartnerShipToPreferenceOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    getChannelPartnerShipToPreferenceRaw(requestParameters: GetChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferenceResponse>>;

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     */
    getChannelPartnerShipToPreference(requestParameters: GetChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferenceResponse>;

    /**
     * Retrieve the ship to preferences associated with the channel partner. 
     * @summary Retrieve the ship to preferences associated with the channel partner.
     * @param {number} channelPartnerOid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    getChannelPartnerShipToPreferencesRaw(requestParameters: GetChannelPartnerShipToPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferencesResponse>>;

    /**
     * Retrieve the ship to preferences associated with the channel partner. 
     * Retrieve the ship to preferences associated with the channel partner.
     */
    getChannelPartnerShipToPreferences(requestParameters: GetChannelPartnerShipToPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferencesResponse>;

    /**
     * Retrieve the channel partners configured on the account. 
     * @summary Retrieve the channel partners configured on the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    getChannelPartnersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnersResponse>>;

    /**
     * Retrieve the channel partners configured on the account. 
     * Retrieve the channel partners configured on the account.
     */
    getChannelPartners(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnersResponse>;

    /**
     * Insert order from a channel partner. 
     * @summary Insert channel partner order
     * @param {ChannelPartnerOrder} channelPartnerOrder Order to insert
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    importChannelPartnerOrderRaw(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerImportResponse>>;

    /**
     * Insert order from a channel partner. 
     * Insert channel partner order
     */
    importChannelPartnerOrder(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerImportResponse>;

    /**
     * Insert a ship to preference record for the channel partner. 
     * @summary Insert a ship to preference record for the channel partner.
     * @param {number} channelPartnerOid 
     * @param {ChannelPartnerShipToPreference} shipToPreference Ship to preference to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    insertChannelPartnerShipToPreferenceRaw(requestParameters: InsertChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferenceResponse>>;

    /**
     * Insert a ship to preference record for the channel partner. 
     * Insert a ship to preference record for the channel partner.
     */
    insertChannelPartnerShipToPreference(requestParameters: InsertChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferenceResponse>;

    /**
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * @summary Refund a channel partner order
     * @param {string} orderId The order id to refund.
     * @param {Order} order Order to refund
     * @param {boolean} [rejectAfterRefund] Reject order after refund
     * @param {boolean} [skipCustomerNotification] Skip customer email notification
     * @param {boolean} [autoOrderCancel] Cancel associated auto orders
     * @param {boolean} [manualRefund] Consider a manual refund done externally
     * @param {boolean} [reverseAffiliateTransactions] Reverse affiliate transactions
     * @param {boolean} [issueStoreCredit] Issue a store credit instead of refunding the original payment method, loyalty must be configured on merchant account
     * @param {string} [autoOrderCancelReason] Reason for auto orders cancellation
     * @param {string} [expand] The object expansion to perform on the result.  See OrderApi.refundOrder documentation for examples
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    refundChannelPartnerOrderRaw(requestParameters: RefundChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;

    /**
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * Refund a channel partner order
     */
    refundChannelPartnerOrder(requestParameters: RefundChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;

    /**
     * Update a ship to preference record for the channel partner. 
     * @summary Update a ship to preference record for the channel partner.
     * @param {number} channelPartnerOid 
     * @param {number} channelPartnerShipToPreferenceOid 
     * @param {ChannelPartnerShipToPreference} shipToPreference Ship to preference to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPartnerApiInterface
     */
    updateChannelPartnerShipToPreferenceRaw(requestParameters: UpdateChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferenceResponse>>;

    /**
     * Update a ship to preference record for the channel partner. 
     * Update a ship to preference record for the channel partner.
     */
    updateChannelPartnerShipToPreference(requestParameters: UpdateChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferenceResponse>;

}

/**
 * 
 */
export class ChannelPartnerApi extends runtime.BaseAPI implements ChannelPartnerApiInterface {

    /**
     * Cancel channel partner order by channel partner order id 
     * Cancel channel partner order by channel partner order id
     */
    async cancelOrderByChannelPartnerOrderIdRaw(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrderByChannelPartnerOrderId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/cancel/by_channel_partner_order_id/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerCancelResponseFromJSON(jsonValue));
    }

    /**
     * Cancel channel partner order by channel partner order id 
     * Cancel channel partner order by channel partner order id
     */
    async cancelOrderByChannelPartnerOrderId(requestParameters: CancelOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse> {
        const response = await this.cancelOrderByChannelPartnerOrderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel channel partner order by UltraCart order id 
     * Cancel channel partner order by UltraCart order id
     */
    async cancelOrderByUltraCartOrderIdRaw(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerCancelResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrderByUltraCartOrderId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/cancel/by_ultracart_order_id/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerCancelResponseFromJSON(jsonValue));
    }

    /**
     * Cancel channel partner order by UltraCart order id 
     * Cancel channel partner order by UltraCart order id
     */
    async cancelOrderByUltraCartOrderId(requestParameters: CancelOrderByUltraCartOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerCancelResponse> {
        const response = await this.cancelOrderByUltraCartOrderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a ship to preference record for the channel partner. 
     * Delete a ship to preference record for the channel partner.
     */
    async deleteChannelPartnerShipToPreferenceRaw(requestParameters: DeleteChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelPartnerOid === null || requestParameters.channelPartnerOid === undefined) {
            throw new runtime.RequiredError('channelPartnerOid','Required parameter requestParameters.channelPartnerOid was null or undefined when calling deleteChannelPartnerShipToPreference.');
        }

        if (requestParameters.channelPartnerShipToPreferenceOid === null || requestParameters.channelPartnerShipToPreferenceOid === undefined) {
            throw new runtime.RequiredError('channelPartnerShipToPreferenceOid','Required parameter requestParameters.channelPartnerShipToPreferenceOid was null or undefined when calling deleteChannelPartnerShipToPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}`.replace(`{${"channel_partner_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerOid))).replace(`{${"channel_partner_ship_to_preference_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerShipToPreferenceOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a ship to preference record for the channel partner. 
     * Delete a ship to preference record for the channel partner.
     */
    async deleteChannelPartnerShipToPreference(requestParameters: DeleteChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteChannelPartnerShipToPreferenceRaw(requestParameters, initOverrides);
    }

    /**
     * Estimate shipping for order from a channel partner. 
     * Estimate shipping for channel partner order
     */
    async estimateShippingForChannelPartnerOrderRaw(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateShippingResponse>> {
        if (requestParameters.channelPartnerOrder === null || requestParameters.channelPartnerOrder === undefined) {
            throw new runtime.RequiredError('channelPartnerOrder','Required parameter requestParameters.channelPartnerOrder was null or undefined when calling estimateShippingForChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/estimate_shipping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerOrderToJSON(requestParameters.channelPartnerOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerEstimateShippingResponseFromJSON(jsonValue));
    }

    /**
     * Estimate shipping for order from a channel partner. 
     * Estimate shipping for channel partner order
     */
    async estimateShippingForChannelPartnerOrder(requestParameters: EstimateShippingForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateShippingResponse> {
        const response = await this.estimateShippingForChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Estimate tax for order from a channel partner. 
     * Estimate tax for channel partner order
     */
    async estimateTaxForChannelPartnerOrderRaw(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerEstimateTaxResponse>> {
        if (requestParameters.channelPartnerOrder === null || requestParameters.channelPartnerOrder === undefined) {
            throw new runtime.RequiredError('channelPartnerOrder','Required parameter requestParameters.channelPartnerOrder was null or undefined when calling estimateTaxForChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/estimate_tax`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerOrderToJSON(requestParameters.channelPartnerOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerEstimateTaxResponseFromJSON(jsonValue));
    }

    /**
     * Estimate tax for order from a channel partner. 
     * Estimate tax for channel partner order
     */
    async estimateTaxForChannelPartnerOrder(requestParameters: EstimateTaxForChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerEstimateTaxResponse> {
        const response = await this.estimateTaxForChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * Retrieve a channel partner order
     */
    async getChannelPartnerOrderRaw(requestParameters: GetChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/orders/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single order using the specified order id.  Only orders belonging to this channel partner may be retrieved. 
     * Retrieve a channel partner order
     */
    async getChannelPartnerOrder(requestParameters: GetChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.getChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * Retrieve a channel partner order by the channel partner order id
     */
    async getChannelPartnerOrderByChannelPartnerOrderIdRaw(requestParameters: GetChannelPartnerOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getChannelPartnerOrderByChannelPartnerOrderId.');
        }

        const queryParameters: any = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/orders/by_channel_partner_order_id/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a single order using the channel partner order id, not the ultracart order id.  Only orders belonging to this channel partner may be retrieved. 
     * Retrieve a channel partner order by the channel partner order id
     */
    async getChannelPartnerOrderByChannelPartnerOrderId(requestParameters: GetChannelPartnerOrderByChannelPartnerOrderIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.getChannelPartnerOrderByChannelPartnerOrderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve reject and refund reason codes. 
     * Retrieve reject and refund reason codes.
     */
    async getChannelPartnerReasonCodesRaw(requestParameters: GetChannelPartnerReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChanelPartnerReasonCodesResponse>> {
        if (requestParameters.channelPartnerOid === null || requestParameters.channelPartnerOid === undefined) {
            throw new runtime.RequiredError('channelPartnerOid','Required parameter requestParameters.channelPartnerOid was null or undefined when calling getChannelPartnerReasonCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners/{channel_partner_oid}/reason_codes`.replace(`{${"channel_partner_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChanelPartnerReasonCodesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve reject and refund reason codes. 
     * Retrieve reject and refund reason codes.
     */
    async getChannelPartnerReasonCodes(requestParameters: GetChannelPartnerReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChanelPartnerReasonCodesResponse> {
        const response = await this.getChannelPartnerReasonCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     */
    async getChannelPartnerShipToPreferenceRaw(requestParameters: GetChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferenceResponse>> {
        if (requestParameters.channelPartnerOid === null || requestParameters.channelPartnerOid === undefined) {
            throw new runtime.RequiredError('channelPartnerOid','Required parameter requestParameters.channelPartnerOid was null or undefined when calling getChannelPartnerShipToPreference.');
        }

        if (requestParameters.channelPartnerShipToPreferenceOid === null || requestParameters.channelPartnerShipToPreferenceOid === undefined) {
            throw new runtime.RequiredError('channelPartnerShipToPreferenceOid','Required parameter requestParameters.channelPartnerShipToPreferenceOid was null or undefined when calling getChannelPartnerShipToPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}`.replace(`{${"channel_partner_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerOid))).replace(`{${"channel_partner_ship_to_preference_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerShipToPreferenceOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerShipToPreferenceResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the ship to preference associated with the channel partner and the specific id. 
     * Retrieve the ship to preference associated with the channel partner and the specific id.
     */
    async getChannelPartnerShipToPreference(requestParameters: GetChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferenceResponse> {
        const response = await this.getChannelPartnerShipToPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the ship to preferences associated with the channel partner. 
     * Retrieve the ship to preferences associated with the channel partner.
     */
    async getChannelPartnerShipToPreferencesRaw(requestParameters: GetChannelPartnerShipToPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferencesResponse>> {
        if (requestParameters.channelPartnerOid === null || requestParameters.channelPartnerOid === undefined) {
            throw new runtime.RequiredError('channelPartnerOid','Required parameter requestParameters.channelPartnerOid was null or undefined when calling getChannelPartnerShipToPreferences.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences`.replace(`{${"channel_partner_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerShipToPreferencesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the ship to preferences associated with the channel partner. 
     * Retrieve the ship to preferences associated with the channel partner.
     */
    async getChannelPartnerShipToPreferences(requestParameters: GetChannelPartnerShipToPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferencesResponse> {
        const response = await this.getChannelPartnerShipToPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the channel partners configured on the account. 
     * Retrieve the channel partners configured on the account.
     */
    async getChannelPartnersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnersResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the channel partners configured on the account. 
     * Retrieve the channel partners configured on the account.
     */
    async getChannelPartners(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnersResponse> {
        const response = await this.getChannelPartnersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Insert order from a channel partner. 
     * Insert channel partner order
     */
    async importChannelPartnerOrderRaw(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerImportResponse>> {
        if (requestParameters.channelPartnerOrder === null || requestParameters.channelPartnerOrder === undefined) {
            throw new runtime.RequiredError('channelPartnerOrder','Required parameter requestParameters.channelPartnerOrder was null or undefined when calling importChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerOrderToJSON(requestParameters.channelPartnerOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerImportResponseFromJSON(jsonValue));
    }

    /**
     * Insert order from a channel partner. 
     * Insert channel partner order
     */
    async importChannelPartnerOrder(requestParameters: ImportChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerImportResponse> {
        const response = await this.importChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert a ship to preference record for the channel partner. 
     * Insert a ship to preference record for the channel partner.
     */
    async insertChannelPartnerShipToPreferenceRaw(requestParameters: InsertChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferenceResponse>> {
        if (requestParameters.channelPartnerOid === null || requestParameters.channelPartnerOid === undefined) {
            throw new runtime.RequiredError('channelPartnerOid','Required parameter requestParameters.channelPartnerOid was null or undefined when calling insertChannelPartnerShipToPreference.');
        }

        if (requestParameters.shipToPreference === null || requestParameters.shipToPreference === undefined) {
            throw new runtime.RequiredError('shipToPreference','Required parameter requestParameters.shipToPreference was null or undefined when calling insertChannelPartnerShipToPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences`.replace(`{${"channel_partner_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerOid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerShipToPreferenceToJSON(requestParameters.shipToPreference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerShipToPreferenceResponseFromJSON(jsonValue));
    }

    /**
     * Insert a ship to preference record for the channel partner. 
     * Insert a ship to preference record for the channel partner.
     */
    async insertChannelPartnerShipToPreference(requestParameters: InsertChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferenceResponse> {
        const response = await this.insertChannelPartnerShipToPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * Refund a channel partner order
     */
    async refundChannelPartnerOrderRaw(requestParameters: RefundChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling refundChannelPartnerOrder.');
        }

        if (requestParameters.order === null || requestParameters.order === undefined) {
            throw new runtime.RequiredError('order','Required parameter requestParameters.order was null or undefined when calling refundChannelPartnerOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.rejectAfterRefund !== undefined) {
            queryParameters['reject_after_refund'] = requestParameters.rejectAfterRefund;
        }

        if (requestParameters.skipCustomerNotification !== undefined) {
            queryParameters['skip_customer_notification'] = requestParameters.skipCustomerNotification;
        }

        if (requestParameters.autoOrderCancel !== undefined) {
            queryParameters['auto_order_cancel'] = requestParameters.autoOrderCancel;
        }

        if (requestParameters.manualRefund !== undefined) {
            queryParameters['manual_refund'] = requestParameters.manualRefund;
        }

        if (requestParameters.reverseAffiliateTransactions !== undefined) {
            queryParameters['reverse_affiliate_transactions'] = requestParameters.reverseAffiliateTransactions;
        }

        if (requestParameters.issueStoreCredit !== undefined) {
            queryParameters['issue_store_credit'] = requestParameters.issueStoreCredit;
        }

        if (requestParameters.autoOrderCancelReason !== undefined) {
            queryParameters['auto_order_cancel_reason'] = requestParameters.autoOrderCancelReason;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['_expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/orders/{order_id}/refund`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseFromJSON(jsonValue));
    }

    /**
     * Perform a refund operation on a channel partner order and then update the order if successful.  All of the object properties ending in _refunded should be the TOTAL amount that should end up being refunded.  UltraCart will calculate the actual amount to refund based upon the prior refunds. 
     * Refund a channel partner order
     */
    async refundChannelPartnerOrder(requestParameters: RefundChannelPartnerOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse> {
        const response = await this.refundChannelPartnerOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a ship to preference record for the channel partner. 
     * Update a ship to preference record for the channel partner.
     */
    async updateChannelPartnerShipToPreferenceRaw(requestParameters: UpdateChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPartnerShipToPreferenceResponse>> {
        if (requestParameters.channelPartnerOid === null || requestParameters.channelPartnerOid === undefined) {
            throw new runtime.RequiredError('channelPartnerOid','Required parameter requestParameters.channelPartnerOid was null or undefined when calling updateChannelPartnerShipToPreference.');
        }

        if (requestParameters.channelPartnerShipToPreferenceOid === null || requestParameters.channelPartnerShipToPreferenceOid === undefined) {
            throw new runtime.RequiredError('channelPartnerShipToPreferenceOid','Required parameter requestParameters.channelPartnerShipToPreferenceOid was null or undefined when calling updateChannelPartnerShipToPreference.');
        }

        if (requestParameters.shipToPreference === null || requestParameters.shipToPreference === undefined) {
            throw new runtime.RequiredError('shipToPreference','Required parameter requestParameters.shipToPreference was null or undefined when calling updateChannelPartnerShipToPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["channel_partner_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/channel_partner/channel_partners/{channel_partner_oid}/ship_to_preferences/{channel_partner_ship_to_preference_oid}`.replace(`{${"channel_partner_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerOid))).replace(`{${"channel_partner_ship_to_preference_oid"}}`, encodeURIComponent(String(requestParameters.channelPartnerShipToPreferenceOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelPartnerShipToPreferenceToJSON(requestParameters.shipToPreference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPartnerShipToPreferenceResponseFromJSON(jsonValue));
    }

    /**
     * Update a ship to preference record for the channel partner. 
     * Update a ship to preference record for the channel partner.
     */
    async updateChannelPartnerShipToPreference(requestParameters: UpdateChannelPartnerShipToPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPartnerShipToPreferenceResponse> {
        const response = await this.updateChannelPartnerShipToPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

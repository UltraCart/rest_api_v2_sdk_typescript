/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SingleSignOnAuthorizeRequest,
    SingleSignOnAuthorizeRequestFromJSON,
    SingleSignOnAuthorizeRequestToJSON,
    SingleSignOnAuthorizeResponse,
    SingleSignOnAuthorizeResponseFromJSON,
    SingleSignOnAuthorizeResponseToJSON,
    SingleSignOnTokenRequest,
    SingleSignOnTokenRequestFromJSON,
    SingleSignOnTokenRequestToJSON,
    SingleSignOnTokenResponse,
    SingleSignOnTokenResponseFromJSON,
    SingleSignOnTokenResponseToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface SsoAuthorizeRequest {
    authorizationRequest: SingleSignOnAuthorizeRequest;
}

export interface SsoTokenRequest {
    tokenRequest: SingleSignOnTokenRequest;
}

/**
 * SsoApi - interface
 * 
 * @export
 * @interface SsoApiInterface
 */
export interface SsoApiInterface {
    /**
     * This is the equivalent of logging out of the single sign on session 
     * @summary Get single sign on session user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApiInterface
     */
    getSsoSessionUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * This is the equivalent of logging out of the single sign on session 
     * Get single sign on session user
     */
    getSsoSessionUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * Starts the process of authorizing a single sign on session. 
     * @summary Authorize a single sign on session
     * @param {SingleSignOnAuthorizeRequest} authorizationRequest Authorization request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApiInterface
     */
    ssoAuthorizeRaw(requestParameters: SsoAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleSignOnAuthorizeResponse>>;

    /**
     * Starts the process of authorizing a single sign on session. 
     * Authorize a single sign on session
     */
    ssoAuthorize(requestParameters: SsoAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleSignOnAuthorizeResponse>;

    /**
     * This is the equivalent of logging out of the single sign on session 
     * @summary Revoke single sign on session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApiInterface
     */
    ssoSessionRevokeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * This is the equivalent of logging out of the single sign on session 
     * Revoke single sign on session
     */
    ssoSessionRevoke(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with 
     * @summary Exchange a single sign on code for a simple key token
     * @param {SingleSignOnTokenRequest} tokenRequest Token request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SsoApiInterface
     */
    ssoTokenRaw(requestParameters: SsoTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleSignOnTokenResponse>>;

    /**
     * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with 
     * Exchange a single sign on code for a simple key token
     */
    ssoToken(requestParameters: SsoTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleSignOnTokenResponse>;

}

/**
 * 
 */
export class SsoApi extends runtime.BaseAPI implements SsoApiInterface {

    /**
     * This is the equivalent of logging out of the single sign on session 
     * Get single sign on session user
     */
    async getSsoSessionUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/sso/session/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * This is the equivalent of logging out of the single sign on session 
     * Get single sign on session user
     */
    async getSsoSessionUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getSsoSessionUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Starts the process of authorizing a single sign on session. 
     * Authorize a single sign on session
     */
    async ssoAuthorizeRaw(requestParameters: SsoAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleSignOnAuthorizeResponse>> {
        if (requestParameters.authorizationRequest === null || requestParameters.authorizationRequest === undefined) {
            throw new runtime.RequiredError('authorizationRequest','Required parameter requestParameters.authorizationRequest was null or undefined when calling ssoAuthorize.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/sso/authorize`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SingleSignOnAuthorizeRequestToJSON(requestParameters.authorizationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleSignOnAuthorizeResponseFromJSON(jsonValue));
    }

    /**
     * Starts the process of authorizing a single sign on session. 
     * Authorize a single sign on session
     */
    async ssoAuthorize(requestParameters: SsoAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleSignOnAuthorizeResponse> {
        const response = await this.ssoAuthorizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This is the equivalent of logging out of the single sign on session 
     * Revoke single sign on session
     */
    async ssoSessionRevokeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/sso/session/revoke`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This is the equivalent of logging out of the single sign on session 
     * Revoke single sign on session
     */
    async ssoSessionRevoke(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ssoSessionRevokeRaw(initOverrides);
    }

    /**
     * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with 
     * Exchange a single sign on code for a simple key token
     */
    async ssoTokenRaw(requestParameters: SsoTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SingleSignOnTokenResponse>> {
        if (requestParameters.tokenRequest === null || requestParameters.tokenRequest === undefined) {
            throw new runtime.RequiredError('tokenRequest','Required parameter requestParameters.tokenRequest was null or undefined when calling ssoToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/sso/token`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SingleSignOnTokenRequestToJSON(requestParameters.tokenRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SingleSignOnTokenResponseFromJSON(jsonValue));
    }

    /**
     * Called by your application after receiving the code back on the redirect URI to obtain a simple key token to make API calls with 
     * Exchange a single sign on code for a simple key token
     */
    async ssoToken(requestParameters: SsoTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SingleSignOnTokenResponse> {
        const response = await this.ssoTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

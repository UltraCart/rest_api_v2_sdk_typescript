/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Webhook,
    WebhookFromJSON,
    WebhookToJSON,
    WebhookLogResponse,
    WebhookLogResponseFromJSON,
    WebhookLogResponseToJSON,
    WebhookLogSummariesResponse,
    WebhookLogSummariesResponseFromJSON,
    WebhookLogSummariesResponseToJSON,
    WebhookReflowResponse,
    WebhookReflowResponseFromJSON,
    WebhookReflowResponseToJSON,
    WebhookResponse,
    WebhookResponseFromJSON,
    WebhookResponseToJSON,
    WebhooksResponse,
    WebhooksResponseFromJSON,
    WebhooksResponseToJSON,
} from '../models';

export interface DeleteWebhookRequest {
    webhookOid: number;
}

export interface DeleteWebhookByUrlRequest {
    webhook: Webhook;
}

export interface GetWebhookLogRequest {
    webhookOid: number;
    requestId: string;
}

export interface GetWebhookLogSummariesRequest {
    webhookOid: number;
    limit?: number;
    offset?: number;
    since?: string;
}

export interface GetWebhooksRequest {
    limit?: number;
    offset?: number;
    sort?: string;
    placeholders?: boolean;
}

export interface InsertWebhookRequest {
    webhook: Webhook;
    placeholders?: boolean;
}

export interface ResendEventRequest {
    webhookOid: number;
    eventName: string;
}

export interface UpdateWebhookRequest {
    webhookOid: number;
    webhook: Webhook;
    placeholders?: boolean;
}

/**
 * WebhookApi - interface
 * 
 * @export
 * @interface WebhookApiInterface
 */
export interface WebhookApiInterface {
    /**
     * Delete a webhook on the UltraCart account. 
     * @summary Delete a webhook
     * @param {number} webhookOid The webhook oid to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a webhook on the UltraCart account. 
     * Delete a webhook
     */
    deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * @summary Delete a webhook by URL
     * @param {Webhook} webhook Webhook to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    deleteWebhookByUrlRaw(requestParameters: DeleteWebhookByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;

    /**
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * Delete a webhook by URL
     */
    deleteWebhookByUrl(requestParameters: DeleteWebhookByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;

    /**
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @summary Retrieve an individual log
     * @param {number} webhookOid The webhook oid that owns the log.
     * @param {string} requestId The request id associated with the log to view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    getWebhookLogRaw(requestParameters: GetWebhookLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookLogResponse>>;

    /**
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * Retrieve an individual log
     */
    getWebhookLog(requestParameters: GetWebhookLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookLogResponse>;

    /**
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @summary Retrieve the log summaries
     * @param {number} webhookOid The webhook oid to retrieve log summaries for.
     * @param {number} [limit] The maximum number of records to return on this one API call.
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [since] Fetch log summaries that have been delivered since this date/time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    getWebhookLogSummariesRaw(requestParameters: GetWebhookLogSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookLogSummariesResponse>>;

    /**
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * Retrieve the log summaries
     */
    getWebhookLogSummaries(requestParameters: GetWebhookLogSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookLogSummariesResponse>;

    /**
     * Retrieves the webhooks associated with this application. 
     * @summary Retrieve webhooks
     * @param {number} [limit] The maximum number of records to return on this one API call.
     * @param {number} [offset] Pagination of the record set.  Offset is a zero based index.
     * @param {string} [sort] The sort order of the webhooks.  See documentation for examples
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    getWebhooksRaw(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhooksResponse>>;

    /**
     * Retrieves the webhooks associated with this application. 
     * Retrieve webhooks
     */
    getWebhooks(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhooksResponse>;

    /**
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * @summary Add a webhook
     * @param {Webhook} webhook Webhook to create
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    insertWebhookRaw(requestParameters: InsertWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;

    /**
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * Add a webhook
     */
    insertWebhook(requestParameters: InsertWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;

    /**
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @summary Resend events to the webhook endpoint.
     * @param {number} webhookOid The webhook oid that is receiving the reflowed events.
     * @param {string} eventName The event to reflow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    resendEventRaw(requestParameters: ResendEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookReflowResponse>>;

    /**
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * Resend events to the webhook endpoint.
     */
    resendEvent(requestParameters: ResendEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookReflowResponse>;

    /**
     * Update a webhook on the account 
     * @summary Update a webhook
     * @param {number} webhookOid The webhook oid to update.
     * @param {Webhook} webhook Webhook to update
     * @param {boolean} [placeholders] Whether or not placeholder values should be returned in the result.  Useful for UIs that consume this REST API.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApiInterface
     */
    updateWebhookRaw(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>>;

    /**
     * Update a webhook on the account 
     * Update a webhook
     */
    updateWebhook(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse>;

}

/**
 * 
 */
export class WebhookApi extends runtime.BaseAPI implements WebhookApiInterface {

    /**
     * Delete a webhook on the UltraCart account. 
     * Delete a webhook
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookOid === null || requestParameters.webhookOid === undefined) {
            throw new runtime.RequiredError('webhookOid','Required parameter requestParameters.webhookOid was null or undefined when calling deleteWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks/{webhookOid}`.replace(`{${"webhookOid"}}`, encodeURIComponent(String(requestParameters.webhookOid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a webhook on the UltraCart account. 
     * Delete a webhook
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * Delete a webhook by URL
     */
    async deleteWebhookByUrlRaw(requestParameters: DeleteWebhookByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>> {
        if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
            throw new runtime.RequiredError('webhook','Required parameter requestParameters.webhook was null or undefined when calling deleteWebhookByUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookToJSON(requestParameters.webhook),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookResponseFromJSON(jsonValue));
    }

    /**
     * Delete a webhook based upon the URL on the webhook_url matching an existing webhook. 
     * Delete a webhook by URL
     */
    async deleteWebhookByUrl(requestParameters: DeleteWebhookByUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse> {
        const response = await this.deleteWebhookByUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * Retrieve an individual log
     */
    async getWebhookLogRaw(requestParameters: GetWebhookLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookLogResponse>> {
        if (requestParameters.webhookOid === null || requestParameters.webhookOid === undefined) {
            throw new runtime.RequiredError('webhookOid','Required parameter requestParameters.webhookOid was null or undefined when calling getWebhookLog.');
        }

        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getWebhookLog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks/{webhookOid}/logs/{requestId}`.replace(`{${"webhookOid"}}`, encodeURIComponent(String(requestParameters.webhookOid))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookLogResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * Retrieve an individual log
     */
    async getWebhookLog(requestParameters: GetWebhookLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookLogResponse> {
        const response = await this.getWebhookLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * Retrieve the log summaries
     */
    async getWebhookLogSummariesRaw(requestParameters: GetWebhookLogSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookLogSummariesResponse>> {
        if (requestParameters.webhookOid === null || requestParameters.webhookOid === undefined) {
            throw new runtime.RequiredError('webhookOid','Required parameter requestParameters.webhookOid was null or undefined when calling getWebhookLogSummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['_since'] = requestParameters.since;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks/{webhookOid}/logs`.replace(`{${"webhookOid"}}`, encodeURIComponent(String(requestParameters.webhookOid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookLogSummariesResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * Retrieve the log summaries
     */
    async getWebhookLogSummaries(requestParameters: GetWebhookLogSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookLogSummariesResponse> {
        const response = await this.getWebhookLogSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the webhooks associated with this application. 
     * Retrieve webhooks
     */
    async getWebhooksRaw(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhooksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['_limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['_offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['_sort'] = requestParameters.sort;
        }

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_read"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhooksResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the webhooks associated with this application. 
     * Retrieve webhooks
     */
    async getWebhooks(requestParameters: GetWebhooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhooksResponse> {
        const response = await this.getWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * Add a webhook
     */
    async insertWebhookRaw(requestParameters: InsertWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>> {
        if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
            throw new runtime.RequiredError('webhook','Required parameter requestParameters.webhook was null or undefined when calling insertWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookToJSON(requestParameters.webhook),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookResponseFromJSON(jsonValue));
    }

    /**
     * Adds a new webhook on the account.  If you add a new webhook with the authentication_type set to basic, but do not specify the basic_username and basic_password, UltraCart will automatically generate random ones and return them.  This allows your application to have simpler logic on the setup of a secure webhook. 
     * Add a webhook
     */
    async insertWebhook(requestParameters: InsertWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse> {
        const response = await this.insertWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * Resend events to the webhook endpoint.
     */
    async resendEventRaw(requestParameters: ResendEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookReflowResponse>> {
        if (requestParameters.webhookOid === null || requestParameters.webhookOid === undefined) {
            throw new runtime.RequiredError('webhookOid','Required parameter requestParameters.webhookOid was null or undefined when calling resendEvent.');
        }

        if (requestParameters.eventName === null || requestParameters.eventName === undefined) {
            throw new runtime.RequiredError('eventName','Required parameter requestParameters.eventName was null or undefined when calling resendEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks/{webhookOid}/reflow/{eventName}`.replace(`{${"webhookOid"}}`, encodeURIComponent(String(requestParameters.webhookOid))).replace(`{${"eventName"}}`, encodeURIComponent(String(requestParameters.eventName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookReflowResponseFromJSON(jsonValue));
    }

    /**
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * Resend events to the webhook endpoint.
     */
    async resendEvent(requestParameters: ResendEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookReflowResponse> {
        const response = await this.resendEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a webhook on the account 
     * Update a webhook
     */
    async updateWebhookRaw(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhookResponse>> {
        if (requestParameters.webhookOid === null || requestParameters.webhookOid === undefined) {
            throw new runtime.RequiredError('webhookOid','Required parameter requestParameters.webhookOid was null or undefined when calling updateWebhook.');
        }

        if (requestParameters.webhook === null || requestParameters.webhook === undefined) {
            throw new runtime.RequiredError('webhook','Required parameter requestParameters.webhook was null or undefined when calling updateWebhook.');
        }

        const queryParameters: any = {};

        if (requestParameters.placeholders !== undefined) {
            queryParameters['_placeholders'] = requestParameters.placeholders;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=UTF-8';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("ultraCartOauth", ["webhook_write"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-ultracart-simple-key"] = this.configuration.apiKey("x-ultracart-simple-key"); // ultraCartSimpleApiKey authentication
        }

        const response = await this.request({
            path: `/webhook/webhooks/{webhookOid}`.replace(`{${"webhookOid"}}`, encodeURIComponent(String(requestParameters.webhookOid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookToJSON(requestParameters.webhook),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebhookResponseFromJSON(jsonValue));
    }

    /**
     * Update a webhook on the account 
     * Update a webhook
     */
    async updateWebhook(requestParameters: UpdateWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhookResponse> {
        const response = await this.updateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

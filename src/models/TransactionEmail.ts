/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TransactionEmailOption,
    TransactionEmailOptionFromJSON,
    TransactionEmailOptionFromJSONTyped,
    TransactionEmailOptionToJSON,
} from './TransactionEmailOption';

/**
 * 
 * @export
 * @interface TransactionEmail
 */
export interface TransactionEmail {
    /**
     * Actual template contents
     * @type {string}
     * @memberof TransactionEmail
     */
    content?: string;
    /**
     * The uuid of the sending domain
     * @type {string}
     * @memberof TransactionEmail
     */
    esp_domain_uuid?: string;
    /**
     * Friendly from that will appear in customer email clients.
     * @type {string}
     * @memberof TransactionEmail
     */
    esp_friendly_name?: string;
    /**
     * The username of the sending email.  This is not the full email.  Only the username which is everything before the @ sign.
     * @type {string}
     * @memberof TransactionEmail
     */
    esp_user?: string;
    /**
     * An internal identifier used to aid in retrieving templates from the filesystem.
     * @type {boolean}
     * @memberof TransactionEmail
     */
    file_exists?: boolean;
    /**
     * File name
     * @type {string}
     * @memberof TransactionEmail
     */
    file_name?: string;
    /**
     * Group
     * @type {string}
     * @memberof TransactionEmail
     */
    group?: string;
    /**
     * Handlebar Variables available for email template
     * @type {Array<string>}
     * @memberof TransactionEmail
     */
    handlebar_variables?: Array<string>;
    /**
     * Invalid will be true if the template cannot compile
     * @type {boolean}
     * @memberof TransactionEmail
     */
    invalid?: boolean;
    /**
     * Last modified timestamp
     * @type {string}
     * @memberof TransactionEmail
     */
    last_modified?: string;
    /**
     * If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
     * @type {number}
     * @memberof TransactionEmail
     */
    library_item_oid?: number;
    /**
     * Options that help govern how and when this template is used
     * @type {Array<TransactionEmailOption>}
     * @memberof TransactionEmail
     */
    options?: Array<TransactionEmailOption>;
    /**
     * directory path where template is stored in file system
     * @type {string}
     * @memberof TransactionEmail
     */
    path?: string;
    /**
     * Size of file in friendly description
     * @type {string}
     * @memberof TransactionEmail
     */
    size?: string;
    /**
     * Internal identifier used to store and retrieve template from filesystem
     * @type {number}
     * @memberof TransactionEmail
     */
    store_front_fs_directory_oid?: number;
    /**
     * Internal identifier used to store and retrieve template from filesystem
     * @type {number}
     * @memberof TransactionEmail
     */
    store_front_fs_file_oid?: number;
    /**
     * Subject
     * @type {string}
     * @memberof TransactionEmail
     */
    subject?: string;
    /**
     * Any syntax errors contained within the tempalate
     * @type {string}
     * @memberof TransactionEmail
     */
    syntax_errors?: string;
    /**
     * Internal value used to locate the template in the filesystem
     * @type {string}
     * @memberof TransactionEmail
     */
    template_path_relative_path?: string;
    /**
     * Theme relative path in the filesystem.
     * @type {string}
     * @memberof TransactionEmail
     */
    theme_relative_path?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof TransactionEmail)[] = ["content", "esp_domain_uuid", "esp_friendly_name", "esp_user", "file_exists", "file_name", "group", "handlebar_variables", "invalid", "last_modified", "library_item_oid", "options", "path", "size", "store_front_fs_directory_oid", "store_front_fs_file_oid", "subject", "syntax_errors", "template_path_relative_path", "theme_relative_path"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the TransactionEmail interface.
 */
export function instanceOfTransactionEmail(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionEmailFromJSON(json: any): TransactionEmail {
    return TransactionEmailFromJSONTyped(json, false);
}

export function TransactionEmailFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionEmail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'content': !exists(json, 'content') ? undefined : json['content'],
        'esp_domain_uuid': !exists(json, 'esp_domain_uuid') ? undefined : json['esp_domain_uuid'],
        'esp_friendly_name': !exists(json, 'esp_friendly_name') ? undefined : json['esp_friendly_name'],
        'esp_user': !exists(json, 'esp_user') ? undefined : json['esp_user'],
        'file_exists': !exists(json, 'file_exists') ? undefined : json['file_exists'],
        'file_name': !exists(json, 'file_name') ? undefined : json['file_name'],
        'group': !exists(json, 'group') ? undefined : json['group'],
        'handlebar_variables': !exists(json, 'handlebar_variables') ? undefined : json['handlebar_variables'],
        'invalid': !exists(json, 'invalid') ? undefined : json['invalid'],
        'last_modified': !exists(json, 'last_modified') ? undefined : json['last_modified'],
        'library_item_oid': !exists(json, 'library_item_oid') ? undefined : json['library_item_oid'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(TransactionEmailOptionFromJSON)),
        'path': !exists(json, 'path') ? undefined : json['path'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'store_front_fs_directory_oid': !exists(json, 'store_front_fs_directory_oid') ? undefined : json['store_front_fs_directory_oid'],
        'store_front_fs_file_oid': !exists(json, 'store_front_fs_file_oid') ? undefined : json['store_front_fs_file_oid'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'syntax_errors': !exists(json, 'syntax_errors') ? undefined : json['syntax_errors'],
        'template_path_relative_path': !exists(json, 'template_path_relative_path') ? undefined : json['template_path_relative_path'],
        'theme_relative_path': !exists(json, 'theme_relative_path') ? undefined : json['theme_relative_path'],
    };
}

export function TransactionEmailToJSON(value?: TransactionEmail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'content': value.content,
        'esp_domain_uuid': value.esp_domain_uuid,
        'esp_friendly_name': value.esp_friendly_name,
        'esp_user': value.esp_user,
        'file_exists': value.file_exists,
        'file_name': value.file_name,
        'group': value.group,
        'handlebar_variables': value.handlebar_variables,
        'invalid': value.invalid,
        'last_modified': value.last_modified,
        'library_item_oid': value.library_item_oid,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(TransactionEmailOptionToJSON)),
        'path': value.path,
        'size': value.size,
        'store_front_fs_directory_oid': value.store_front_fs_directory_oid,
        'store_front_fs_file_oid': value.store_front_fs_file_oid,
        'subject': value.subject,
        'syntax_errors': value.syntax_errors,
        'template_path_relative_path': value.template_path_relative_path,
        'theme_relative_path': value.theme_relative_path,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemShippingDestinationMarkup
 */
export interface ItemShippingDestinationMarkup {
    /**
     * Adult Signature Required (only updated if not-null value provided)
     * @type {boolean}
     * @memberof ItemShippingDestinationMarkup
     */
    adult_signature_required?: boolean;
    /**
     * Country code (ISO-3166 two letter)
     * @type {string}
     * @memberof ItemShippingDestinationMarkup
     */
    country_code?: string;
    /**
     * Flat fee
     * @type {number}
     * @memberof ItemShippingDestinationMarkup
     */
    flat_fee?: number;
    /**
     * Per item
     * @type {number}
     * @memberof ItemShippingDestinationMarkup
     */
    per_item?: number;
    /**
     * Postal code
     * @type {string}
     * @memberof ItemShippingDestinationMarkup
     */
    postal_code?: string;
    /**
     * Shipping method
     * @type {string}
     * @memberof ItemShippingDestinationMarkup
     */
    shipping_method?: string;
    /**
     * State
     * @type {string}
     * @memberof ItemShippingDestinationMarkup
     */
    state?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ItemShippingDestinationMarkup)[] = ["adult_signature_required", "country_code", "flat_fee", "per_item", "postal_code", "shipping_method", "state"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ItemShippingDestinationMarkup interface.
 */
export function instanceOfItemShippingDestinationMarkup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemShippingDestinationMarkupFromJSON(json: any): ItemShippingDestinationMarkup {
    return ItemShippingDestinationMarkupFromJSONTyped(json, false);
}

export function ItemShippingDestinationMarkupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemShippingDestinationMarkup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adult_signature_required': !exists(json, 'adult_signature_required') ? undefined : json['adult_signature_required'],
        'country_code': !exists(json, 'country_code') ? undefined : json['country_code'],
        'flat_fee': !exists(json, 'flat_fee') ? undefined : json['flat_fee'],
        'per_item': !exists(json, 'per_item') ? undefined : json['per_item'],
        'postal_code': !exists(json, 'postal_code') ? undefined : json['postal_code'],
        'shipping_method': !exists(json, 'shipping_method') ? undefined : json['shipping_method'],
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function ItemShippingDestinationMarkupToJSON(value?: ItemShippingDestinationMarkup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adult_signature_required': value.adult_signature_required,
        'country_code': value.country_code,
        'flat_fee': value.flat_fee,
        'per_item': value.per_item,
        'postal_code': value.postal_code,
        'shipping_method': value.shipping_method,
        'state': value.state,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
} from './Currency';

/**
 * 
 * @export
 * @interface CartSettingsGiftWrap
 */
export interface CartSettingsGiftWrap {
    /**
     * 
     * @type {Currency}
     * @memberof CartSettingsGiftWrap
     */
    cost?: Currency;
    /**
     * Title of the gift wrap
     * @type {string}
     * @memberof CartSettingsGiftWrap
     */
    title?: string;
    /**
     * URL for the sample of the gift wrap
     * @type {string}
     * @memberof CartSettingsGiftWrap
     */
    url?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CartSettingsGiftWrap)[] = ["cost", "title", "url"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CartSettingsGiftWrap interface.
 */
export function instanceOfCartSettingsGiftWrap(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartSettingsGiftWrapFromJSON(json: any): CartSettingsGiftWrap {
    return CartSettingsGiftWrapFromJSONTyped(json, false);
}

export function CartSettingsGiftWrapFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartSettingsGiftWrap {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cost': !exists(json, 'cost') ? undefined : CurrencyFromJSON(json['cost']),
        'title': !exists(json, 'title') ? undefined : json['title'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function CartSettingsGiftWrapToJSON(value?: CartSettingsGiftWrap | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cost': CurrencyToJSON(value.cost),
        'title': value.title,
        'url': value.url,
    };
}


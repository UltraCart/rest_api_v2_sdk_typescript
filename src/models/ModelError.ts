/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A technical message meant to be read by a developer
     * @type {string}
     * @memberof ModelError
     */
    developer_message?: string;
    /**
     * HTTP status code
     * @type {string}
     * @memberof ModelError
     */
    error_code?: string;
    /**
     * Additional information often a link to additional documentation
     * @type {string}
     * @memberof ModelError
     */
    more_info?: string;
    /**
     * Object id that the error is associated with
     * @type {string}
     * @memberof ModelError
     */
    object_id?: string;
    /**
     * An end-user friendly message suitable for display to the customer
     * @type {string}
     * @memberof ModelError
     */
    user_message?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ModelError)[] = ["developer_message", "error_code", "more_info", "object_id", "user_message"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ModelError interface.
 */
export function instanceOfModelError(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ModelErrorFromJSON(json: any): ModelError {
    return ModelErrorFromJSONTyped(json, false);
}

export function ModelErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'developer_message': !exists(json, 'developer_message') ? undefined : json['developer_message'],
        'error_code': !exists(json, 'error_code') ? undefined : json['error_code'],
        'more_info': !exists(json, 'more_info') ? undefined : json['more_info'],
        'object_id': !exists(json, 'object_id') ? undefined : json['object_id'],
        'user_message': !exists(json, 'user_message') ? undefined : json['user_message'],
    };
}

export function ModelErrorToJSON(value?: ModelError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'developer_message': value.developer_message,
        'error_code': value.error_code,
        'more_info': value.more_info,
        'object_id': value.object_id,
        'user_message': value.user_message,
    };
}


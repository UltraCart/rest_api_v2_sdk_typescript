/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Cart,
    CartFromJSON,
    CartFromJSONTyped,
    CartToJSON,
} from './Cart';
import {
    Order,
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
} from './Order';

/**
 * 
 * @export
 * @interface CartFinalizeOrderResponse
 */
export interface CartFinalizeOrderResponse {
    /**
     * Error messages if the order could not be completed
     * @type {Array<string>}
     * @memberof CartFinalizeOrderResponse
     */
    errors?: Array<string>;
    /**
     * 
     * @type {Cart}
     * @memberof CartFinalizeOrderResponse
     */
    next_cart?: Cart;
    /**
     * 
     * @type {Order}
     * @memberof CartFinalizeOrderResponse
     */
    order?: Order;
    /**
     * Order ID assigned to the order
     * @type {string}
     * @memberof CartFinalizeOrderResponse
     */
    order_id?: string;
    /**
     * True if the cart was converted successfully to an order
     * @type {boolean}
     * @memberof CartFinalizeOrderResponse
     */
    successful?: boolean;
}



/**
 * Check if a given object implements the CartFinalizeOrderResponse interface.
 */
export function instanceOfCartFinalizeOrderResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartFinalizeOrderResponseFromJSON(json: any): CartFinalizeOrderResponse {
    return CartFinalizeOrderResponseFromJSONTyped(json, false);
}

export function CartFinalizeOrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartFinalizeOrderResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errors': !exists(json, 'errors') ? undefined : json['errors'],
        'next_cart': !exists(json, 'next_cart') ? undefined : CartFromJSON(json['next_cart']),
        'order': !exists(json, 'order') ? undefined : OrderFromJSON(json['order']),
        'order_id': !exists(json, 'order_id') ? undefined : json['order_id'],
        'successful': !exists(json, 'successful') ? undefined : json['successful'],
    };
}

export function CartFinalizeOrderResponseToJSON(value?: CartFinalizeOrderResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'errors': value.errors,
        'next_cart': CartToJSON(value.next_cart),
        'order': OrderToJSON(value.order),
        'order_id': value.order_id,
        'successful': value.successful,
    };
}


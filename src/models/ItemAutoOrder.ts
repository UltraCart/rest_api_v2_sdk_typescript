/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemAutoOrderStep,
    ItemAutoOrderStepFromJSON,
    ItemAutoOrderStepFromJSONTyped,
    ItemAutoOrderStepToJSON,
} from './ItemAutoOrderStep';

/**
 * 
 * @export
 * @interface ItemAutoOrder
 */
export interface ItemAutoOrder {
    /**
     * Amount to try and authorize for the future rebill
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auth_future_amount?: number;
    /**
     * Amount to try and test authorize
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auth_test_amount?: number;
    /**
     * If true, the cost of the cancel item will be the remaining balance of the minimum rebill or lifetime value
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_charge_minimum_balance?: boolean;
    /**
     * Item id to attempt charging the customer for if they cancel
     * @type {string}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_item_id?: string;
    /**
     * Item object identifier to attempt charging the customer for if they cancel
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_item_oid?: number;
    /**
     * The minimum life time count that must be billed in order to not be charged the cancellation item.
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_minimum_life_time_count?: number;
    /**
     * The minimum life time value that must be paid in order to not be charged the cancellation item.
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_minimum_life_time_value?: number;
    /**
     * The minimum rebill count that must be billed in order to not be charged the cancellation item.
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_minimum_rebill_count?: number;
    /**
     * The minimum rebill value that must be paid in order to not be charged the cancellation item.
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auto_order_cancel_minimum_rebill_value?: number;
    /**
     * List of downgrade items presented to customer service representatives
     * @type {Array<string>}
     * @memberof ItemAutoOrder
     */
    auto_order_downgrade_items?: Array<string>;
    /**
     * True if the rebill processing of this item is paused
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    auto_order_paused?: boolean;
    /**
     * Minimum number of months before expiration for the card.  Overrides the account level setting if higher.  Set to zero to disable.
     * @type {number}
     * @memberof ItemAutoOrder
     */
    auto_order_prohibit_expiring_cards?: number;
    /**
     * The user selectable schedules that are available
     * @type {Array<string>}
     * @memberof ItemAutoOrder
     */
    auto_order_schedules?: Array<string>;
    /**
     * List of upgrade items presented to customer service representatives
     * @type {Array<string>}
     * @memberof ItemAutoOrder
     */
    auto_order_upgrade_items?: Array<string>;
    /**
     * True if this item uses a fixed upsell step schedule
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    auto_order_upsell?: boolean;
    /**
     * Do not send the easy cancel email to the customer
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    auto_order_upsell_no_easy_cancel?: boolean;
    /**
     * Limit the purchase of this item to one per customer
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    auto_order_upsell_one_per_customer?: boolean;
    /**
     * True if this item can be automatically ordered by the customer
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    auto_orderable?: boolean;
    /**
     * True if other auto orders for this customer should be canceled when this item is ordered
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    cancel_other_auto_orders?: boolean;
    /**
     * True if the customer should be given free shipping
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    free_shipping_auto_order?: boolean;
    /**
     * True if other auto orders for this customer should refunded if this item is refunded.
     * @type {boolean}
     * @memberof ItemAutoOrder
     */
    refund_other_auto_orders?: boolean;
    /**
     * The rebill steps if this auto order is an upsell
     * @type {Array<ItemAutoOrderStep>}
     * @memberof ItemAutoOrder
     */
    steps?: Array<ItemAutoOrderStep>;
}



/**
 * Check if a given object implements the ItemAutoOrder interface.
 */
export function instanceOfItemAutoOrder(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemAutoOrderFromJSON(json: any): ItemAutoOrder {
    return ItemAutoOrderFromJSONTyped(json, false);
}

export function ItemAutoOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemAutoOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auth_future_amount': !exists(json, 'auth_future_amount') ? undefined : json['auth_future_amount'],
        'auth_test_amount': !exists(json, 'auth_test_amount') ? undefined : json['auth_test_amount'],
        'auto_order_cancel_charge_minimum_balance': !exists(json, 'auto_order_cancel_charge_minimum_balance') ? undefined : json['auto_order_cancel_charge_minimum_balance'],
        'auto_order_cancel_item_id': !exists(json, 'auto_order_cancel_item_id') ? undefined : json['auto_order_cancel_item_id'],
        'auto_order_cancel_item_oid': !exists(json, 'auto_order_cancel_item_oid') ? undefined : json['auto_order_cancel_item_oid'],
        'auto_order_cancel_minimum_life_time_count': !exists(json, 'auto_order_cancel_minimum_life_time_count') ? undefined : json['auto_order_cancel_minimum_life_time_count'],
        'auto_order_cancel_minimum_life_time_value': !exists(json, 'auto_order_cancel_minimum_life_time_value') ? undefined : json['auto_order_cancel_minimum_life_time_value'],
        'auto_order_cancel_minimum_rebill_count': !exists(json, 'auto_order_cancel_minimum_rebill_count') ? undefined : json['auto_order_cancel_minimum_rebill_count'],
        'auto_order_cancel_minimum_rebill_value': !exists(json, 'auto_order_cancel_minimum_rebill_value') ? undefined : json['auto_order_cancel_minimum_rebill_value'],
        'auto_order_downgrade_items': !exists(json, 'auto_order_downgrade_items') ? undefined : json['auto_order_downgrade_items'],
        'auto_order_paused': !exists(json, 'auto_order_paused') ? undefined : json['auto_order_paused'],
        'auto_order_prohibit_expiring_cards': !exists(json, 'auto_order_prohibit_expiring_cards') ? undefined : json['auto_order_prohibit_expiring_cards'],
        'auto_order_schedules': !exists(json, 'auto_order_schedules') ? undefined : json['auto_order_schedules'],
        'auto_order_upgrade_items': !exists(json, 'auto_order_upgrade_items') ? undefined : json['auto_order_upgrade_items'],
        'auto_order_upsell': !exists(json, 'auto_order_upsell') ? undefined : json['auto_order_upsell'],
        'auto_order_upsell_no_easy_cancel': !exists(json, 'auto_order_upsell_no_easy_cancel') ? undefined : json['auto_order_upsell_no_easy_cancel'],
        'auto_order_upsell_one_per_customer': !exists(json, 'auto_order_upsell_one_per_customer') ? undefined : json['auto_order_upsell_one_per_customer'],
        'auto_orderable': !exists(json, 'auto_orderable') ? undefined : json['auto_orderable'],
        'cancel_other_auto_orders': !exists(json, 'cancel_other_auto_orders') ? undefined : json['cancel_other_auto_orders'],
        'free_shipping_auto_order': !exists(json, 'free_shipping_auto_order') ? undefined : json['free_shipping_auto_order'],
        'refund_other_auto_orders': !exists(json, 'refund_other_auto_orders') ? undefined : json['refund_other_auto_orders'],
        'steps': !exists(json, 'steps') ? undefined : ((json['steps'] as Array<any>).map(ItemAutoOrderStepFromJSON)),
    };
}

export function ItemAutoOrderToJSON(value?: ItemAutoOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auth_future_amount': value.auth_future_amount,
        'auth_test_amount': value.auth_test_amount,
        'auto_order_cancel_charge_minimum_balance': value.auto_order_cancel_charge_minimum_balance,
        'auto_order_cancel_item_id': value.auto_order_cancel_item_id,
        'auto_order_cancel_item_oid': value.auto_order_cancel_item_oid,
        'auto_order_cancel_minimum_life_time_count': value.auto_order_cancel_minimum_life_time_count,
        'auto_order_cancel_minimum_life_time_value': value.auto_order_cancel_minimum_life_time_value,
        'auto_order_cancel_minimum_rebill_count': value.auto_order_cancel_minimum_rebill_count,
        'auto_order_cancel_minimum_rebill_value': value.auto_order_cancel_minimum_rebill_value,
        'auto_order_downgrade_items': value.auto_order_downgrade_items,
        'auto_order_paused': value.auto_order_paused,
        'auto_order_prohibit_expiring_cards': value.auto_order_prohibit_expiring_cards,
        'auto_order_schedules': value.auto_order_schedules,
        'auto_order_upgrade_items': value.auto_order_upgrade_items,
        'auto_order_upsell': value.auto_order_upsell,
        'auto_order_upsell_no_easy_cancel': value.auto_order_upsell_no_easy_cancel,
        'auto_order_upsell_one_per_customer': value.auto_order_upsell_one_per_customer,
        'auto_orderable': value.auto_orderable,
        'cancel_other_auto_orders': value.cancel_other_auto_orders,
        'free_shipping_auto_order': value.free_shipping_auto_order,
        'refund_other_auto_orders': value.refund_other_auto_orders,
        'steps': value.steps === undefined ? undefined : ((value.steps as Array<any>).map(ItemAutoOrderStepToJSON)),
    };
}


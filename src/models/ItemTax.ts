/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemTaxExemption,
    ItemTaxExemptionFromJSON,
    ItemTaxExemptionFromJSONTyped,
    ItemTaxExemptionToJSON,
} from './ItemTaxExemption';

/**
 * 
 * @export
 * @interface ItemTax
 */
export interface ItemTax {
    /**
     * Exemptions
     * @type {Array<ItemTaxExemption>}
     * @memberof ItemTax
     */
    exemptions?: Array<ItemTaxExemption>;
    /**
     * True if tax free
     * @type {boolean}
     * @memberof ItemTax
     */
    tax_free?: boolean;
    /**
     * Tax product type
     * @type {string}
     * @memberof ItemTax
     */
    tax_product_type?: ItemTaxTaxProductTypeEnum;
    /**
     * Taxable cost if different than regular cost
     * @type {number}
     * @memberof ItemTax
     */
    taxable_cost?: number;
}


/**
 * @export
 */
export const ItemTaxTaxProductTypeEnum = {
    Empty: '',
    Digital: 'digital',
    Physical: 'physical',
    Service: 'service'
} as const;
export type ItemTaxTaxProductTypeEnum = typeof ItemTaxTaxProductTypeEnum[keyof typeof ItemTaxTaxProductTypeEnum];


export function ItemTaxFromJSON(json: any): ItemTax {
    return ItemTaxFromJSONTyped(json, false);
}

export function ItemTaxFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemTax {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exemptions': !exists(json, 'exemptions') ? undefined : ((json['exemptions'] as Array<any>).map(ItemTaxExemptionFromJSON)),
        'tax_free': !exists(json, 'tax_free') ? undefined : json['tax_free'],
        'tax_product_type': !exists(json, 'tax_product_type') ? undefined : json['tax_product_type'],
        'taxable_cost': !exists(json, 'taxable_cost') ? undefined : json['taxable_cost'],
    };
}

export function ItemTaxToJSON(value?: ItemTax | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exemptions': value.exemptions === undefined ? undefined : ((value.exemptions as Array<any>).map(ItemTaxExemptionToJSON)),
        'tax_free': value.tax_free,
        'tax_product_type': value.tax_product_type,
        'taxable_cost': value.taxable_cost,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Metric
 */
export interface Metric {
    /**
     * 
     * @type {number}
     * @memberof Metric
     */
    all_time?: number;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    all_time_formatted?: string;
    /**
     * 
     * @type {number}
     * @memberof Metric
     */
    last_30?: number;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    last_30_formatted?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Metric
     */
    prior_30?: number;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    prior_30_formatted?: string;
    /**
     * 
     * @type {string}
     * @memberof Metric
     */
    type?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof Metric)[] = ["all_time", "all_time_formatted", "last_30", "last_30_formatted", "name", "prior_30", "prior_30_formatted", "type"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the Metric interface.
 */
export function instanceOfMetric(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MetricFromJSON(json: any): Metric {
    return MetricFromJSONTyped(json, false);
}

export function MetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): Metric {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'all_time': !exists(json, 'all_time') ? undefined : json['all_time'],
        'all_time_formatted': !exists(json, 'all_time_formatted') ? undefined : json['all_time_formatted'],
        'last_30': !exists(json, 'last_30') ? undefined : json['last_30'],
        'last_30_formatted': !exists(json, 'last_30_formatted') ? undefined : json['last_30_formatted'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'prior_30': !exists(json, 'prior_30') ? undefined : json['prior_30'],
        'prior_30_formatted': !exists(json, 'prior_30_formatted') ? undefined : json['prior_30_formatted'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function MetricToJSON(value?: Metric | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'all_time': value.all_time,
        'all_time_formatted': value.all_time_formatted,
        'last_30': value.last_30,
        'last_30_formatted': value.last_30_formatted,
        'name': value.name,
        'prior_30': value.prior_30,
        'prior_30_formatted': value.prior_30_formatted,
        'type': value.type,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ExperimentVariation,
    ExperimentVariationFromJSON,
    ExperimentVariationFromJSONTyped,
    ExperimentVariationToJSON,
} from './ExperimentVariation';

/**
 * 
 * @export
 * @interface Experiment
 */
export interface Experiment {
    /**
     * Contained ID where the experiment element was located
     * @type {string}
     * @memberof Experiment
     */
    container_id?: string;
    /**
     * Duration in days
     * @type {number}
     * @memberof Experiment
     */
    duration_days?: number;
    /**
     * End date/time
     * @type {string}
     * @memberof Experiment
     */
    end_dts?: string;
    /**
     * Whether or not traffic is equally weighted or shifts over time during the experiment
     * @type {boolean}
     * @memberof Experiment
     */
    equal_weighting?: boolean;
    /**
     * The type of experiment
     * @type {string}
     * @memberof Experiment
     */
    experiment_type?: string;
    /**
     * Experiment id
     * @type {string}
     * @memberof Experiment
     */
    id?: string;
    /**
     * Experiment name
     * @type {string}
     * @memberof Experiment
     */
    name?: string;
    /**
     * Notes about the experiment
     * @type {string}
     * @memberof Experiment
     */
    notes?: string;
    /**
     * Objective that is being optimized
     * @type {string}
     * @memberof Experiment
     */
    objective?: string;
    /**
     * Objective parameter (such as event name) that is being optimized
     * @type {string}
     * @memberof Experiment
     */
    objective_parameter?: string;
    /**
     * Type of optimization
     * @type {string}
     * @memberof Experiment
     */
    optimization_type?: string;
    /**
     * Total number of sessions in the experiment
     * @type {number}
     * @memberof Experiment
     */
    session_count?: number;
    /**
     * Start date/time
     * @type {string}
     * @memberof Experiment
     */
    start_dts?: string;
    /**
     * Status of the experiment
     * @type {string}
     * @memberof Experiment
     */
    status?: ExperimentStatusEnum;
    /**
     * Storefront Experiment Oid
     * @type {number}
     * @memberof Experiment
     */
    storefront_experiment_oid?: number;
    /**
     * Storefront oid
     * @type {number}
     * @memberof Experiment
     */
    storefront_oid?: number;
    /**
     * URI the experiment was started on
     * @type {string}
     * @memberof Experiment
     */
    uri?: string;
    /**
     * Variations being tested in the experiment
     * @type {Array<ExperimentVariation>}
     * @memberof Experiment
     */
    variations?: Array<ExperimentVariation>;
}


/**
 * @export
 */
export const ExperimentStatusEnum = {
    Running: 'Running',
    Ended: 'Ended',
    Deleted: 'Deleted'
} as const;
export type ExperimentStatusEnum = typeof ExperimentStatusEnum[keyof typeof ExperimentStatusEnum];


export function ExperimentFromJSON(json: any): Experiment {
    return ExperimentFromJSONTyped(json, false);
}

export function ExperimentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Experiment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'container_id': !exists(json, 'container_id') ? undefined : json['container_id'],
        'duration_days': !exists(json, 'duration_days') ? undefined : json['duration_days'],
        'end_dts': !exists(json, 'end_dts') ? undefined : json['end_dts'],
        'equal_weighting': !exists(json, 'equal_weighting') ? undefined : json['equal_weighting'],
        'experiment_type': !exists(json, 'experiment_type') ? undefined : json['experiment_type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'objective': !exists(json, 'objective') ? undefined : json['objective'],
        'objective_parameter': !exists(json, 'objective_parameter') ? undefined : json['objective_parameter'],
        'optimization_type': !exists(json, 'optimization_type') ? undefined : json['optimization_type'],
        'session_count': !exists(json, 'session_count') ? undefined : json['session_count'],
        'start_dts': !exists(json, 'start_dts') ? undefined : json['start_dts'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'storefront_experiment_oid': !exists(json, 'storefront_experiment_oid') ? undefined : json['storefront_experiment_oid'],
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
        'uri': !exists(json, 'uri') ? undefined : json['uri'],
        'variations': !exists(json, 'variations') ? undefined : ((json['variations'] as Array<any>).map(ExperimentVariationFromJSON)),
    };
}

export function ExperimentToJSON(value?: Experiment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'container_id': value.container_id,
        'duration_days': value.duration_days,
        'end_dts': value.end_dts,
        'equal_weighting': value.equal_weighting,
        'experiment_type': value.experiment_type,
        'id': value.id,
        'name': value.name,
        'notes': value.notes,
        'objective': value.objective,
        'objective_parameter': value.objective_parameter,
        'optimization_type': value.optimization_type,
        'session_count': value.session_count,
        'start_dts': value.start_dts,
        'status': value.status,
        'storefront_experiment_oid': value.storefront_experiment_oid,
        'storefront_oid': value.storefront_oid,
        'uri': value.uri,
        'variations': value.variations === undefined ? undefined : ((value.variations as Array<any>).map(ExperimentVariationToJSON)),
    };
}


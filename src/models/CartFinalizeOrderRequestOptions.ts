/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CartFinalizeOrderRequestOptions
 */
export interface CartFinalizeOrderRequestOptions {
    /**
     * Automatically approve the purchase order
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    auto_approve_purchase_order?: boolean;
    /**
     * Channel partner code to associate this order with
     * @type {string}
     * @memberof CartFinalizeOrderRequestOptions
     */
    channel_partner_code?: string;
    /**
     * Channel partner oid to associate this order with
     * @type {number}
     * @memberof CartFinalizeOrderRequestOptions
     */
    channel_partner_oid?: number;
    /**
     * Channel partner order id for reference
     * @type {string}
     * @memberof CartFinalizeOrderRequestOptions
     */
    channel_partner_order_id?: string;
    /**
     * Consider this order a recurring order for the purposes of payment gateway recurring flag
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    consider_recurring?: boolean;
    /**
     * If the order was authorized outside of UltraCart, this is the amount of the authorization
     * @type {number}
     * @memberof CartFinalizeOrderRequestOptions
     */
    credit_card_authorization_amount?: number;
    /**
     * If the order was authorized outside of UltraCart, this is the date/time of the authorization
     * @type {string}
     * @memberof CartFinalizeOrderRequestOptions
     */
    credit_card_authorization_date?: string;
    /**
     * If the order was authorized outside of UltraCart, this is the authorization reference number
     * @type {string}
     * @memberof CartFinalizeOrderRequestOptions
     */
    credit_card_authorization_reference_number?: string;
    /**
     * Prevents normal real-time processing of the payment and sends the order to Accounts Receivable
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    no_realtime_payment_processing?: boolean;
    /**
     * True if the system should create another cart automatically if the current cart was logged into a profile
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    setup_next_cart?: boolean;
    /**
     * Skip payment processing and move the order on to shipping (or completed if no shipping required)
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    skip_payment_processing?: boolean;
    /**
     * True the order in the completed stage
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    store_completed?: boolean;
    /**
     * Store the order in accounts receivable if the payment declines
     * @type {boolean}
     * @memberof CartFinalizeOrderRequestOptions
     */
    store_if_payment_declines?: boolean;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CartFinalizeOrderRequestOptions)[] = ["auto_approve_purchase_order", "channel_partner_code", "channel_partner_oid", "channel_partner_order_id", "consider_recurring", "credit_card_authorization_amount", "credit_card_authorization_date", "credit_card_authorization_reference_number", "no_realtime_payment_processing", "setup_next_cart", "skip_payment_processing", "store_completed", "store_if_payment_declines"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CartFinalizeOrderRequestOptions interface.
 */
export function instanceOfCartFinalizeOrderRequestOptions(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartFinalizeOrderRequestOptionsFromJSON(json: any): CartFinalizeOrderRequestOptions {
    return CartFinalizeOrderRequestOptionsFromJSONTyped(json, false);
}

export function CartFinalizeOrderRequestOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartFinalizeOrderRequestOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auto_approve_purchase_order': !exists(json, 'auto_approve_purchase_order') ? undefined : json['auto_approve_purchase_order'],
        'channel_partner_code': !exists(json, 'channel_partner_code') ? undefined : json['channel_partner_code'],
        'channel_partner_oid': !exists(json, 'channel_partner_oid') ? undefined : json['channel_partner_oid'],
        'channel_partner_order_id': !exists(json, 'channel_partner_order_id') ? undefined : json['channel_partner_order_id'],
        'consider_recurring': !exists(json, 'consider_recurring') ? undefined : json['consider_recurring'],
        'credit_card_authorization_amount': !exists(json, 'credit_card_authorization_amount') ? undefined : json['credit_card_authorization_amount'],
        'credit_card_authorization_date': !exists(json, 'credit_card_authorization_date') ? undefined : json['credit_card_authorization_date'],
        'credit_card_authorization_reference_number': !exists(json, 'credit_card_authorization_reference_number') ? undefined : json['credit_card_authorization_reference_number'],
        'no_realtime_payment_processing': !exists(json, 'no_realtime_payment_processing') ? undefined : json['no_realtime_payment_processing'],
        'setup_next_cart': !exists(json, 'setup_next_cart') ? undefined : json['setup_next_cart'],
        'skip_payment_processing': !exists(json, 'skip_payment_processing') ? undefined : json['skip_payment_processing'],
        'store_completed': !exists(json, 'store_completed') ? undefined : json['store_completed'],
        'store_if_payment_declines': !exists(json, 'store_if_payment_declines') ? undefined : json['store_if_payment_declines'],
    };
}

export function CartFinalizeOrderRequestOptionsToJSON(value?: CartFinalizeOrderRequestOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auto_approve_purchase_order': value.auto_approve_purchase_order,
        'channel_partner_code': value.channel_partner_code,
        'channel_partner_oid': value.channel_partner_oid,
        'channel_partner_order_id': value.channel_partner_order_id,
        'consider_recurring': value.consider_recurring,
        'credit_card_authorization_amount': value.credit_card_authorization_amount,
        'credit_card_authorization_date': value.credit_card_authorization_date,
        'credit_card_authorization_reference_number': value.credit_card_authorization_reference_number,
        'no_realtime_payment_processing': value.no_realtime_payment_processing,
        'setup_next_cart': value.setup_next_cart,
        'skip_payment_processing': value.skip_payment_processing,
        'store_completed': value.store_completed,
        'store_if_payment_declines': value.store_if_payment_declines,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AutoOrder,
    AutoOrderFromJSON,
    AutoOrderFromJSONTyped,
    AutoOrderToJSON,
} from './AutoOrder';
import {
    Cart,
    CartFromJSON,
    CartFromJSONTyped,
    CartToJSON,
} from './Cart';
import {
    HitPageView,
    HitPageViewFromJSON,
    HitPageViewFromJSONTyped,
    HitPageViewToJSON,
} from './HitPageView';
import {
    HitSessionStart,
    HitSessionStartFromJSON,
    HitSessionStartFromJSONTyped,
    HitSessionStartToJSON,
} from './HitSessionStart';
import {
    HitSessionUtm,
    HitSessionUtmFromJSON,
    HitSessionUtmFromJSONTyped,
    HitSessionUtmToJSON,
} from './HitSessionUtm';
import {
    Order,
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
} from './Order';

/**
 * 
 * @export
 * @interface ConversationWebchatContext
 */
export interface ConversationWebchatContext {
    /**
     * 
     * @type {Array<AutoOrder>}
     * @memberof ConversationWebchatContext
     */
    auto_orders?: Array<AutoOrder>;
    /**
     * 
     * @type {Cart}
     * @memberof ConversationWebchatContext
     */
    cart?: Cart;
    /**
     * 
     * @type {string}
     * @memberof ConversationWebchatContext
     */
    current_url?: string;
    /**
     * 
     * @type {Array<Order>}
     * @memberof ConversationWebchatContext
     */
    orders?: Array<Order>;
    /**
     * 
     * @type {Array<HitPageView>}
     * @memberof ConversationWebchatContext
     */
    page_view?: Array<HitPageView>;
    /**
     * 
     * @type {HitSessionStart}
     * @memberof ConversationWebchatContext
     */
    session_start?: HitSessionStart;
    /**
     * Date/time that the session was started (if known)
     * @type {string}
     * @memberof ConversationWebchatContext
     */
    session_start_dts?: string;
    /**
     * 
     * @type {HitSessionUtm}
     * @memberof ConversationWebchatContext
     */
    session_utm?: HitSessionUtm;
}



/**
 * Check if a given object implements the ConversationWebchatContext interface.
 */
export function instanceOfConversationWebchatContext(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConversationWebchatContextFromJSON(json: any): ConversationWebchatContext {
    return ConversationWebchatContextFromJSONTyped(json, false);
}

export function ConversationWebchatContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationWebchatContext {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auto_orders': !exists(json, 'auto_orders') ? undefined : ((json['auto_orders'] as Array<any>).map(AutoOrderFromJSON)),
        'cart': !exists(json, 'cart') ? undefined : CartFromJSON(json['cart']),
        'current_url': !exists(json, 'current_url') ? undefined : json['current_url'],
        'orders': !exists(json, 'orders') ? undefined : ((json['orders'] as Array<any>).map(OrderFromJSON)),
        'page_view': !exists(json, 'page_view') ? undefined : ((json['page_view'] as Array<any>).map(HitPageViewFromJSON)),
        'session_start': !exists(json, 'session_start') ? undefined : HitSessionStartFromJSON(json['session_start']),
        'session_start_dts': !exists(json, 'session_start_dts') ? undefined : json['session_start_dts'],
        'session_utm': !exists(json, 'session_utm') ? undefined : HitSessionUtmFromJSON(json['session_utm']),
    };
}

export function ConversationWebchatContextToJSON(value?: ConversationWebchatContext | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auto_orders': value.auto_orders === undefined ? undefined : ((value.auto_orders as Array<any>).map(AutoOrderToJSON)),
        'cart': CartToJSON(value.cart),
        'current_url': value.current_url,
        'orders': value.orders === undefined ? undefined : ((value.orders as Array<any>).map(OrderToJSON)),
        'page_view': value.page_view === undefined ? undefined : ((value.page_view as Array<any>).map(HitPageViewToJSON)),
        'session_start': HitSessionStartToJSON(value.session_start),
        'session_start_dts': value.session_start_dts,
        'session_utm': HitSessionUtmToJSON(value.session_utm),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemChargebackAddendum,
    ItemChargebackAddendumFromJSON,
    ItemChargebackAddendumFromJSONTyped,
    ItemChargebackAddendumToJSON,
} from './ItemChargebackAddendum';
import {
    ItemChargebackAdjustmentRequest,
    ItemChargebackAdjustmentRequestFromJSON,
    ItemChargebackAdjustmentRequestFromJSONTyped,
    ItemChargebackAdjustmentRequestToJSON,
} from './ItemChargebackAdjustmentRequest';

/**
 * 
 * @export
 * @interface ItemChargeback
 */
export interface ItemChargeback {
    /**
     * Addendums (deprecated)
     * @type {Array<ItemChargebackAddendum>}
     * @memberof ItemChargeback
     */
    addendums?: Array<ItemChargebackAddendum>;
    /**
     * Adjustment requests (deprecated)
     * @type {Array<ItemChargebackAdjustmentRequest>}
     * @memberof ItemChargeback
     */
    adjustment_requests?: Array<ItemChargebackAdjustmentRequest>;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ItemChargeback)[] = ["addendums", "adjustment_requests"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ItemChargeback interface.
 */
export function instanceOfItemChargeback(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemChargebackFromJSON(json: any): ItemChargeback {
    return ItemChargebackFromJSONTyped(json, false);
}

export function ItemChargebackFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemChargeback {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addendums': !exists(json, 'addendums') ? undefined : ((json['addendums'] as Array<any>).map(ItemChargebackAddendumFromJSON)),
        'adjustment_requests': !exists(json, 'adjustment_requests') ? undefined : ((json['adjustment_requests'] as Array<any>).map(ItemChargebackAdjustmentRequestFromJSON)),
    };
}

export function ItemChargebackToJSON(value?: ItemChargeback | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addendums': value.addendums === undefined ? undefined : ((value.addendums as Array<any>).map(ItemChargebackAddendumToJSON)),
        'adjustment_requests': value.adjustment_requests === undefined ? undefined : ((value.adjustment_requests as Array<any>).map(ItemChargebackAdjustmentRequestToJSON)),
    };
}


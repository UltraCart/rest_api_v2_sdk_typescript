/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReportPageVisualizationMetric
 */
export interface ReportPageVisualizationMetric {
    /**
     * Aggregation to perform
     * @type {string}
     * @memberof ReportPageVisualizationMetric
     */
    aggregation?: ReportPageVisualizationMetricAggregationEnum;
    /**
     * Return the column as a different name
     * @type {string}
     * @memberof ReportPageVisualizationMetric
     */
    as?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportPageVisualizationMetric
     */
    column?: string;
    /**
     * Number of places after the decimal point to round the number to.
     * @type {number}
     * @memberof ReportPageVisualizationMetric
     */
    round?: number;
}


/**
 * @export
 */
export const ReportPageVisualizationMetricAggregationEnum = {
    Sum: 'sum',
    Count: 'count',
    Min: 'min',
    Max: 'max',
    Avg: 'avg',
    None: 'none'
} as const;
export type ReportPageVisualizationMetricAggregationEnum = typeof ReportPageVisualizationMetricAggregationEnum[keyof typeof ReportPageVisualizationMetricAggregationEnum];


export function ReportPageVisualizationMetricFromJSON(json: any): ReportPageVisualizationMetric {
    return ReportPageVisualizationMetricFromJSONTyped(json, false);
}

export function ReportPageVisualizationMetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportPageVisualizationMetric {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aggregation': !exists(json, 'aggregation') ? undefined : json['aggregation'],
        'as': !exists(json, 'as') ? undefined : json['as'],
        'column': !exists(json, 'column') ? undefined : json['column'],
        'round': !exists(json, 'round') ? undefined : json['round'],
    };
}

export function ReportPageVisualizationMetricToJSON(value?: ReportPageVisualizationMetric | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aggregation': value.aggregation,
        'as': value.as,
        'column': value.column,
        'round': value.round,
    };
}


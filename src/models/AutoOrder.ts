/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AutoOrderAddonItem,
    AutoOrderAddonItemFromJSON,
    AutoOrderAddonItemFromJSONTyped,
    AutoOrderAddonItemToJSON,
} from './AutoOrderAddonItem';
import {
    AutoOrderItem,
    AutoOrderItemFromJSON,
    AutoOrderItemFromJSONTyped,
    AutoOrderItemToJSON,
} from './AutoOrderItem';
import {
    AutoOrderLog,
    AutoOrderLogFromJSON,
    AutoOrderLogFromJSONTyped,
    AutoOrderLogToJSON,
} from './AutoOrderLog';
import {
    AutoOrderManagement,
    AutoOrderManagementFromJSON,
    AutoOrderManagementFromJSONTyped,
    AutoOrderManagementToJSON,
} from './AutoOrderManagement';
import {
    Order,
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
} from './Order';

/**
 * 
 * @export
 * @interface AutoOrder
 */
export interface AutoOrder {
    /**
     * Array of addon objects instructing which items to add to auto order and how many times they should be added.
     * @type {Array<AutoOrderAddonItem>}
     * @memberof AutoOrder
     */
    add_ons?: Array<AutoOrderAddonItem>;
    /**
     * Unique code assigned to this auto order
     * @type {string}
     * @memberof AutoOrder
     */
    auto_order_code?: string;
    /**
     * Auto order object identifier
     * @type {number}
     * @memberof AutoOrder
     */
    auto_order_oid?: number;
    /**
     * Cancel this auto order after X additional rebills
     * @type {number}
     * @memberof AutoOrder
     */
    cancel_after_next_x_orders?: number;
    /**
     * True if the auto order was canceled because the customer purchased a downgrade item
     * @type {boolean}
     * @memberof AutoOrder
     */
    cancel_downgrade?: boolean;
    /**
     * The reason this auto order was canceled by either merchant or customer
     * @type {string}
     * @memberof AutoOrder
     */
    cancel_reason?: string;
    /**
     * True if the auto order was canceled because the customer purchased an upgrade item
     * @type {boolean}
     * @memberof AutoOrder
     */
    cancel_upgrade?: boolean;
    /**
     * The user that canceled the auto order
     * @type {string}
     * @memberof AutoOrder
     */
    canceled_by_user?: string;
    /**
     * The date/time that the auto order was canceled
     * @type {string}
     * @memberof AutoOrder
     */
    canceled_dts?: string;
    /**
     * True if the auto order ran successfully to completion
     * @type {boolean}
     * @memberof AutoOrder
     */
    completed?: boolean;
    /**
     * The number of credit card attempts that have taken place
     * @type {number}
     * @memberof AutoOrder
     */
    credit_card_attempt?: number;
    /**
     * The date/time the auto order was disabled due to failed rebills
     * @type {string}
     * @memberof AutoOrder
     */
    disabled_dts?: string;
    /**
     * True if this auto order is enabled
     * @type {boolean}
     * @memberof AutoOrder
     */
    enabled?: boolean;
    /**
     * The reason this auto order failed during the last rebill attempt
     * @type {string}
     * @memberof AutoOrder
     */
    failure_reason?: string;
    /**
     * The items that are setup to rebill
     * @type {Array<AutoOrderItem>}
     * @memberof AutoOrder
     */
    items?: Array<AutoOrderItem>;
    /**
     * Logs associated with this auto order
     * @type {Array<AutoOrderLog>}
     * @memberof AutoOrder
     */
    logs?: Array<AutoOrderLog>;
    /**
     * 
     * @type {AutoOrderManagement}
     * @memberof AutoOrder
     */
    management?: AutoOrderManagement;
    /**
     * UltraCart merchant ID owning this order
     * @type {string}
     * @memberof AutoOrder
     */
    merchant_id?: string;
    /**
     * The date/time the auto order was merged into another auto order
     * @type {string}
     * @memberof AutoOrder
     */
    merged_dts?: string;
    /**
     * The auto order that this auto order was merged into
     * @type {number}
     * @memberof AutoOrder
     */
    merged_into_auto_order_oid?: number;
    /**
     * The next time that the auto order will be attempted for processing
     * @type {string}
     * @memberof AutoOrder
     */
    next_attempt?: string;
    /**
     * 
     * @type {Order}
     * @memberof AutoOrder
     */
    original_order?: Order;
    /**
     * The original order id that this auto order is associated with.
     * @type {string}
     * @memberof AutoOrder
     */
    original_order_id?: string;
    /**
     * Override the affiliate id given credit for rebills of this auto order
     * @type {number}
     * @memberof AutoOrder
     */
    override_affiliate_id?: number;
    /**
     * Rebill orders that have taken place on this auto order
     * @type {Array<Order>}
     * @memberof AutoOrder
     */
    rebill_orders?: Array<Order>;
    /**
     * The RTG code associated with this order for future rebills
     * @type {string}
     * @memberof AutoOrder
     */
    rotating_transaction_gateway_code?: string;
    /**
     * The status of the auto order
     * @type {string}
     * @memberof AutoOrder
     */
    status?: AutoOrderStatusEnum;
}


/**
 * @export
 */
export const AutoOrderStatusEnum = {
    Active: 'active',
    Canceled: 'canceled',
    Disabled: 'disabled',
    Merged: 'merged'
} as const;
export type AutoOrderStatusEnum = typeof AutoOrderStatusEnum[keyof typeof AutoOrderStatusEnum];


export function AutoOrderFromJSON(json: any): AutoOrder {
    return AutoOrderFromJSONTyped(json, false);
}

export function AutoOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'add_ons': !exists(json, 'add_ons') ? undefined : ((json['add_ons'] as Array<any>).map(AutoOrderAddonItemFromJSON)),
        'auto_order_code': !exists(json, 'auto_order_code') ? undefined : json['auto_order_code'],
        'auto_order_oid': !exists(json, 'auto_order_oid') ? undefined : json['auto_order_oid'],
        'cancel_after_next_x_orders': !exists(json, 'cancel_after_next_x_orders') ? undefined : json['cancel_after_next_x_orders'],
        'cancel_downgrade': !exists(json, 'cancel_downgrade') ? undefined : json['cancel_downgrade'],
        'cancel_reason': !exists(json, 'cancel_reason') ? undefined : json['cancel_reason'],
        'cancel_upgrade': !exists(json, 'cancel_upgrade') ? undefined : json['cancel_upgrade'],
        'canceled_by_user': !exists(json, 'canceled_by_user') ? undefined : json['canceled_by_user'],
        'canceled_dts': !exists(json, 'canceled_dts') ? undefined : json['canceled_dts'],
        'completed': !exists(json, 'completed') ? undefined : json['completed'],
        'credit_card_attempt': !exists(json, 'credit_card_attempt') ? undefined : json['credit_card_attempt'],
        'disabled_dts': !exists(json, 'disabled_dts') ? undefined : json['disabled_dts'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'failure_reason': !exists(json, 'failure_reason') ? undefined : json['failure_reason'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(AutoOrderItemFromJSON)),
        'logs': !exists(json, 'logs') ? undefined : ((json['logs'] as Array<any>).map(AutoOrderLogFromJSON)),
        'management': !exists(json, 'management') ? undefined : AutoOrderManagementFromJSON(json['management']),
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'merged_dts': !exists(json, 'merged_dts') ? undefined : json['merged_dts'],
        'merged_into_auto_order_oid': !exists(json, 'merged_into_auto_order_oid') ? undefined : json['merged_into_auto_order_oid'],
        'next_attempt': !exists(json, 'next_attempt') ? undefined : json['next_attempt'],
        'original_order': !exists(json, 'original_order') ? undefined : OrderFromJSON(json['original_order']),
        'original_order_id': !exists(json, 'original_order_id') ? undefined : json['original_order_id'],
        'override_affiliate_id': !exists(json, 'override_affiliate_id') ? undefined : json['override_affiliate_id'],
        'rebill_orders': !exists(json, 'rebill_orders') ? undefined : ((json['rebill_orders'] as Array<any>).map(OrderFromJSON)),
        'rotating_transaction_gateway_code': !exists(json, 'rotating_transaction_gateway_code') ? undefined : json['rotating_transaction_gateway_code'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function AutoOrderToJSON(value?: AutoOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'add_ons': value.add_ons === undefined ? undefined : ((value.add_ons as Array<any>).map(AutoOrderAddonItemToJSON)),
        'auto_order_code': value.auto_order_code,
        'auto_order_oid': value.auto_order_oid,
        'cancel_after_next_x_orders': value.cancel_after_next_x_orders,
        'cancel_downgrade': value.cancel_downgrade,
        'cancel_reason': value.cancel_reason,
        'cancel_upgrade': value.cancel_upgrade,
        'canceled_by_user': value.canceled_by_user,
        'canceled_dts': value.canceled_dts,
        'completed': value.completed,
        'credit_card_attempt': value.credit_card_attempt,
        'disabled_dts': value.disabled_dts,
        'enabled': value.enabled,
        'failure_reason': value.failure_reason,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(AutoOrderItemToJSON)),
        'logs': value.logs === undefined ? undefined : ((value.logs as Array<any>).map(AutoOrderLogToJSON)),
        'management': AutoOrderManagementToJSON(value.management),
        'merchant_id': value.merchant_id,
        'merged_dts': value.merged_dts,
        'merged_into_auto_order_oid': value.merged_into_auto_order_oid,
        'next_attempt': value.next_attempt,
        'original_order': OrderToJSON(value.original_order),
        'original_order_id': value.original_order_id,
        'override_affiliate_id': value.override_affiliate_id,
        'rebill_orders': value.rebill_orders === undefined ? undefined : ((value.rebill_orders as Array<any>).map(OrderToJSON)),
        'rotating_transaction_gateway_code': value.rotating_transaction_gateway_code,
        'status': value.status,
    };
}


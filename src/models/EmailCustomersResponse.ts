/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmailCustomer,
    EmailCustomerFromJSON,
    EmailCustomerFromJSONTyped,
    EmailCustomerToJSON,
} from './EmailCustomer';

/**
 * 
 * @export
 * @interface EmailCustomersResponse
 */
export interface EmailCustomersResponse {
    /**
     * Customers on the page
     * @type {Array<EmailCustomer>}
     * @memberof EmailCustomersResponse
     */
    customers?: Array<EmailCustomer>;
    /**
     * Page number (one based offset)
     * @type {number}
     * @memberof EmailCustomersResponse
     */
    page_number?: number;
    /**
     * Number of records per page
     * @type {number}
     * @memberof EmailCustomersResponse
     */
    page_size?: number;
    /**
     * Total customers
     * @type {number}
     * @memberof EmailCustomersResponse
     */
    total_customers?: number;
    /**
     * Total number of pages
     * @type {number}
     * @memberof EmailCustomersResponse
     */
    total_pages?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof EmailCustomersResponse)[] = ["customers", "page_number", "page_size", "total_customers", "total_pages"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the EmailCustomersResponse interface.
 */
export function instanceOfEmailCustomersResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmailCustomersResponseFromJSON(json: any): EmailCustomersResponse {
    return EmailCustomersResponseFromJSONTyped(json, false);
}

export function EmailCustomersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailCustomersResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customers': !exists(json, 'customers') ? undefined : ((json['customers'] as Array<any>).map(EmailCustomerFromJSON)),
        'page_number': !exists(json, 'page_number') ? undefined : json['page_number'],
        'page_size': !exists(json, 'page_size') ? undefined : json['page_size'],
        'total_customers': !exists(json, 'total_customers') ? undefined : json['total_customers'],
        'total_pages': !exists(json, 'total_pages') ? undefined : json['total_pages'],
    };
}

export function EmailCustomersResponseToJSON(value?: EmailCustomersResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customers': value.customers === undefined ? undefined : ((value.customers as Array<any>).map(EmailCustomerToJSON)),
        'page_number': value.page_number,
        'page_size': value.page_size,
        'total_customers': value.total_customers,
        'total_pages': value.total_pages,
    };
}


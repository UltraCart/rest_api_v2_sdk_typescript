/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LinkedAccount,
    LinkedAccountFromJSON,
    LinkedAccountFromJSONTyped,
    LinkedAccountToJSON,
} from './LinkedAccount';
import {
    Notification,
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';
import {
    Permission,
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
} from './Permission';
import {
    UserGroupMembership,
    UserGroupMembershipFromJSON,
    UserGroupMembershipFromJSONTyped,
    UserGroupMembershipToJSON,
} from './UserGroupMembership';
import {
    UserLogin,
    UserLoginFromJSON,
    UserLoginFromJSONTyped,
    UserLoginToJSON,
} from './UserLogin';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * A list of IP addresses whitelisted for any user with API Access permission.  Without this list, each ip address must be authenticated by a user, which can be a pain for some servers.
     * @type {Array<string>}
     * @memberof User
     */
    api_ip_address_masks?: Array<string>;
    /**
     * Supply a new FTP password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.  The FTP password cannot be the same as the normal password.
     * @type {string}
     * @memberof User
     */
    change_ftp_password_to?: string;
    /**
     * Supply a new password using this field.  Password are stored using one-way encryption, so they are never available anywhere in the system.
     * @type {string}
     * @memberof User
     */
    change_password_to?: string;
    /**
     * Email address of user
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * Full name of user.  This is used solely for human assistance and so the UltraCart staff knows who they are calling when there is a problem.
     * @type {string}
     * @memberof User
     */
    full_name?: string;
    /**
     * A list of groups for this merchant and whether or not this user is a member of those groups.
     * @type {Array<UserGroupMembership>}
     * @memberof User
     */
    groups?: Array<UserGroupMembership>;
    /**
     * A list of linked accounts and whether or not this user is mirrored to any of those accounts.
     * @type {Array<LinkedAccount>}
     * @memberof User
     */
    linked_accounts?: Array<LinkedAccount>;
    /**
     * User name of user.  Must be unique across a merchant account.
     * @type {string}
     * @memberof User
     */
    login?: string;
    /**
     * A list of user logins over the past 90 days
     * @type {Array<UserLogin>}
     * @memberof User
     */
    login_histories?: Array<UserLogin>;
    /**
     * A list of notifications the user receives.
     * @type {Array<Notification>}
     * @memberof User
     */
    notifications?: Array<Notification>;
    /**
     * OTP Serial Number such as Google Authenticator or Crypto Card.
     * @type {string}
     * @memberof User
     */
    otp_serial_number?: string;
    /**
     * A list of permissions the user enjoys for accessing the backend of UltraCart.
     * @type {Array<Permission>}
     * @memberof User
     */
    permissions?: Array<Permission>;
    /**
     * Phone number of user.  Please supply a valid phone number.  When something breaks on your account, we need to be able to reach you.
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * User id is a unique identifier for this user
     * @type {number}
     * @memberof User
     */
    user_id?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof User)[] = ["api_ip_address_masks", "change_ftp_password_to", "change_password_to", "email", "full_name", "groups", "linked_accounts", "login", "login_histories", "notifications", "otp_serial_number", "permissions", "phone", "user_id"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'api_ip_address_masks': !exists(json, 'api_ip_address_masks') ? undefined : json['api_ip_address_masks'],
        'change_ftp_password_to': !exists(json, 'change_ftp_password_to') ? undefined : json['change_ftp_password_to'],
        'change_password_to': !exists(json, 'change_password_to') ? undefined : json['change_password_to'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'full_name': !exists(json, 'full_name') ? undefined : json['full_name'],
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(UserGroupMembershipFromJSON)),
        'linked_accounts': !exists(json, 'linked_accounts') ? undefined : ((json['linked_accounts'] as Array<any>).map(LinkedAccountFromJSON)),
        'login': !exists(json, 'login') ? undefined : json['login'],
        'login_histories': !exists(json, 'login_histories') ? undefined : ((json['login_histories'] as Array<any>).map(UserLoginFromJSON)),
        'notifications': !exists(json, 'notifications') ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
        'otp_serial_number': !exists(json, 'otp_serial_number') ? undefined : json['otp_serial_number'],
        'permissions': !exists(json, 'permissions') ? undefined : ((json['permissions'] as Array<any>).map(PermissionFromJSON)),
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'user_id': !exists(json, 'user_id') ? undefined : json['user_id'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'api_ip_address_masks': value.api_ip_address_masks,
        'change_ftp_password_to': value.change_ftp_password_to,
        'change_password_to': value.change_password_to,
        'email': value.email,
        'full_name': value.full_name,
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(UserGroupMembershipToJSON)),
        'linked_accounts': value.linked_accounts === undefined ? undefined : ((value.linked_accounts as Array<any>).map(LinkedAccountToJSON)),
        'login': value.login,
        'login_histories': value.login_histories === undefined ? undefined : ((value.login_histories as Array<any>).map(UserLoginToJSON)),
        'notifications': value.notifications === undefined ? undefined : ((value.notifications as Array<any>).map(NotificationToJSON)),
        'otp_serial_number': value.otp_serial_number,
        'permissions': value.permissions === undefined ? undefined : ((value.permissions as Array<any>).map(PermissionToJSON)),
        'phone': value.phone,
        'user_id': value.user_id,
    };
}


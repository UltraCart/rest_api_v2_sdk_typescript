/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderTaxes
 */
export interface OrderTaxes {
    /**
     * Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
     * @type {number}
     * @memberof OrderTaxes
     */
    arbitrary_tax?: number;
    /**
     * Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
     * @type {number}
     * @memberof OrderTaxes
     */
    arbitrary_tax_rate?: number;
    /**
     * Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
     * @type {number}
     * @memberof OrderTaxes
     */
    arbitrary_taxable_subtotal?: number;
    /**
     * QuickBooks tax city code
     * @type {string}
     * @memberof OrderTaxes
     */
    tax_city_accounting_code?: string;
    /**
     * QuickBooks tax country code
     * @type {string}
     * @memberof OrderTaxes
     */
    tax_country_accounting_code?: string;
    /**
     * County used for tax calculation purposes (only in the United States)
     * @type {string}
     * @memberof OrderTaxes
     */
    tax_county?: string;
    /**
     * QuickBooks tax county code
     * @type {string}
     * @memberof OrderTaxes
     */
    tax_county_accounting_code?: string;
    /**
     * True if gift charge is taxed
     * @type {boolean}
     * @memberof OrderTaxes
     */
    tax_gift_charge?: boolean;
    /**
     * QuickBooks tax postal code code
     * @type {string}
     * @memberof OrderTaxes
     */
    tax_postal_code_accounting_code?: string;
    /**
     * Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.
     * @type {number}
     * @memberof OrderTaxes
     */
    tax_rate?: number;
    /**
     * Tax rate at the city level
     * @type {number}
     * @memberof OrderTaxes
     */
    tax_rate_city?: number;
    /**
     * Tax rate at the country level
     * @type {number}
     * @memberof OrderTaxes
     */
    tax_rate_country?: number;
    /**
     * Tax rate at the county level
     * @type {number}
     * @memberof OrderTaxes
     */
    tax_rate_county?: number;
    /**
     * Tax rate at the postal code level
     * @type {number}
     * @memberof OrderTaxes
     */
    tax_rate_postal_code?: number;
    /**
     * Tax rate at the state level
     * @type {number}
     * @memberof OrderTaxes
     */
    tax_rate_state?: number;
    /**
     * True if shipping is taxed
     * @type {boolean}
     * @memberof OrderTaxes
     */
    tax_shipping?: boolean;
    /**
     * QuickBooks tax state code
     * @type {string}
     * @memberof OrderTaxes
     */
    tax_state_accounting_code?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof OrderTaxes)[] = ["arbitrary_tax", "arbitrary_tax_rate", "arbitrary_taxable_subtotal", "tax_city_accounting_code", "tax_country_accounting_code", "tax_county", "tax_county_accounting_code", "tax_gift_charge", "tax_postal_code_accounting_code", "tax_rate", "tax_rate_city", "tax_rate_country", "tax_rate_county", "tax_rate_postal_code", "tax_rate_state", "tax_shipping", "tax_state_accounting_code"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the OrderTaxes interface.
 */
export function instanceOfOrderTaxes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderTaxesFromJSON(json: any): OrderTaxes {
    return OrderTaxesFromJSONTyped(json, false);
}

export function OrderTaxesFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderTaxes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'arbitrary_tax': !exists(json, 'arbitrary_tax') ? undefined : json['arbitrary_tax'],
        'arbitrary_tax_rate': !exists(json, 'arbitrary_tax_rate') ? undefined : json['arbitrary_tax_rate'],
        'arbitrary_taxable_subtotal': !exists(json, 'arbitrary_taxable_subtotal') ? undefined : json['arbitrary_taxable_subtotal'],
        'tax_city_accounting_code': !exists(json, 'tax_city_accounting_code') ? undefined : json['tax_city_accounting_code'],
        'tax_country_accounting_code': !exists(json, 'tax_country_accounting_code') ? undefined : json['tax_country_accounting_code'],
        'tax_county': !exists(json, 'tax_county') ? undefined : json['tax_county'],
        'tax_county_accounting_code': !exists(json, 'tax_county_accounting_code') ? undefined : json['tax_county_accounting_code'],
        'tax_gift_charge': !exists(json, 'tax_gift_charge') ? undefined : json['tax_gift_charge'],
        'tax_postal_code_accounting_code': !exists(json, 'tax_postal_code_accounting_code') ? undefined : json['tax_postal_code_accounting_code'],
        'tax_rate': !exists(json, 'tax_rate') ? undefined : json['tax_rate'],
        'tax_rate_city': !exists(json, 'tax_rate_city') ? undefined : json['tax_rate_city'],
        'tax_rate_country': !exists(json, 'tax_rate_country') ? undefined : json['tax_rate_country'],
        'tax_rate_county': !exists(json, 'tax_rate_county') ? undefined : json['tax_rate_county'],
        'tax_rate_postal_code': !exists(json, 'tax_rate_postal_code') ? undefined : json['tax_rate_postal_code'],
        'tax_rate_state': !exists(json, 'tax_rate_state') ? undefined : json['tax_rate_state'],
        'tax_shipping': !exists(json, 'tax_shipping') ? undefined : json['tax_shipping'],
        'tax_state_accounting_code': !exists(json, 'tax_state_accounting_code') ? undefined : json['tax_state_accounting_code'],
    };
}

export function OrderTaxesToJSON(value?: OrderTaxes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'arbitrary_tax': value.arbitrary_tax,
        'arbitrary_tax_rate': value.arbitrary_tax_rate,
        'arbitrary_taxable_subtotal': value.arbitrary_taxable_subtotal,
        'tax_city_accounting_code': value.tax_city_accounting_code,
        'tax_country_accounting_code': value.tax_country_accounting_code,
        'tax_county': value.tax_county,
        'tax_county_accounting_code': value.tax_county_accounting_code,
        'tax_gift_charge': value.tax_gift_charge,
        'tax_postal_code_accounting_code': value.tax_postal_code_accounting_code,
        'tax_rate': value.tax_rate,
        'tax_rate_city': value.tax_rate_city,
        'tax_rate_country': value.tax_rate_country,
        'tax_rate_county': value.tax_rate_county,
        'tax_rate_postal_code': value.tax_rate_postal_code,
        'tax_rate_state': value.tax_rate_state,
        'tax_shipping': value.tax_shipping,
        'tax_state_accounting_code': value.tax_state_accounting_code,
    };
}


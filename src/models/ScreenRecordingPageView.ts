/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ScreenRecordingPageViewEvent,
    ScreenRecordingPageViewEventFromJSON,
    ScreenRecordingPageViewEventFromJSONTyped,
    ScreenRecordingPageViewEventToJSON,
} from './ScreenRecordingPageViewEvent';
import {
    ScreenRecordingPageViewParameter,
    ScreenRecordingPageViewParameterFromJSON,
    ScreenRecordingPageViewParameterFromJSONTyped,
    ScreenRecordingPageViewParameterToJSON,
} from './ScreenRecordingPageViewParameter';

/**
 * 
 * @export
 * @interface ScreenRecordingPageView
 */
export interface ScreenRecordingPageView {
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    domain?: string;
    /**
     * 
     * @type {Array<ScreenRecordingPageViewEvent>}
     * @memberof ScreenRecordingPageView
     */
    events?: Array<ScreenRecordingPageViewEvent>;
    /**
     * First event timestamp
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    first_event_timestamp?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ScreenRecordingPageView
     */
    http_post?: boolean;
    /**
     * Last event timestamp
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    last_event_timestamp?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ScreenRecordingPageView
     */
    missing_events?: boolean;
    /**
     * 
     * @type {Array<ScreenRecordingPageViewParameter>}
     * @memberof ScreenRecordingPageView
     */
    params?: Array<ScreenRecordingPageViewParameter>;
    /**
     * 
     * @type {number}
     * @memberof ScreenRecordingPageView
     */
    range_end?: number;
    /**
     * 
     * @type {number}
     * @memberof ScreenRecordingPageView
     */
    range_start?: number;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    referrer?: string;
    /**
     * 
     * @type {Array<ScreenRecordingPageViewParameter>}
     * @memberof ScreenRecordingPageView
     */
    referrer_params?: Array<ScreenRecordingPageViewParameter>;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    referrer_raw?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    screen_recording_page_view_uuid?: string;
    /**
     * 
     * @type {number}
     * @memberof ScreenRecordingPageView
     */
    time_on_page?: number;
    /**
     * Amount of time for DOMContentLoaded event to fire (milliseconds)
     * @type {number}
     * @memberof ScreenRecordingPageView
     */
    timing_dom_content_loaded?: number;
    /**
     * Amount of time for loaded event to fire (milliseconds)
     * @type {number}
     * @memberof ScreenRecordingPageView
     */
    timing_loaded?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ScreenRecordingPageView
     */
    truncated_events?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    ucapv?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingPageView
     */
    url?: string;
}



/**
 * Check if a given object implements the ScreenRecordingPageView interface.
 */
export function instanceOfScreenRecordingPageView(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScreenRecordingPageViewFromJSON(json: any): ScreenRecordingPageView {
    return ScreenRecordingPageViewFromJSONTyped(json, false);
}

export function ScreenRecordingPageViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScreenRecordingPageView {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'events': !exists(json, 'events') ? undefined : ((json['events'] as Array<any>).map(ScreenRecordingPageViewEventFromJSON)),
        'first_event_timestamp': !exists(json, 'first_event_timestamp') ? undefined : json['first_event_timestamp'],
        'http_post': !exists(json, 'http_post') ? undefined : json['http_post'],
        'last_event_timestamp': !exists(json, 'last_event_timestamp') ? undefined : json['last_event_timestamp'],
        'missing_events': !exists(json, 'missing_events') ? undefined : json['missing_events'],
        'params': !exists(json, 'params') ? undefined : ((json['params'] as Array<any>).map(ScreenRecordingPageViewParameterFromJSON)),
        'range_end': !exists(json, 'range_end') ? undefined : json['range_end'],
        'range_start': !exists(json, 'range_start') ? undefined : json['range_start'],
        'referrer': !exists(json, 'referrer') ? undefined : json['referrer'],
        'referrer_params': !exists(json, 'referrer_params') ? undefined : ((json['referrer_params'] as Array<any>).map(ScreenRecordingPageViewParameterFromJSON)),
        'referrer_raw': !exists(json, 'referrer_raw') ? undefined : json['referrer_raw'],
        'screen_recording_page_view_uuid': !exists(json, 'screen_recording_page_view_uuid') ? undefined : json['screen_recording_page_view_uuid'],
        'time_on_page': !exists(json, 'time_on_page') ? undefined : json['time_on_page'],
        'timing_dom_content_loaded': !exists(json, 'timing_dom_content_loaded') ? undefined : json['timing_dom_content_loaded'],
        'timing_loaded': !exists(json, 'timing_loaded') ? undefined : json['timing_loaded'],
        'truncated_events': !exists(json, 'truncated_events') ? undefined : json['truncated_events'],
        'ucapv': !exists(json, 'ucapv') ? undefined : json['ucapv'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function ScreenRecordingPageViewToJSON(value?: ScreenRecordingPageView | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domain': value.domain,
        'events': value.events === undefined ? undefined : ((value.events as Array<any>).map(ScreenRecordingPageViewEventToJSON)),
        'first_event_timestamp': value.first_event_timestamp,
        'http_post': value.http_post,
        'last_event_timestamp': value.last_event_timestamp,
        'missing_events': value.missing_events,
        'params': value.params === undefined ? undefined : ((value.params as Array<any>).map(ScreenRecordingPageViewParameterToJSON)),
        'range_end': value.range_end,
        'range_start': value.range_start,
        'referrer': value.referrer,
        'referrer_params': value.referrer_params === undefined ? undefined : ((value.referrer_params as Array<any>).map(ScreenRecordingPageViewParameterToJSON)),
        'referrer_raw': value.referrer_raw,
        'screen_recording_page_view_uuid': value.screen_recording_page_view_uuid,
        'time_on_page': value.time_on_page,
        'timing_dom_content_loaded': value.timing_dom_content_loaded,
        'timing_loaded': value.timing_loaded,
        'truncated_events': value.truncated_events,
        'ucapv': value.ucapv,
        'url': value.url,
    };
}


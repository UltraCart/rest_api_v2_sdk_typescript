/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ScreenRecordingFilterValuesEventParams
 */
export interface ScreenRecordingFilterValuesEventParams {
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingFilterValuesEventParams
     */
    name?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ScreenRecordingFilterValuesEventParams
     */
    values_bd?: Array<number>;
    /**
     * 
     * @type {Array<boolean>}
     * @memberof ScreenRecordingFilterValuesEventParams
     */
    values_bool?: Array<boolean>;
    /**
     * 
     * @type {Array<number>}
     * @memberof ScreenRecordingFilterValuesEventParams
     */
    values_num?: Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScreenRecordingFilterValuesEventParams
     */
    values_text?: Array<string>;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ScreenRecordingFilterValuesEventParams)[] = ["name", "values_bd", "values_bool", "values_num", "values_text"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ScreenRecordingFilterValuesEventParams interface.
 */
export function instanceOfScreenRecordingFilterValuesEventParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScreenRecordingFilterValuesEventParamsFromJSON(json: any): ScreenRecordingFilterValuesEventParams {
    return ScreenRecordingFilterValuesEventParamsFromJSONTyped(json, false);
}

export function ScreenRecordingFilterValuesEventParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScreenRecordingFilterValuesEventParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'values_bd': !exists(json, 'values_bd') ? undefined : json['values_bd'],
        'values_bool': !exists(json, 'values_bool') ? undefined : json['values_bool'],
        'values_num': !exists(json, 'values_num') ? undefined : json['values_num'],
        'values_text': !exists(json, 'values_text') ? undefined : json['values_text'],
    };
}

export function ScreenRecordingFilterValuesEventParamsToJSON(value?: ScreenRecordingFilterValuesEventParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'values_bd': value.values_bd,
        'values_bool': value.values_bool,
        'values_num': value.values_num,
        'values_text': value.values_text,
    };
}


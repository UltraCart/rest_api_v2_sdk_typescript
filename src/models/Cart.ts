/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CartAffiliate,
    CartAffiliateFromJSON,
    CartAffiliateFromJSONTyped,
    CartAffiliateToJSON,
} from './CartAffiliate';
import {
    CartBilling,
    CartBillingFromJSON,
    CartBillingFromJSONTyped,
    CartBillingToJSON,
} from './CartBilling';
import {
    CartBuysafe,
    CartBuysafeFromJSON,
    CartBuysafeFromJSONTyped,
    CartBuysafeToJSON,
} from './CartBuysafe';
import {
    CartCheckout,
    CartCheckoutFromJSON,
    CartCheckoutFromJSONTyped,
    CartCheckoutToJSON,
} from './CartCheckout';
import {
    CartCoupon,
    CartCouponFromJSON,
    CartCouponFromJSONTyped,
    CartCouponToJSON,
} from './CartCoupon';
import {
    CartCurrencyConversion,
    CartCurrencyConversionFromJSON,
    CartCurrencyConversionFromJSONTyped,
    CartCurrencyConversionToJSON,
} from './CartCurrencyConversion';
import {
    CartCustomerProfile,
    CartCustomerProfileFromJSON,
    CartCustomerProfileFromJSONTyped,
    CartCustomerProfileToJSON,
} from './CartCustomerProfile';
import {
    CartGift,
    CartGiftFromJSON,
    CartGiftFromJSONTyped,
    CartGiftToJSON,
} from './CartGift';
import {
    CartGiftCertificate,
    CartGiftCertificateFromJSON,
    CartGiftCertificateFromJSONTyped,
    CartGiftCertificateToJSON,
} from './CartGiftCertificate';
import {
    CartItem,
    CartItemFromJSON,
    CartItemFromJSONTyped,
    CartItemToJSON,
} from './CartItem';
import {
    CartMarketing,
    CartMarketingFromJSON,
    CartMarketingFromJSONTyped,
    CartMarketingToJSON,
} from './CartMarketing';
import {
    CartPayment,
    CartPaymentFromJSON,
    CartPaymentFromJSONTyped,
    CartPaymentToJSON,
} from './CartPayment';
import {
    CartProperty,
    CartPropertyFromJSON,
    CartPropertyFromJSONTyped,
    CartPropertyToJSON,
} from './CartProperty';
import {
    CartSettings,
    CartSettingsFromJSON,
    CartSettingsFromJSONTyped,
    CartSettingsToJSON,
} from './CartSettings';
import {
    CartShipping,
    CartShippingFromJSON,
    CartShippingFromJSONTyped,
    CartShippingToJSON,
} from './CartShipping';
import {
    CartSummary,
    CartSummaryFromJSON,
    CartSummaryFromJSONTyped,
    CartSummaryToJSON,
} from './CartSummary';
import {
    CartTaxes,
    CartTaxesFromJSON,
    CartTaxesFromJSONTyped,
    CartTaxesToJSON,
} from './CartTaxes';
import {
    CartUpsellAfter,
    CartUpsellAfterFromJSON,
    CartUpsellAfterFromJSONTyped,
    CartUpsellAfterToJSON,
} from './CartUpsellAfter';

/**
 * 
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * 
     * @type {CartAffiliate}
     * @memberof Cart
     */
    affiliate?: CartAffiliate;
    /**
     * The affiliate network pixel identifier associated with the cart
     * @type {number}
     * @memberof Cart
     */
    affiliate_network_pixel_oid?: number;
    /**
     * The ISO-4217 three letter base currency code of the account
     * @type {string}
     * @memberof Cart
     */
    base_currency_code?: string;
    /**
     * 
     * @type {CartBilling}
     * @memberof Cart
     */
    billing?: CartBilling;
    /**
     * 
     * @type {CartBuysafe}
     * @memberof Cart
     */
    buysafe?: CartBuysafe;
    /**
     * Unique identifier for this cart
     * @type {string}
     * @memberof Cart
     */
    cart_id?: string;
    /**
     * 
     * @type {CartCheckout}
     * @memberof Cart
     */
    checkout?: CartCheckout;
    /**
     * Coupons
     * @type {Array<CartCoupon>}
     * @memberof Cart
     */
    coupons?: Array<CartCoupon>;
    /**
     * The ISO-4217 three letter currency code the customer is viewing prices in
     * @type {string}
     * @memberof Cart
     */
    currency_code?: string;
    /**
     * 
     * @type {CartCurrencyConversion}
     * @memberof Cart
     */
    currency_conversion?: CartCurrencyConversion;
    /**
     * 
     * @type {CartCustomerProfile}
     * @memberof Cart
     */
    customer_profile?: CartCustomerProfile;
    /**
     * The exchange rate if the customer is viewing a different currency than the base
     * @type {number}
     * @memberof Cart
     */
    exchange_rate?: number;
    /**
     * 
     * @type {CartGift}
     * @memberof Cart
     */
    gift?: CartGift;
    /**
     * 
     * @type {CartGiftCertificate}
     * @memberof Cart
     */
    gift_certificate?: CartGiftCertificate;
    /**
     * Items
     * @type {Array<CartItem>}
     * @memberof Cart
     */
    items?: Array<CartItem>;
    /**
     * The ISO-631 three letter code the customer would like to checkout with
     * @type {string}
     * @memberof Cart
     */
    language_iso_code?: string;
    /**
     * True if the customer is logged into their profile
     * @type {boolean}
     * @memberof Cart
     */
    logged_in?: boolean;
    /**
     * 
     * @type {CartMarketing}
     * @memberof Cart
     */
    marketing?: CartMarketing;
    /**
     * Merchant ID this cart is associated with
     * @type {string}
     * @memberof Cart
     */
    merchant_id?: string;
    /**
     * 
     * @type {CartPayment}
     * @memberof Cart
     */
    payment?: CartPayment;
    /**
     * Properties associated with the cart
     * @type {Array<CartProperty>}
     * @memberof Cart
     */
    properties?: Array<CartProperty>;
    /**
     * 
     * @type {CartSettings}
     * @memberof Cart
     */
    settings?: CartSettings;
    /**
     * 
     * @type {CartShipping}
     * @memberof Cart
     */
    shipping?: CartShipping;
    /**
     * 
     * @type {CartSummary}
     * @memberof Cart
     */
    summary?: CartSummary;
    /**
     * 
     * @type {CartTaxes}
     * @memberof Cart
     */
    taxes?: CartTaxes;
    /**
     * 
     * @type {CartUpsellAfter}
     * @memberof Cart
     */
    upsell_after?: CartUpsellAfter;
}

export function CartFromJSON(json: any): Cart {
    return CartFromJSONTyped(json, false);
}

export function CartFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cart {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'affiliate': !exists(json, 'affiliate') ? undefined : CartAffiliateFromJSON(json['affiliate']),
        'affiliate_network_pixel_oid': !exists(json, 'affiliate_network_pixel_oid') ? undefined : json['affiliate_network_pixel_oid'],
        'base_currency_code': !exists(json, 'base_currency_code') ? undefined : json['base_currency_code'],
        'billing': !exists(json, 'billing') ? undefined : CartBillingFromJSON(json['billing']),
        'buysafe': !exists(json, 'buysafe') ? undefined : CartBuysafeFromJSON(json['buysafe']),
        'cart_id': !exists(json, 'cart_id') ? undefined : json['cart_id'],
        'checkout': !exists(json, 'checkout') ? undefined : CartCheckoutFromJSON(json['checkout']),
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(CartCouponFromJSON)),
        'currency_code': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'currency_conversion': !exists(json, 'currency_conversion') ? undefined : CartCurrencyConversionFromJSON(json['currency_conversion']),
        'customer_profile': !exists(json, 'customer_profile') ? undefined : CartCustomerProfileFromJSON(json['customer_profile']),
        'exchange_rate': !exists(json, 'exchange_rate') ? undefined : json['exchange_rate'],
        'gift': !exists(json, 'gift') ? undefined : CartGiftFromJSON(json['gift']),
        'gift_certificate': !exists(json, 'gift_certificate') ? undefined : CartGiftCertificateFromJSON(json['gift_certificate']),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(CartItemFromJSON)),
        'language_iso_code': !exists(json, 'language_iso_code') ? undefined : json['language_iso_code'],
        'logged_in': !exists(json, 'logged_in') ? undefined : json['logged_in'],
        'marketing': !exists(json, 'marketing') ? undefined : CartMarketingFromJSON(json['marketing']),
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'payment': !exists(json, 'payment') ? undefined : CartPaymentFromJSON(json['payment']),
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(CartPropertyFromJSON)),
        'settings': !exists(json, 'settings') ? undefined : CartSettingsFromJSON(json['settings']),
        'shipping': !exists(json, 'shipping') ? undefined : CartShippingFromJSON(json['shipping']),
        'summary': !exists(json, 'summary') ? undefined : CartSummaryFromJSON(json['summary']),
        'taxes': !exists(json, 'taxes') ? undefined : CartTaxesFromJSON(json['taxes']),
        'upsell_after': !exists(json, 'upsell_after') ? undefined : CartUpsellAfterFromJSON(json['upsell_after']),
    };
}

export function CartToJSON(value?: Cart | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'affiliate': CartAffiliateToJSON(value.affiliate),
        'affiliate_network_pixel_oid': value.affiliate_network_pixel_oid,
        'base_currency_code': value.base_currency_code,
        'billing': CartBillingToJSON(value.billing),
        'buysafe': CartBuysafeToJSON(value.buysafe),
        'cart_id': value.cart_id,
        'checkout': CartCheckoutToJSON(value.checkout),
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(CartCouponToJSON)),
        'currency_code': value.currency_code,
        'currency_conversion': CartCurrencyConversionToJSON(value.currency_conversion),
        'customer_profile': CartCustomerProfileToJSON(value.customer_profile),
        'exchange_rate': value.exchange_rate,
        'gift': CartGiftToJSON(value.gift),
        'gift_certificate': CartGiftCertificateToJSON(value.gift_certificate),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(CartItemToJSON)),
        'language_iso_code': value.language_iso_code,
        'logged_in': value.logged_in,
        'marketing': CartMarketingToJSON(value.marketing),
        'merchant_id': value.merchant_id,
        'payment': CartPaymentToJSON(value.payment),
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(CartPropertyToJSON)),
        'settings': CartSettingsToJSON(value.settings),
        'shipping': CartShippingToJSON(value.shipping),
        'summary': CartSummaryToJSON(value.summary),
        'taxes': CartTaxesToJSON(value.taxes),
        'upsell_after': CartUpsellAfterToJSON(value.upsell_after),
    };
}


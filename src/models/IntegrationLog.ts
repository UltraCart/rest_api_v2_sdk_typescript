/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    IntegrationLogFile,
    IntegrationLogFileFromJSON,
    IntegrationLogFileFromJSONTyped,
    IntegrationLogFileToJSON,
} from './IntegrationLogFile';
import {
    IntegrationLogLog,
    IntegrationLogLogFromJSON,
    IntegrationLogLogFromJSONTyped,
    IntegrationLogLogToJSON,
} from './IntegrationLogLog';

/**
 * 
 * @export
 * @interface IntegrationLog
 */
export interface IntegrationLog {
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    action?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    direction?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    email?: string;
    /**
     * 
     * @type {Array<IntegrationLogFile>}
     * @memberof IntegrationLog
     */
    files?: Array<IntegrationLogFile>;
    /**
     * 
     * @type {number}
     * @memberof IntegrationLog
     */
    integration_log_oid?: number;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    item_id?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationLog
     */
    item_ipn_oid?: number;
    /**
     * Date/time the integration log was created
     * @type {string}
     * @memberof IntegrationLog
     */
    log_dts?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    log_type?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    logger_id?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    logger_name?: string;
    /**
     * 
     * @type {Array<IntegrationLogLog>}
     * @memberof IntegrationLog
     */
    logs?: Array<IntegrationLogLog>;
    /**
     * 
     * @type {boolean}
     * @memberof IntegrationLog
     */
    omit_log_map?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof IntegrationLog
     */
    order_ids?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    pk?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    sk?: string;
    /**
     * 
     * @type {string}
     * @memberof IntegrationLog
     */
    status?: string;
    /**
     * 
     * @type {number}
     * @memberof IntegrationLog
     */
    status_code?: number;
}

export function IntegrationLogFromJSON(json: any): IntegrationLog {
    return IntegrationLogFromJSONTyped(json, false);
}

export function IntegrationLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): IntegrationLog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : json['action'],
        'direction': !exists(json, 'direction') ? undefined : json['direction'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(IntegrationLogFileFromJSON)),
        'integration_log_oid': !exists(json, 'integration_log_oid') ? undefined : json['integration_log_oid'],
        'item_id': !exists(json, 'item_id') ? undefined : json['item_id'],
        'item_ipn_oid': !exists(json, 'item_ipn_oid') ? undefined : json['item_ipn_oid'],
        'log_dts': !exists(json, 'log_dts') ? undefined : json['log_dts'],
        'log_type': !exists(json, 'log_type') ? undefined : json['log_type'],
        'logger_id': !exists(json, 'logger_id') ? undefined : json['logger_id'],
        'logger_name': !exists(json, 'logger_name') ? undefined : json['logger_name'],
        'logs': !exists(json, 'logs') ? undefined : ((json['logs'] as Array<any>).map(IntegrationLogLogFromJSON)),
        'omit_log_map': !exists(json, 'omit_log_map') ? undefined : json['omit_log_map'],
        'order_ids': !exists(json, 'order_ids') ? undefined : json['order_ids'],
        'pk': !exists(json, 'pk') ? undefined : json['pk'],
        'sk': !exists(json, 'sk') ? undefined : json['sk'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'status_code': !exists(json, 'status_code') ? undefined : json['status_code'],
    };
}

export function IntegrationLogToJSON(value?: IntegrationLog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'direction': value.direction,
        'email': value.email,
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(IntegrationLogFileToJSON)),
        'integration_log_oid': value.integration_log_oid,
        'item_id': value.item_id,
        'item_ipn_oid': value.item_ipn_oid,
        'log_dts': value.log_dts,
        'log_type': value.log_type,
        'logger_id': value.logger_id,
        'logger_name': value.logger_name,
        'logs': value.logs === undefined ? undefined : ((value.logs as Array<any>).map(IntegrationLogLogToJSON)),
        'omit_log_map': value.omit_log_map,
        'order_ids': value.order_ids,
        'pk': value.pk,
        'sk': value.sk,
        'status': value.status,
        'status_code': value.status_code,
    };
}


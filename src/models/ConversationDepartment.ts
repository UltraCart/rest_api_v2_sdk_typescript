/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConversationDepartmentMember,
    ConversationDepartmentMemberFromJSON,
    ConversationDepartmentMemberFromJSONTyped,
    ConversationDepartmentMemberToJSON,
} from './ConversationDepartmentMember';

/**
 * 
 * @export
 * @interface ConversationDepartment
 */
export interface ConversationDepartment {
    /**
     * 
     * @type {number}
     * @memberof ConversationDepartment
     */
    conversation_department_oid?: number;
    /**
     * 
     * @type {string}
     * @memberof ConversationDepartment
     */
    department_name?: string;
    /**
     * 
     * @type {Array<ConversationDepartmentMember>}
     * @memberof ConversationDepartment
     */
    members?: Array<ConversationDepartmentMember>;
    /**
     * 
     * @type {string}
     * @memberof ConversationDepartment
     */
    merchant_id?: string;
    /**
     * 
     * @type {object}
     * @memberof ConversationDepartment
     */
    settings?: object;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ConversationDepartment)[] = ["conversation_department_oid", "department_name", "members", "merchant_id", "settings"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ConversationDepartment interface.
 */
export function instanceOfConversationDepartment(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConversationDepartmentFromJSON(json: any): ConversationDepartment {
    return ConversationDepartmentFromJSONTyped(json, false);
}

export function ConversationDepartmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationDepartment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conversation_department_oid': !exists(json, 'conversation_department_oid') ? undefined : json['conversation_department_oid'],
        'department_name': !exists(json, 'department_name') ? undefined : json['department_name'],
        'members': !exists(json, 'members') ? undefined : ((json['members'] as Array<any>).map(ConversationDepartmentMemberFromJSON)),
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'settings': !exists(json, 'settings') ? undefined : json['settings'],
    };
}

export function ConversationDepartmentToJSON(value?: ConversationDepartment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conversation_department_oid': value.conversation_department_oid,
        'department_name': value.department_name,
        'members': value.members === undefined ? undefined : ((value.members as Array<any>).map(ConversationDepartmentMemberToJSON)),
        'merchant_id': value.merchant_id,
        'settings': value.settings,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WebhookEventSubscription
 */
export interface WebhookEventSubscription {
    /**
     * Comment about the event to provide further clarification to the end user
     * @type {string}
     * @memberof WebhookEventSubscription
     */
    comments?: string;
    /**
     * True if the event is deprecated.  See the API change log for details on when it will be discontinued.
     * @type {boolean}
     * @memberof WebhookEventSubscription
     */
    deprecated_flag?: boolean;
    /**
     * True if the event is discontinued.  See the API change log for details on migration details.
     * @type {boolean}
     * @memberof WebhookEventSubscription
     */
    discontinued_flag?: boolean;
    /**
     * Description of the event
     * @type {string}
     * @memberof WebhookEventSubscription
     */
    event_description?: string;
    /**
     * Event name
     * @type {string}
     * @memberof WebhookEventSubscription
     */
    event_name?: string;
    /**
     * Optional - Event ruler expression to filter events to.  Only events that match this Ruler expression will be transmitted to the webhook.
     * @type {string}
     * @memberof WebhookEventSubscription
     */
    event_ruler?: string;
    /**
     * The expand string for the notification object.  See the individual resource _expand documentation for valid values.
     * @type {string}
     * @memberof WebhookEventSubscription
     */
    expansion?: string;
    /**
     * True if this is event is subscribed to
     * @type {boolean}
     * @memberof WebhookEventSubscription
     */
    subscribed?: boolean;
    /**
     * True if the event can be triggered to reflow existing records
     * @type {boolean}
     * @memberof WebhookEventSubscription
     */
    supports_reflow?: boolean;
    /**
     * The webhook event object identifier
     * @type {number}
     * @memberof WebhookEventSubscription
     */
    webhook_event_oid?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof WebhookEventSubscription)[] = ["comments", "deprecated_flag", "discontinued_flag", "event_description", "event_name", "event_ruler", "expansion", "subscribed", "supports_reflow", "webhook_event_oid"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the WebhookEventSubscription interface.
 */
export function instanceOfWebhookEventSubscription(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WebhookEventSubscriptionFromJSON(json: any): WebhookEventSubscription {
    return WebhookEventSubscriptionFromJSONTyped(json, false);
}

export function WebhookEventSubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookEventSubscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'deprecated_flag': !exists(json, 'deprecated_flag') ? undefined : json['deprecated_flag'],
        'discontinued_flag': !exists(json, 'discontinued_flag') ? undefined : json['discontinued_flag'],
        'event_description': !exists(json, 'event_description') ? undefined : json['event_description'],
        'event_name': !exists(json, 'event_name') ? undefined : json['event_name'],
        'event_ruler': !exists(json, 'event_ruler') ? undefined : json['event_ruler'],
        'expansion': !exists(json, 'expansion') ? undefined : json['expansion'],
        'subscribed': !exists(json, 'subscribed') ? undefined : json['subscribed'],
        'supports_reflow': !exists(json, 'supports_reflow') ? undefined : json['supports_reflow'],
        'webhook_event_oid': !exists(json, 'webhook_event_oid') ? undefined : json['webhook_event_oid'],
    };
}

export function WebhookEventSubscriptionToJSON(value?: WebhookEventSubscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comments': value.comments,
        'deprecated_flag': value.deprecated_flag,
        'discontinued_flag': value.discontinued_flag,
        'event_description': value.event_description,
        'event_name': value.event_name,
        'event_ruler': value.event_ruler,
        'expansion': value.expansion,
        'subscribed': value.subscribed,
        'supports_reflow': value.supports_reflow,
        'webhook_event_oid': value.webhook_event_oid,
    };
}


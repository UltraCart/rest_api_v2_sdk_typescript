/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GeocodeRequest
 */
export interface GeocodeRequest {
    /**
     * address
     * @type {string}
     * @memberof GeocodeRequest
     */
    address?: string;
    /**
     * city
     * @type {string}
     * @memberof GeocodeRequest
     */
    city?: string;
    /**
     * country_code
     * @type {string}
     * @memberof GeocodeRequest
     */
    country_code?: string;
    /**
     * postal_code
     * @type {string}
     * @memberof GeocodeRequest
     */
    postal_code?: string;
    /**
     * state
     * @type {string}
     * @memberof GeocodeRequest
     */
    state?: string;
}



/**
 * Check if a given object implements the GeocodeRequest interface.
 */
export function instanceOfGeocodeRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GeocodeRequestFromJSON(json: any): GeocodeRequest {
    return GeocodeRequestFromJSONTyped(json, false);
}

export function GeocodeRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeocodeRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : json['address'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'country_code': !exists(json, 'country_code') ? undefined : json['country_code'],
        'postal_code': !exists(json, 'postal_code') ? undefined : json['postal_code'],
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function GeocodeRequestToJSON(value?: GeocodeRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'city': value.city,
        'country_code': value.country_code,
        'postal_code': value.postal_code,
        'state': value.state,
    };
}


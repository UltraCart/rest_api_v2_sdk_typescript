/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConversationWebchatQueueStatusAgent,
    ConversationWebchatQueueStatusAgentFromJSON,
    ConversationWebchatQueueStatusAgentFromJSONTyped,
    ConversationWebchatQueueStatusAgentToJSON,
} from './ConversationWebchatQueueStatusAgent';
import {
    ConversationWebchatQueueStatusQueueEntry,
    ConversationWebchatQueueStatusQueueEntryFromJSON,
    ConversationWebchatQueueStatusQueueEntryFromJSONTyped,
    ConversationWebchatQueueStatusQueueEntryToJSON,
} from './ConversationWebchatQueueStatusQueueEntry';

/**
 * 
 * @export
 * @interface ConversationWebchatQueueStatus
 */
export interface ConversationWebchatQueueStatus {
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    agent_available_count?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    agent_busy_count?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    agent_count?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    agent_unavailable_count?: number;
    /**
     * 
     * @type {Array<ConversationWebchatQueueStatusAgent>}
     * @memberof ConversationWebchatQueueStatus
     */
    agents?: Array<ConversationWebchatQueueStatusAgent>;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_abandon_count?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_active_count?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_average_abandon_time_seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_average_chat_time_seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_average_hold_time_seconds?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_chat_count?: number;
    /**
     * 
     * @type {number}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_waiting_count?: number;
    /**
     * Date/time that the oldest person joined the queue
     * @type {string}
     * @memberof ConversationWebchatQueueStatus
     */
    customer_waiting_join_dts?: string;
    /**
     * 
     * @type {Array<ConversationWebchatQueueStatusQueueEntry>}
     * @memberof ConversationWebchatQueueStatus
     */
    queue_entries?: Array<ConversationWebchatQueueStatusQueueEntry>;
    /**
     * 
     * @type {string}
     * @memberof ConversationWebchatQueueStatus
     */
    queue_name?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ConversationWebchatQueueStatus)[] = ["agent_available_count", "agent_busy_count", "agent_count", "agent_unavailable_count", "agents", "customer_abandon_count", "customer_active_count", "customer_average_abandon_time_seconds", "customer_average_chat_time_seconds", "customer_average_hold_time_seconds", "customer_chat_count", "customer_waiting_count", "customer_waiting_join_dts", "queue_entries", "queue_name"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ConversationWebchatQueueStatus interface.
 */
export function instanceOfConversationWebchatQueueStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConversationWebchatQueueStatusFromJSON(json: any): ConversationWebchatQueueStatus {
    return ConversationWebchatQueueStatusFromJSONTyped(json, false);
}

export function ConversationWebchatQueueStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationWebchatQueueStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'agent_available_count': !exists(json, 'agent_available_count') ? undefined : json['agent_available_count'],
        'agent_busy_count': !exists(json, 'agent_busy_count') ? undefined : json['agent_busy_count'],
        'agent_count': !exists(json, 'agent_count') ? undefined : json['agent_count'],
        'agent_unavailable_count': !exists(json, 'agent_unavailable_count') ? undefined : json['agent_unavailable_count'],
        'agents': !exists(json, 'agents') ? undefined : ((json['agents'] as Array<any>).map(ConversationWebchatQueueStatusAgentFromJSON)),
        'customer_abandon_count': !exists(json, 'customer_abandon_count') ? undefined : json['customer_abandon_count'],
        'customer_active_count': !exists(json, 'customer_active_count') ? undefined : json['customer_active_count'],
        'customer_average_abandon_time_seconds': !exists(json, 'customer_average_abandon_time_seconds') ? undefined : json['customer_average_abandon_time_seconds'],
        'customer_average_chat_time_seconds': !exists(json, 'customer_average_chat_time_seconds') ? undefined : json['customer_average_chat_time_seconds'],
        'customer_average_hold_time_seconds': !exists(json, 'customer_average_hold_time_seconds') ? undefined : json['customer_average_hold_time_seconds'],
        'customer_chat_count': !exists(json, 'customer_chat_count') ? undefined : json['customer_chat_count'],
        'customer_waiting_count': !exists(json, 'customer_waiting_count') ? undefined : json['customer_waiting_count'],
        'customer_waiting_join_dts': !exists(json, 'customer_waiting_join_dts') ? undefined : json['customer_waiting_join_dts'],
        'queue_entries': !exists(json, 'queue_entries') ? undefined : ((json['queue_entries'] as Array<any>).map(ConversationWebchatQueueStatusQueueEntryFromJSON)),
        'queue_name': !exists(json, 'queue_name') ? undefined : json['queue_name'],
    };
}

export function ConversationWebchatQueueStatusToJSON(value?: ConversationWebchatQueueStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'agent_available_count': value.agent_available_count,
        'agent_busy_count': value.agent_busy_count,
        'agent_count': value.agent_count,
        'agent_unavailable_count': value.agent_unavailable_count,
        'agents': value.agents === undefined ? undefined : ((value.agents as Array<any>).map(ConversationWebchatQueueStatusAgentToJSON)),
        'customer_abandon_count': value.customer_abandon_count,
        'customer_active_count': value.customer_active_count,
        'customer_average_abandon_time_seconds': value.customer_average_abandon_time_seconds,
        'customer_average_chat_time_seconds': value.customer_average_chat_time_seconds,
        'customer_average_hold_time_seconds': value.customer_average_hold_time_seconds,
        'customer_chat_count': value.customer_chat_count,
        'customer_waiting_count': value.customer_waiting_count,
        'customer_waiting_join_dts': value.customer_waiting_join_dts,
        'queue_entries': value.queue_entries === undefined ? undefined : ((value.queue_entries as Array<any>).map(ConversationWebchatQueueStatusQueueEntryToJSON)),
        'queue_name': value.queue_name,
    };
}


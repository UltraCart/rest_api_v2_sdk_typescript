/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AutoOrderQuery
 */
export interface AutoOrderQuery {
    /**
     * Auto order code
     * @type {string}
     * @memberof AutoOrderQuery
     */
    auto_order_code?: string;
    /**
     * Card type
     * @type {string}
     * @memberof AutoOrderQuery
     */
    card_type?: string;
    /**
     * City
     * @type {string}
     * @memberof AutoOrderQuery
     */
    city?: string;
    /**
     * Company
     * @type {string}
     * @memberof AutoOrderQuery
     */
    company?: string;
    /**
     * ISO-3166 two letter country code
     * @type {string}
     * @memberof AutoOrderQuery
     */
    country_code?: string;
    /**
     * Customer profile object identifier
     * @type {number}
     * @memberof AutoOrderQuery
     */
    customer_profile_oid?: number;
    /**
     * Email
     * @type {string}
     * @memberof AutoOrderQuery
     */
    email?: string;
    /**
     * First name
     * @type {string}
     * @memberof AutoOrderQuery
     */
    first_name?: string;
    /**
     * Item ID.  Deprecated query field.  This incorrectly meant the original order contained this item id.
     * @type {string}
     * @memberof AutoOrderQuery
     */
    item_id?: string;
    /**
     * Last name
     * @type {string}
     * @memberof AutoOrderQuery
     */
    last_name?: string;
    /**
     * Next Item ID that is supposed to ship.  This is calculated based upon the schedule associated with the original item id.
     * @type {string}
     * @memberof AutoOrderQuery
     */
    next_item_id?: string;
    /**
     * Next shipment date begin
     * @type {string}
     * @memberof AutoOrderQuery
     */
    next_shipment_date_begin?: string;
    /**
     * Next shipment date end
     * @type {string}
     * @memberof AutoOrderQuery
     */
    next_shipment_date_end?: string;
    /**
     * Original Item ID purchased on auto order.
     * @type {string}
     * @memberof AutoOrderQuery
     */
    original_item_id?: string;
    /**
     * Original order date begin
     * @type {string}
     * @memberof AutoOrderQuery
     */
    original_order_date_begin?: string;
    /**
     * Original order date end
     * @type {string}
     * @memberof AutoOrderQuery
     */
    original_order_date_end?: string;
    /**
     * Original order ID
     * @type {string}
     * @memberof AutoOrderQuery
     */
    original_order_id?: string;
    /**
     * Phone
     * @type {string}
     * @memberof AutoOrderQuery
     */
    phone?: string;
    /**
     * Postal code
     * @type {string}
     * @memberof AutoOrderQuery
     */
    postal_code?: string;
    /**
     * State
     * @type {string}
     * @memberof AutoOrderQuery
     */
    state?: string;
    /**
     * Status
     * @type {string}
     * @memberof AutoOrderQuery
     */
    status?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof AutoOrderQuery)[] = ["auto_order_code", "card_type", "city", "company", "country_code", "customer_profile_oid", "email", "first_name", "item_id", "last_name", "next_item_id", "next_shipment_date_begin", "next_shipment_date_end", "original_item_id", "original_order_date_begin", "original_order_date_end", "original_order_id", "phone", "postal_code", "state", "status"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the AutoOrderQuery interface.
 */
export function instanceOfAutoOrderQuery(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoOrderQueryFromJSON(json: any): AutoOrderQuery {
    return AutoOrderQueryFromJSONTyped(json, false);
}

export function AutoOrderQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoOrderQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auto_order_code': !exists(json, 'auto_order_code') ? undefined : json['auto_order_code'],
        'card_type': !exists(json, 'card_type') ? undefined : json['card_type'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'country_code': !exists(json, 'country_code') ? undefined : json['country_code'],
        'customer_profile_oid': !exists(json, 'customer_profile_oid') ? undefined : json['customer_profile_oid'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'first_name': !exists(json, 'first_name') ? undefined : json['first_name'],
        'item_id': !exists(json, 'item_id') ? undefined : json['item_id'],
        'last_name': !exists(json, 'last_name') ? undefined : json['last_name'],
        'next_item_id': !exists(json, 'next_item_id') ? undefined : json['next_item_id'],
        'next_shipment_date_begin': !exists(json, 'next_shipment_date_begin') ? undefined : json['next_shipment_date_begin'],
        'next_shipment_date_end': !exists(json, 'next_shipment_date_end') ? undefined : json['next_shipment_date_end'],
        'original_item_id': !exists(json, 'original_item_id') ? undefined : json['original_item_id'],
        'original_order_date_begin': !exists(json, 'original_order_date_begin') ? undefined : json['original_order_date_begin'],
        'original_order_date_end': !exists(json, 'original_order_date_end') ? undefined : json['original_order_date_end'],
        'original_order_id': !exists(json, 'original_order_id') ? undefined : json['original_order_id'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'postal_code': !exists(json, 'postal_code') ? undefined : json['postal_code'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function AutoOrderQueryToJSON(value?: AutoOrderQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auto_order_code': value.auto_order_code,
        'card_type': value.card_type,
        'city': value.city,
        'company': value.company,
        'country_code': value.country_code,
        'customer_profile_oid': value.customer_profile_oid,
        'email': value.email,
        'first_name': value.first_name,
        'item_id': value.item_id,
        'last_name': value.last_name,
        'next_item_id': value.next_item_id,
        'next_shipment_date_begin': value.next_shipment_date_begin,
        'next_shipment_date_end': value.next_shipment_date_end,
        'original_item_id': value.original_item_id,
        'original_order_date_begin': value.original_order_date_begin,
        'original_order_date_end': value.original_order_date_end,
        'original_order_id': value.original_order_id,
        'phone': value.phone,
        'postal_code': value.postal_code,
        'state': value.state,
        'status': value.status,
    };
}


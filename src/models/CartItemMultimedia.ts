/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CartItemMultimediaThumbnail,
    CartItemMultimediaThumbnailFromJSON,
    CartItemMultimediaThumbnailFromJSONTyped,
    CartItemMultimediaThumbnailToJSON,
} from './CartItemMultimediaThumbnail';

/**
 * 
 * @export
 * @interface CartItemMultimedia
 */
export interface CartItemMultimedia {
    /**
     * Code assigned to the multimedia
     * @type {string}
     * @memberof CartItemMultimedia
     */
    code?: string;
    /**
     * Description
     * @type {string}
     * @memberof CartItemMultimedia
     */
    description?: string;
    /**
     * True if the image should be excluded from galleries
     * @type {boolean}
     * @memberof CartItemMultimedia
     */
    exclude_from_gallery?: boolean;
    /**
     * Image height
     * @type {number}
     * @memberof CartItemMultimedia
     */
    image_height?: number;
    /**
     * Image width
     * @type {number}
     * @memberof CartItemMultimedia
     */
    image_width?: number;
    /**
     * True if the multimedia is the default for this type
     * @type {boolean}
     * @memberof CartItemMultimedia
     */
    is_default?: boolean;
    /**
     * Thumbnails of the images
     * @type {Array<CartItemMultimediaThumbnail>}
     * @memberof CartItemMultimedia
     */
    thumbnails?: Array<CartItemMultimediaThumbnail>;
    /**
     * Type of multimedia
     * @type {string}
     * @memberof CartItemMultimedia
     */
    type?: CartItemMultimediaTypeEnum;
    /**
     * URL to view multimedia at
     * @type {string}
     * @memberof CartItemMultimedia
     */
    url?: string;
}



/**
 * @export
 */
export const CartItemMultimediaTypeEnum = {
    Image: 'Image',
    Pdf: 'PDF',
    Text: 'Text',
    Unknown: 'Unknown',
    Video: 'Video'
} as const;
export type CartItemMultimediaTypeEnum = typeof CartItemMultimediaTypeEnum[keyof typeof CartItemMultimediaTypeEnum];


/**
 * Check if a given object implements the CartItemMultimedia interface.
 */
export function instanceOfCartItemMultimedia(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartItemMultimediaFromJSON(json: any): CartItemMultimedia {
    return CartItemMultimediaFromJSONTyped(json, false);
}

export function CartItemMultimediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartItemMultimedia {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'exclude_from_gallery': !exists(json, 'exclude_from_gallery') ? undefined : json['exclude_from_gallery'],
        'image_height': !exists(json, 'image_height') ? undefined : json['image_height'],
        'image_width': !exists(json, 'image_width') ? undefined : json['image_width'],
        'is_default': !exists(json, 'is_default') ? undefined : json['is_default'],
        'thumbnails': !exists(json, 'thumbnails') ? undefined : ((json['thumbnails'] as Array<any>).map(CartItemMultimediaThumbnailFromJSON)),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function CartItemMultimediaToJSON(value?: CartItemMultimedia | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'exclude_from_gallery': value.exclude_from_gallery,
        'image_height': value.image_height,
        'image_width': value.image_width,
        'is_default': value.is_default,
        'thumbnails': value.thumbnails === undefined ? undefined : ((value.thumbnails as Array<any>).map(CartItemMultimediaThumbnailToJSON)),
        'type': value.type,
        'url': value.url,
    };
}


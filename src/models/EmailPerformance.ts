/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmailPerformanceCustomerHistogram,
    EmailPerformanceCustomerHistogramFromJSON,
    EmailPerformanceCustomerHistogramFromJSONTyped,
    EmailPerformanceCustomerHistogramToJSON,
} from './EmailPerformanceCustomerHistogram';
import {
    EmailPerformanceDaily,
    EmailPerformanceDailyFromJSON,
    EmailPerformanceDailyFromJSONTyped,
    EmailPerformanceDailyToJSON,
} from './EmailPerformanceDaily';

/**
 * 
 * @export
 * @interface EmailPerformance
 */
export interface EmailPerformance {
    /**
     * Active customers.  The value will be -1 if calculation is pending.
     * @type {number}
     * @memberof EmailPerformance
     */
    active_customers?: number;
    /**
     * Actual customers that they have regardless of active state.  The value will be -1 if calculation is pending.
     * @type {number}
     * @memberof EmailPerformance
     */
    actual_customers?: number;
    /**
     * Bounce count
     * @type {number}
     * @memberof EmailPerformance
     */
    bounce_count?: number;
    /**
     * bounce percentage rate based upon our look back window.  This should be under five percent or the account will be paused for sending.
     * @type {number}
     * @memberof EmailPerformance
     */
    bounce_percentage?: number;
    /**
     * bounce percentage rate (formatted) based upon our look back window.  This should be under five percent or the account will be paused for sending.
     * @type {string}
     * @memberof EmailPerformance
     */
    bounce_percentage_formatted?: string;
    /**
     * 
     * @type {EmailPerformanceCustomerHistogram}
     * @memberof EmailPerformance
     */
    customer_histogram?: EmailPerformanceCustomerHistogram;
    /**
     * Daily statistics used for charting
     * @type {Array<EmailPerformanceDaily>}
     * @memberof EmailPerformance
     */
    daily_stats?: Array<EmailPerformanceDaily>;
    /**
     * Delivered count
     * @type {number}
     * @memberof EmailPerformance
     */
    delivered_count?: number;
    /**
     * Loyalty Program Type
     * @type {string}
     * @memberof EmailPerformance
     */
    loyalty_program_type?: EmailPerformanceLoyaltyProgramTypeEnum;
    /**
     * Maximum active customers allowed under their billing plan
     * @type {number}
     * @memberof EmailPerformance
     */
    max_active_customers?: number;
    /**
     * Max emails per day
     * @type {number}
     * @memberof EmailPerformance
     */
    max_emails_per_day?: number;
    /**
     * Max emails per hour
     * @type {number}
     * @memberof EmailPerformance
     */
    max_emails_per_hour?: number;
    /**
     * Max emails per month
     * @type {number}
     * @memberof EmailPerformance
     */
    max_emails_per_month?: number;
    /**
     * True if campaign/flow emails are paused due to spam complaints.
     * @type {boolean}
     * @memberof EmailPerformance
     */
    paused_for_spam?: boolean;
    /**
     * Revenue
     * @type {number}
     * @memberof EmailPerformance
     */
    revenue?: number;
    /**
     * Sent emails last 24 hours
     * @type {number}
     * @memberof EmailPerformance
     */
    sent_emails_per_day?: number;
    /**
     * Sent emails last hour
     * @type {number}
     * @memberof EmailPerformance
     */
    sent_emails_per_hour?: number;
    /**
     * Sent emails last 31 days
     * @type {number}
     * @memberof EmailPerformance
     */
    sent_emails_per_month?: number;
    /**
     * Total sequence (campaign/flow) emails sent
     * @type {number}
     * @memberof EmailPerformance
     */
    sequence_send_count?: number;
    /**
     * Spam complaints
     * @type {number}
     * @memberof EmailPerformance
     */
    spam_count?: number;
    /**
     * Spam percentage rate based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
     * @type {number}
     * @memberof EmailPerformance
     */
    spam_percentage?: number;
    /**
     * Spam percentage rate (formatted) based upon our look back window.  This should be under one half a percent or the account will be paused for sending.
     * @type {string}
     * @memberof EmailPerformance
     */
    spam_percentage_formatted?: string;
    /**
     * Total transactions emails sent
     * @type {number}
     * @memberof EmailPerformance
     */
    transactional_send_count?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof EmailPerformance)[] = ["active_customers", "actual_customers", "bounce_count", "bounce_percentage", "bounce_percentage_formatted", "customer_histogram", "daily_stats", "delivered_count", "loyalty_program_type", "max_active_customers", "max_emails_per_day", "max_emails_per_hour", "max_emails_per_month", "paused_for_spam", "revenue", "sent_emails_per_day", "sent_emails_per_hour", "sent_emails_per_month", "sequence_send_count", "spam_count", "spam_percentage", "spam_percentage_formatted", "transactional_send_count"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * @export
 */
export const EmailPerformanceLoyaltyProgramTypeEnum = {
    Disabled: 'disabled',
    Points: 'points',
    Cashback: 'cashback'
} as const;
export type EmailPerformanceLoyaltyProgramTypeEnum = typeof EmailPerformanceLoyaltyProgramTypeEnum[keyof typeof EmailPerformanceLoyaltyProgramTypeEnum];


/**
 * Check if a given object implements the EmailPerformance interface.
 */
export function instanceOfEmailPerformance(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmailPerformanceFromJSON(json: any): EmailPerformance {
    return EmailPerformanceFromJSONTyped(json, false);
}

export function EmailPerformanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailPerformance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active_customers': !exists(json, 'active_customers') ? undefined : json['active_customers'],
        'actual_customers': !exists(json, 'actual_customers') ? undefined : json['actual_customers'],
        'bounce_count': !exists(json, 'bounce_count') ? undefined : json['bounce_count'],
        'bounce_percentage': !exists(json, 'bounce_percentage') ? undefined : json['bounce_percentage'],
        'bounce_percentage_formatted': !exists(json, 'bounce_percentage_formatted') ? undefined : json['bounce_percentage_formatted'],
        'customer_histogram': !exists(json, 'customer_histogram') ? undefined : EmailPerformanceCustomerHistogramFromJSON(json['customer_histogram']),
        'daily_stats': !exists(json, 'daily_stats') ? undefined : ((json['daily_stats'] as Array<any>).map(EmailPerformanceDailyFromJSON)),
        'delivered_count': !exists(json, 'delivered_count') ? undefined : json['delivered_count'],
        'loyalty_program_type': !exists(json, 'loyalty_program_type') ? undefined : json['loyalty_program_type'],
        'max_active_customers': !exists(json, 'max_active_customers') ? undefined : json['max_active_customers'],
        'max_emails_per_day': !exists(json, 'max_emails_per_day') ? undefined : json['max_emails_per_day'],
        'max_emails_per_hour': !exists(json, 'max_emails_per_hour') ? undefined : json['max_emails_per_hour'],
        'max_emails_per_month': !exists(json, 'max_emails_per_month') ? undefined : json['max_emails_per_month'],
        'paused_for_spam': !exists(json, 'paused_for_spam') ? undefined : json['paused_for_spam'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
        'sent_emails_per_day': !exists(json, 'sent_emails_per_day') ? undefined : json['sent_emails_per_day'],
        'sent_emails_per_hour': !exists(json, 'sent_emails_per_hour') ? undefined : json['sent_emails_per_hour'],
        'sent_emails_per_month': !exists(json, 'sent_emails_per_month') ? undefined : json['sent_emails_per_month'],
        'sequence_send_count': !exists(json, 'sequence_send_count') ? undefined : json['sequence_send_count'],
        'spam_count': !exists(json, 'spam_count') ? undefined : json['spam_count'],
        'spam_percentage': !exists(json, 'spam_percentage') ? undefined : json['spam_percentage'],
        'spam_percentage_formatted': !exists(json, 'spam_percentage_formatted') ? undefined : json['spam_percentage_formatted'],
        'transactional_send_count': !exists(json, 'transactional_send_count') ? undefined : json['transactional_send_count'],
    };
}

export function EmailPerformanceToJSON(value?: EmailPerformance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active_customers': value.active_customers,
        'actual_customers': value.actual_customers,
        'bounce_count': value.bounce_count,
        'bounce_percentage': value.bounce_percentage,
        'bounce_percentage_formatted': value.bounce_percentage_formatted,
        'customer_histogram': EmailPerformanceCustomerHistogramToJSON(value.customer_histogram),
        'daily_stats': value.daily_stats === undefined ? undefined : ((value.daily_stats as Array<any>).map(EmailPerformanceDailyToJSON)),
        'delivered_count': value.delivered_count,
        'loyalty_program_type': value.loyalty_program_type,
        'max_active_customers': value.max_active_customers,
        'max_emails_per_day': value.max_emails_per_day,
        'max_emails_per_hour': value.max_emails_per_hour,
        'max_emails_per_month': value.max_emails_per_month,
        'paused_for_spam': value.paused_for_spam,
        'revenue': value.revenue,
        'sent_emails_per_day': value.sent_emails_per_day,
        'sent_emails_per_hour': value.sent_emails_per_hour,
        'sent_emails_per_month': value.sent_emails_per_month,
        'sequence_send_count': value.sequence_send_count,
        'spam_count': value.spam_count,
        'spam_percentage': value.spam_percentage,
        'spam_percentage_formatted': value.spam_percentage_formatted,
        'transactional_send_count': value.transactional_send_count,
    };
}


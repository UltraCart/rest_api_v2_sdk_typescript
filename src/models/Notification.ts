/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * True if this notification can be filtered to only send for one or more distribution centers.
     * @type {boolean}
     * @memberof Notification
     */
    can_filter_by_distribution_centers?: boolean;
    /**
     * True if this notification can include an affiliate information.
     * @type {boolean}
     * @memberof Notification
     */
    can_include_affiliate?: boolean;
    /**
     * True if this notification can include an order attachment.
     * @type {boolean}
     * @memberof Notification
     */
    can_include_order?: boolean;
    /**
     * True if this notification can include a plain text rendering of an order directly within an email.  Some desire this over an attachment
     * @type {boolean}
     * @memberof Notification
     */
    can_include_order_plain_text?: boolean;
    /**
     * If this notification supports it, this list of distribution center CODES will filter the notification to just those distribution centers.
     * @type {Array<string>}
     * @memberof Notification
     */
    distribution_center_filters?: Array<string>;
    /**
     * If true, and this notification supports it, affiliate information will be attached to all notifications of this type
     * @type {boolean}
     * @memberof Notification
     */
    include_affiliate?: boolean;
    /**
     * If true, and this notification supports it, the order will be attached to all notifications of this type
     * @type {boolean}
     * @memberof Notification
     */
    include_order?: boolean;
    /**
     * If true, and this notification supports it, a plain text order will be directly inserted into all notifications of this type
     * @type {boolean}
     * @memberof Notification
     */
    include_order_plain_text?: boolean;
    /**
     * The name of this notification.
     * @type {string}
     * @memberof Notification
     */
    name?: string;
    /**
     * A group for this notification.  This name is only used for visual grouping within interfaces.
     * @type {string}
     * @memberof Notification
     */
    notification_group?: string;
    /**
     * True if this user wishes to receive this email notification.
     * @type {boolean}
     * @memberof Notification
     */
    selected?: boolean;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof Notification)[] = ["can_filter_by_distribution_centers", "can_include_affiliate", "can_include_order", "can_include_order_plain_text", "distribution_center_filters", "include_affiliate", "include_order", "include_order_plain_text", "name", "notification_group", "selected"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the Notification interface.
 */
export function instanceOfNotification(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NotificationFromJSON(json: any): Notification {
    return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'can_filter_by_distribution_centers': !exists(json, 'can_filter_by_distribution_centers') ? undefined : json['can_filter_by_distribution_centers'],
        'can_include_affiliate': !exists(json, 'can_include_affiliate') ? undefined : json['can_include_affiliate'],
        'can_include_order': !exists(json, 'can_include_order') ? undefined : json['can_include_order'],
        'can_include_order_plain_text': !exists(json, 'can_include_order_plain_text') ? undefined : json['can_include_order_plain_text'],
        'distribution_center_filters': !exists(json, 'distribution_center_filters') ? undefined : json['distribution_center_filters'],
        'include_affiliate': !exists(json, 'include_affiliate') ? undefined : json['include_affiliate'],
        'include_order': !exists(json, 'include_order') ? undefined : json['include_order'],
        'include_order_plain_text': !exists(json, 'include_order_plain_text') ? undefined : json['include_order_plain_text'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'notification_group': !exists(json, 'notification_group') ? undefined : json['notification_group'],
        'selected': !exists(json, 'selected') ? undefined : json['selected'],
    };
}

export function NotificationToJSON(value?: Notification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'can_filter_by_distribution_centers': value.can_filter_by_distribution_centers,
        'can_include_affiliate': value.can_include_affiliate,
        'can_include_order': value.can_include_order,
        'can_include_order_plain_text': value.can_include_order_plain_text,
        'distribution_center_filters': value.distribution_center_filters,
        'include_affiliate': value.include_affiliate,
        'include_order': value.include_order,
        'include_order_plain_text': value.include_order_plain_text,
        'name': value.name,
        'notification_group': value.notification_group,
        'selected': value.selected,
    };
}


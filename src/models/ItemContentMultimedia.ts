/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemContentMultimediaThumbnail,
    ItemContentMultimediaThumbnailFromJSON,
    ItemContentMultimediaThumbnailFromJSONTyped,
    ItemContentMultimediaThumbnailToJSON,
} from './ItemContentMultimediaThumbnail';

/**
 * 
 * @export
 * @interface ItemContentMultimedia
 */
export interface ItemContentMultimedia {
    /**
     * URL where the image can be downloaded from the cloud
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    cloud_url?: string;
    /**
     * Expiration date of the cloud URL
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    cloud_url_expiration?: string;
    /**
     * Code assigned to the file
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    code?: string;
    /**
     * Description
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    description?: string;
    /**
     * True to exclude from multimedia gallery
     * @type {boolean}
     * @memberof ItemContentMultimedia
     */
    exclude_from_gallery?: boolean;
    /**
     * File name
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    file_name?: string;
    /**
     * Height of the image
     * @type {number}
     * @memberof ItemContentMultimedia
     */
    height?: number;
    /**
     * Item multimedia object identifier
     * @type {number}
     * @memberof ItemContentMultimedia
     */
    merchant_item_multimedia_oid?: number;
    /**
     * True if the multimedia is an orphan of the active StoreFront themes
     * @type {boolean}
     * @memberof ItemContentMultimedia
     */
    orphan?: boolean;
    /**
     * True if the object is a place holder that can be populated
     * @type {boolean}
     * @memberof ItemContentMultimedia
     */
    placeholder?: boolean;
    /**
     * Temporary multimedia object identifier assigned if uploading new multimedia
     * @type {number}
     * @memberof ItemContentMultimedia
     */
    temp_multimedia_oid?: number;
    /**
     * Thumbnails of this image
     * @type {Array<ItemContentMultimediaThumbnail>}
     * @memberof ItemContentMultimedia
     */
    thumbnails?: Array<ItemContentMultimediaThumbnail>;
    /**
     * Type of file
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    type?: ItemContentMultimediaTypeEnum;
    /**
     * URL to download file (on new multimedia record this can be a URL for UltraCart to fetch)
     * @type {string}
     * @memberof ItemContentMultimedia
     */
    url?: string;
    /**
     * Width of the image
     * @type {number}
     * @memberof ItemContentMultimedia
     */
    width?: number;
}



/**
 * @export
 */
export const ItemContentMultimediaTypeEnum = {
    Image: 'Image',
    Pdf: 'PDF',
    Text: 'Text',
    Unknown: 'Unknown',
    Video: 'Video'
} as const;
export type ItemContentMultimediaTypeEnum = typeof ItemContentMultimediaTypeEnum[keyof typeof ItemContentMultimediaTypeEnum];


/**
 * Check if a given object implements the ItemContentMultimedia interface.
 */
export function instanceOfItemContentMultimedia(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemContentMultimediaFromJSON(json: any): ItemContentMultimedia {
    return ItemContentMultimediaFromJSONTyped(json, false);
}

export function ItemContentMultimediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemContentMultimedia {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cloud_url': !exists(json, 'cloud_url') ? undefined : json['cloud_url'],
        'cloud_url_expiration': !exists(json, 'cloud_url_expiration') ? undefined : json['cloud_url_expiration'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'exclude_from_gallery': !exists(json, 'exclude_from_gallery') ? undefined : json['exclude_from_gallery'],
        'file_name': !exists(json, 'file_name') ? undefined : json['file_name'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'merchant_item_multimedia_oid': !exists(json, 'merchant_item_multimedia_oid') ? undefined : json['merchant_item_multimedia_oid'],
        'orphan': !exists(json, 'orphan') ? undefined : json['orphan'],
        'placeholder': !exists(json, 'placeholder') ? undefined : json['placeholder'],
        'temp_multimedia_oid': !exists(json, 'temp_multimedia_oid') ? undefined : json['temp_multimedia_oid'],
        'thumbnails': !exists(json, 'thumbnails') ? undefined : ((json['thumbnails'] as Array<any>).map(ItemContentMultimediaThumbnailFromJSON)),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'width': !exists(json, 'width') ? undefined : json['width'],
    };
}

export function ItemContentMultimediaToJSON(value?: ItemContentMultimedia | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cloud_url': value.cloud_url,
        'cloud_url_expiration': value.cloud_url_expiration,
        'code': value.code,
        'description': value.description,
        'exclude_from_gallery': value.exclude_from_gallery,
        'file_name': value.file_name,
        'height': value.height,
        'merchant_item_multimedia_oid': value.merchant_item_multimedia_oid,
        'orphan': value.orphan,
        'placeholder': value.placeholder,
        'temp_multimedia_oid': value.temp_multimedia_oid,
        'thumbnails': value.thumbnails === undefined ? undefined : ((value.thumbnails as Array<any>).map(ItemContentMultimediaThumbnailToJSON)),
        'type': value.type,
        'url': value.url,
        'width': value.width,
    };
}


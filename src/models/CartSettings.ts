/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CartSettingsBilling,
    CartSettingsBillingFromJSON,
    CartSettingsBillingFromJSONTyped,
    CartSettingsBillingToJSON,
} from './CartSettingsBilling';
import {
    CartSettingsGift,
    CartSettingsGiftFromJSON,
    CartSettingsGiftFromJSONTyped,
    CartSettingsGiftToJSON,
} from './CartSettingsGift';
import {
    CartSettingsPayment,
    CartSettingsPaymentFromJSON,
    CartSettingsPaymentFromJSONTyped,
    CartSettingsPaymentToJSON,
} from './CartSettingsPayment';
import {
    CartSettingsShipping,
    CartSettingsShippingFromJSON,
    CartSettingsShippingFromJSONTyped,
    CartSettingsShippingToJSON,
} from './CartSettingsShipping';
import {
    CartSettingsTaxes,
    CartSettingsTaxesFromJSON,
    CartSettingsTaxesFromJSONTyped,
    CartSettingsTaxesToJSON,
} from './CartSettingsTaxes';
import {
    CartSettingsTerms,
    CartSettingsTermsFromJSON,
    CartSettingsTermsFromJSONTyped,
    CartSettingsTermsToJSON,
} from './CartSettingsTerms';

/**
 * 
 * @export
 * @interface CartSettings
 */
export interface CartSettings {
    /**
     * 
     * @type {CartSettingsBilling}
     * @memberof CartSettings
     */
    billing?: CartSettingsBilling;
    /**
     * 
     * @type {CartSettingsGift}
     * @memberof CartSettings
     */
    gift?: CartSettingsGift;
    /**
     * 
     * @type {CartSettingsPayment}
     * @memberof CartSettings
     */
    payment?: CartSettingsPayment;
    /**
     * 
     * @type {CartSettingsShipping}
     * @memberof CartSettings
     */
    shipping?: CartSettingsShipping;
    /**
     * 
     * @type {CartSettingsTaxes}
     * @memberof CartSettings
     */
    taxes?: CartSettingsTaxes;
    /**
     * 
     * @type {CartSettingsTerms}
     * @memberof CartSettings
     */
    terms?: CartSettingsTerms;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CartSettings)[] = ["billing", "gift", "payment", "shipping", "taxes", "terms"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CartSettings interface.
 */
export function instanceOfCartSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartSettingsFromJSON(json: any): CartSettings {
    return CartSettingsFromJSONTyped(json, false);
}

export function CartSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'billing': !exists(json, 'billing') ? undefined : CartSettingsBillingFromJSON(json['billing']),
        'gift': !exists(json, 'gift') ? undefined : CartSettingsGiftFromJSON(json['gift']),
        'payment': !exists(json, 'payment') ? undefined : CartSettingsPaymentFromJSON(json['payment']),
        'shipping': !exists(json, 'shipping') ? undefined : CartSettingsShippingFromJSON(json['shipping']),
        'taxes': !exists(json, 'taxes') ? undefined : CartSettingsTaxesFromJSON(json['taxes']),
        'terms': !exists(json, 'terms') ? undefined : CartSettingsTermsFromJSON(json['terms']),
    };
}

export function CartSettingsToJSON(value?: CartSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'billing': CartSettingsBillingToJSON(value.billing),
        'gift': CartSettingsGiftToJSON(value.gift),
        'payment': CartSettingsPaymentToJSON(value.payment),
        'shipping': CartSettingsShippingToJSON(value.shipping),
        'taxes': CartSettingsTaxesToJSON(value.taxes),
        'terms': CartSettingsTermsToJSON(value.terms),
    };
}


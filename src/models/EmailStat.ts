/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmailStat
 */
export interface EmailStat {
    /**
     * Count of clicked emails
     * @type {number}
     * @memberof EmailStat
     */
    click_count?: number;
    /**
     * Count of clicked emails, formatted
     * @type {string}
     * @memberof EmailStat
     */
    click_count_formatted?: string;
    /**
     * Count of conversions
     * @type {number}
     * @memberof EmailStat
     */
    conversion_count?: number;
    /**
     * Count of conversions, formatted
     * @type {string}
     * @memberof EmailStat
     */
    conversion_count_formatted?: string;
    /**
     * True if campaign/flow has been archived
     * @type {boolean}
     * @memberof EmailStat
     */
    deleted?: boolean;
    /**
     * Count of delivered emails
     * @type {number}
     * @memberof EmailStat
     */
    delivered_count?: number;
    /**
     * Count of delivered emails, formatted
     * @type {string}
     * @memberof EmailStat
     */
    delivered_count_formatted?: string;
    /**
     * Count of emails kicked
     * @type {number}
     * @memberof EmailStat
     */
    kickbox_count?: number;
    /**
     * Count of emails kicked, formatted
     * @type {string}
     * @memberof EmailStat
     */
    kickbox_count_formatted?: string;
    /**
     * Merchant ID
     * @type {string}
     * @memberof EmailStat
     */
    merchant_id?: string;
    /**
     * List or segment name
     * @type {string}
     * @memberof EmailStat
     */
    name?: string;
    /**
     * Count of opened emails
     * @type {number}
     * @memberof EmailStat
     */
    open_count?: number;
    /**
     * Count of opened emails, formatted
     * @type {string}
     * @memberof EmailStat
     */
    open_count_formatted?: string;
    /**
     * Count of orders
     * @type {number}
     * @memberof EmailStat
     */
    order_count?: number;
    /**
     * Count of orders, formatted
     * @type {string}
     * @memberof EmailStat
     */
    order_count_formatted?: string;
    /**
     * Count of emails permanently bounced
     * @type {number}
     * @memberof EmailStat
     */
    permanent_bounce_count?: number;
    /**
     * Count of emails permanently bounced, formatted
     * @type {string}
     * @memberof EmailStat
     */
    permanent_bounce_count_formatted?: string;
    /**
     * Profit
     * @type {number}
     * @memberof EmailStat
     */
    profit?: number;
    /**
     * Profit, formatted
     * @type {string}
     * @memberof EmailStat
     */
    profit_formatted?: string;
    /**
     * Revenue
     * @type {number}
     * @memberof EmailStat
     */
    revenue?: number;
    /**
     * Revenue, formatted
     * @type {string}
     * @memberof EmailStat
     */
    revenue_formatted?: string;
    /**
     * Count of emails sent
     * @type {number}
     * @memberof EmailStat
     */
    send_count?: number;
    /**
     * Count of emails sent, formatted
     * @type {string}
     * @memberof EmailStat
     */
    send_count_formatted?: string;
    /**
     * Count of skipped emails
     * @type {number}
     * @memberof EmailStat
     */
    skipped_count?: number;
    /**
     * Count of skipped emails, formatted
     * @type {string}
     * @memberof EmailStat
     */
    skipped_count_formatted?: string;
    /**
     * Count of emails classified as spam
     * @type {number}
     * @memberof EmailStat
     */
    spam_count?: number;
    /**
     * Count of emails classified as spam, formatted
     * @type {string}
     * @memberof EmailStat
     */
    spam_count_formatted?: string;
    /**
     * Campaign, Flow or None (for anything else)
     * @type {string}
     * @memberof EmailStat
     */
    stat_type?: string;
    /**
     * Status of campaign or flow
     * @type {string}
     * @memberof EmailStat
     */
    status?: string;
    /**
     * Status dts of campaign or flow
     * @type {string}
     * @memberof EmailStat
     */
    status_dts?: string;
    /**
     * Step UUID if the statistics are at the step/email level
     * @type {string}
     * @memberof EmailStat
     */
    step_uuid?: string;
    /**
     * 
     * @type {Array<EmailStat>}
     * @memberof EmailStat
     */
    steps?: Array<EmailStat>;
    /**
     * Storefront oid
     * @type {number}
     * @memberof EmailStat
     */
    storefront_oid?: number;
    /**
     * Count of emails classified as unsubscribe
     * @type {number}
     * @memberof EmailStat
     */
    unsubscribe_count?: number;
    /**
     * Count of emails classified as unsubscribe, formatted
     * @type {string}
     * @memberof EmailStat
     */
    unsubscribe_count_formatted?: string;
    /**
     * List/Segment uuid, or Flow/Campaign uuid depending on level of stat aggregation.
     * @type {string}
     * @memberof EmailStat
     */
    uuid?: string;
    /**
     * Count of views
     * @type {number}
     * @memberof EmailStat
     */
    view_count?: number;
    /**
     * Count of views, formatted
     * @type {string}
     * @memberof EmailStat
     */
    view_count_formatted?: string;
}



/**
 * Check if a given object implements the EmailStat interface.
 */
export function instanceOfEmailStat(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmailStatFromJSON(json: any): EmailStat {
    return EmailStatFromJSONTyped(json, false);
}

export function EmailStatFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailStat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'click_count': !exists(json, 'click_count') ? undefined : json['click_count'],
        'click_count_formatted': !exists(json, 'click_count_formatted') ? undefined : json['click_count_formatted'],
        'conversion_count': !exists(json, 'conversion_count') ? undefined : json['conversion_count'],
        'conversion_count_formatted': !exists(json, 'conversion_count_formatted') ? undefined : json['conversion_count_formatted'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'delivered_count': !exists(json, 'delivered_count') ? undefined : json['delivered_count'],
        'delivered_count_formatted': !exists(json, 'delivered_count_formatted') ? undefined : json['delivered_count_formatted'],
        'kickbox_count': !exists(json, 'kickbox_count') ? undefined : json['kickbox_count'],
        'kickbox_count_formatted': !exists(json, 'kickbox_count_formatted') ? undefined : json['kickbox_count_formatted'],
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'open_count': !exists(json, 'open_count') ? undefined : json['open_count'],
        'open_count_formatted': !exists(json, 'open_count_formatted') ? undefined : json['open_count_formatted'],
        'order_count': !exists(json, 'order_count') ? undefined : json['order_count'],
        'order_count_formatted': !exists(json, 'order_count_formatted') ? undefined : json['order_count_formatted'],
        'permanent_bounce_count': !exists(json, 'permanent_bounce_count') ? undefined : json['permanent_bounce_count'],
        'permanent_bounce_count_formatted': !exists(json, 'permanent_bounce_count_formatted') ? undefined : json['permanent_bounce_count_formatted'],
        'profit': !exists(json, 'profit') ? undefined : json['profit'],
        'profit_formatted': !exists(json, 'profit_formatted') ? undefined : json['profit_formatted'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
        'revenue_formatted': !exists(json, 'revenue_formatted') ? undefined : json['revenue_formatted'],
        'send_count': !exists(json, 'send_count') ? undefined : json['send_count'],
        'send_count_formatted': !exists(json, 'send_count_formatted') ? undefined : json['send_count_formatted'],
        'skipped_count': !exists(json, 'skipped_count') ? undefined : json['skipped_count'],
        'skipped_count_formatted': !exists(json, 'skipped_count_formatted') ? undefined : json['skipped_count_formatted'],
        'spam_count': !exists(json, 'spam_count') ? undefined : json['spam_count'],
        'spam_count_formatted': !exists(json, 'spam_count_formatted') ? undefined : json['spam_count_formatted'],
        'stat_type': !exists(json, 'stat_type') ? undefined : json['stat_type'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'status_dts': !exists(json, 'status_dts') ? undefined : json['status_dts'],
        'step_uuid': !exists(json, 'step_uuid') ? undefined : json['step_uuid'],
        'steps': !exists(json, 'steps') ? undefined : ((json['steps'] as Array<any>).map(EmailStatFromJSON)),
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
        'unsubscribe_count': !exists(json, 'unsubscribe_count') ? undefined : json['unsubscribe_count'],
        'unsubscribe_count_formatted': !exists(json, 'unsubscribe_count_formatted') ? undefined : json['unsubscribe_count_formatted'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'view_count': !exists(json, 'view_count') ? undefined : json['view_count'],
        'view_count_formatted': !exists(json, 'view_count_formatted') ? undefined : json['view_count_formatted'],
    };
}

export function EmailStatToJSON(value?: EmailStat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'click_count': value.click_count,
        'click_count_formatted': value.click_count_formatted,
        'conversion_count': value.conversion_count,
        'conversion_count_formatted': value.conversion_count_formatted,
        'deleted': value.deleted,
        'delivered_count': value.delivered_count,
        'delivered_count_formatted': value.delivered_count_formatted,
        'kickbox_count': value.kickbox_count,
        'kickbox_count_formatted': value.kickbox_count_formatted,
        'merchant_id': value.merchant_id,
        'name': value.name,
        'open_count': value.open_count,
        'open_count_formatted': value.open_count_formatted,
        'order_count': value.order_count,
        'order_count_formatted': value.order_count_formatted,
        'permanent_bounce_count': value.permanent_bounce_count,
        'permanent_bounce_count_formatted': value.permanent_bounce_count_formatted,
        'profit': value.profit,
        'profit_formatted': value.profit_formatted,
        'revenue': value.revenue,
        'revenue_formatted': value.revenue_formatted,
        'send_count': value.send_count,
        'send_count_formatted': value.send_count_formatted,
        'skipped_count': value.skipped_count,
        'skipped_count_formatted': value.skipped_count_formatted,
        'spam_count': value.spam_count,
        'spam_count_formatted': value.spam_count_formatted,
        'stat_type': value.stat_type,
        'status': value.status,
        'status_dts': value.status_dts,
        'step_uuid': value.step_uuid,
        'steps': value.steps === undefined ? undefined : ((value.steps as Array<any>).map(EmailStatToJSON)),
        'storefront_oid': value.storefront_oid,
        'unsubscribe_count': value.unsubscribe_count,
        'unsubscribe_count_formatted': value.unsubscribe_count_formatted,
        'uuid': value.uuid,
        'view_count': value.view_count,
        'view_count_formatted': value.view_count_formatted,
    };
}


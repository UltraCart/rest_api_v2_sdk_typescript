/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
} from './Currency';

/**
 * 
 * @export
 * @interface OrderSummary
 */
export interface OrderSummary {
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    actual_fulfillment?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    actual_other_cost?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    actual_payment_processing?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    actual_profit?: Currency;
    /**
     * Actual profit has been analyzed
     * @type {boolean}
     * @memberof OrderSummary
     */
    actual_profit_analyzed?: boolean;
    /**
     * Actual profit needs review
     * @type {boolean}
     * @memberof OrderSummary
     */
    actual_profit_review?: boolean;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    actual_shipping?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    arbitrary_shipping_handling_total?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    health_benefit_card_amount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    health_benefit_card_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    internal_gift_certificate_amount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    internal_gift_certificate_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    other_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    shipping_handling_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    shipping_handling_total?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    shipping_handling_total_discount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    subtotal?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    subtotal_discount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    subtotal_discount_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    subtotal_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    tax?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    tax_refunded?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    taxable_subtotal?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    taxable_subtotal_discount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    total?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof OrderSummary
     */
    total_refunded?: Currency;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof OrderSummary)[] = ["actual_fulfillment", "actual_other_cost", "actual_payment_processing", "actual_profit", "actual_profit_analyzed", "actual_profit_review", "actual_shipping", "arbitrary_shipping_handling_total", "health_benefit_card_amount", "health_benefit_card_refunded", "internal_gift_certificate_amount", "internal_gift_certificate_refunded", "other_refunded", "shipping_handling_refunded", "shipping_handling_total", "shipping_handling_total_discount", "subtotal", "subtotal_discount", "subtotal_discount_refunded", "subtotal_refunded", "tax", "tax_refunded", "taxable_subtotal", "taxable_subtotal_discount", "total", "total_refunded"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the OrderSummary interface.
 */
export function instanceOfOrderSummary(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderSummaryFromJSON(json: any): OrderSummary {
    return OrderSummaryFromJSONTyped(json, false);
}

export function OrderSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actual_fulfillment': !exists(json, 'actual_fulfillment') ? undefined : CurrencyFromJSON(json['actual_fulfillment']),
        'actual_other_cost': !exists(json, 'actual_other_cost') ? undefined : CurrencyFromJSON(json['actual_other_cost']),
        'actual_payment_processing': !exists(json, 'actual_payment_processing') ? undefined : CurrencyFromJSON(json['actual_payment_processing']),
        'actual_profit': !exists(json, 'actual_profit') ? undefined : CurrencyFromJSON(json['actual_profit']),
        'actual_profit_analyzed': !exists(json, 'actual_profit_analyzed') ? undefined : json['actual_profit_analyzed'],
        'actual_profit_review': !exists(json, 'actual_profit_review') ? undefined : json['actual_profit_review'],
        'actual_shipping': !exists(json, 'actual_shipping') ? undefined : CurrencyFromJSON(json['actual_shipping']),
        'arbitrary_shipping_handling_total': !exists(json, 'arbitrary_shipping_handling_total') ? undefined : CurrencyFromJSON(json['arbitrary_shipping_handling_total']),
        'health_benefit_card_amount': !exists(json, 'health_benefit_card_amount') ? undefined : CurrencyFromJSON(json['health_benefit_card_amount']),
        'health_benefit_card_refunded': !exists(json, 'health_benefit_card_refunded') ? undefined : CurrencyFromJSON(json['health_benefit_card_refunded']),
        'internal_gift_certificate_amount': !exists(json, 'internal_gift_certificate_amount') ? undefined : CurrencyFromJSON(json['internal_gift_certificate_amount']),
        'internal_gift_certificate_refunded': !exists(json, 'internal_gift_certificate_refunded') ? undefined : CurrencyFromJSON(json['internal_gift_certificate_refunded']),
        'other_refunded': !exists(json, 'other_refunded') ? undefined : CurrencyFromJSON(json['other_refunded']),
        'shipping_handling_refunded': !exists(json, 'shipping_handling_refunded') ? undefined : CurrencyFromJSON(json['shipping_handling_refunded']),
        'shipping_handling_total': !exists(json, 'shipping_handling_total') ? undefined : CurrencyFromJSON(json['shipping_handling_total']),
        'shipping_handling_total_discount': !exists(json, 'shipping_handling_total_discount') ? undefined : CurrencyFromJSON(json['shipping_handling_total_discount']),
        'subtotal': !exists(json, 'subtotal') ? undefined : CurrencyFromJSON(json['subtotal']),
        'subtotal_discount': !exists(json, 'subtotal_discount') ? undefined : CurrencyFromJSON(json['subtotal_discount']),
        'subtotal_discount_refunded': !exists(json, 'subtotal_discount_refunded') ? undefined : CurrencyFromJSON(json['subtotal_discount_refunded']),
        'subtotal_refunded': !exists(json, 'subtotal_refunded') ? undefined : CurrencyFromJSON(json['subtotal_refunded']),
        'tax': !exists(json, 'tax') ? undefined : CurrencyFromJSON(json['tax']),
        'tax_refunded': !exists(json, 'tax_refunded') ? undefined : CurrencyFromJSON(json['tax_refunded']),
        'taxable_subtotal': !exists(json, 'taxable_subtotal') ? undefined : CurrencyFromJSON(json['taxable_subtotal']),
        'taxable_subtotal_discount': !exists(json, 'taxable_subtotal_discount') ? undefined : CurrencyFromJSON(json['taxable_subtotal_discount']),
        'total': !exists(json, 'total') ? undefined : CurrencyFromJSON(json['total']),
        'total_refunded': !exists(json, 'total_refunded') ? undefined : CurrencyFromJSON(json['total_refunded']),
    };
}

export function OrderSummaryToJSON(value?: OrderSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actual_fulfillment': CurrencyToJSON(value.actual_fulfillment),
        'actual_other_cost': CurrencyToJSON(value.actual_other_cost),
        'actual_payment_processing': CurrencyToJSON(value.actual_payment_processing),
        'actual_profit': CurrencyToJSON(value.actual_profit),
        'actual_profit_analyzed': value.actual_profit_analyzed,
        'actual_profit_review': value.actual_profit_review,
        'actual_shipping': CurrencyToJSON(value.actual_shipping),
        'arbitrary_shipping_handling_total': CurrencyToJSON(value.arbitrary_shipping_handling_total),
        'health_benefit_card_amount': CurrencyToJSON(value.health_benefit_card_amount),
        'health_benefit_card_refunded': CurrencyToJSON(value.health_benefit_card_refunded),
        'internal_gift_certificate_amount': CurrencyToJSON(value.internal_gift_certificate_amount),
        'internal_gift_certificate_refunded': CurrencyToJSON(value.internal_gift_certificate_refunded),
        'other_refunded': CurrencyToJSON(value.other_refunded),
        'shipping_handling_refunded': CurrencyToJSON(value.shipping_handling_refunded),
        'shipping_handling_total': CurrencyToJSON(value.shipping_handling_total),
        'shipping_handling_total_discount': CurrencyToJSON(value.shipping_handling_total_discount),
        'subtotal': CurrencyToJSON(value.subtotal),
        'subtotal_discount': CurrencyToJSON(value.subtotal_discount),
        'subtotal_discount_refunded': CurrencyToJSON(value.subtotal_discount_refunded),
        'subtotal_refunded': CurrencyToJSON(value.subtotal_refunded),
        'tax': CurrencyToJSON(value.tax),
        'tax_refunded': CurrencyToJSON(value.tax_refunded),
        'taxable_subtotal': CurrencyToJSON(value.taxable_subtotal),
        'taxable_subtotal_discount': CurrencyToJSON(value.taxable_subtotal_discount),
        'total': CurrencyToJSON(value.total),
        'total_refunded': CurrencyToJSON(value.total_refunded),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TempMultimedia
 */
export interface TempMultimedia {
    /**
     * Filename
     * @type {string}
     * @memberof TempMultimedia
     */
    filename?: string;
    /**
     * Height
     * @type {number}
     * @memberof TempMultimedia
     */
    height?: number;
    /**
     * Multimedia type
     * @type {string}
     * @memberof TempMultimedia
     */
    multimedia_type?: TempMultimediaMultimediaTypeEnum;
    /**
     * Size
     * @type {number}
     * @memberof TempMultimedia
     */
    size?: number;
    /**
     * Temporary multimedia object identifier
     * @type {number}
     * @memberof TempMultimedia
     */
    temp_multimedia_oid?: number;
    /**
     * URL
     * @type {string}
     * @memberof TempMultimedia
     */
    url?: string;
    /**
     * Width
     * @type {number}
     * @memberof TempMultimedia
     */
    width?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof TempMultimedia)[] = ["filename", "height", "multimedia_type", "size", "temp_multimedia_oid", "url", "width"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * @export
 */
export const TempMultimediaMultimediaTypeEnum = {
    Image: 'Image',
    Pdf: 'PDF',
    Text: 'Text',
    Video: 'Video'
} as const;
export type TempMultimediaMultimediaTypeEnum = typeof TempMultimediaMultimediaTypeEnum[keyof typeof TempMultimediaMultimediaTypeEnum];


/**
 * Check if a given object implements the TempMultimedia interface.
 */
export function instanceOfTempMultimedia(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TempMultimediaFromJSON(json: any): TempMultimedia {
    return TempMultimediaFromJSONTyped(json, false);
}

export function TempMultimediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): TempMultimedia {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filename': !exists(json, 'filename') ? undefined : json['filename'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'multimedia_type': !exists(json, 'multimedia_type') ? undefined : json['multimedia_type'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'temp_multimedia_oid': !exists(json, 'temp_multimedia_oid') ? undefined : json['temp_multimedia_oid'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'width': !exists(json, 'width') ? undefined : json['width'],
    };
}

export function TempMultimediaToJSON(value?: TempMultimedia | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filename': value.filename,
        'height': value.height,
        'multimedia_type': value.multimedia_type,
        'size': value.size,
        'temp_multimedia_oid': value.temp_multimedia_oid,
        'url': value.url,
        'width': value.width,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
} from './Currency';
import {
    Weight,
    WeightFromJSON,
    WeightFromJSONTyped,
    WeightToJSON,
} from './Weight';

/**
 * 
 * @export
 * @interface CartItemOptionValue
 */
export interface CartItemOptionValue {
    /**
     * 
     * @type {Currency}
     * @memberof CartItemOptionValue
     */
    additional_cost?: Currency;
    /**
     * 
     * @type {Weight}
     * @memberof CartItemOptionValue
     */
    additional_weight?: Weight;
    /**
     * True if this is the default value
     * @type {boolean}
     * @memberof CartItemOptionValue
     */
    default_value?: boolean;
    /**
     * Display order of the option value
     * @type {number}
     * @memberof CartItemOptionValue
     */
    display_order?: number;
    /**
     * Value of the option the customer can select
     * @type {string}
     * @memberof CartItemOptionValue
     */
    value?: string;
}



/**
 * Check if a given object implements the CartItemOptionValue interface.
 */
export function instanceOfCartItemOptionValue(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartItemOptionValueFromJSON(json: any): CartItemOptionValue {
    return CartItemOptionValueFromJSONTyped(json, false);
}

export function CartItemOptionValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartItemOptionValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additional_cost': !exists(json, 'additional_cost') ? undefined : CurrencyFromJSON(json['additional_cost']),
        'additional_weight': !exists(json, 'additional_weight') ? undefined : WeightFromJSON(json['additional_weight']),
        'default_value': !exists(json, 'default_value') ? undefined : json['default_value'],
        'display_order': !exists(json, 'display_order') ? undefined : json['display_order'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function CartItemOptionValueToJSON(value?: CartItemOptionValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additional_cost': CurrencyToJSON(value.additional_cost),
        'additional_weight': WeightToJSON(value.additional_weight),
        'default_value': value.default_value,
        'display_order': value.display_order,
        'value': value.value,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemDigitalItemPdfMeta,
    ItemDigitalItemPdfMetaFromJSON,
    ItemDigitalItemPdfMetaFromJSONTyped,
    ItemDigitalItemPdfMetaToJSON,
} from './ItemDigitalItemPdfMeta';

/**
 * 
 * @export
 * @interface ItemDigitalItem
 */
export interface ItemDigitalItem {
    /**
     * Click wrap agreement is presented to the customer before they can purchase your product.
     * @type {string}
     * @memberof ItemDigitalItem
     */
    click_wrap_agreement?: string;
    /**
     * File creation date
     * @type {string}
     * @memberof ItemDigitalItem
     */
    creation_dts?: string;
    /**
     * Description of the digital item
     * @type {string}
     * @memberof ItemDigitalItem
     */
    description?: string;
    /**
     * The Digital item oid is a primary key used internally by UltraCart.  You should not set or change this value.  Doing so will have no effect.
     * @type {number}
     * @memberof ItemDigitalItem
     */
    digital_item_oid?: number;
    /**
     * External Id useful for syncing with a remote filesystem, this may be an MD5 hash or whatever suits your needs.
     * @type {string}
     * @memberof ItemDigitalItem
     */
    external_id?: string;
    /**
     * File size
     * @type {number}
     * @memberof ItemDigitalItem
     */
    file_size?: number;
    /**
     * This url is sourced to create or update a digital file in your digital library.  It is only considered during an insert or update operation.
     * @type {string}
     * @memberof ItemDigitalItem
     */
    import_from_url?: string;
    /**
     * Mime type associated with the file
     * @type {string}
     * @memberof ItemDigitalItem
     */
    mime_type?: string;
    /**
     * Original filename
     * @type {string}
     * @memberof ItemDigitalItem
     */
    original_filename?: string;
    /**
     * 
     * @type {ItemDigitalItemPdfMeta}
     * @memberof ItemDigitalItem
     */
    pdf_meta?: ItemDigitalItemPdfMeta;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ItemDigitalItem)[] = ["click_wrap_agreement", "creation_dts", "description", "digital_item_oid", "external_id", "file_size", "import_from_url", "mime_type", "original_filename", "pdf_meta"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ItemDigitalItem interface.
 */
export function instanceOfItemDigitalItem(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemDigitalItemFromJSON(json: any): ItemDigitalItem {
    return ItemDigitalItemFromJSONTyped(json, false);
}

export function ItemDigitalItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemDigitalItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'click_wrap_agreement': !exists(json, 'click_wrap_agreement') ? undefined : json['click_wrap_agreement'],
        'creation_dts': !exists(json, 'creation_dts') ? undefined : json['creation_dts'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'digital_item_oid': !exists(json, 'digital_item_oid') ? undefined : json['digital_item_oid'],
        'external_id': !exists(json, 'external_id') ? undefined : json['external_id'],
        'file_size': !exists(json, 'file_size') ? undefined : json['file_size'],
        'import_from_url': !exists(json, 'import_from_url') ? undefined : json['import_from_url'],
        'mime_type': !exists(json, 'mime_type') ? undefined : json['mime_type'],
        'original_filename': !exists(json, 'original_filename') ? undefined : json['original_filename'],
        'pdf_meta': !exists(json, 'pdf_meta') ? undefined : ItemDigitalItemPdfMetaFromJSON(json['pdf_meta']),
    };
}

export function ItemDigitalItemToJSON(value?: ItemDigitalItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'click_wrap_agreement': value.click_wrap_agreement,
        'creation_dts': value.creation_dts,
        'description': value.description,
        'digital_item_oid': value.digital_item_oid,
        'external_id': value.external_id,
        'file_size': value.file_size,
        'import_from_url': value.import_from_url,
        'mime_type': value.mime_type,
        'original_filename': value.original_filename,
        'pdf_meta': ItemDigitalItemPdfMetaToJSON(value.pdf_meta),
    };
}


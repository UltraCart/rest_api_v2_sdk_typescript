/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemShippingDistributionCenter
 */
export interface ItemShippingDistributionCenter {
    /**
     * Allocated to placed orders
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    allocated_to_placed_orders?: number;
    /**
     * Allocated to shopping carts
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    allocated_to_shopping_carts?: number;
    /**
     * Available to allocate
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    available_to_allocate?: number;
    /**
     * Cost of goods sold override at the distribution center level
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    cogs?: number;
    /**
     * Desired inventory level
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    desired_inventory_level?: number;
    /**
     * Distribution center code
     * @type {string}
     * @memberof ItemShippingDistributionCenter
     */
    distribution_center_code?: string;
    /**
     * Distribution center object identifier
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    distribution_center_oid?: number;
    /**
     * Estimated time of arrival
     * @type {string}
     * @memberof ItemShippingDistributionCenter
     */
    eta?: string;
    /**
     * True if this distribution center handles this item
     * @type {boolean}
     * @memberof ItemShippingDistributionCenter
     */
    handles?: boolean;
    /**
     * Inventory level
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    inventory_level?: number;
    /**
     * Maximum back-order
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    maximum_backorder?: number;
    /**
     * Reorder inventory level (triggers notification)
     * @type {number}
     * @memberof ItemShippingDistributionCenter
     */
    reorder_inventory_level?: number;
    /**
     * SKU
     * @type {string}
     * @memberof ItemShippingDistributionCenter
     */
    sku?: string;
    /**
     * Stock picking location
     * @type {string}
     * @memberof ItemShippingDistributionCenter
     */
    stock_picking_location?: string;
}



/**
 * Check if a given object implements the ItemShippingDistributionCenter interface.
 */
export function instanceOfItemShippingDistributionCenter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemShippingDistributionCenterFromJSON(json: any): ItemShippingDistributionCenter {
    return ItemShippingDistributionCenterFromJSONTyped(json, false);
}

export function ItemShippingDistributionCenterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemShippingDistributionCenter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocated_to_placed_orders': !exists(json, 'allocated_to_placed_orders') ? undefined : json['allocated_to_placed_orders'],
        'allocated_to_shopping_carts': !exists(json, 'allocated_to_shopping_carts') ? undefined : json['allocated_to_shopping_carts'],
        'available_to_allocate': !exists(json, 'available_to_allocate') ? undefined : json['available_to_allocate'],
        'cogs': !exists(json, 'cogs') ? undefined : json['cogs'],
        'desired_inventory_level': !exists(json, 'desired_inventory_level') ? undefined : json['desired_inventory_level'],
        'distribution_center_code': !exists(json, 'distribution_center_code') ? undefined : json['distribution_center_code'],
        'distribution_center_oid': !exists(json, 'distribution_center_oid') ? undefined : json['distribution_center_oid'],
        'eta': !exists(json, 'eta') ? undefined : json['eta'],
        'handles': !exists(json, 'handles') ? undefined : json['handles'],
        'inventory_level': !exists(json, 'inventory_level') ? undefined : json['inventory_level'],
        'maximum_backorder': !exists(json, 'maximum_backorder') ? undefined : json['maximum_backorder'],
        'reorder_inventory_level': !exists(json, 'reorder_inventory_level') ? undefined : json['reorder_inventory_level'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'stock_picking_location': !exists(json, 'stock_picking_location') ? undefined : json['stock_picking_location'],
    };
}

export function ItemShippingDistributionCenterToJSON(value?: ItemShippingDistributionCenter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocated_to_placed_orders': value.allocated_to_placed_orders,
        'allocated_to_shopping_carts': value.allocated_to_shopping_carts,
        'available_to_allocate': value.available_to_allocate,
        'cogs': value.cogs,
        'desired_inventory_level': value.desired_inventory_level,
        'distribution_center_code': value.distribution_center_code,
        'distribution_center_oid': value.distribution_center_oid,
        'eta': value.eta,
        'handles': value.handles,
        'inventory_level': value.inventory_level,
        'maximum_backorder': value.maximum_backorder,
        'reorder_inventory_level': value.reorder_inventory_level,
        'sku': value.sku,
        'stock_picking_location': value.stock_picking_location,
    };
}


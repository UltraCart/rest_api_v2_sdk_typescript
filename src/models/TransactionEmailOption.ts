/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionEmailOption
 */
export interface TransactionEmailOption {
    /**
     * 
     * @type {string}
     * @memberof TransactionEmailOption
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionEmailOption
     */
    merchantEmailDeliveryOptionOid?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionEmailOption
     */
    merchantId?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionEmailOption
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransactionEmailOption
     */
    selected?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TransactionEmailOption
     */
    storeFrontOid?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionEmailOption
     */
    templateDisplay?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionEmailOption
     */
    templateType?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof TransactionEmailOption)[] = ["description", "merchantEmailDeliveryOptionOid", "merchantId", "name", "selected", "storeFrontOid", "templateDisplay", "templateType"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the TransactionEmailOption interface.
 */
export function instanceOfTransactionEmailOption(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionEmailOptionFromJSON(json: any): TransactionEmailOption {
    return TransactionEmailOptionFromJSONTyped(json, false);
}

export function TransactionEmailOptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionEmailOption {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'merchantEmailDeliveryOptionOid': !exists(json, 'merchantEmailDeliveryOptionOid') ? undefined : json['merchantEmailDeliveryOptionOid'],
        'merchantId': !exists(json, 'merchantId') ? undefined : json['merchantId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'selected': !exists(json, 'selected') ? undefined : json['selected'],
        'storeFrontOid': !exists(json, 'storeFrontOid') ? undefined : json['storeFrontOid'],
        'templateDisplay': !exists(json, 'templateDisplay') ? undefined : json['templateDisplay'],
        'templateType': !exists(json, 'templateType') ? undefined : json['templateType'],
    };
}

export function TransactionEmailOptionToJSON(value?: TransactionEmailOption | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'merchantEmailDeliveryOptionOid': value.merchantEmailDeliveryOptionOid,
        'merchantId': value.merchantId,
        'name': value.name,
        'selected': value.selected,
        'storeFrontOid': value.storeFrontOid,
        'templateDisplay': value.templateDisplay,
        'templateType': value.templateType,
    };
}


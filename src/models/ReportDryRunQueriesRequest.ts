/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ReportDataSetQuery,
    ReportDataSetQueryFromJSON,
    ReportDataSetQueryFromJSONTyped,
    ReportDataSetQueryToJSON,
} from './ReportDataSetQuery';

/**
 * 
 * @export
 * @interface ReportDryRunQueriesRequest
 */
export interface ReportDryRunQueriesRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportDryRunQueriesRequest
     */
    connection_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportDryRunQueriesRequest
     */
    default_dataset_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportDryRunQueriesRequest
     */
    default_project_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportDryRunQueriesRequest
     */
    merchant_id?: string;
    /**
     * 
     * @type {Array<ReportDataSetQuery>}
     * @memberof ReportDryRunQueriesRequest
     */
    queries?: Array<ReportDataSetQuery>;
    /**
     * 
     * @type {string}
     * @memberof ReportDryRunQueriesRequest
     */
    security_level?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ReportDryRunQueriesRequest)[] = ["connection_id", "default_dataset_id", "default_project_id", "merchant_id", "queries", "security_level"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ReportDryRunQueriesRequest interface.
 */
export function instanceOfReportDryRunQueriesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReportDryRunQueriesRequestFromJSON(json: any): ReportDryRunQueriesRequest {
    return ReportDryRunQueriesRequestFromJSONTyped(json, false);
}

export function ReportDryRunQueriesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportDryRunQueriesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'connection_id': !exists(json, 'connection_id') ? undefined : json['connection_id'],
        'default_dataset_id': !exists(json, 'default_dataset_id') ? undefined : json['default_dataset_id'],
        'default_project_id': !exists(json, 'default_project_id') ? undefined : json['default_project_id'],
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'queries': !exists(json, 'queries') ? undefined : ((json['queries'] as Array<any>).map(ReportDataSetQueryFromJSON)),
        'security_level': !exists(json, 'security_level') ? undefined : json['security_level'],
    };
}

export function ReportDryRunQueriesRequestToJSON(value?: ReportDryRunQueriesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'connection_id': value.connection_id,
        'default_dataset_id': value.default_dataset_id,
        'default_project_id': value.default_project_id,
        'merchant_id': value.merchant_id,
        'queries': value.queries === undefined ? undefined : ((value.queries as Array<any>).map(ReportDataSetQueryToJSON)),
        'security_level': value.security_level,
    };
}


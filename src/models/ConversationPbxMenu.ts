/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConversationPbxMenuMapping,
    ConversationPbxMenuMappingFromJSON,
    ConversationPbxMenuMappingFromJSONTyped,
    ConversationPbxMenuMappingToJSON,
} from './ConversationPbxMenuMapping';

/**
 * 
 * @export
 * @interface ConversationPbxMenu
 */
export interface ConversationPbxMenu {
    /**
     * If true, the customer is allowed to input direct extensions within this menu
     * @type {boolean}
     * @memberof ConversationPbxMenu
     */
    allow_direct_extensions?: boolean;
    /**
     * Conversation Pbx Menu UUID
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    conversation_pbx_menu_uuid?: string;
    /**
     * The default action for this menu
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    default_action?: string;
    /**
     * The default action target for this menu
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    default_action_target?: string;
    /**
     * Action mappings for this menu
     * @type {Array<ConversationPbxMenuMapping>}
     * @memberof ConversationPbxMenu
     */
    mappings?: Array<ConversationPbxMenuMapping>;
    /**
     * Merchant Id
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    merchant_id?: string;
    /**
     * Menu name
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    name?: string;
    /**
     * An optional audio clip that plays when a customer enters this menu
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    play_audio_uuid?: string;
    /**
     * An optional saying that plays when a customer enters this menu
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    say?: string;
    /**
     * say voice
     * @type {string}
     * @memberof ConversationPbxMenu
     */
    say_voice?: ConversationPbxMenuSayVoiceEnum;
    /**
     * The idle seconds before this menu times out
     * @type {number}
     * @memberof ConversationPbxMenu
     */
    timeout?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ConversationPbxMenu)[] = ["allow_direct_extensions", "conversation_pbx_menu_uuid", "default_action", "default_action_target", "mappings", "merchant_id", "name", "play_audio_uuid", "say", "say_voice", "timeout"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * @export
 */
export const ConversationPbxMenuSayVoiceEnum = {
    Man: 'man',
    Woman: 'woman'
} as const;
export type ConversationPbxMenuSayVoiceEnum = typeof ConversationPbxMenuSayVoiceEnum[keyof typeof ConversationPbxMenuSayVoiceEnum];


/**
 * Check if a given object implements the ConversationPbxMenu interface.
 */
export function instanceOfConversationPbxMenu(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConversationPbxMenuFromJSON(json: any): ConversationPbxMenu {
    return ConversationPbxMenuFromJSONTyped(json, false);
}

export function ConversationPbxMenuFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationPbxMenu {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allow_direct_extensions': !exists(json, 'allow_direct_extensions') ? undefined : json['allow_direct_extensions'],
        'conversation_pbx_menu_uuid': !exists(json, 'conversation_pbx_menu_uuid') ? undefined : json['conversation_pbx_menu_uuid'],
        'default_action': !exists(json, 'default_action') ? undefined : json['default_action'],
        'default_action_target': !exists(json, 'default_action_target') ? undefined : json['default_action_target'],
        'mappings': !exists(json, 'mappings') ? undefined : ((json['mappings'] as Array<any>).map(ConversationPbxMenuMappingFromJSON)),
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'play_audio_uuid': !exists(json, 'play_audio_uuid') ? undefined : json['play_audio_uuid'],
        'say': !exists(json, 'say') ? undefined : json['say'],
        'say_voice': !exists(json, 'say_voice') ? undefined : json['say_voice'],
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
    };
}

export function ConversationPbxMenuToJSON(value?: ConversationPbxMenu | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allow_direct_extensions': value.allow_direct_extensions,
        'conversation_pbx_menu_uuid': value.conversation_pbx_menu_uuid,
        'default_action': value.default_action,
        'default_action_target': value.default_action_target,
        'mappings': value.mappings === undefined ? undefined : ((value.mappings as Array<any>).map(ConversationPbxMenuMappingToJSON)),
        'merchant_id': value.merchant_id,
        'name': value.name,
        'play_audio_uuid': value.play_audio_uuid,
        'say': value.say,
        'say_voice': value.say_voice,
        'timeout': value.timeout,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GroupUserMembership,
    GroupUserMembershipFromJSON,
    GroupUserMembershipFromJSONTyped,
    GroupUserMembershipToJSON,
} from './GroupUserMembership';
import {
    Notification,
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
} from './Notification';
import {
    Permission,
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
} from './Permission';

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * The unique object identifier (oid for short) for this group
     * @type {number}
     * @memberof Group
     */
    group_oid?: number;
    /**
     * The name of this group.
     * @type {string}
     * @memberof Group
     */
    name?: string;
    /**
     * A list of notifications the user receives.
     * @type {Array<Notification>}
     * @memberof Group
     */
    notifications?: Array<Notification>;
    /**
     * A list of permissions the user enjoys for accessing the backend of UltraCart.
     * @type {Array<Permission>}
     * @memberof Group
     */
    permissions?: Array<Permission>;
    /**
     * A list of users that belong to this group.
     * @type {Array<GroupUserMembership>}
     * @memberof Group
     */
    users?: Array<GroupUserMembership>;
}



/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'group_oid': !exists(json, 'group_oid') ? undefined : json['group_oid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'notifications': !exists(json, 'notifications') ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
        'permissions': !exists(json, 'permissions') ? undefined : ((json['permissions'] as Array<any>).map(PermissionFromJSON)),
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(GroupUserMembershipFromJSON)),
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'group_oid': value.group_oid,
        'name': value.name,
        'notifications': value.notifications === undefined ? undefined : ((value.notifications as Array<any>).map(NotificationToJSON)),
        'permissions': value.permissions === undefined ? undefined : ((value.permissions as Array<any>).map(PermissionToJSON)),
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(GroupUserMembershipToJSON)),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemThirdPartyEmailMarketing
 */
export interface ItemThirdPartyEmailMarketing {
    /**
     * Add tags
     * @type {Array<string>}
     * @memberof ItemThirdPartyEmailMarketing
     */
    add_tags?: Array<string>;
    /**
     * Provider name
     * @type {string}
     * @memberof ItemThirdPartyEmailMarketing
     */
    provider_name?: ItemThirdPartyEmailMarketingProviderNameEnum;
    /**
     * Remove tags
     * @type {Array<string>}
     * @memberof ItemThirdPartyEmailMarketing
     */
    remove_tags?: Array<string>;
    /**
     * Subscribe to lists
     * @type {Array<string>}
     * @memberof ItemThirdPartyEmailMarketing
     */
    subscribe_lists?: Array<string>;
    /**
     * Unsubscribe from lists
     * @type {Array<string>}
     * @memberof ItemThirdPartyEmailMarketing
     */
    unsubscribe_lists?: Array<string>;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ItemThirdPartyEmailMarketing)[] = ["add_tags", "provider_name", "remove_tags", "subscribe_lists", "unsubscribe_lists"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * @export
 */
export const ItemThirdPartyEmailMarketingProviderNameEnum = {
    ActiveCampaign: 'ActiveCampaign',
    AWeber: 'AWeber',
    CampaignMonitor: 'Campaign Monitor',
    ConstantContact: 'ConstantContact',
    Emma: 'Emma',
    GetResponse: 'GetResponse',
    IContact: 'iContact',
    Klaviyo: 'Klaviyo',
    Lyris: 'Lyris',
    LyrisHq: 'LyrisHQ',
    MailChimp: 'MailChimp',
    SilverPop: 'SilverPop'
} as const;
export type ItemThirdPartyEmailMarketingProviderNameEnum = typeof ItemThirdPartyEmailMarketingProviderNameEnum[keyof typeof ItemThirdPartyEmailMarketingProviderNameEnum];


/**
 * Check if a given object implements the ItemThirdPartyEmailMarketing interface.
 */
export function instanceOfItemThirdPartyEmailMarketing(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemThirdPartyEmailMarketingFromJSON(json: any): ItemThirdPartyEmailMarketing {
    return ItemThirdPartyEmailMarketingFromJSONTyped(json, false);
}

export function ItemThirdPartyEmailMarketingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemThirdPartyEmailMarketing {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'add_tags': !exists(json, 'add_tags') ? undefined : json['add_tags'],
        'provider_name': !exists(json, 'provider_name') ? undefined : json['provider_name'],
        'remove_tags': !exists(json, 'remove_tags') ? undefined : json['remove_tags'],
        'subscribe_lists': !exists(json, 'subscribe_lists') ? undefined : json['subscribe_lists'],
        'unsubscribe_lists': !exists(json, 'unsubscribe_lists') ? undefined : json['unsubscribe_lists'],
    };
}

export function ItemThirdPartyEmailMarketingToJSON(value?: ItemThirdPartyEmailMarketing | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'add_tags': value.add_tags,
        'provider_name': value.provider_name,
        'remove_tags': value.remove_tags,
        'subscribe_lists': value.subscribe_lists,
        'unsubscribe_lists': value.unsubscribe_lists,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    WorkflowAttachment,
    WorkflowAttachmentFromJSON,
    WorkflowAttachmentFromJSONTyped,
    WorkflowAttachmentToJSON,
} from './WorkflowAttachment';
import {
    WorkflowNote,
    WorkflowNoteFromJSON,
    WorkflowNoteFromJSONTyped,
    WorkflowNoteToJSON,
} from './WorkflowNote';
import {
    WorkflowTaskHistory,
    WorkflowTaskHistoryFromJSON,
    WorkflowTaskHistoryFromJSONTyped,
    WorkflowTaskHistoryToJSON,
} from './WorkflowTaskHistory';
import {
    WorkflowUser,
    WorkflowUserFromJSON,
    WorkflowUserFromJSONTyped,
    WorkflowUserToJSON,
} from './WorkflowUser';

/**
 * 
 * @export
 * @interface WorkflowTask
 */
export interface WorkflowTask {
    /**
     * Assigned to group
     * @type {string}
     * @memberof WorkflowTask
     */
    assigned_to_group?: string;
    /**
     * Assigned to group ID
     * @type {number}
     * @memberof WorkflowTask
     */
    assigned_to_group_id?: number;
    /**
     * Assigned to user
     * @type {string}
     * @memberof WorkflowTask
     */
    assigned_to_user?: string;
    /**
     * Assigned to user ID
     * @type {number}
     * @memberof WorkflowTask
     */
    assigned_to_user_id?: number;
    /**
     * Attachments to the Workflow Task
     * @type {Array<WorkflowAttachment>}
     * @memberof WorkflowTask
     */
    attachments?: Array<WorkflowAttachment>;
    /**
     * 
     * @type {WorkflowUser}
     * @memberof WorkflowTask
     */
    created_by?: WorkflowUser;
    /**
     * Date/time that the workflow task was created
     * @type {string}
     * @memberof WorkflowTask
     */
    created_dts?: string;
    /**
     * Date/time that the workflow task should delay until
     * @type {string}
     * @memberof WorkflowTask
     */
    delay_until_dts?: string;
    /**
     * Date/time that the workflow task is due
     * @type {string}
     * @memberof WorkflowTask
     */
    due_dts?: string;
    /**
     * Array of history records for the task
     * @type {Array<WorkflowTaskHistory>}
     * @memberof WorkflowTask
     */
    histories?: Array<WorkflowTaskHistory>;
    /**
     * Date/time that the workflow task was last updated
     * @type {string}
     * @memberof WorkflowTask
     */
    last_update_dts?: string;
    /**
     * Merchant ID
     * @type {string}
     * @memberof WorkflowTask
     */
    merchant_id?: string;
    /**
     * Notes on the Workflow Task
     * @type {Array<WorkflowNote>}
     * @memberof WorkflowTask
     */
    notes?: Array<WorkflowNote>;
    /**
     * Object is associated with customer email
     * @type {string}
     * @memberof WorkflowTask
     */
    object_email?: string;
    /**
     * Object ID
     * @type {string}
     * @memberof WorkflowTask
     */
    object_id?: string;
    /**
     * Object Type
     * @type {string}
     * @memberof WorkflowTask
     */
    object_type?: WorkflowTaskObjectTypeEnum;
    /**
     * Object URL
     * @type {string}
     * @memberof WorkflowTask
     */
    object_url?: string;
    /**
     * Priority
     * @type {string}
     * @memberof WorkflowTask
     */
    priority?: WorkflowTaskPriorityEnum;
    /**
     * Status of the workflow task
     * @type {string}
     * @memberof WorkflowTask
     */
    status?: WorkflowTaskStatusEnum;
    /**
     * Task Details
     * @type {string}
     * @memberof WorkflowTask
     */
    task_details?: string;
    /**
     * Task Name
     * @type {string}
     * @memberof WorkflowTask
     */
    task_name?: string;
    /**
     * Workflow Task UUID
     * @type {string}
     * @memberof WorkflowTask
     */
    workflow_task_uuid?: string;
}


/**
 * @export
 */
export const WorkflowTaskObjectTypeEnum = {
    Order: 'order',
    AutoOrder: 'auto order',
    Item: 'item',
    CustomerProfile: 'customer profile'
} as const;
export type WorkflowTaskObjectTypeEnum = typeof WorkflowTaskObjectTypeEnum[keyof typeof WorkflowTaskObjectTypeEnum];

/**
 * @export
 */
export const WorkflowTaskPriorityEnum = {
    _1Low: '1 - low',
    _2Medium: '2 - medium',
    _3High: '3 - high',
    _4Critical: '4 - critical'
} as const;
export type WorkflowTaskPriorityEnum = typeof WorkflowTaskPriorityEnum[keyof typeof WorkflowTaskPriorityEnum];

/**
 * @export
 */
export const WorkflowTaskStatusEnum = {
    Open: 'open',
    Closed: 'closed',
    Delayed: 'delayed',
    AwaitingCustomerFeedback: 'awaiting customer feedback'
} as const;
export type WorkflowTaskStatusEnum = typeof WorkflowTaskStatusEnum[keyof typeof WorkflowTaskStatusEnum];


export function WorkflowTaskFromJSON(json: any): WorkflowTask {
    return WorkflowTaskFromJSONTyped(json, false);
}

export function WorkflowTaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowTask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assigned_to_group': !exists(json, 'assigned_to_group') ? undefined : json['assigned_to_group'],
        'assigned_to_group_id': !exists(json, 'assigned_to_group_id') ? undefined : json['assigned_to_group_id'],
        'assigned_to_user': !exists(json, 'assigned_to_user') ? undefined : json['assigned_to_user'],
        'assigned_to_user_id': !exists(json, 'assigned_to_user_id') ? undefined : json['assigned_to_user_id'],
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(WorkflowAttachmentFromJSON)),
        'created_by': !exists(json, 'created_by') ? undefined : WorkflowUserFromJSON(json['created_by']),
        'created_dts': !exists(json, 'created_dts') ? undefined : json['created_dts'],
        'delay_until_dts': !exists(json, 'delay_until_dts') ? undefined : json['delay_until_dts'],
        'due_dts': !exists(json, 'due_dts') ? undefined : json['due_dts'],
        'histories': !exists(json, 'histories') ? undefined : ((json['histories'] as Array<any>).map(WorkflowTaskHistoryFromJSON)),
        'last_update_dts': !exists(json, 'last_update_dts') ? undefined : json['last_update_dts'],
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'notes': !exists(json, 'notes') ? undefined : ((json['notes'] as Array<any>).map(WorkflowNoteFromJSON)),
        'object_email': !exists(json, 'object_email') ? undefined : json['object_email'],
        'object_id': !exists(json, 'object_id') ? undefined : json['object_id'],
        'object_type': !exists(json, 'object_type') ? undefined : json['object_type'],
        'object_url': !exists(json, 'object_url') ? undefined : json['object_url'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'task_details': !exists(json, 'task_details') ? undefined : json['task_details'],
        'task_name': !exists(json, 'task_name') ? undefined : json['task_name'],
        'workflow_task_uuid': !exists(json, 'workflow_task_uuid') ? undefined : json['workflow_task_uuid'],
    };
}

export function WorkflowTaskToJSON(value?: WorkflowTask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assigned_to_group': value.assigned_to_group,
        'assigned_to_group_id': value.assigned_to_group_id,
        'assigned_to_user': value.assigned_to_user,
        'assigned_to_user_id': value.assigned_to_user_id,
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(WorkflowAttachmentToJSON)),
        'created_by': WorkflowUserToJSON(value.created_by),
        'created_dts': value.created_dts,
        'delay_until_dts': value.delay_until_dts,
        'due_dts': value.due_dts,
        'histories': value.histories === undefined ? undefined : ((value.histories as Array<any>).map(WorkflowTaskHistoryToJSON)),
        'last_update_dts': value.last_update_dts,
        'merchant_id': value.merchant_id,
        'notes': value.notes === undefined ? undefined : ((value.notes as Array<any>).map(WorkflowNoteToJSON)),
        'object_email': value.object_email,
        'object_id': value.object_id,
        'object_type': value.object_type,
        'object_url': value.object_url,
        'priority': value.priority,
        'status': value.status,
        'task_details': value.task_details,
        'task_name': value.task_name,
        'workflow_task_uuid': value.workflow_task_uuid,
    };
}


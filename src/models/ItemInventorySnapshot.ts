/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemInventorySnapshotDistributionCenter,
    ItemInventorySnapshotDistributionCenterFromJSON,
    ItemInventorySnapshotDistributionCenterFromJSONTyped,
    ItemInventorySnapshotDistributionCenterToJSON,
} from './ItemInventorySnapshotDistributionCenter';

/**
 * 
 * @export
 * @interface ItemInventorySnapshot
 */
export interface ItemInventorySnapshot {
    /**
     * 
     * @type {number}
     * @memberof ItemInventorySnapshot
     */
    allocated_to_placed_orders?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemInventorySnapshot
     */
    allocated_to_shopping_carts?: number;
    /**
     * 
     * @type {number}
     * @memberof ItemInventorySnapshot
     */
    available_to_allocate?: number;
    /**
     * 
     * @type {Array<ItemInventorySnapshotDistributionCenter>}
     * @memberof ItemInventorySnapshot
     */
    distribution_centers?: Array<ItemInventorySnapshotDistributionCenter>;
    /**
     * 
     * @type {string}
     * @memberof ItemInventorySnapshot
     */
    merchant_item_id?: string;
    /**
     * 
     * @type {number}
     * @memberof ItemInventorySnapshot
     */
    quantity?: number;
}



/**
 * Check if a given object implements the ItemInventorySnapshot interface.
 */
export function instanceOfItemInventorySnapshot(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemInventorySnapshotFromJSON(json: any): ItemInventorySnapshot {
    return ItemInventorySnapshotFromJSONTyped(json, false);
}

export function ItemInventorySnapshotFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemInventorySnapshot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocated_to_placed_orders': !exists(json, 'allocated_to_placed_orders') ? undefined : json['allocated_to_placed_orders'],
        'allocated_to_shopping_carts': !exists(json, 'allocated_to_shopping_carts') ? undefined : json['allocated_to_shopping_carts'],
        'available_to_allocate': !exists(json, 'available_to_allocate') ? undefined : json['available_to_allocate'],
        'distribution_centers': !exists(json, 'distribution_centers') ? undefined : ((json['distribution_centers'] as Array<any>).map(ItemInventorySnapshotDistributionCenterFromJSON)),
        'merchant_item_id': !exists(json, 'merchant_item_id') ? undefined : json['merchant_item_id'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
    };
}

export function ItemInventorySnapshotToJSON(value?: ItemInventorySnapshot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocated_to_placed_orders': value.allocated_to_placed_orders,
        'allocated_to_shopping_carts': value.allocated_to_shopping_carts,
        'available_to_allocate': value.available_to_allocate,
        'distribution_centers': value.distribution_centers === undefined ? undefined : ((value.distribution_centers as Array<any>).map(ItemInventorySnapshotDistributionCenterToJSON)),
        'merchant_item_id': value.merchant_item_id,
        'quantity': value.quantity,
    };
}


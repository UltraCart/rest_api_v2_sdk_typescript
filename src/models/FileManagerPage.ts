/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FileManagerDirectory,
    FileManagerDirectoryFromJSON,
    FileManagerDirectoryFromJSONTyped,
    FileManagerDirectoryToJSON,
} from './FileManagerDirectory';
import {
    FileManagerFile,
    FileManagerFileFromJSON,
    FileManagerFileFromJSONTyped,
    FileManagerFileToJSON,
} from './FileManagerFile';

/**
 * 
 * @export
 * @interface FileManagerPage
 */
export interface FileManagerPage {
    /**
     * 
     * @type {number}
     * @memberof FileManagerPage
     */
    current_storefront_fs_directory_oid?: number;
    /**
     * 
     * @type {Array<FileManagerDirectory>}
     * @memberof FileManagerPage
     */
    directories?: Array<FileManagerDirectory>;
    /**
     * 
     * @type {Array<FileManagerFile>}
     * @memberof FileManagerPage
     */
    files?: Array<FileManagerFile>;
    /**
     * 
     * @type {string}
     * @memberof FileManagerPage
     */
    hostname?: string;
    /**
     * 
     * @type {number}
     * @memberof FileManagerPage
     */
    parent_storefront_fs_directory_oid?: number;
    /**
     * 
     * @type {string}
     * @memberof FileManagerPage
     */
    path?: string;
    /**
     * 
     * @type {Array<FileManagerDirectory>}
     * @memberof FileManagerPage
     */
    path_list?: Array<FileManagerDirectory>;
    /**
     * 
     * @type {number}
     * @memberof FileManagerPage
     */
    storefront_oid?: number;
}

export function FileManagerPageFromJSON(json: any): FileManagerPage {
    return FileManagerPageFromJSONTyped(json, false);
}

export function FileManagerPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileManagerPage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'current_storefront_fs_directory_oid': !exists(json, 'current_storefront_fs_directory_oid') ? undefined : json['current_storefront_fs_directory_oid'],
        'directories': !exists(json, 'directories') ? undefined : ((json['directories'] as Array<any>).map(FileManagerDirectoryFromJSON)),
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(FileManagerFileFromJSON)),
        'hostname': !exists(json, 'hostname') ? undefined : json['hostname'],
        'parent_storefront_fs_directory_oid': !exists(json, 'parent_storefront_fs_directory_oid') ? undefined : json['parent_storefront_fs_directory_oid'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'path_list': !exists(json, 'path_list') ? undefined : ((json['path_list'] as Array<any>).map(FileManagerDirectoryFromJSON)),
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
    };
}

export function FileManagerPageToJSON(value?: FileManagerPage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'current_storefront_fs_directory_oid': value.current_storefront_fs_directory_oid,
        'directories': value.directories === undefined ? undefined : ((value.directories as Array<any>).map(FileManagerDirectoryToJSON)),
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(FileManagerFileToJSON)),
        'hostname': value.hostname,
        'parent_storefront_fs_directory_oid': value.parent_storefront_fs_directory_oid,
        'path': value.path,
        'path_list': value.path_list === undefined ? undefined : ((value.path_list as Array<any>).map(FileManagerDirectoryToJSON)),
        'storefront_oid': value.storefront_oid,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CouponAmountOffSubtotalWithBlockPurchase
 */
export interface CouponAmountOffSubtotalWithBlockPurchase {
    /**
     * The ISO-4217 three letter currency code the customer is viewing prices in
     * @type {string}
     * @memberof CouponAmountOffSubtotalWithBlockPurchase
     */
    currency_code?: string;
    /**
     * The amount of subtotal discount
     * @type {number}
     * @memberof CouponAmountOffSubtotalWithBlockPurchase
     */
    discount_amount?: number;
    /**
     * Required item that must be purchased for coupon to be valid
     * @type {string}
     * @memberof CouponAmountOffSubtotalWithBlockPurchase
     */
    required_purchase_item?: string;
    /**
     * Discount amount is multiplied by the number of blocks.  A block is this many quantity of the required item.
     * @type {number}
     * @memberof CouponAmountOffSubtotalWithBlockPurchase
     */
    required_purchase_quantity?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CouponAmountOffSubtotalWithBlockPurchase)[] = ["currency_code", "discount_amount", "required_purchase_item", "required_purchase_quantity"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CouponAmountOffSubtotalWithBlockPurchase interface.
 */
export function instanceOfCouponAmountOffSubtotalWithBlockPurchase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CouponAmountOffSubtotalWithBlockPurchaseFromJSON(json: any): CouponAmountOffSubtotalWithBlockPurchase {
    return CouponAmountOffSubtotalWithBlockPurchaseFromJSONTyped(json, false);
}

export function CouponAmountOffSubtotalWithBlockPurchaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CouponAmountOffSubtotalWithBlockPurchase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currency_code': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'discount_amount': !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
        'required_purchase_item': !exists(json, 'required_purchase_item') ? undefined : json['required_purchase_item'],
        'required_purchase_quantity': !exists(json, 'required_purchase_quantity') ? undefined : json['required_purchase_quantity'],
    };
}

export function CouponAmountOffSubtotalWithBlockPurchaseToJSON(value?: CouponAmountOffSubtotalWithBlockPurchase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currency_code': value.currency_code,
        'discount_amount': value.discount_amount,
        'required_purchase_item': value.required_purchase_item,
        'required_purchase_quantity': value.required_purchase_quantity,
    };
}


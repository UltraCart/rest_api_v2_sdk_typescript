/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ModelError,
    ModelErrorFromJSON,
    ModelErrorFromJSONTyped,
    ModelErrorToJSON,
} from './ModelError';
import {
    ResponseMetadata,
    ResponseMetadataFromJSON,
    ResponseMetadataFromJSONTyped,
    ResponseMetadataToJSON,
} from './ResponseMetadata';
import {
    ScreenRecording,
    ScreenRecordingFromJSON,
    ScreenRecordingFromJSONTyped,
    ScreenRecordingToJSON,
} from './ScreenRecording';
import {
    ScreenRecordingFilter,
    ScreenRecordingFilterFromJSON,
    ScreenRecordingFilterFromJSONTyped,
    ScreenRecordingFilterToJSON,
} from './ScreenRecordingFilter';
import {
    ScreenRecordingFilterValues,
    ScreenRecordingFilterValuesFromJSON,
    ScreenRecordingFilterValuesFromJSONTyped,
    ScreenRecordingFilterValuesToJSON,
} from './ScreenRecordingFilterValues';
import {
    Warning,
    WarningFromJSON,
    WarningFromJSONTyped,
    WarningToJSON,
} from './Warning';

/**
 * 
 * @export
 * @interface ScreenRecordingQueryResponse
 */
export interface ScreenRecordingQueryResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ScreenRecordingQueryResponse
     */
    checkout_only?: boolean;
    /**
     * 
     * @type {ModelError}
     * @memberof ScreenRecordingQueryResponse
     */
    error?: ModelError;
    /**
     * 
     * @type {ScreenRecordingFilter}
     * @memberof ScreenRecordingQueryResponse
     */
    filter?: ScreenRecordingFilter;
    /**
     * 
     * @type {ScreenRecordingFilterValues}
     * @memberof ScreenRecordingQueryResponse
     */
    filter_values?: ScreenRecordingFilterValues;
    /**
     * 
     * @type {Array<number>}
     * @memberof ScreenRecordingQueryResponse
     */
    histogram_data?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingQueryResponse
     */
    histogram_interval?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenRecordingQueryResponse
     */
    histogram_start_dts?: string;
    /**
     * 
     * @type {ResponseMetadata}
     * @memberof ScreenRecordingQueryResponse
     */
    metadata?: ResponseMetadata;
    /**
     * 
     * @type {Array<ScreenRecording>}
     * @memberof ScreenRecordingQueryResponse
     */
    screen_recordings?: Array<ScreenRecording>;
    /**
     * Indicates if API call was successful
     * @type {boolean}
     * @memberof ScreenRecordingQueryResponse
     */
    success?: boolean;
    /**
     * 
     * @type {Warning}
     * @memberof ScreenRecordingQueryResponse
     */
    warning?: Warning;
}



/**
 * Check if a given object implements the ScreenRecordingQueryResponse interface.
 */
export function instanceOfScreenRecordingQueryResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScreenRecordingQueryResponseFromJSON(json: any): ScreenRecordingQueryResponse {
    return ScreenRecordingQueryResponseFromJSONTyped(json, false);
}

export function ScreenRecordingQueryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScreenRecordingQueryResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'checkout_only': !exists(json, 'checkout_only') ? undefined : json['checkout_only'],
        'error': !exists(json, 'error') ? undefined : ModelErrorFromJSON(json['error']),
        'filter': !exists(json, 'filter') ? undefined : ScreenRecordingFilterFromJSON(json['filter']),
        'filter_values': !exists(json, 'filter_values') ? undefined : ScreenRecordingFilterValuesFromJSON(json['filter_values']),
        'histogram_data': !exists(json, 'histogram_data') ? undefined : json['histogram_data'],
        'histogram_interval': !exists(json, 'histogram_interval') ? undefined : json['histogram_interval'],
        'histogram_start_dts': !exists(json, 'histogram_start_dts') ? undefined : json['histogram_start_dts'],
        'metadata': !exists(json, 'metadata') ? undefined : ResponseMetadataFromJSON(json['metadata']),
        'screen_recordings': !exists(json, 'screen_recordings') ? undefined : ((json['screen_recordings'] as Array<any>).map(ScreenRecordingFromJSON)),
        'success': !exists(json, 'success') ? undefined : json['success'],
        'warning': !exists(json, 'warning') ? undefined : WarningFromJSON(json['warning']),
    };
}

export function ScreenRecordingQueryResponseToJSON(value?: ScreenRecordingQueryResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'checkout_only': value.checkout_only,
        'error': ModelErrorToJSON(value.error),
        'filter': ScreenRecordingFilterToJSON(value.filter),
        'filter_values': ScreenRecordingFilterValuesToJSON(value.filter_values),
        'histogram_data': value.histogram_data,
        'histogram_interval': value.histogram_interval,
        'histogram_start_dts': value.histogram_start_dts,
        'metadata': ResponseMetadataToJSON(value.metadata),
        'screen_recordings': value.screen_recordings === undefined ? undefined : ((value.screen_recordings as Array<any>).map(ScreenRecordingToJSON)),
        'success': value.success,
        'warning': WarningToJSON(value.warning),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ItemVariationOption,
    ItemVariationOptionFromJSON,
    ItemVariationOptionFromJSONTyped,
    ItemVariationOptionToJSON,
} from './ItemVariationOption';

/**
 * 
 * @export
 * @interface ItemVariation
 */
export interface ItemVariation {
    /**
     * Default text
     * @type {string}
     * @memberof ItemVariation
     */
    default_text?: string;
    /**
     * Default text translated text instance id
     * @type {number}
     * @memberof ItemVariation
     */
    default_text_translated_text_instance_oid?: number;
    /**
     * Name
     * @type {string}
     * @memberof ItemVariation
     */
    name?: string;
    /**
     * Name translated text instance id
     * @type {number}
     * @memberof ItemVariation
     */
    name_translated_text_instance_oid?: number;
    /**
     * Options
     * @type {Array<ItemVariationOption>}
     * @memberof ItemVariation
     */
    options?: Array<ItemVariationOption>;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ItemVariation)[] = ["default_text", "default_text_translated_text_instance_oid", "name", "name_translated_text_instance_oid", "options"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ItemVariation interface.
 */
export function instanceOfItemVariation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemVariationFromJSON(json: any): ItemVariation {
    return ItemVariationFromJSONTyped(json, false);
}

export function ItemVariationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemVariation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'default_text': !exists(json, 'default_text') ? undefined : json['default_text'],
        'default_text_translated_text_instance_oid': !exists(json, 'default_text_translated_text_instance_oid') ? undefined : json['default_text_translated_text_instance_oid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'name_translated_text_instance_oid': !exists(json, 'name_translated_text_instance_oid') ? undefined : json['name_translated_text_instance_oid'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(ItemVariationOptionFromJSON)),
    };
}

export function ItemVariationToJSON(value?: ItemVariation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default_text': value.default_text,
        'default_text_translated_text_instance_oid': value.default_text_translated_text_instance_oid,
        'name': value.name,
        'name_translated_text_instance_oid': value.name_translated_text_instance_oid,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(ItemVariationOptionToJSON)),
    };
}


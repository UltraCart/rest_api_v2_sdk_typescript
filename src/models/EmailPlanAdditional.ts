/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmailPlanAdditional
 */
export interface EmailPlanAdditional {
    /**
     * 
     * @type {boolean}
     * @memberof EmailPlanAdditional
     */
    active?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailPlanAdditional
     */
    can_downgrade?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailPlanAdditional
     */
    can_upgrade?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EmailPlanAdditional
     */
    cost?: number;
    /**
     * 
     * @type {number}
     * @memberof EmailPlanAdditional
     */
    cost_change?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailPlanAdditional
     */
    cost_change_formatted?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailPlanAdditional
     */
    cost_formatted?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailPlanAdditional
     */
    customers?: number;
    /**
     * 
     * @type {number}
     * @memberof EmailPlanAdditional
     */
    emails?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof EmailPlanAdditional)[] = ["active", "can_downgrade", "can_upgrade", "cost", "cost_change", "cost_change_formatted", "cost_formatted", "customers", "emails"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the EmailPlanAdditional interface.
 */
export function instanceOfEmailPlanAdditional(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmailPlanAdditionalFromJSON(json: any): EmailPlanAdditional {
    return EmailPlanAdditionalFromJSONTyped(json, false);
}

export function EmailPlanAdditionalFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailPlanAdditional {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'can_downgrade': !exists(json, 'can_downgrade') ? undefined : json['can_downgrade'],
        'can_upgrade': !exists(json, 'can_upgrade') ? undefined : json['can_upgrade'],
        'cost': !exists(json, 'cost') ? undefined : json['cost'],
        'cost_change': !exists(json, 'cost_change') ? undefined : json['cost_change'],
        'cost_change_formatted': !exists(json, 'cost_change_formatted') ? undefined : json['cost_change_formatted'],
        'cost_formatted': !exists(json, 'cost_formatted') ? undefined : json['cost_formatted'],
        'customers': !exists(json, 'customers') ? undefined : json['customers'],
        'emails': !exists(json, 'emails') ? undefined : json['emails'],
    };
}

export function EmailPlanAdditionalToJSON(value?: EmailPlanAdditional | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'can_downgrade': value.can_downgrade,
        'can_upgrade': value.can_upgrade,
        'cost': value.cost,
        'cost_change': value.cost_change,
        'cost_change_formatted': value.cost_change_formatted,
        'cost_formatted': value.cost_formatted,
        'customers': value.customers,
        'emails': value.emails,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderValidationResponse
 */
export interface OrderValidationResponse {
    /**
     * Errors to display to the merchant if they failed any of the validations checked
     * @type {Array<string>}
     * @memberof OrderValidationResponse
     */
    errors?: Array<string>;
    /**
     * Informational messages
     * @type {Array<string>}
     * @memberof OrderValidationResponse
     */
    messages?: Array<string>;
    /**
     * If true, this order was updated during the validation call.  This may happen during address standardization fixes.
     * @type {boolean}
     * @memberof OrderValidationResponse
     */
    order_was_updated?: boolean;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof OrderValidationResponse)[] = ["errors", "messages", "order_was_updated"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the OrderValidationResponse interface.
 */
export function instanceOfOrderValidationResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderValidationResponseFromJSON(json: any): OrderValidationResponse {
    return OrderValidationResponseFromJSONTyped(json, false);
}

export function OrderValidationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderValidationResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errors': !exists(json, 'errors') ? undefined : json['errors'],
        'messages': !exists(json, 'messages') ? undefined : json['messages'],
        'order_was_updated': !exists(json, 'order_was_updated') ? undefined : json['order_was_updated'],
    };
}

export function OrderValidationResponseToJSON(value?: OrderValidationResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'errors': value.errors,
        'messages': value.messages,
        'order_was_updated': value.order_was_updated,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmailListSegmentMembership,
    EmailListSegmentMembershipFromJSON,
    EmailListSegmentMembershipFromJSONTyped,
    EmailListSegmentMembershipToJSON,
} from './EmailListSegmentMembership';

/**
 * 
 * @export
 * @interface EmailCampaign
 */
export interface EmailCampaign {
    /**
     * Click rate of emails
     * @type {string}
     * @memberof EmailCampaign
     */
    click_rate_formatted?: string;
    /**
     * Created date
     * @type {string}
     * @memberof EmailCampaign
     */
    created_dts?: string;
    /**
     * True if this campaign was deleted
     * @type {boolean}
     * @memberof EmailCampaign
     */
    deleted?: boolean;
    /**
     * Email campaign UUID
     * @type {string}
     * @memberof EmailCampaign
     */
    email_campaign_uuid?: string;
    /**
     * Email communication sequence UUID
     * @type {string}
     * @memberof EmailCampaign
     */
    email_communication_sequence_uuid?: string;
    /**
     * True if the customer should end the flow once they purchase from this campaign
     * @type {boolean}
     * @memberof EmailCampaign
     */
    end_once_customer_purchases?: boolean;
    /**
     * True if the customer should end the flow once they purchase from anywhere
     * @type {boolean}
     * @memberof EmailCampaign
     */
    end_once_customer_purchases_anywhere?: boolean;
    /**
     * Campaign folder UUID.  Null for uncategorized
     * @type {string}
     * @memberof EmailCampaign
     */
    esp_campaign_folder_uuid?: string;
    /**
     * User of the sending address
     * @type {string}
     * @memberof EmailCampaign
     */
    esp_domain_user?: string;
    /**
     * UUID of the sending domain
     * @type {string}
     * @memberof EmailCampaign
     */
    esp_domain_uuid?: string;
    /**
     * Friendly name of the sending email
     * @type {string}
     * @memberof EmailCampaign
     */
    esp_friendly_name?: string;
    /**
     * If this item was ever added to the Code Library, this is the oid for that library item, or 0 if never added before.  This value is used to determine if a library item should be inserted or updated.
     * @type {number}
     * @memberof EmailCampaign
     */
    library_item_oid?: number;
    /**
     * List and segment memberships
     * @type {Array<EmailListSegmentMembership>}
     * @memberof EmailCampaign
     */
    memberships?: Array<EmailListSegmentMembership>;
    /**
     * Merchant ID
     * @type {string}
     * @memberof EmailCampaign
     */
    merchant_id?: string;
    /**
     * Name of email campaign
     * @type {string}
     * @memberof EmailCampaign
     */
    name?: string;
    /**
     * Open rate of emails
     * @type {string}
     * @memberof EmailCampaign
     */
    open_rate_formatted?: string;
    /**
     * True if this campaign is prevented from sending at this time due to spam complaints.
     * @type {boolean}
     * @memberof EmailCampaign
     */
    prevent_sending_due_to_spam?: boolean;
    /**
     * Revenue associated with campaign
     * @type {string}
     * @memberof EmailCampaign
     */
    revenue_formatted?: string;
    /**
     * Revenue per customer associated with campaign
     * @type {string}
     * @memberof EmailCampaign
     */
    revenue_per_customer_formatted?: string;
    /**
     * Scheduled date
     * @type {string}
     * @memberof EmailCampaign
     */
    scheduled_dts?: string;
    /**
     * URL to a large full length screenshot
     * @type {string}
     * @memberof EmailCampaign
     */
    screenshot_large_full_url?: string;
    /**
     * Twilio Account UUID.  Null for none
     * @type {string}
     * @memberof EmailCampaign
     */
    sms_esp_twilio_uuid?: string;
    /**
     * Twilio SMS Phone Number.  Null for none
     * @type {string}
     * @memberof EmailCampaign
     */
    sms_phone_number?: string;
    /**
     * Status of the campaign of draft, archived, and sent
     * @type {string}
     * @memberof EmailCampaign
     */
    status?: string;
    /**
     * Timestamp when the last status change happened
     * @type {string}
     * @memberof EmailCampaign
     */
    status_dts?: string;
    /**
     * Storefront oid
     * @type {number}
     * @memberof EmailCampaign
     */
    storefront_oid?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof EmailCampaign)[] = ["click_rate_formatted", "created_dts", "deleted", "email_campaign_uuid", "email_communication_sequence_uuid", "end_once_customer_purchases", "end_once_customer_purchases_anywhere", "esp_campaign_folder_uuid", "esp_domain_user", "esp_domain_uuid", "esp_friendly_name", "library_item_oid", "memberships", "merchant_id", "name", "open_rate_formatted", "prevent_sending_due_to_spam", "revenue_formatted", "revenue_per_customer_formatted", "scheduled_dts", "screenshot_large_full_url", "sms_esp_twilio_uuid", "sms_phone_number", "status", "status_dts", "storefront_oid"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the EmailCampaign interface.
 */
export function instanceOfEmailCampaign(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmailCampaignFromJSON(json: any): EmailCampaign {
    return EmailCampaignFromJSONTyped(json, false);
}

export function EmailCampaignFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailCampaign {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'click_rate_formatted': !exists(json, 'click_rate_formatted') ? undefined : json['click_rate_formatted'],
        'created_dts': !exists(json, 'created_dts') ? undefined : json['created_dts'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'email_campaign_uuid': !exists(json, 'email_campaign_uuid') ? undefined : json['email_campaign_uuid'],
        'email_communication_sequence_uuid': !exists(json, 'email_communication_sequence_uuid') ? undefined : json['email_communication_sequence_uuid'],
        'end_once_customer_purchases': !exists(json, 'end_once_customer_purchases') ? undefined : json['end_once_customer_purchases'],
        'end_once_customer_purchases_anywhere': !exists(json, 'end_once_customer_purchases_anywhere') ? undefined : json['end_once_customer_purchases_anywhere'],
        'esp_campaign_folder_uuid': !exists(json, 'esp_campaign_folder_uuid') ? undefined : json['esp_campaign_folder_uuid'],
        'esp_domain_user': !exists(json, 'esp_domain_user') ? undefined : json['esp_domain_user'],
        'esp_domain_uuid': !exists(json, 'esp_domain_uuid') ? undefined : json['esp_domain_uuid'],
        'esp_friendly_name': !exists(json, 'esp_friendly_name') ? undefined : json['esp_friendly_name'],
        'library_item_oid': !exists(json, 'library_item_oid') ? undefined : json['library_item_oid'],
        'memberships': !exists(json, 'memberships') ? undefined : ((json['memberships'] as Array<any>).map(EmailListSegmentMembershipFromJSON)),
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'open_rate_formatted': !exists(json, 'open_rate_formatted') ? undefined : json['open_rate_formatted'],
        'prevent_sending_due_to_spam': !exists(json, 'prevent_sending_due_to_spam') ? undefined : json['prevent_sending_due_to_spam'],
        'revenue_formatted': !exists(json, 'revenue_formatted') ? undefined : json['revenue_formatted'],
        'revenue_per_customer_formatted': !exists(json, 'revenue_per_customer_formatted') ? undefined : json['revenue_per_customer_formatted'],
        'scheduled_dts': !exists(json, 'scheduled_dts') ? undefined : json['scheduled_dts'],
        'screenshot_large_full_url': !exists(json, 'screenshot_large_full_url') ? undefined : json['screenshot_large_full_url'],
        'sms_esp_twilio_uuid': !exists(json, 'sms_esp_twilio_uuid') ? undefined : json['sms_esp_twilio_uuid'],
        'sms_phone_number': !exists(json, 'sms_phone_number') ? undefined : json['sms_phone_number'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'status_dts': !exists(json, 'status_dts') ? undefined : json['status_dts'],
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
    };
}

export function EmailCampaignToJSON(value?: EmailCampaign | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'click_rate_formatted': value.click_rate_formatted,
        'created_dts': value.created_dts,
        'deleted': value.deleted,
        'email_campaign_uuid': value.email_campaign_uuid,
        'email_communication_sequence_uuid': value.email_communication_sequence_uuid,
        'end_once_customer_purchases': value.end_once_customer_purchases,
        'end_once_customer_purchases_anywhere': value.end_once_customer_purchases_anywhere,
        'esp_campaign_folder_uuid': value.esp_campaign_folder_uuid,
        'esp_domain_user': value.esp_domain_user,
        'esp_domain_uuid': value.esp_domain_uuid,
        'esp_friendly_name': value.esp_friendly_name,
        'library_item_oid': value.library_item_oid,
        'memberships': value.memberships === undefined ? undefined : ((value.memberships as Array<any>).map(EmailListSegmentMembershipToJSON)),
        'merchant_id': value.merchant_id,
        'name': value.name,
        'open_rate_formatted': value.open_rate_formatted,
        'prevent_sending_due_to_spam': value.prevent_sending_due_to_spam,
        'revenue_formatted': value.revenue_formatted,
        'revenue_per_customer_formatted': value.revenue_per_customer_formatted,
        'scheduled_dts': value.scheduled_dts,
        'screenshot_large_full_url': value.screenshot_large_full_url,
        'sms_esp_twilio_uuid': value.sms_esp_twilio_uuid,
        'sms_phone_number': value.sms_phone_number,
        'status': value.status,
        'status_dts': value.status_dts,
        'storefront_oid': value.storefront_oid,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderReplacementResponse
 */
export interface OrderReplacementResponse {
    /**
     * 
     * @type {boolean}
     * @memberof OrderReplacementResponse
     */
    chargeSuccessful?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderReplacementResponse
     */
    errorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderReplacementResponse
     */
    feedback?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderReplacementResponse
     */
    free?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderReplacementResponse
     */
    orderId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderReplacementResponse
     */
    successful?: boolean;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof OrderReplacementResponse)[] = ["chargeSuccessful", "errorMessage", "feedback", "free", "orderId", "successful"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the OrderReplacementResponse interface.
 */
export function instanceOfOrderReplacementResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderReplacementResponseFromJSON(json: any): OrderReplacementResponse {
    return OrderReplacementResponseFromJSONTyped(json, false);
}

export function OrderReplacementResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderReplacementResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chargeSuccessful': !exists(json, 'chargeSuccessful') ? undefined : json['chargeSuccessful'],
        'errorMessage': !exists(json, 'errorMessage') ? undefined : json['errorMessage'],
        'feedback': !exists(json, 'feedback') ? undefined : json['feedback'],
        'free': !exists(json, 'free') ? undefined : json['free'],
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'successful': !exists(json, 'successful') ? undefined : json['successful'],
    };
}

export function OrderReplacementResponseToJSON(value?: OrderReplacementResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chargeSuccessful': value.chargeSuccessful,
        'errorMessage': value.errorMessage,
        'feedback': value.feedback,
        'free': value.free,
        'orderId': value.orderId,
        'successful': value.successful,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CouponFreeItemsWithItemPurchase
 */
export interface CouponFreeItemsWithItemPurchase {
    /**
     * The item id of the free item that will be received when the required mix and match group quantity is purchased.
     * @type {string}
     * @memberof CouponFreeItemsWithItemPurchase
     */
    free_item?: string;
    /**
     * The quantity of free item that will be received.
     * @type {number}
     * @memberof CouponFreeItemsWithItemPurchase
     */
    free_quantity?: number;
    /**
     * The limit of free items that may be received when purchasing multiple items
     * @type {number}
     * @memberof CouponFreeItemsWithItemPurchase
     */
    limit?: number;
    /**
     * Required item that must be purchased for coupon to be valid
     * @type {string}
     * @memberof CouponFreeItemsWithItemPurchase
     */
    required_purchase_item?: string;
    /**
     * Required quantity of mix and match group items that must be purchased for coupon to be valid
     * @type {number}
     * @memberof CouponFreeItemsWithItemPurchase
     */
    required_purchase_quantity?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CouponFreeItemsWithItemPurchase)[] = ["free_item", "free_quantity", "limit", "required_purchase_item", "required_purchase_quantity"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CouponFreeItemsWithItemPurchase interface.
 */
export function instanceOfCouponFreeItemsWithItemPurchase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CouponFreeItemsWithItemPurchaseFromJSON(json: any): CouponFreeItemsWithItemPurchase {
    return CouponFreeItemsWithItemPurchaseFromJSONTyped(json, false);
}

export function CouponFreeItemsWithItemPurchaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CouponFreeItemsWithItemPurchase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'free_item': !exists(json, 'free_item') ? undefined : json['free_item'],
        'free_quantity': !exists(json, 'free_quantity') ? undefined : json['free_quantity'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'required_purchase_item': !exists(json, 'required_purchase_item') ? undefined : json['required_purchase_item'],
        'required_purchase_quantity': !exists(json, 'required_purchase_quantity') ? undefined : json['required_purchase_quantity'],
    };
}

export function CouponFreeItemsWithItemPurchaseToJSON(value?: CouponFreeItemsWithItemPurchase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'free_item': value.free_item,
        'free_quantity': value.free_quantity,
        'limit': value.limit,
        'required_purchase_item': value.required_purchase_item,
        'required_purchase_quantity': value.required_purchase_quantity,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LibraryItemAttribute,
    LibraryItemAttributeFromJSON,
    LibraryItemAttributeFromJSONTyped,
    LibraryItemAttributeToJSON,
} from './LibraryItemAttribute';
import {
    LibraryItemScreenshot,
    LibraryItemScreenshotFromJSON,
    LibraryItemScreenshotFromJSONTyped,
    LibraryItemScreenshotToJSON,
} from './LibraryItemScreenshot';

/**
 * 
 * @export
 * @interface AddLibraryItemRequest
 */
export interface AddLibraryItemRequest {
    /**
     * Attributes associated with the library item to contain additional configuration.
     * @type {Array<LibraryItemAttribute>}
     * @memberof AddLibraryItemRequest
     */
    attributes?: Array<LibraryItemAttribute>;
    /**
     * Cjson to be added to library
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    cjson?: string;
    /**
     * flow, campaign, cjson, email, transactional_email, postcard or upsell
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    content_type?: string;
    /**
     * description of library item
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    description?: string;
    /**
     * Required if content_type is transactional_email. This is the name of the email template (html, not text).  This name should have a .vm file extension.  An example is auto_order_cancel_html.vm
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    email_name?: string;
    /**
     * Required if content_type is transactional_email. This is the full path to the email template stored in the file system.  This defines which StoreFront contains the desired email template.  An example is /themes/Elements/core/emails/auto_order_cancel_html.vm
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    email_path?: string;
    /**
     * Screenshot urls for display
     * @type {Array<LibraryItemScreenshot>}
     * @memberof AddLibraryItemRequest
     */
    screenshots?: Array<LibraryItemScreenshot>;
    /**
     * StoreFront oid where content originates necessary for tracking down relative assets
     * @type {number}
     * @memberof AddLibraryItemRequest
     */
    storefront_oid?: number;
    /**
     * title of library item, usually the name of the flow or campaign, or description of cjson
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    title?: string;
    /**
     * Required if content_type is upsell. This is object identifier of a StoreFront Upsell Offer.
     * @type {number}
     * @memberof AddLibraryItemRequest
     */
    upsell_offer_oid?: number;
    /**
     * UUID of communication flow, campaign, email, postcard, or null if this item is something else. transactional_email do not have a uuid because they are singleton objects within a storefront and easily identifiable by name
     * @type {string}
     * @memberof AddLibraryItemRequest
     */
    uuid?: string;
}

export function AddLibraryItemRequestFromJSON(json: any): AddLibraryItemRequest {
    return AddLibraryItemRequestFromJSONTyped(json, false);
}

export function AddLibraryItemRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddLibraryItemRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(LibraryItemAttributeFromJSON)),
        'cjson': !exists(json, 'cjson') ? undefined : json['cjson'],
        'content_type': !exists(json, 'content_type') ? undefined : json['content_type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'email_name': !exists(json, 'email_name') ? undefined : json['email_name'],
        'email_path': !exists(json, 'email_path') ? undefined : json['email_path'],
        'screenshots': !exists(json, 'screenshots') ? undefined : ((json['screenshots'] as Array<any>).map(LibraryItemScreenshotFromJSON)),
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'upsell_offer_oid': !exists(json, 'upsell_offer_oid') ? undefined : json['upsell_offer_oid'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
    };
}

export function AddLibraryItemRequestToJSON(value?: AddLibraryItemRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(LibraryItemAttributeToJSON)),
        'cjson': value.cjson,
        'content_type': value.content_type,
        'description': value.description,
        'email_name': value.email_name,
        'email_path': value.email_path,
        'screenshots': value.screenshots === undefined ? undefined : ((value.screenshots as Array<any>).map(LibraryItemScreenshotToJSON)),
        'storefront_oid': value.storefront_oid,
        'title': value.title,
        'upsell_offer_oid': value.upsell_offer_oid,
        'uuid': value.uuid,
    };
}


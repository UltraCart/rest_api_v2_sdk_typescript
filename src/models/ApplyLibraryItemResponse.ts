/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LibraryItemAttribute,
    LibraryItemAttributeFromJSON,
    LibraryItemAttributeFromJSONTyped,
    LibraryItemAttributeToJSON,
} from './LibraryItemAttribute';
import {
    ModelError,
    ModelErrorFromJSON,
    ModelErrorFromJSONTyped,
    ModelErrorToJSON,
} from './ModelError';
import {
    ResponseMetadata,
    ResponseMetadataFromJSON,
    ResponseMetadataFromJSONTyped,
    ResponseMetadataToJSON,
} from './ResponseMetadata';
import {
    Warning,
    WarningFromJSON,
    WarningFromJSONTyped,
    WarningToJSON,
} from './Warning';

/**
 * 
 * @export
 * @interface ApplyLibraryItemResponse
 */
export interface ApplyLibraryItemResponse {
    /**
     * Attributes from the library item
     * @type {Array<LibraryItemAttribute>}
     * @memberof ApplyLibraryItemResponse
     */
    attributes?: Array<LibraryItemAttribute>;
    /**
     * Cjson from library item, only populated if this library item was a cjson snippet or marketing email (not transactional)
     * @type {string}
     * @memberof ApplyLibraryItemResponse
     */
    cjson?: string;
    /**
     * flow, campaign, cjson, upsell, postcard, transactional_email or email
     * @type {string}
     * @memberof ApplyLibraryItemResponse
     */
    content_type?: string;
    /**
     * If a marketing email was applied, this is the path to the template encapsulating the cjson.  This is needed for the UltraCart UI.
     * @type {string}
     * @memberof ApplyLibraryItemResponse
     */
    email_template_vm_path?: string;
    /**
     * 
     * @type {ModelError}
     * @memberof ApplyLibraryItemResponse
     */
    error?: ModelError;
    /**
     * 
     * @type {ResponseMetadata}
     * @memberof ApplyLibraryItemResponse
     */
    metadata?: ResponseMetadata;
    /**
     * StoreFront oid where content originates necessary for tracking down relative assets
     * @type {number}
     * @memberof ApplyLibraryItemResponse
     */
    storefront_oid?: number;
    /**
     * Indicates if API call was successful
     * @type {boolean}
     * @memberof ApplyLibraryItemResponse
     */
    success?: boolean;
    /**
     * title of library item, usually the name of the flow or campaign, or description of cjson
     * @type {string}
     * @memberof ApplyLibraryItemResponse
     */
    title?: string;
    /**
     * UUID of marketing email or communication flow/campaign if this library item was an email, campaign or flow
     * @type {string}
     * @memberof ApplyLibraryItemResponse
     */
    uuid?: string;
    /**
     * 
     * @type {Warning}
     * @memberof ApplyLibraryItemResponse
     */
    warning?: Warning;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ApplyLibraryItemResponse)[] = ["attributes", "cjson", "content_type", "email_template_vm_path", "error", "metadata", "storefront_oid", "success", "title", "uuid", "warning"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ApplyLibraryItemResponse interface.
 */
export function instanceOfApplyLibraryItemResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplyLibraryItemResponseFromJSON(json: any): ApplyLibraryItemResponse {
    return ApplyLibraryItemResponseFromJSONTyped(json, false);
}

export function ApplyLibraryItemResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplyLibraryItemResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(LibraryItemAttributeFromJSON)),
        'cjson': !exists(json, 'cjson') ? undefined : json['cjson'],
        'content_type': !exists(json, 'content_type') ? undefined : json['content_type'],
        'email_template_vm_path': !exists(json, 'email_template_vm_path') ? undefined : json['email_template_vm_path'],
        'error': !exists(json, 'error') ? undefined : ModelErrorFromJSON(json['error']),
        'metadata': !exists(json, 'metadata') ? undefined : ResponseMetadataFromJSON(json['metadata']),
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
        'success': !exists(json, 'success') ? undefined : json['success'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'warning': !exists(json, 'warning') ? undefined : WarningFromJSON(json['warning']),
    };
}

export function ApplyLibraryItemResponseToJSON(value?: ApplyLibraryItemResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(LibraryItemAttributeToJSON)),
        'cjson': value.cjson,
        'content_type': value.content_type,
        'email_template_vm_path': value.email_template_vm_path,
        'error': ModelErrorToJSON(value.error),
        'metadata': ResponseMetadataToJSON(value.metadata),
        'storefront_oid': value.storefront_oid,
        'success': value.success,
        'title': value.title,
        'uuid': value.uuid,
        'warning': WarningToJSON(value.warning),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
} from './Currency';
import {
    OrderPaymentCheck,
    OrderPaymentCheckFromJSON,
    OrderPaymentCheckFromJSONTyped,
    OrderPaymentCheckToJSON,
} from './OrderPaymentCheck';
import {
    OrderPaymentCreditCard,
    OrderPaymentCreditCardFromJSON,
    OrderPaymentCreditCardFromJSONTyped,
    OrderPaymentCreditCardToJSON,
} from './OrderPaymentCreditCard';
import {
    OrderPaymentECheck,
    OrderPaymentECheckFromJSON,
    OrderPaymentECheckFromJSONTyped,
    OrderPaymentECheckToJSON,
} from './OrderPaymentECheck';
import {
    OrderPaymentHealthBenefitCard,
    OrderPaymentHealthBenefitCardFromJSON,
    OrderPaymentHealthBenefitCardFromJSONTyped,
    OrderPaymentHealthBenefitCardToJSON,
} from './OrderPaymentHealthBenefitCard';
import {
    OrderPaymentInsurance,
    OrderPaymentInsuranceFromJSON,
    OrderPaymentInsuranceFromJSONTyped,
    OrderPaymentInsuranceToJSON,
} from './OrderPaymentInsurance';
import {
    OrderPaymentPayPal,
    OrderPaymentPayPalFromJSON,
    OrderPaymentPayPalFromJSONTyped,
    OrderPaymentPayPalToJSON,
} from './OrderPaymentPayPal';
import {
    OrderPaymentPurchaseOrder,
    OrderPaymentPurchaseOrderFromJSON,
    OrderPaymentPurchaseOrderFromJSONTyped,
    OrderPaymentPurchaseOrderToJSON,
} from './OrderPaymentPurchaseOrder';
import {
    OrderPaymentTransaction,
    OrderPaymentTransactionFromJSON,
    OrderPaymentTransactionFromJSONTyped,
    OrderPaymentTransactionToJSON,
} from './OrderPaymentTransaction';

/**
 * 
 * @export
 * @interface OrderPayment
 */
export interface OrderPayment {
    /**
     * 
     * @type {OrderPaymentCheck}
     * @memberof OrderPayment
     */
    check?: OrderPaymentCheck;
    /**
     * 
     * @type {OrderPaymentCreditCard}
     * @memberof OrderPayment
     */
    credit_card?: OrderPaymentCreditCard;
    /**
     * 
     * @type {OrderPaymentECheck}
     * @memberof OrderPayment
     */
    echeck?: OrderPaymentECheck;
    /**
     * 
     * @type {OrderPaymentHealthBenefitCard}
     * @memberof OrderPayment
     */
    health_benefit_card?: OrderPaymentHealthBenefitCard;
    /**
     * True if order has been held for fraud review
     * @type {boolean}
     * @memberof OrderPayment
     */
    hold_for_fraud_review?: boolean;
    /**
     * 
     * @type {OrderPaymentInsurance}
     * @memberof OrderPayment
     */
    insurance?: OrderPaymentInsurance;
    /**
     * Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true
     * @type {string}
     * @memberof OrderPayment
     */
    payment_dts?: string;
    /**
     * Payment method
     * @type {string}
     * @memberof OrderPayment
     */
    payment_method?: OrderPaymentPaymentMethodEnum;
    /**
     * Payment method QuickBooks code
     * @type {string}
     * @memberof OrderPayment
     */
    payment_method_accounting_code?: string;
    /**
     * Payment method QuickBooks deposit account
     * @type {string}
     * @memberof OrderPayment
     */
    payment_method_deposit_to_account?: string;
    /**
     * Payment status
     * @type {string}
     * @memberof OrderPayment
     */
    payment_status?: OrderPaymentPaymentStatusEnum;
    /**
     * 
     * @type {OrderPaymentPayPal}
     * @memberof OrderPayment
     */
    paypal?: OrderPaymentPayPal;
    /**
     * 
     * @type {OrderPaymentPurchaseOrder}
     * @memberof OrderPayment
     */
    purchase_order?: OrderPaymentPurchaseOrder;
    /**
     * Rotating transaction gateway code used to process this order
     * @type {string}
     * @memberof OrderPayment
     */
    rotating_transaction_gateway_code?: string;
    /**
     * 
     * @type {Currency}
     * @memberof OrderPayment
     */
    surcharge?: Currency;
    /**
     * Surcharge accounting code
     * @type {string}
     * @memberof OrderPayment
     */
    surcharge_accounting_code?: string;
    /**
     * Surcharge transaction fee
     * @type {number}
     * @memberof OrderPayment
     */
    surcharge_transaction_fee?: number;
    /**
     * Surcharge transaction percentage
     * @type {number}
     * @memberof OrderPayment
     */
    surcharge_transaction_percentage?: number;
    /**
     * True if this is a test order
     * @type {boolean}
     * @memberof OrderPayment
     */
    test_order?: boolean;
    /**
     * Transactions associated with processing this payment
     * @type {Array<OrderPaymentTransaction>}
     * @memberof OrderPayment
     */
    transactions?: Array<OrderPaymentTransaction>;
}


/**
 * @export
 */
export const OrderPaymentPaymentMethodEnum = {
    Affirm: 'Affirm',
    Amazon: 'Amazon',
    AmazonPay: 'Amazon Pay',
    AmazonSc: 'Amazon SC',
    Cash: 'Cash',
    Check: 'Check',
    Cod: 'COD',
    CreditCard: 'Credit Card',
    EBay: 'eBay',
    ECheck: 'eCheck',
    GoogleShopping: 'Google Shopping',
    Insurance: 'Insurance',
    Link: 'Link',
    LoanHero: 'LoanHero',
    MoneyOrder: 'Money Order',
    PayPal: 'PayPal',
    PurchaseOrder: 'Purchase Order',
    QuoteRequest: 'Quote Request',
    Unknown: 'Unknown',
    WireTransfer: 'Wire Transfer',
    Walmart: 'Walmart',
    ShopCom: 'Shop.com',
    Sezzle: 'Sezzle',
    Venmo: 'Venmo',
    ApplePay: 'Apple Pay',
    GooglePay: 'Google Pay',
    HealthBenefitCard: 'Health Benefit Card'
} as const;
export type OrderPaymentPaymentMethodEnum = typeof OrderPaymentPaymentMethodEnum[keyof typeof OrderPaymentPaymentMethodEnum];

/**
 * @export
 */
export const OrderPaymentPaymentStatusEnum = {
    Unprocessed: 'Unprocessed',
    Authorized: 'Authorized',
    CaptureFailed: 'Capture Failed',
    Processed: 'Processed',
    Declined: 'Declined',
    Voided: 'Voided',
    Refunded: 'Refunded',
    Skipped: 'Skipped'
} as const;
export type OrderPaymentPaymentStatusEnum = typeof OrderPaymentPaymentStatusEnum[keyof typeof OrderPaymentPaymentStatusEnum];


export function OrderPaymentFromJSON(json: any): OrderPayment {
    return OrderPaymentFromJSONTyped(json, false);
}

export function OrderPaymentFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderPayment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'check': !exists(json, 'check') ? undefined : OrderPaymentCheckFromJSON(json['check']),
        'credit_card': !exists(json, 'credit_card') ? undefined : OrderPaymentCreditCardFromJSON(json['credit_card']),
        'echeck': !exists(json, 'echeck') ? undefined : OrderPaymentECheckFromJSON(json['echeck']),
        'health_benefit_card': !exists(json, 'health_benefit_card') ? undefined : OrderPaymentHealthBenefitCardFromJSON(json['health_benefit_card']),
        'hold_for_fraud_review': !exists(json, 'hold_for_fraud_review') ? undefined : json['hold_for_fraud_review'],
        'insurance': !exists(json, 'insurance') ? undefined : OrderPaymentInsuranceFromJSON(json['insurance']),
        'payment_dts': !exists(json, 'payment_dts') ? undefined : json['payment_dts'],
        'payment_method': !exists(json, 'payment_method') ? undefined : json['payment_method'],
        'payment_method_accounting_code': !exists(json, 'payment_method_accounting_code') ? undefined : json['payment_method_accounting_code'],
        'payment_method_deposit_to_account': !exists(json, 'payment_method_deposit_to_account') ? undefined : json['payment_method_deposit_to_account'],
        'payment_status': !exists(json, 'payment_status') ? undefined : json['payment_status'],
        'paypal': !exists(json, 'paypal') ? undefined : OrderPaymentPayPalFromJSON(json['paypal']),
        'purchase_order': !exists(json, 'purchase_order') ? undefined : OrderPaymentPurchaseOrderFromJSON(json['purchase_order']),
        'rotating_transaction_gateway_code': !exists(json, 'rotating_transaction_gateway_code') ? undefined : json['rotating_transaction_gateway_code'],
        'surcharge': !exists(json, 'surcharge') ? undefined : CurrencyFromJSON(json['surcharge']),
        'surcharge_accounting_code': !exists(json, 'surcharge_accounting_code') ? undefined : json['surcharge_accounting_code'],
        'surcharge_transaction_fee': !exists(json, 'surcharge_transaction_fee') ? undefined : json['surcharge_transaction_fee'],
        'surcharge_transaction_percentage': !exists(json, 'surcharge_transaction_percentage') ? undefined : json['surcharge_transaction_percentage'],
        'test_order': !exists(json, 'test_order') ? undefined : json['test_order'],
        'transactions': !exists(json, 'transactions') ? undefined : ((json['transactions'] as Array<any>).map(OrderPaymentTransactionFromJSON)),
    };
}

export function OrderPaymentToJSON(value?: OrderPayment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'check': OrderPaymentCheckToJSON(value.check),
        'credit_card': OrderPaymentCreditCardToJSON(value.credit_card),
        'echeck': OrderPaymentECheckToJSON(value.echeck),
        'health_benefit_card': OrderPaymentHealthBenefitCardToJSON(value.health_benefit_card),
        'hold_for_fraud_review': value.hold_for_fraud_review,
        'insurance': OrderPaymentInsuranceToJSON(value.insurance),
        'payment_dts': value.payment_dts,
        'payment_method': value.payment_method,
        'payment_method_accounting_code': value.payment_method_accounting_code,
        'payment_method_deposit_to_account': value.payment_method_deposit_to_account,
        'payment_status': value.payment_status,
        'paypal': OrderPaymentPayPalToJSON(value.paypal),
        'purchase_order': OrderPaymentPurchaseOrderToJSON(value.purchase_order),
        'rotating_transaction_gateway_code': value.rotating_transaction_gateway_code,
        'surcharge': CurrencyToJSON(value.surcharge),
        'surcharge_accounting_code': value.surcharge_accounting_code,
        'surcharge_transaction_fee': value.surcharge_transaction_fee,
        'surcharge_transaction_percentage': value.surcharge_transaction_percentage,
        'test_order': value.test_order,
        'transactions': value.transactions === undefined ? undefined : ((value.transactions as Array<any>).map(OrderPaymentTransactionToJSON)),
    };
}


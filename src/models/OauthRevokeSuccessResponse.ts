/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OauthRevokeSuccessResponse
 */
export interface OauthRevokeSuccessResponse {
    /**
     * Message confirming revocation of credentials
     * @type {string}
     * @memberof OauthRevokeSuccessResponse
     */
    message?: string;
    /**
     * True if revoke was successful
     * @type {boolean}
     * @memberof OauthRevokeSuccessResponse
     */
    successful?: boolean;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof OauthRevokeSuccessResponse)[] = ["message", "successful"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the OauthRevokeSuccessResponse interface.
 */
export function instanceOfOauthRevokeSuccessResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OauthRevokeSuccessResponseFromJSON(json: any): OauthRevokeSuccessResponse {
    return OauthRevokeSuccessResponseFromJSONTyped(json, false);
}

export function OauthRevokeSuccessResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OauthRevokeSuccessResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'message': !exists(json, 'message') ? undefined : json['message'],
        'successful': !exists(json, 'successful') ? undefined : json['successful'],
    };
}

export function OauthRevokeSuccessResponseToJSON(value?: OauthRevokeSuccessResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'message': value.message,
        'successful': value.successful,
    };
}


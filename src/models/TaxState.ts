/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TaxCounty,
    TaxCountyFromJSON,
    TaxCountyFromJSONTyped,
    TaxCountyToJSON,
} from './TaxCounty';

/**
 * 
 * @export
 * @interface TaxState
 */
export interface TaxState {
    /**
     * Accounting code for programs such as QuickBooks
     * @type {string}
     * @memberof TaxState
     */
    accounting_code?: string;
    /**
     * Counties within this state
     * @type {Array<TaxCounty>}
     * @memberof TaxState
     */
    counties?: Array<TaxCounty>;
    /**
     * Tax record object identifier used internally by database
     * @type {number}
     * @memberof TaxState
     */
    country_oid?: number;
    /**
     * Flag instructing engine to not collect city tax for this state
     * @type {boolean}
     * @memberof TaxState
     */
    dont_collect_city?: boolean;
    /**
     * Flag instructing engine to not collect county tax for this state
     * @type {boolean}
     * @memberof TaxState
     */
    dont_collect_county?: boolean;
    /**
     * Flag instructing engine to not collect postal code tax for this state
     * @type {boolean}
     * @memberof TaxState
     */
    dont_collect_postal_code?: boolean;
    /**
     * Flag instructing engine to not collect state tax for this state
     * @type {boolean}
     * @memberof TaxState
     */
    dont_collect_state?: boolean;
    /**
     * True if digital items are exempt from sales tax in this state.
     * @type {boolean}
     * @memberof TaxState
     */
    exempt_digital_items?: boolean;
    /**
     * True if physical items are exempt from sales tax in this state.
     * @type {boolean}
     * @memberof TaxState
     */
    exempt_physical_items?: boolean;
    /**
     * True if service items are exempt from sales tax in this state.
     * @type {boolean}
     * @memberof TaxState
     */
    exempt_service_items?: boolean;
    /**
     * State code
     * @type {string}
     * @memberof TaxState
     */
    state_code?: string;
    /**
     * Tax record object identifier used internally by database
     * @type {number}
     * @memberof TaxState
     */
    state_oid?: number;
    /**
     * True if taxation within this jurisdiction should charge tax on gift charge
     * @type {boolean}
     * @memberof TaxState
     */
    tax_gift_charge?: boolean;
    /**
     * True if taxation within this jurisdiction should charge tax on gift wrap
     * @type {boolean}
     * @memberof TaxState
     */
    tax_gift_wrap?: boolean;
    /**
     * Tax Rate
     * @type {number}
     * @memberof TaxState
     */
    tax_rate?: number;
    /**
     * Tax rate formatted
     * @type {string}
     * @memberof TaxState
     */
    tax_rate_formatted?: string;
    /**
     * True if taxation within this jurisdiction should charge tax on shipping
     * @type {boolean}
     * @memberof TaxState
     */
    tax_shipping?: boolean;
    /**
     * If true, use UltraCart managed rates for this state
     * @type {boolean}
     * @memberof TaxState
     */
    use_ultracart_managed_rates?: boolean;
}



/**
 * Check if a given object implements the TaxState interface.
 */
export function instanceOfTaxState(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaxStateFromJSON(json: any): TaxState {
    return TaxStateFromJSONTyped(json, false);
}

export function TaxStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accounting_code': !exists(json, 'accounting_code') ? undefined : json['accounting_code'],
        'counties': !exists(json, 'counties') ? undefined : ((json['counties'] as Array<any>).map(TaxCountyFromJSON)),
        'country_oid': !exists(json, 'country_oid') ? undefined : json['country_oid'],
        'dont_collect_city': !exists(json, 'dont_collect_city') ? undefined : json['dont_collect_city'],
        'dont_collect_county': !exists(json, 'dont_collect_county') ? undefined : json['dont_collect_county'],
        'dont_collect_postal_code': !exists(json, 'dont_collect_postal_code') ? undefined : json['dont_collect_postal_code'],
        'dont_collect_state': !exists(json, 'dont_collect_state') ? undefined : json['dont_collect_state'],
        'exempt_digital_items': !exists(json, 'exempt_digital_items') ? undefined : json['exempt_digital_items'],
        'exempt_physical_items': !exists(json, 'exempt_physical_items') ? undefined : json['exempt_physical_items'],
        'exempt_service_items': !exists(json, 'exempt_service_items') ? undefined : json['exempt_service_items'],
        'state_code': !exists(json, 'state_code') ? undefined : json['state_code'],
        'state_oid': !exists(json, 'state_oid') ? undefined : json['state_oid'],
        'tax_gift_charge': !exists(json, 'tax_gift_charge') ? undefined : json['tax_gift_charge'],
        'tax_gift_wrap': !exists(json, 'tax_gift_wrap') ? undefined : json['tax_gift_wrap'],
        'tax_rate': !exists(json, 'tax_rate') ? undefined : json['tax_rate'],
        'tax_rate_formatted': !exists(json, 'tax_rate_formatted') ? undefined : json['tax_rate_formatted'],
        'tax_shipping': !exists(json, 'tax_shipping') ? undefined : json['tax_shipping'],
        'use_ultracart_managed_rates': !exists(json, 'use_ultracart_managed_rates') ? undefined : json['use_ultracart_managed_rates'],
    };
}

export function TaxStateToJSON(value?: TaxState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accounting_code': value.accounting_code,
        'counties': value.counties === undefined ? undefined : ((value.counties as Array<any>).map(TaxCountyToJSON)),
        'country_oid': value.country_oid,
        'dont_collect_city': value.dont_collect_city,
        'dont_collect_county': value.dont_collect_county,
        'dont_collect_postal_code': value.dont_collect_postal_code,
        'dont_collect_state': value.dont_collect_state,
        'exempt_digital_items': value.exempt_digital_items,
        'exempt_physical_items': value.exempt_physical_items,
        'exempt_service_items': value.exempt_service_items,
        'state_code': value.state_code,
        'state_oid': value.state_oid,
        'tax_gift_charge': value.tax_gift_charge,
        'tax_gift_wrap': value.tax_gift_wrap,
        'tax_rate': value.tax_rate,
        'tax_rate_formatted': value.tax_rate_formatted,
        'tax_shipping': value.tax_shipping,
        'use_ultracart_managed_rates': value.use_ultracart_managed_rates,
    };
}


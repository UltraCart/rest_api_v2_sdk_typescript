/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StateProvince,
    StateProvinceFromJSON,
    StateProvinceFromJSONTyped,
    StateProvinceToJSON,
} from './StateProvince';

/**
 * 
 * @export
 * @interface CheckoutStateProvinceResponse
 */
export interface CheckoutStateProvinceResponse {
    /**
     * 
     * @type {Array<StateProvince>}
     * @memberof CheckoutStateProvinceResponse
     */
    stateProvinces?: Array<StateProvince>;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CheckoutStateProvinceResponse)[] = ["stateProvinces"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CheckoutStateProvinceResponse interface.
 */
export function instanceOfCheckoutStateProvinceResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CheckoutStateProvinceResponseFromJSON(json: any): CheckoutStateProvinceResponse {
    return CheckoutStateProvinceResponseFromJSONTyped(json, false);
}

export function CheckoutStateProvinceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutStateProvinceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stateProvinces': !exists(json, 'stateProvinces') ? undefined : ((json['stateProvinces'] as Array<any>).map(StateProvinceFromJSON)),
    };
}

export function CheckoutStateProvinceResponseToJSON(value?: CheckoutStateProvinceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stateProvinces': value.stateProvinces === undefined ? undefined : ((value.stateProvinces as Array<any>).map(StateProvinceToJSON)),
    };
}


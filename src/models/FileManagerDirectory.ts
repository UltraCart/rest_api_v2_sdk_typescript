/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FileManagerDirectory
 */
export interface FileManagerDirectory {
    /**
     * 
     * @type {boolean}
     * @memberof FileManagerDirectory
     */
    active_theme_directory?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileManagerDirectory
     */
    favorite?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FileManagerDirectory
     */
    hostname?: string;
    /**
     * 
     * @type {string}
     * @memberof FileManagerDirectory
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof FileManagerDirectory
     */
    last_modified?: string;
    /**
     * 
     * @type {string}
     * @memberof FileManagerDirectory
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof FileManagerDirectory
     */
    parent_storefront_fs_directory_oid?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FileManagerDirectory
     */
    part_of_active_theme?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FileManagerDirectory
     */
    selected?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FileManagerDirectory
     */
    storefront_fs_directory_oid?: number;
    /**
     * 
     * @type {number}
     * @memberof FileManagerDirectory
     */
    storefront_fs_file_oid?: number;
    /**
     * 
     * @type {number}
     * @memberof FileManagerDirectory
     */
    storefront_oid?: number;
    /**
     * 
     * @type {string}
     * @memberof FileManagerDirectory
     */
    type?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof FileManagerDirectory)[] = ["active_theme_directory", "favorite", "hostname", "icon", "last_modified", "name", "parent_storefront_fs_directory_oid", "part_of_active_theme", "selected", "storefront_fs_directory_oid", "storefront_fs_file_oid", "storefront_oid", "type"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the FileManagerDirectory interface.
 */
export function instanceOfFileManagerDirectory(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FileManagerDirectoryFromJSON(json: any): FileManagerDirectory {
    return FileManagerDirectoryFromJSONTyped(json, false);
}

export function FileManagerDirectoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileManagerDirectory {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active_theme_directory': !exists(json, 'active_theme_directory') ? undefined : json['active_theme_directory'],
        'favorite': !exists(json, 'favorite') ? undefined : json['favorite'],
        'hostname': !exists(json, 'hostname') ? undefined : json['hostname'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'last_modified': !exists(json, 'last_modified') ? undefined : json['last_modified'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'parent_storefront_fs_directory_oid': !exists(json, 'parent_storefront_fs_directory_oid') ? undefined : json['parent_storefront_fs_directory_oid'],
        'part_of_active_theme': !exists(json, 'part_of_active_theme') ? undefined : json['part_of_active_theme'],
        'selected': !exists(json, 'selected') ? undefined : json['selected'],
        'storefront_fs_directory_oid': !exists(json, 'storefront_fs_directory_oid') ? undefined : json['storefront_fs_directory_oid'],
        'storefront_fs_file_oid': !exists(json, 'storefront_fs_file_oid') ? undefined : json['storefront_fs_file_oid'],
        'storefront_oid': !exists(json, 'storefront_oid') ? undefined : json['storefront_oid'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function FileManagerDirectoryToJSON(value?: FileManagerDirectory | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active_theme_directory': value.active_theme_directory,
        'favorite': value.favorite,
        'hostname': value.hostname,
        'icon': value.icon,
        'last_modified': value.last_modified,
        'name': value.name,
        'parent_storefront_fs_directory_oid': value.parent_storefront_fs_directory_oid,
        'part_of_active_theme': value.part_of_active_theme,
        'selected': value.selected,
        'storefront_fs_directory_oid': value.storefront_fs_directory_oid,
        'storefront_fs_file_oid': value.storefront_fs_file_oid,
        'storefront_oid': value.storefront_oid,
        'type': value.type,
    };
}


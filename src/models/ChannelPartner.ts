/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChannelPartner
 */
export interface ChannelPartner {
    /**
     * Channel partner object id
     * @type {number}
     * @memberof ChannelPartner
     */
    channel_partner_oid?: number;
    /**
     * Code associated with the channel partner
     * @type {string}
     * @memberof ChannelPartner
     */
    code?: string;
    /**
     * Communication method of the channel partner
     * @type {string}
     * @memberof ChannelPartner
     */
    communication_method?: string;
    /**
     * True if shipments should immediately process for this channel partner.
     * @type {boolean}
     * @memberof ChannelPartner
     */
    dont_hold_shipment?: boolean;
    /**
     * True if the channel partner is inactive
     * @type {boolean}
     * @memberof ChannelPartner
     */
    inactive?: boolean;
    /**
     * Merchant ID of the channel partner
     * @type {string}
     * @memberof ChannelPartner
     */
    merchant_id?: string;
    /**
     * Name of the channel partner
     * @type {string}
     * @memberof ChannelPartner
     */
    name?: string;
    /**
     * True if emails to the customer are skipped for this channel partner.
     * @type {boolean}
     * @memberof ChannelPartner
     */
    skip_customer_emails?: boolean;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ChannelPartner)[] = ["channel_partner_oid", "code", "communication_method", "dont_hold_shipment", "inactive", "merchant_id", "name", "skip_customer_emails"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ChannelPartner interface.
 */
export function instanceOfChannelPartner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelPartnerFromJSON(json: any): ChannelPartner {
    return ChannelPartnerFromJSONTyped(json, false);
}

export function ChannelPartnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelPartner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channel_partner_oid': !exists(json, 'channel_partner_oid') ? undefined : json['channel_partner_oid'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'communication_method': !exists(json, 'communication_method') ? undefined : json['communication_method'],
        'dont_hold_shipment': !exists(json, 'dont_hold_shipment') ? undefined : json['dont_hold_shipment'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'skip_customer_emails': !exists(json, 'skip_customer_emails') ? undefined : json['skip_customer_emails'],
    };
}

export function ChannelPartnerToJSON(value?: ChannelPartner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel_partner_oid': value.channel_partner_oid,
        'code': value.code,
        'communication_method': value.communication_method,
        'dont_hold_shipment': value.dont_hold_shipment,
        'inactive': value.inactive,
        'merchant_id': value.merchant_id,
        'name': value.name,
        'skip_customer_emails': value.skip_customer_emails,
    };
}


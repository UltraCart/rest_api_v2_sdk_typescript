/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemPaymentProcessing
 */
export interface ItemPaymentProcessing {
    /**
     * True if prepaid cards should be blocked from buying this item
     * @type {boolean}
     * @memberof ItemPaymentProcessing
     */
    block_prepaid?: boolean;
    /**
     * True if this item should block any refund attempts, set to false otherwise, null value will not update the field
     * @type {boolean}
     * @memberof ItemPaymentProcessing
     */
    block_refunds?: boolean;
    /**
     * Credit card transaction type
     * @type {string}
     * @memberof ItemPaymentProcessing
     */
    credit_card_transaction_type?: string;
    /**
     * True if no real-time charge should be performed on this item.
     * @type {boolean}
     * @memberof ItemPaymentProcessing
     */
    no_realtime_charge?: boolean;
    /**
     * Payment method validity
     * @type {Array<string>}
     * @memberof ItemPaymentProcessing
     */
    payment_method_validity?: Array<string>;
    /**
     * Rotating transaction gateway codes
     * @type {Array<string>}
     * @memberof ItemPaymentProcessing
     */
    rotating_transaction_gateway_codes?: Array<string>;
}



/**
 * Check if a given object implements the ItemPaymentProcessing interface.
 */
export function instanceOfItemPaymentProcessing(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemPaymentProcessingFromJSON(json: any): ItemPaymentProcessing {
    return ItemPaymentProcessingFromJSONTyped(json, false);
}

export function ItemPaymentProcessingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemPaymentProcessing {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'block_prepaid': !exists(json, 'block_prepaid') ? undefined : json['block_prepaid'],
        'block_refunds': !exists(json, 'block_refunds') ? undefined : json['block_refunds'],
        'credit_card_transaction_type': !exists(json, 'credit_card_transaction_type') ? undefined : json['credit_card_transaction_type'],
        'no_realtime_charge': !exists(json, 'no_realtime_charge') ? undefined : json['no_realtime_charge'],
        'payment_method_validity': !exists(json, 'payment_method_validity') ? undefined : json['payment_method_validity'],
        'rotating_transaction_gateway_codes': !exists(json, 'rotating_transaction_gateway_codes') ? undefined : json['rotating_transaction_gateway_codes'],
    };
}

export function ItemPaymentProcessingToJSON(value?: ItemPaymentProcessing | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'block_prepaid': value.block_prepaid,
        'block_refunds': value.block_refunds,
        'credit_card_transaction_type': value.credit_card_transaction_type,
        'no_realtime_charge': value.no_realtime_charge,
        'payment_method_validity': value.payment_method_validity,
        'rotating_transaction_gateway_codes': value.rotating_transaction_gateway_codes,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
} from './Currency';

/**
 * 
 * @export
 * @interface CartGift
 */
export interface CartGift {
    /**
     * True if this order is a gift
     * @type {boolean}
     * @memberof CartGift
     */
    gift?: boolean;
    /**
     * 
     * @type {Currency}
     * @memberof CartGift
     */
    gift_charge?: Currency;
    /**
     * Email address of the gift recipient
     * @type {string}
     * @memberof CartGift
     */
    gift_email?: string;
    /**
     * Message to the gift recipient
     * @type {string}
     * @memberof CartGift
     */
    gift_message?: string;
    /**
     * 
     * @type {Currency}
     * @memberof CartGift
     */
    gift_wrap_cost?: Currency;
    /**
     * Title of the selected gift wrap
     * @type {string}
     * @memberof CartGift
     */
    gift_wrap_title?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CartGift)[] = ["gift", "gift_charge", "gift_email", "gift_message", "gift_wrap_cost", "gift_wrap_title"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CartGift interface.
 */
export function instanceOfCartGift(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CartGiftFromJSON(json: any): CartGift {
    return CartGiftFromJSONTyped(json, false);
}

export function CartGiftFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartGift {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gift': !exists(json, 'gift') ? undefined : json['gift'],
        'gift_charge': !exists(json, 'gift_charge') ? undefined : CurrencyFromJSON(json['gift_charge']),
        'gift_email': !exists(json, 'gift_email') ? undefined : json['gift_email'],
        'gift_message': !exists(json, 'gift_message') ? undefined : json['gift_message'],
        'gift_wrap_cost': !exists(json, 'gift_wrap_cost') ? undefined : CurrencyFromJSON(json['gift_wrap_cost']),
        'gift_wrap_title': !exists(json, 'gift_wrap_title') ? undefined : json['gift_wrap_title'],
    };
}

export function CartGiftToJSON(value?: CartGift | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gift': value.gift,
        'gift_charge': CurrencyToJSON(value.gift_charge),
        'gift_email': value.gift_email,
        'gift_message': value.gift_message,
        'gift_wrap_cost': CurrencyToJSON(value.gift_wrap_cost),
        'gift_wrap_title': value.gift_wrap_title,
    };
}


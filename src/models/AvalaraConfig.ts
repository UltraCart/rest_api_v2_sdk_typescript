/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AvalaraConfig
 */
export interface AvalaraConfig {
    /**
     * Avalara account ID
     * @type {string}
     * @memberof AvalaraConfig
     */
    account_id?: string;
    /**
     * True if Avalara is active for this merchant
     * @type {boolean}
     * @memberof AvalaraConfig
     */
    active?: boolean;
    /**
     * Unique identifier for this avalara config object
     * @type {number}
     * @memberof AvalaraConfig
     */
    avalara_oid?: number;
    /**
     * Avalara company ID
     * @type {string}
     * @memberof AvalaraConfig
     */
    company_id?: string;
    /**
     * True if this Avalara configuration is set to enable tax valuation by UPC
     * @type {boolean}
     * @memberof AvalaraConfig
     */
    enable_upc?: boolean;
    /**
     * True if this Avalara configuration is to estimate taxes only and not report placed orders to Avalara
     * @type {boolean}
     * @memberof AvalaraConfig
     */
    estimate_only?: boolean;
    /**
     * Optional customer code for customers without profiles, defaults to GuestCustomer
     * @type {string}
     * @memberof AvalaraConfig
     */
    guest_customer_code?: string;
    /**
     * Date/time of the connection test to Avalara
     * @type {string}
     * @memberof AvalaraConfig
     */
    last_test_dts?: string;
    /**
     * Avalara license key
     * @type {string}
     * @memberof AvalaraConfig
     */
    license_key?: string;
    /**
     * True if this Avalara instance is pointed at the Avalara Sandbox
     * @type {boolean}
     * @memberof AvalaraConfig
     */
    sandbox?: boolean;
    /**
     * Send test orders through to Avalara.  The default is to not transmit test orders to Avalara.
     * @type {boolean}
     * @memberof AvalaraConfig
     */
    send_test_orders?: boolean;
    /**
     * Avalara service URL
     * @type {string}
     * @memberof AvalaraConfig
     */
    service_url?: string;
    /**
     * Test results of the last connection test to Avalara
     * @type {string}
     * @memberof AvalaraConfig
     */
    test_results?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof AvalaraConfig)[] = ["account_id", "active", "avalara_oid", "company_id", "enable_upc", "estimate_only", "guest_customer_code", "last_test_dts", "license_key", "sandbox", "send_test_orders", "service_url", "test_results"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the AvalaraConfig interface.
 */
export function instanceOfAvalaraConfig(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AvalaraConfigFromJSON(json: any): AvalaraConfig {
    return AvalaraConfigFromJSONTyped(json, false);
}

export function AvalaraConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): AvalaraConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'account_id': !exists(json, 'account_id') ? undefined : json['account_id'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'avalara_oid': !exists(json, 'avalara_oid') ? undefined : json['avalara_oid'],
        'company_id': !exists(json, 'company_id') ? undefined : json['company_id'],
        'enable_upc': !exists(json, 'enable_upc') ? undefined : json['enable_upc'],
        'estimate_only': !exists(json, 'estimate_only') ? undefined : json['estimate_only'],
        'guest_customer_code': !exists(json, 'guest_customer_code') ? undefined : json['guest_customer_code'],
        'last_test_dts': !exists(json, 'last_test_dts') ? undefined : json['last_test_dts'],
        'license_key': !exists(json, 'license_key') ? undefined : json['license_key'],
        'sandbox': !exists(json, 'sandbox') ? undefined : json['sandbox'],
        'send_test_orders': !exists(json, 'send_test_orders') ? undefined : json['send_test_orders'],
        'service_url': !exists(json, 'service_url') ? undefined : json['service_url'],
        'test_results': !exists(json, 'test_results') ? undefined : json['test_results'],
    };
}

export function AvalaraConfigToJSON(value?: AvalaraConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_id': value.account_id,
        'active': value.active,
        'avalara_oid': value.avalara_oid,
        'company_id': value.company_id,
        'enable_upc': value.enable_upc,
        'estimate_only': value.estimate_only,
        'guest_customer_code': value.guest_customer_code,
        'last_test_dts': value.last_test_dts,
        'license_key': value.license_key,
        'sandbox': value.sandbox,
        'send_test_orders': value.send_test_orders,
        'service_url': value.service_url,
        'test_results': value.test_results,
    };
}


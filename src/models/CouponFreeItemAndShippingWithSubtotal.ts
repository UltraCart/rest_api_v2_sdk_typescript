/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CouponFreeItemAndShippingWithSubtotal
 */
export interface CouponFreeItemAndShippingWithSubtotal {
    /**
     * The ISO-4217 three letter currency code the customer is viewing prices in
     * @type {string}
     * @memberof CouponFreeItemAndShippingWithSubtotal
     */
    currency_code?: string;
    /**
     * A list of items that are eligible for this discount_price.
     * @type {Array<string>}
     * @memberof CouponFreeItemAndShippingWithSubtotal
     */
    items?: Array<string>;
    /**
     * The limit of free items that may be received when purchasing multiple items
     * @type {number}
     * @memberof CouponFreeItemAndShippingWithSubtotal
     */
    limit?: number;
    /**
     * One or more shipping methods that may be free
     * @type {Array<string>}
     * @memberof CouponFreeItemAndShippingWithSubtotal
     */
    shipping_methods?: Array<string>;
    /**
     * The amount of subtotal required to receive the discount percent
     * @type {number}
     * @memberof CouponFreeItemAndShippingWithSubtotal
     */
    subtotal_amount?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CouponFreeItemAndShippingWithSubtotal)[] = ["currency_code", "items", "limit", "shipping_methods", "subtotal_amount"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CouponFreeItemAndShippingWithSubtotal interface.
 */
export function instanceOfCouponFreeItemAndShippingWithSubtotal(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CouponFreeItemAndShippingWithSubtotalFromJSON(json: any): CouponFreeItemAndShippingWithSubtotal {
    return CouponFreeItemAndShippingWithSubtotalFromJSONTyped(json, false);
}

export function CouponFreeItemAndShippingWithSubtotalFromJSONTyped(json: any, ignoreDiscriminator: boolean): CouponFreeItemAndShippingWithSubtotal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currency_code': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'items': !exists(json, 'items') ? undefined : json['items'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'shipping_methods': !exists(json, 'shipping_methods') ? undefined : json['shipping_methods'],
        'subtotal_amount': !exists(json, 'subtotal_amount') ? undefined : json['subtotal_amount'],
    };
}

export function CouponFreeItemAndShippingWithSubtotalToJSON(value?: CouponFreeItemAndShippingWithSubtotal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currency_code': value.currency_code,
        'items': value.items,
        'limit': value.limit,
        'shipping_methods': value.shipping_methods,
        'subtotal_amount': value.subtotal_amount,
    };
}


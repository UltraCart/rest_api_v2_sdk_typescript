/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomerTaxCodes
 */
export interface CustomerTaxCodes {
    /**
     * Avalara customer code
     * @type {string}
     * @memberof CustomerTaxCodes
     */
    avalara_customer_code?: string;
    /**
     * Avalara entity use code
     * @type {string}
     * @memberof CustomerTaxCodes
     */
    avalara_entity_use_code?: string;
    /**
     * Sovos customer code
     * @type {string}
     * @memberof CustomerTaxCodes
     */
    sovos_customer_code?: string;
    /**
     * TaxJar customer id
     * @type {string}
     * @memberof CustomerTaxCodes
     */
    taxjar_customer_id?: string;
    /**
     * TaxJar exemption type
     * @type {string}
     * @memberof CustomerTaxCodes
     */
    taxjar_exemption_type?: string;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof CustomerTaxCodes)[] = ["avalara_customer_code", "avalara_entity_use_code", "sovos_customer_code", "taxjar_customer_id", "taxjar_exemption_type"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the CustomerTaxCodes interface.
 */
export function instanceOfCustomerTaxCodes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomerTaxCodesFromJSON(json: any): CustomerTaxCodes {
    return CustomerTaxCodesFromJSONTyped(json, false);
}

export function CustomerTaxCodesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerTaxCodes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avalara_customer_code': !exists(json, 'avalara_customer_code') ? undefined : json['avalara_customer_code'],
        'avalara_entity_use_code': !exists(json, 'avalara_entity_use_code') ? undefined : json['avalara_entity_use_code'],
        'sovos_customer_code': !exists(json, 'sovos_customer_code') ? undefined : json['sovos_customer_code'],
        'taxjar_customer_id': !exists(json, 'taxjar_customer_id') ? undefined : json['taxjar_customer_id'],
        'taxjar_exemption_type': !exists(json, 'taxjar_exemption_type') ? undefined : json['taxjar_exemption_type'],
    };
}

export function CustomerTaxCodesToJSON(value?: CustomerTaxCodes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avalara_customer_code': value.avalara_customer_code,
        'avalara_entity_use_code': value.avalara_entity_use_code,
        'sovos_customer_code': value.sovos_customer_code,
        'taxjar_customer_id': value.taxjar_customer_id,
        'taxjar_exemption_type': value.taxjar_exemption_type,
    };
}


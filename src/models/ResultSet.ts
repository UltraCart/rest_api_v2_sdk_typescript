/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ResultSet
 */
export interface ResultSet {
    /**
     * Number of results in this set
     * @type {number}
     * @memberof ResultSet
     */
    count?: number;
    /**
     * Maximum number of results that can be returned in a set
     * @type {number}
     * @memberof ResultSet
     */
    limit?: number;
    /**
     * True if there are more results to query
     * @type {boolean}
     * @memberof ResultSet
     */
    more?: boolean;
    /**
     * The next offset that you should query to retrieve more results
     * @type {number}
     * @memberof ResultSet
     */
    next_offset?: number;
    /**
     * Offset of this result set (zero based)
     * @type {number}
     * @memberof ResultSet
     */
    offset?: number;
    /**
     * The total number of records in the result set.  May be null if the number is not known and the client should continue iterating as long as more is true.
     * @type {number}
     * @memberof ResultSet
     */
    total_records?: number;
}

// Define the constant array of keys
const MY_INTERFACE_KEYS: (keyof ResultSet)[] = ["count", "limit", "more", "next_offset", "offset", "total_records"];

// Exported function to check for excess properties
export function hasExcessProperties(obj: any): boolean {
  const objKeys = Object.keys(obj);
  return objKeys.some(key => !MY_INTERFACE_KEYS.includes(key as keyof MyInterface));
}



/**
 * Check if a given object implements the ResultSet interface.
 */
export function instanceOfResultSet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResultSetFromJSON(json: any): ResultSet {
    return ResultSetFromJSONTyped(json, false);
}

export function ResultSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResultSet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'more': !exists(json, 'more') ? undefined : json['more'],
        'next_offset': !exists(json, 'next_offset') ? undefined : json['next_offset'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'total_records': !exists(json, 'total_records') ? undefined : json['total_records'],
    };
}

export function ResultSetToJSON(value?: ResultSet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'limit': value.limit,
        'more': value.more,
        'next_offset': value.next_offset,
        'offset': value.offset,
        'total_records': value.total_records,
    };
}


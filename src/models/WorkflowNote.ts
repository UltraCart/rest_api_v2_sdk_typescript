/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    WorkflowAttachment,
    WorkflowAttachmentFromJSON,
    WorkflowAttachmentFromJSONTyped,
    WorkflowAttachmentToJSON,
} from './WorkflowAttachment';
import {
    WorkflowUser,
    WorkflowUserFromJSON,
    WorkflowUserFromJSONTyped,
    WorkflowUserToJSON,
} from './WorkflowUser';

/**
 * 
 * @export
 * @interface WorkflowNote
 */
export interface WorkflowNote {
    /**
     * Attachments to the Workflow Task
     * @type {Array<WorkflowAttachment>}
     * @memberof WorkflowNote
     */
    attachments?: Array<WorkflowAttachment>;
    /**
     * Date/time that the note was edited
     * @type {string}
     * @memberof WorkflowNote
     */
    edit_dts?: string;
    /**
     * Note
     * @type {string}
     * @memberof WorkflowNote
     */
    note?: string;
    /**
     * Date/time that the note was written
     * @type {string}
     * @memberof WorkflowNote
     */
    note_dts?: string;
    /**
     * Note originally written before any edits
     * @type {string}
     * @memberof WorkflowNote
     */
    original_note?: string;
    /**
     * 
     * @type {WorkflowUser}
     * @memberof WorkflowNote
     */
    user?: WorkflowUser;
}



/**
 * Check if a given object implements the WorkflowNote interface.
 */
export function instanceOfWorkflowNote(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WorkflowNoteFromJSON(json: any): WorkflowNote {
    return WorkflowNoteFromJSONTyped(json, false);
}

export function WorkflowNoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowNote {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(WorkflowAttachmentFromJSON)),
        'edit_dts': !exists(json, 'edit_dts') ? undefined : json['edit_dts'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'note_dts': !exists(json, 'note_dts') ? undefined : json['note_dts'],
        'original_note': !exists(json, 'original_note') ? undefined : json['original_note'],
        'user': !exists(json, 'user') ? undefined : WorkflowUserFromJSON(json['user']),
    };
}

export function WorkflowNoteToJSON(value?: WorkflowNote | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(WorkflowAttachmentToJSON)),
        'edit_dts': value.edit_dts,
        'note': value.note,
        'note_dts': value.note_dts,
        'original_note': value.original_note,
        'user': WorkflowUserToJSON(value.user),
    };
}


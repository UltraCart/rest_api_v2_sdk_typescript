/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderFraudScore
 */
export interface OrderFraudScore {
    /**
     * True if the IP address is a known anonymous proxy server
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    anonymous_proxy?: boolean;
    /**
     * Whether the BIN (first six digits) matched the country
     * @type {string}
     * @memberof OrderFraudScore
     */
    bin_match?: OrderFraudScoreBinMatchEnum;
    /**
     * True if the email address belongs to a known credit card fraudster
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    carder_email?: boolean;
    /**
     * Country code
     * @type {string}
     * @memberof OrderFraudScore
     */
    country_code?: string;
    /**
     * Country code matches BIN country
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    country_match?: boolean;
    /**
     * Whether the customer's phone number is located in the area of the billing address
     * @type {string}
     * @memberof OrderFraudScore
     */
    customer_phone_in_billing_location?: string;
    /**
     * Distance in kilometers between the IP address and the BIN
     * @type {number}
     * @memberof OrderFraudScore
     */
    distance_km?: number;
    /**
     * True if the email address is for a free service like gmail.com
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    free_email?: boolean;
    /**
     * True if the customer is in a high risk country known for internet fraud
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    high_risk_country?: boolean;
    /**
     * City associated with the IP address
     * @type {string}
     * @memberof OrderFraudScore
     */
    ip_city?: string;
    /**
     * ISP that owns the IP address
     * @type {string}
     * @memberof OrderFraudScore
     */
    ip_isp?: string;
    /**
     * Approximate latitude associated with the IP address
     * @type {string}
     * @memberof OrderFraudScore
     */
    ip_latitude?: string;
    /**
     * Approximate longitude associated with the IP address
     * @type {string}
     * @memberof OrderFraudScore
     */
    ip_longitude?: string;
    /**
     * Organization that owns the IP address
     * @type {string}
     * @memberof OrderFraudScore
     */
    ip_org?: string;
    /**
     * State/region associated with the IP address
     * @type {string}
     * @memberof OrderFraudScore
     */
    ip_region?: string;
    /**
     * Likelihood of the IP address being a proxy server
     * @type {number}
     * @memberof OrderFraudScore
     */
    proxy_score?: number;
    /**
     * Overall score.  This is the score that is compared to see if the order is rejected or held for review by the fraud filter rules.
     * @type {number}
     * @memberof OrderFraudScore
     */
    score?: number;
    /**
     * True if the address is a known ship forwarding company
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    ship_forwarder?: boolean;
    /**
     * Likelihood of the email address being associated with a spammer
     * @type {number}
     * @memberof OrderFraudScore
     */
    spam_score?: number;
    /**
     * True if the IP address that placed the order is a transparent proxy server
     * @type {boolean}
     * @memberof OrderFraudScore
     */
    transparent_proxy?: boolean;
}


/**
 * @export
 */
export const OrderFraudScoreBinMatchEnum = {
    Na: 'NA',
    No: 'No',
    NotFound: 'NotFound',
    Yes: 'Yes'
} as const;
export type OrderFraudScoreBinMatchEnum = typeof OrderFraudScoreBinMatchEnum[keyof typeof OrderFraudScoreBinMatchEnum];


export function OrderFraudScoreFromJSON(json: any): OrderFraudScore {
    return OrderFraudScoreFromJSONTyped(json, false);
}

export function OrderFraudScoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderFraudScore {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'anonymous_proxy': !exists(json, 'anonymous_proxy') ? undefined : json['anonymous_proxy'],
        'bin_match': !exists(json, 'bin_match') ? undefined : json['bin_match'],
        'carder_email': !exists(json, 'carder_email') ? undefined : json['carder_email'],
        'country_code': !exists(json, 'country_code') ? undefined : json['country_code'],
        'country_match': !exists(json, 'country_match') ? undefined : json['country_match'],
        'customer_phone_in_billing_location': !exists(json, 'customer_phone_in_billing_location') ? undefined : json['customer_phone_in_billing_location'],
        'distance_km': !exists(json, 'distance_km') ? undefined : json['distance_km'],
        'free_email': !exists(json, 'free_email') ? undefined : json['free_email'],
        'high_risk_country': !exists(json, 'high_risk_country') ? undefined : json['high_risk_country'],
        'ip_city': !exists(json, 'ip_city') ? undefined : json['ip_city'],
        'ip_isp': !exists(json, 'ip_isp') ? undefined : json['ip_isp'],
        'ip_latitude': !exists(json, 'ip_latitude') ? undefined : json['ip_latitude'],
        'ip_longitude': !exists(json, 'ip_longitude') ? undefined : json['ip_longitude'],
        'ip_org': !exists(json, 'ip_org') ? undefined : json['ip_org'],
        'ip_region': !exists(json, 'ip_region') ? undefined : json['ip_region'],
        'proxy_score': !exists(json, 'proxy_score') ? undefined : json['proxy_score'],
        'score': !exists(json, 'score') ? undefined : json['score'],
        'ship_forwarder': !exists(json, 'ship_forwarder') ? undefined : json['ship_forwarder'],
        'spam_score': !exists(json, 'spam_score') ? undefined : json['spam_score'],
        'transparent_proxy': !exists(json, 'transparent_proxy') ? undefined : json['transparent_proxy'],
    };
}

export function OrderFraudScoreToJSON(value?: OrderFraudScore | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'anonymous_proxy': value.anonymous_proxy,
        'bin_match': value.bin_match,
        'carder_email': value.carder_email,
        'country_code': value.country_code,
        'country_match': value.country_match,
        'customer_phone_in_billing_location': value.customer_phone_in_billing_location,
        'distance_km': value.distance_km,
        'free_email': value.free_email,
        'high_risk_country': value.high_risk_country,
        'ip_city': value.ip_city,
        'ip_isp': value.ip_isp,
        'ip_latitude': value.ip_latitude,
        'ip_longitude': value.ip_longitude,
        'ip_org': value.ip_org,
        'ip_region': value.ip_region,
        'proxy_score': value.proxy_score,
        'score': value.score,
        'ship_forwarder': value.ship_forwarder,
        'spam_score': value.spam_score,
        'transparent_proxy': value.transparent_proxy,
    };
}


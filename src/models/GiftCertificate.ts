/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GiftCertificateLedgerEntry,
    GiftCertificateLedgerEntryFromJSON,
    GiftCertificateLedgerEntryFromJSONTyped,
    GiftCertificateLedgerEntryToJSON,
} from './GiftCertificateLedgerEntry';

/**
 * 
 * @export
 * @interface GiftCertificate
 */
export interface GiftCertificate {
    /**
     * True if this gift certificate is activated and ready to apply to purchases.
     * @type {boolean}
     * @memberof GiftCertificate
     */
    activated?: boolean;
    /**
     * The code used by the customer to purchase against this gift certificate.
     * @type {string}
     * @memberof GiftCertificate
     */
    code?: string;
    /**
     * This is the customer profile oid associated with this internally managed gift certificate.
     * @type {number}
     * @memberof GiftCertificate
     */
    customer_profile_oid?: number;
    /**
     * True if this gift certificate was deleted.
     * @type {boolean}
     * @memberof GiftCertificate
     */
    deleted?: boolean;
    /**
     * Email of the customer associated with this gift certificate.
     * @type {string}
     * @memberof GiftCertificate
     */
    email?: string;
    /**
     * Expiration date time.
     * @type {string}
     * @memberof GiftCertificate
     */
    expiration_dts?: string;
    /**
     * Gift certificate oid.
     * @type {number}
     * @memberof GiftCertificate
     */
    gift_certificate_oid?: number;
    /**
     * This is an internally managed gift certificate associated with the loyalty cash rewards program.
     * @type {boolean}
     * @memberof GiftCertificate
     */
    internal?: boolean;
    /**
     * A list of all ledger activity for this gift certificate.
     * @type {Array<GiftCertificateLedgerEntry>}
     * @memberof GiftCertificate
     */
    ledger_entries?: Array<GiftCertificateLedgerEntry>;
    /**
     * Merchant Id
     * @type {string}
     * @memberof GiftCertificate
     */
    merchant_id?: string;
    /**
     * A list of all ledger activity for this gift certificate.
     * @type {string}
     * @memberof GiftCertificate
     */
    merchant_note?: string;
    /**
     * Original balance of the gift certificate.
     * @type {number}
     * @memberof GiftCertificate
     */
    original_balance?: number;
    /**
     * The order used to purchase this gift certificate.  This value is ONLY set during checkout when a certificate is purchased, not when it is used.  Any usage is recorded in the ledger
     * @type {string}
     * @memberof GiftCertificate
     */
    reference_order_id?: string;
    /**
     * The remaining balance on the gift certificate.  This is never set directly, but calculated from the ledger.  To change the remaining balance, add a ledger entry.
     * @type {number}
     * @memberof GiftCertificate
     */
    remaining_balance?: number;
}

export function GiftCertificateFromJSON(json: any): GiftCertificate {
    return GiftCertificateFromJSONTyped(json, false);
}

export function GiftCertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): GiftCertificate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activated': !exists(json, 'activated') ? undefined : json['activated'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'customer_profile_oid': !exists(json, 'customer_profile_oid') ? undefined : json['customer_profile_oid'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'expiration_dts': !exists(json, 'expiration_dts') ? undefined : json['expiration_dts'],
        'gift_certificate_oid': !exists(json, 'gift_certificate_oid') ? undefined : json['gift_certificate_oid'],
        'internal': !exists(json, 'internal') ? undefined : json['internal'],
        'ledger_entries': !exists(json, 'ledger_entries') ? undefined : ((json['ledger_entries'] as Array<any>).map(GiftCertificateLedgerEntryFromJSON)),
        'merchant_id': !exists(json, 'merchant_id') ? undefined : json['merchant_id'],
        'merchant_note': !exists(json, 'merchant_note') ? undefined : json['merchant_note'],
        'original_balance': !exists(json, 'original_balance') ? undefined : json['original_balance'],
        'reference_order_id': !exists(json, 'reference_order_id') ? undefined : json['reference_order_id'],
        'remaining_balance': !exists(json, 'remaining_balance') ? undefined : json['remaining_balance'],
    };
}

export function GiftCertificateToJSON(value?: GiftCertificate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activated': value.activated,
        'code': value.code,
        'customer_profile_oid': value.customer_profile_oid,
        'deleted': value.deleted,
        'email': value.email,
        'expiration_dts': value.expiration_dts,
        'gift_certificate_oid': value.gift_certificate_oid,
        'internal': value.internal,
        'ledger_entries': value.ledger_entries === undefined ? undefined : ((value.ledger_entries as Array<any>).map(GiftCertificateLedgerEntryToJSON)),
        'merchant_id': value.merchant_id,
        'merchant_note': value.merchant_note,
        'original_balance': value.original_balance,
        'reference_order_id': value.reference_order_id,
        'remaining_balance': value.remaining_balance,
    };
}


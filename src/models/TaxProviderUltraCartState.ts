/* tslint:disable */
/* eslint-disable */
/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TaxProviderUltraCartState
 */
export interface TaxProviderUltraCartState {
    /**
     * True if this state taxes are managed by UltraCart
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    enabled?: boolean;
    /**
     * True if digital items are exempt from sales tax in this state.
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    exempt_digital_items?: boolean;
    /**
     * True if physical items are exempt from sales tax in this state.
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    exempt_physical_items?: boolean;
    /**
     * True if service items are exempt from sales tax in this state.
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    exempt_service_items?: boolean;
    /**
     * State Code (2 digits)
     * @type {string}
     * @memberof TaxProviderUltraCartState
     */
    state_code?: string;
    /**
     * Fully spelled out state name
     * @type {string}
     * @memberof TaxProviderUltraCartState
     */
    state_name?: string;
    /**
     * True if gift charges should be taxed in this state.
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    tax_gift_charge?: boolean;
    /**
     * True if gift wrap should be taxed in this state.
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    tax_gift_wrap?: boolean;
    /**
     * State tax rate formatted for display
     * @type {string}
     * @memberof TaxProviderUltraCartState
     */
    tax_rate_formatted?: string;
    /**
     * True if shipping should be taxed in this state.
     * @type {boolean}
     * @memberof TaxProviderUltraCartState
     */
    tax_shipping?: boolean;
}



/**
 * Check if a given object implements the TaxProviderUltraCartState interface.
 */
export function instanceOfTaxProviderUltraCartState(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaxProviderUltraCartStateFromJSON(json: any): TaxProviderUltraCartState {
    return TaxProviderUltraCartStateFromJSONTyped(json, false);
}

export function TaxProviderUltraCartStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxProviderUltraCartState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'exempt_digital_items': !exists(json, 'exempt_digital_items') ? undefined : json['exempt_digital_items'],
        'exempt_physical_items': !exists(json, 'exempt_physical_items') ? undefined : json['exempt_physical_items'],
        'exempt_service_items': !exists(json, 'exempt_service_items') ? undefined : json['exempt_service_items'],
        'state_code': !exists(json, 'state_code') ? undefined : json['state_code'],
        'state_name': !exists(json, 'state_name') ? undefined : json['state_name'],
        'tax_gift_charge': !exists(json, 'tax_gift_charge') ? undefined : json['tax_gift_charge'],
        'tax_gift_wrap': !exists(json, 'tax_gift_wrap') ? undefined : json['tax_gift_wrap'],
        'tax_rate_formatted': !exists(json, 'tax_rate_formatted') ? undefined : json['tax_rate_formatted'],
        'tax_shipping': !exists(json, 'tax_shipping') ? undefined : json['tax_shipping'],
    };
}

export function TaxProviderUltraCartStateToJSON(value?: TaxProviderUltraCartState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enabled': value.enabled,
        'exempt_digital_items': value.exempt_digital_items,
        'exempt_physical_items': value.exempt_physical_items,
        'exempt_service_items': value.exempt_service_items,
        'state_code': value.state_code,
        'state_name': value.state_name,
        'tax_gift_charge': value.tax_gift_charge,
        'tax_gift_wrap': value.tax_gift_wrap,
        'tax_rate_formatted': value.tax_rate_formatted,
        'tax_shipping': value.tax_shipping,
    };
}

